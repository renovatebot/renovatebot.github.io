{"config":{"lang":["en"],"separator":"[\\s\\-,:!?=\\[\\]()<>{}\"/\\\\]+|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#renovate-documentation","title":"Renovate documentation","text":"<p>Automated dependency updates. Multi-platform and multi-language.</p>"},{"location":"#why-use-renovate","title":"Why use Renovate?","text":"<ul> <li> <p> Automatic updates</p> <p>Get pull requests to update your dependencies and lock files.</p> </li> <li> <p> On your schedule</p> <p>Reduce noise by scheduling when Renovate creates PRs.</p> </li> <li> <p> Works out of the box</p> <p>Renovate finds relevant package files automatically, including in monorepos.</p> </li> <li> <p> How you like it</p> <p>You can customize the bot's behavior with configuration files.</p> </li> <li> <p> Share your configuration</p> <p>Share your configuration with ESLint-like config presets.</p> </li> <li> <p> Out with the old, in with the new</p> <p>Get replacement PRs to migrate from a deprecated dependency to the community suggested replacement, works with most managers, see issue 14149 for exceptions.</p> </li> <li> <p> Open source</p> <p>Renovate is licensed under the GNU Affero General Public License.</p> </li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>Renovate works on these platforms:</p> <ul> <li>Azure DevOps</li> <li>AWS CodeCommit</li> <li>Bitbucket Cloud</li> <li>Bitbucket Server</li> <li>Forgejo</li> <li>Gerrit (experimental)</li> <li>Gitea</li> <li>GitHub (.com and Enterprise Server)</li> <li>GitLab (.com and CE/EE)</li> </ul>"},{"location":"#who-uses-renovate","title":"Who Uses Renovate?","text":"<p>A non-exhaustive list of companies and projects using Renovate can be seen below:</p> <p></p> List of companies and projects that use Renovate <ul> <li>Prisma</li> <li>Netlify</li> <li>Envoy</li> <li>Cond\u00e9 Nast</li> <li>Microsoft</li> <li>Atlassian</li> <li>Sourcegraph</li> <li>Mozilla</li> <li>Deloitte</li> <li>Telus</li> <li>Yarn</li> <li>HashiCorp</li> <li>Automattic</li> <li>Algolia</li> <li>eBay</li> <li>Cypress</li> <li>Red Hat</li> <li>Financial Times</li> <li>Uber</li> <li>Buildkite</li> </ul>"},{"location":"#ways-to-run-renovate","title":"Ways to run Renovate","text":"<p>You can run Renovate as:</p> <ul> <li>an Open Source npm package</li> <li>a pre-built Open Source image on Docker Hub</li> </ul> <p>Or you can use the Mend Renovate App which is hosted by Mend.</p> <p>Install the Mend Renovate app for GitHub Check out our tutorial</p>"},{"location":"about-us/","title":"About us","text":"<p>Renovate was created by Mend staff and they continue to work on Renovate.</p> <p>More than 1000 outside contributors helped improve Renovate.</p>"},{"location":"about-us/#special-thanks","title":"Special thanks","text":"<p>We want to highlight the work of these awesome people. Thank you for your time and effort!</p>"},{"location":"about-us/#maintainers","title":"Maintainers","text":"<p>Renovate is maintained by:</p> <ul> <li>@viceice</li> <li>@secustor</li> <li>@jamietanna</li> </ul>"},{"location":"about-us/#maintainers-for-features","title":"Maintainers for features","text":"<p>Next up, we have these people who help maintain parts of Renovate:</p> <ul> <li>@zharinov focused on parsing, Gradle and Maven</li> <li>@secustor worked on Terraform and Helm</li> <li>@fgreinacher worked on NuGet</li> <li>@Turbo87 has helped in multiple areas, especially Cargo</li> <li>@Churro worked on the <code>gradle</code> manager and added support for OSV vulnerabilities</li> </ul>"},{"location":"about-us/#valuable-contributions","title":"Valuable contributions","text":"<p>We want to highlight these valuable contributions, even if they are one-offs. Some features made a lot of people happy, and efficient!</p> <ul> <li>@rarkins created Renovate and maintained it through to August 2025</li> <li>@JamieMagee was an active maintainer for years, contributing many features</li> <li>@HonkingGoose worked on the documentation and helped manage the community</li> <li>@ikesyo regularly helpful</li> <li>@astellingwerf reviews PRs</li> <li>@danports worked on the Flux manager, and other managers. Feel free to ping <code>@danports</code> for any Flux-related issue or PR</li> <li>@shegox worked on the Go manager, and improved our docs</li> <li>@setchy focused on Bitbucket Cloud and replacement features</li> <li>@cgrindel created the <code>bazel-module</code> manager</li> <li>@RahulGautamSingh refactored a lot of code and worked on performance improvements like reduced cloning during updates and onboarding</li> <li>@Gabriel-Ladzaretti S3 repo cache, child process refactoring, others</li> <li>@not7cd improved the <code>pip-compile</code> manager</li> <li>@squidfunk for creating and maintaining the Material for MkDocs framework, that we use to build our docs, and for helping us with problems with the framework, or our docs</li> <li>The MkDocs project for making the static site generator, that we use to build our docs</li> </ul>"},{"location":"about-us/#renovate-development","title":"Renovate development","text":"<p>The source code for Renovate is available on GitHub at <code>renovatebot/renovate</code>. This is where we do most of the development.</p>"},{"location":"about-us/#getting-more-paid-help","title":"Getting more paid help","text":"<p>If you need more assistance than what this project offers, you have two options:</p> <ol> <li>Become a Mend.io customer, such as by buying Renovate Enterprise, or</li> <li>Hire an experienced Renovate contributor privately for consulting. Mend.io staff do not offer this service, but one of our volunteer maintainers, <code>@secustor</code>, does</li> </ol>"},{"location":"about-us/#about-these-docs","title":"About these docs","text":"<p>The Renovate docs are built from Markdown files in our <code>renovatebot/renovate</code> repository. Most of the source files can be found in the <code>docs/usage/</code> directory.</p> <p>We use MkDocs and Material for MkDocs to build our docs.</p>"},{"location":"bazel/","title":"Bazel","text":"<p>Renovate upgrades dependencies in Bazel <code>WORKSPACE</code> files and <code>MODULE.bazel</code> files.</p>"},{"location":"bazel/#how-it-works","title":"How it works","text":"<ol> <li>Bazel support is enabled automatically</li> <li>Renovate searches the repository for any <code>WORKSPACE</code> and <code>MODULE.bazel</code> files</li> <li>Renovate extracts the dependencies it finds from the files (see below for the supported dependency declarations)</li> <li>Renovate updates old dependencies to the latest version</li> </ol>"},{"location":"bazel/#bazel-module-modulebazel-support","title":"Bazel module (<code>MODULE.bazel</code>) support","text":""},{"location":"bazel/#bazel-registry-discovery","title":"Bazel registry discovery","text":"<p>Renovate searches Bazel registries to find new Bazel module versions. You customize the registries your Bazel workspace uses by including <code>--registry</code> entries in your <code>.bazelrc</code> files. Renovate checks the workspace's <code>.bazelrc</code> files for custom registry entries. If no registries are found, Renovate defaults to the Bazel Central Registry.</p> <p>Here are some important points about Renovate's Bazel registry searches. Renovate:</p> <ul> <li>uses all <code>--registry</code> values found in a workspace's <code>.bazelrc</code> file</li> <li>uses any files that are transitively imported by a <code>.bazelrc</code> file</li> <li>only uses <code>--registry</code> values that are not associated with a configuration</li> <li>queries the registries in the order that they are found in the <code>.bazelrc</code> file</li> </ul>"},{"location":"bazel/#example-multiple-bazelrc-files","title":"Example: multiple <code>.bazelrc</code> files","text":"<p>In this example, there is a <code>.bazelrc</code> file which imports another file called <code>.registry.bazelrc</code>. Both files have <code>--registry</code> values:</p> .bazelrc<pre><code>import .registry.bazelrc\nbuild --registry=https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main\n</code></pre> .registry.bazelrc<pre><code>build --registry=https://example.com/custom_registry\n</code></pre> <p>The final registry list is:</p> <ol> <li><code>&lt;https://example.com/custom_registry&gt;</code></li> <li><code>&lt;https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main&gt;</code></li> </ol>"},{"location":"bazel/#example-registry-entries-using-bazel-configuration","title":"Example: registry entries using Bazel configuration","text":"<p>In this example, a <code>.bazelrc</code> file has registry values with and without a configuration:</p> .bazelrc<pre><code>build:ci --registry=https://internal.server/custom_registry\nbuild --registry=https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main\n</code></pre> <p>In this case the <code>https://internal.server/custom_registry</code> is ignored. The final registry list is:</p> <ol> <li><code>&lt;https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main&gt;</code></li> </ol>"},{"location":"bazel/#supported-bazel-module-declarations","title":"Supported Bazel module declarations","text":""},{"location":"bazel/#bazel_dep","title":"<code>bazel_dep</code>","text":"<p>Renovate updates the <code>version</code> value for a <code>bazel_dep</code> declaration.</p> <pre><code>bazel_dep(name = \"cgrindel_bazel_starlib\", version = \"0.15.0\")\n</code></pre> <p>In the example above, Renovate evaluates the <code>0.15.0</code> version against the repository's registries. If Renovate finds a newer version, it updates <code>0.15.0</code> to match that version.</p>"},{"location":"bazel/#git_override","title":"<code>git_override</code>","text":"<p>If Renovate finds a <code>git_override</code>, it ignores the related <code>bazel_dep</code> entry and instead evaluates the <code>commit</code> value at the specified <code>remote</code>. When using <code>git_override</code>, the <code>version</code> parameter on the <code>bazel_dep</code> is optional.</p> <pre><code>bazel_dep(name = \"cgrindel_bazel_starlib\", version = \"0.15.0\")\n\ngit_override(\n    module_name = \"cgrindel_bazel_starlib\",\n    commit = \"fb47f0e9f7c376a7700fc9fe3319231ae57880df\",\n    remote = \"https://github.com/cgrindel/bazel-starlib.git\",\n)\n\nbazel_dep(name = \"rules_foo\")\ngit_override(\n    module_name = \"rules_foo\",\n    remote = \"https://github.com/foo/rules_foo.git\",\n    commit = \"8a1e9abe415eda7cd7f2a744fdac7499ce42cdca\",\n)\n</code></pre> <p>If the primary branch has a newer commit than in the list, Renovate updates the <code>commit</code> value.</p>"},{"location":"bazel/#single_version_override","title":"<code>single_version_override</code>","text":"<p>The <code>single_version_override</code> is a declaration with many purposes. Renovate only evaluates two attributes from this declaration: <code>version</code> and <code>registry</code>.</p> <p>If a <code>version</code> is specified, it overrides the version in the <code>bazel_dep</code>. In the following example, Renovate notices that the version is pinned to <code>1.2.3</code>. This results in <code>rules_foo</code> being ignored for update evaluation. When using <code>single_version_override</code>, the <code>version</code> parameter on the <code>bazel_dep</code> is optional.</p> <pre><code>bazel_dep(name = \"rules_foo\", version = \"1.2.4\")\n\nsingle_version_override(\n  module_name = \"rules_foo\",\n  version = \"1.2.3\",\n)\n\nbazel_dep(name = \"rules_bar\")\n\nsingle_version_override(\n  module_name = \"rules_bar\",\n  version = \"1.2.3\",\n)\n</code></pre> <p>If a <code>registry</code> is specified, Renovate uses the specified registry URL to check for a new version. In the following example, Renovate only uses the <code>https://example.com/custom_registry</code> registry to discover <code>rules_foo</code> versions. Any registry values specified in the repository's <code>.bazelrc</code> files are ignored for the <code>rules_foo</code> module.</p> <pre><code>bazel_dep(name = \"rules_foo\", version = \"1.2.3\")\n\nsingle_version_override(\n  module_name = \"rules_foo\",\n  registry = \"https://example.com/custom_registry\",\n)\n</code></pre>"},{"location":"bazel/#archive_override-and-local_path_override","title":"<code>archive_override</code> and <code>local_path_override</code>","text":"<p>If Renovate finds an <code>archive_override</code> or a <code>local_path_override</code>, it ignores the related <code>bazel_dep</code>. Because these declarations lack versionable attributes, Renovate does not update them. When using <code>archive_override</code> and <code>local_path_override</code>, the <code>version</code> parameter on the <code>bazel_dep</code> is optional.</p> <pre><code>bazel_dep(name = \"rules_foo\", version = \"1.2.3\")\n\narchive_override(\n  module_name = \"rules_foo\",\n  urls = [\n    \"https://example.com/archive.tar.gz\",\n  ],\n)\n\nbazel_dep(name = \"rules_bar\")\n\narchive_override(\n  module_name = \"rules_bar\",\n  urls = [\n    \"https://example.com/archive.tar.gz\",\n  ],\n)\n</code></pre>"},{"location":"bazel/#multiple_version_override","title":"<code>multiple_version_override</code>","text":"<p>Renovate ignores <code>multiple_version_override</code>. <code>multiple_version_override</code> does not affect the processing of version updates for a module.</p>"},{"location":"bazel/#git_repository","title":"<code>git_repository</code>","text":"<p>If Renovate finds a <code>git_repository</code>, it evaluates the <code>commit</code> value at the specified <code>remote</code>. <code>remote</code> is limited to github repos: <code>https://github.com/&lt;owner&gt;/&lt;repo&gt;.git</code></p> <pre><code>git_repository(\n    name = \"rules_foo\",\n    remote = \"https://github.com/fooexample/rules_foo.git\",\n    commit = \"8c94e11c2b05b6f25ced5f23cd07d0cfd36edc1a\",\n)\n</code></pre>"},{"location":"bazel/#legacy-workspace-files","title":"Legacy <code>WORKSPACE</code> files","text":"<p>Renovate extracts dependencies from the following repository rules:</p> <ul> <li><code>container_pull</code></li> <li><code>oci_pull</code></li> <li><code>git_repository</code></li> <li><code>go_repository</code></li> <li><code>maven_install</code></li> <li><code>http_archive</code></li> <li><code>http_file</code></li> </ul> <p>It also recognizes when these repository rule names are prefixed with an underscore. For example, <code>_http_archive</code> is treated the same as <code>http_archive</code>.</p>"},{"location":"bazel/#git_repository-legacy","title":"<code>git_repository</code> (legacy)","text":"<p>Renovate updates any <code>git_repository</code> declaration that has the following:</p> <ol> <li><code>name</code></li> <li><code>remote</code> matching <code>https://github.com/&lt;owner&gt;/&lt;repo&gt;.git</code></li> <li><code>tag</code> using a valid SemVer</li> </ol> <p>e.g.:</p> <pre><code>git_repository(\n    name = \"build_bazel_rules_typescript\",\n    remote = \"https://github.com/bazelbuild/rules_typescript.git\",\n    tag = \"0.6.1\",\n)\n</code></pre> <p>Renovate uses the list of tags on the remote repository (GitHub) to detect a new version.</p>"},{"location":"bazel/#http_archive-and-http_file","title":"<code>http_archive</code> and <code>http_file</code>","text":"<p>Renovate updates any <code>http_archive</code> or <code>http_file</code> declaration that has the following:</p> <ol> <li><code>name</code></li> <li><code>url</code> matching <code>https://github.com/&lt;owner&gt;/&lt;repo&gt;/releases/download/&lt;semver&gt;/&lt;repo&gt;.tar.gz</code></li> <li><code>sha256</code></li> </ol> <p>e.g.:</p> <pre><code>http_archive(\n    name = \"io_bazel_rules_go\",\n    url = \"https://github.com/bazelbuild/rules_go/releases/download/0.7.1/rules_go-0.7.1.tar.gz\",\n    sha256 = \"341d5eacef704415386974bc82a1783a8b7ffbff2ab6ba02375e1ca20d9b031c\",\n)\n</code></pre> <p>Renovate uses the list of releases that it finds at the <code>url</code> to detect a new version.</p>"},{"location":"bazel/#maven_install","title":"<code>maven_install</code>","text":"<p>By default, Maven dependencies are extracted in the context of Gradle versioning scheme. To change it, configure <code>packageRules</code> like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"bazel\"],\n      \"matchDatasources\": [\"maven\"],\n      \"versioning\": \"maven\"\n    }\n  ]\n}\n</code></pre>"},{"location":"bazel/#future-work","title":"Future work","text":"<p>We welcome contributions or feature requests to support more patterns or use cases.</p>"},{"location":"bicep/","title":"Bicep","text":"<p>Renovate supports upgrading API versions in <code>resource</code> references. Upgrading <code>module</code> versions is not supported.</p>"},{"location":"bicep/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches for <code>.bicep</code> files.</li> <li>Renovate parses the files for <code>resource</code> types and API versions.</li> <li>Renovate looks up the latest version in the Azure/bicep-types-az repository.</li> </ol>"},{"location":"bicep/#known-issues","title":"Known issues","text":"<p>API version updates of nested resources are not supported.</p> <p>The API version of the <code>blobServices</code> resource below for example, will not be upgraded:</p> <pre><code>resource storageAccount 'Microsoft.Storage/storageAccounts@2022-05-01' = {\n  name: 'test'\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_LRS'\n  }\n  location: location\n\n  resource blobServices 'blobServices@2022-05-01' = {\n    name: 'default'\n  }\n}\n</code></pre>"},{"location":"bicep/#future-work","title":"Future work","text":"<ul> <li>Support versioned nested resource API version upgrades.</li> <li>Support module version upgrades.</li> <li>Public registry module references.</li> <li>Private registry module references.</li> <li>Template spec module references.</li> <li>Module aliases support.</li> </ul>"},{"location":"bot-comparison/","title":"Bot comparison","text":"<p>This page explains the key differences between Renovate and Dependabot, to help you choose a bot. We're trying to be as objective as possible, so this is not a \"versus\" or anti-Dependabot page.</p> <p>If you see anything wrong on this page, please let us know by creating a Discussion, or edit this page with a PR.</p>"},{"location":"bot-comparison/#table-of-features","title":"Table of features","text":"Feature Renovate Dependabot Dependency Dashboard Yes No Grouped updates Yes, use community-provided groups, or create your own Yes, create <code>groups</code> manually or handled automatically by dependabot Upgrades common monorepo packages at once Yes Yes Officially supported platforms Azure, Bitbucket, Forgejo, Gitea, GitHub, GitLab, see full list GitHub and Azure DevOps Supported languages List for Renovate List for Dependabot Show changelogs Yes Yes Compatibility score badges Four badges showing: Age, Adoption, Passing, Confidence One badge with overall compatibility score Built-in to GitHub No, requires app or self-hosting Yes Scheduling By default, Renovate runs as often as it is allowed to, read Renovate scheduling to learn more Yes: <code>daily</code>, <code>weekly</code>, <code>monthly</code>, <code>quarterly</code>, <code>semiannually</code>, <code>yearly</code> or <code>cron</code> License GNU Affero General Public License MIT License Programming language of project TypeScript Ruby Project pulse <code>renovatebot/renovate</code> monthly pulse <code>dependabot-core</code> monthly pulse Contributor graph <code>renovatebot/renovate</code> contributor graph <code>dependabot-core</code> contributor graph"},{"location":"bot-comparison/#hosted-app","title":"Hosted app","text":"<p>This section explains the key differences between the Mend Renovate app and the GitHub-native Dependabot.</p> <p>Even if you're going to self-host a bot, read the hosted app section first, because many features and concepts are similar. Then read the self-hosted section.</p>"},{"location":"bot-comparison/#dependency-dashboard","title":"Dependency Dashboard","text":"<p>One big feature of Renovate is the Dependency Dashboard, which is enabled by default. Read the Key concepts, Dependency Dashboard page to learn more.</p> <p>Dependabot does not have a similar feature.</p>"},{"location":"bot-comparison/#grouped-updates","title":"Grouped updates","text":"<p>Renovate comes with community-provided groupings of dependencies. So Renovate groups common dependencies into a single PR, out-of-the-box.</p> <p>Dependabot can group dependencies into a single PR too, but you must set your own <code>groups</code> first.</p>"},{"location":"bot-comparison/#upgrades-common-monorepo-packages-at-once","title":"Upgrades common monorepo packages at once","text":"<p>Renovate has a <code>group:monorepos</code> preset, that upgrades common monorepo packages in a single PR.</p> <p>Dependabot does not update common monorepo packages in a single PR.</p>"},{"location":"bot-comparison/#supported-platforms","title":"Supported platforms","text":"<p>Platform means the Git-hosting site or program, for example GitHub, GitLab or Azure.</p> <p>Renovate works on multiple platforms, including GitHub. Read the list of Renovate platforms to learn more.</p> <p>The official Dependabot program only works on GitHub. If you're an advanced user, you may use the <code>dependabot-core</code> repository as a base to build your own Dependabot, which you can run on other platforms.</p>"},{"location":"bot-comparison/#supported-languages","title":"Supported languages","text":"<ul> <li>Renovate's supported managers</li> <li>Dependabot's supported repositories and ecosystems</li> </ul>"},{"location":"bot-comparison/#show-changelogs","title":"Show changelogs","text":"Feature Renovate Dependabot Link to GitHub release Yes, to specific release tag Yes, to \"releases landing page\" Link to GitHub's comparing changes UI Yes Yes Release notes Yes Yes Links to issues Yes Yes Upstream <code>CHANGELOG</code> file No Yes Recent commits No Yes Link to individual commits No Yes"},{"location":"bot-comparison/#compatibility-score-badges","title":"Compatibility score badges","text":"<p>Renovate shows four Merge Confidence badges in its PRs:</p> <ul> <li>Age: The age of the package</li> <li>Adoption: The percentage of this package's users (within Renovate) which are using this release</li> <li>Passing: The percentage of updates which have passing tests for this package</li> <li>Confidence: The confidence level for this update</li> </ul> <p>Read the Merge Confidence badges page to learn more.</p> <p>Dependabot shows one compatibility score badge in its PRs. This score tells you how many other repositories have passing CI tests for the proposed update. Read the GitHub Docs, Dependabot's compatibility scores to learn more about Dependabot's badge.</p>"},{"location":"bot-comparison/#built-in-to-github-vs-app","title":"Built-in to GitHub vs app","text":"<p>Renovate needs app installation or self-hosting.</p> <p>Dependabot is built-in to GitHub.</p>"},{"location":"bot-comparison/#scheduling","title":"Scheduling","text":"<p>You can set a schedule for Renovate, per dependency, manager, or even a global schedule. Read Renovate scheduling to learn more.</p> <p>Dependabot has four options that apply at a language level:</p> <ul> <li><code>schedule.interval</code></li> <li><code>schedule.day</code></li> <li><code>schedule.time</code></li> <li><code>schedule.timezone</code></li> </ul>"},{"location":"bot-comparison/#license","title":"License","text":"<p>Renovate uses the GNU Affero General Public License.</p> <p>Dependabot uses the MIT License.</p> <p>Neither license is relevant to the end user though if consuming through an App/SaaS.</p>"},{"location":"bot-comparison/#programming-language-of-project","title":"Programming language of project","text":"<p>Renovate uses TypeScript.</p> <p><code>dependabot-core</code> uses Ruby.</p>"},{"location":"bot-comparison/#self-hosting-a-bot","title":"Self-hosting a bot","text":"<p>This section explains how to self-host each bot.</p>"},{"location":"bot-comparison/#self-hosting-renovate","title":"Self-hosting Renovate","text":"<p>You can self-host Renovate on all officially supported platforms.</p> <p>If you decide to self-host Renovate, read the items from the Self-hosting Renovate reading list.</p> <p>Available Renovate distributions:</p> <ul> <li>npm package (CLI)</li> <li>Docker images</li> <li>GitHub Action</li> <li>GitLab Runner</li> <li>Mend Renovate On-Premises</li> <li>Mend Remediate (commercial offering)</li> <li>Forking Renovate app</li> </ul>"},{"location":"bot-comparison/#self-hosting-dependabot","title":"Self-hosting Dependabot","text":"<p>You can self-host Dependabot on other platforms than GitHub but none are officially supported.</p>"},{"location":"bot-comparison/#as-a-github-actions-workflow-on-github","title":"As a GitHub Actions workflow on GitHub","text":"<p>You can run Dependabot as a GitHub Actions workflow on hosted and self-hosted runners. Learn more by reading the:</p> <ul> <li>GitHub Blog, Dependabot on GitHub Actions and self-hosted runners is now generally available</li> <li>GitHub Docs, About Dependabot on GitHub Actions runners</li> </ul>"},{"location":"bot-comparison/#dependabot-core","title":"<code>dependabot-core</code>","text":"<p>If you want to customize Dependabot, or self-host on another platform, you can use <code>dependabot-core</code>. Quote from the <code>dependabot-core</code> readme:</p> <p>It [<code>dependabot-core</code>] currently supports opening Pull Requests against repositories hosted on GitHub, Github Enterprise, Azure DevOps, GitLab, BitBucket, and AWS CodeCommit.</p>"},{"location":"bot-comparison/#dependabot-script","title":"<code>dependabot-script</code>","text":"<p>The Dependabot team has a community-maintained collection of scripts to start self-hosting Dependabot: <code>dependabot-script</code> but the repository has included a message warning that the scripts are broken since March 2023.</p>"},{"location":"bot-comparison/#dependabot-gitlabdependabot","title":"<code>dependabot-gitlab/dependabot</code>","text":"<p>There's also a community-maintained Dependabot for GitLab: <code>dependabot-gitlab/dependabot</code>.</p>"},{"location":"config-migration/","title":"Config Migration","text":"<p>As part of continuous improvement and refinement, the Renovate maintainers often rename, remove or combine configuration options.</p> <p>When the Renovate maintainers change configuration options, they add \"config migration\" code. The migration code allows \"legacy\" config from users to keep working. Config migration works by migrating legacy config internally, before the config is used. If done right, config migration \"just works\" silently and legacy configs continue working indefinitely. The only sign that \"config migration\" is needed is the debug message in the Renovate logs, noting the old and newly migrated configs.</p>"},{"location":"config-migration/#enabling-config-migration-pull-requests","title":"Enabling config migration pull requests","text":"<p>Even though Renovate allows you to keep using \"legacy config\", we recommend you update the configuration names in your config regularly. Using the latest names:</p> <ul> <li>makes it easier for you to understand the config</li> <li>helps you find the documentation for the config</li> </ul> <p>Renovate can create a config migration Pull Request, to migrate legacy config in your configuration file. To get automated config migration Pull Requests from Renovate: set the <code>configMigration</code> config option to <code>true</code>.</p> <p>Config migration PRs are disabled by default. But we recommend you enable config migration PRs, because:</p> <ul> <li>the config migration PR \"tells\" you something changed</li> <li>up-to-date terms help you search the Renovate documentation</li> <li>up-to-date terms help you, and us, debug problems quicker</li> </ul>"},{"location":"config-migration/#config-migration-scenarios","title":"Config migration scenarios","text":"<p>The scenarios for config migration are:</p> <ul> <li>No config migration needed</li> <li>Config migration needed, and enabled</li> <li>Config migration needed, but disabled</li> <li>Config migration needed, but there is a previously closed migration PR</li> </ul>"},{"location":"config-migration/#no-config-migration-needed","title":"No config migration needed","text":"<p>Renovate takes no action.</p>"},{"location":"config-migration/#config-migration-needed-and-enabled","title":"Config migration needed, and enabled","text":"<p>Renovate will:</p> <ol> <li>Create a Config Migration PR</li> <li>If the Dependency Dashboard issue is enabled, then Renovate puts a link to the Config Migration PR on the dashboard</li> </ol>"},{"location":"config-migration/#config-migration-needed-but-disabled","title":"Config migration needed, but disabled","text":"<p>If config migration is needed, but disabled then Renovate adds a checkbox to the Dependency Dashboard (if the dashboard exists). This is known as \"on-demand\" config migration, because migration PRs are only created at the request of the user by ticking the checkbox.</p> <p>The checkbox looks like this:</p> <pre><code>- [ ] Select this checkbox to let Renovate create an automated Config Migration PR.\n</code></pre> <p>When you select the checkbox:</p> <ol> <li>Renovate creates a config migration PR</li> <li>Renovate replaces the checkbox with a link to the Config Migration PR</li> </ol> <p>For example:</p> <pre><code>See Config Migration PR: #1.\n</code></pre>"},{"location":"config-migration/#config-migration-needed-but-there-is-a-closed-migration-pr","title":"Config migration needed, but there is a closed migration PR","text":"<p>In this case, it does not matter if Config Migration is enabled, or not. Renovate will:</p> <ul> <li>Add a checkbox to the Dependency Dashboard issue (if enabled)</li> <li>When you select the checkbox on the dashboard, Renovate will:</li> <li>Delete the old config migration branch</li> <li>Create a new config migration PR</li> <li>Replace the checkbox with a link to the new PR in the Dependency Dashboard issue</li> </ul>"},{"location":"config-overview/","title":"Renovate configuration overview","text":"<p>Each time Renovate runs on a repository it reads the configuration files listed below and creates a final config. This final config describes what Renovate will do during its run.</p> <p>The final config is internal to Renovate, and is not saved or cached for a later run. But you can always find the final config in Renovate's logs.</p> <p>Renovate reads the configuration files in this order (from top to bottom):</p> <ol> <li>Default config</li> <li>Global config</li> <li>File config</li> <li>Additional file config</li> <li>Environment config</li> <li>CLI config</li> <li>Inherited config</li> <li>Resolved presets referenced in config</li> <li>Repository config</li> </ol> <p>Items with a higher number override items that have lower numbers. If the item has the <code>mergeable</code> property, it will merge with lower numbers instead.</p> <p>Note</p> <p>If you use a Mend-hosted app, please read Mend-hosted Apps Configuration after reading this page.</p>"},{"location":"config-overview/#types-of-config","title":"Types of config","text":""},{"location":"config-overview/#default-config","title":"Default config","text":"<p>Every Renovate config option has a default value/setting. That default value/setting may even be <code>null</code>. You can find the default values on the Renovate docs website.</p> <p>For example:</p> <ul> <li>The default value for <code>onboarding</code> is <code>true</code></li> <li>The option <code>labels</code> lacks a default value, which means that no labels will be added to Renovate's PRs</li> </ul> <p>The default config is loaded first, and may be superseded/overridden by the configuration types listed below.</p>"},{"location":"config-overview/#global-config","title":"Global config","text":"<p>Global config means: the config defined by the person or team responsible for running the bot. This is also referred to as \"bot config\", because it's the config passed to the bot by the person running it. Global config can contain config which is \"global only\" as well as any configuration options which are valid in Inherited config or Repository config.</p> <p>If you are an end user of Renovate, for example if you're using the Mend Renovate App, then you don't need to care as much about any global config. As a end-user you can not change some settings because those settings are global-only. If you are an end user, you can skip the rest of this \"Global config\" section and proceed to \"Inherited config\".</p> <p>Global config can be read from a file, environment variable, or CLI parameters. You must configure at least one of these for Renovate to have the information it needs to run. For example: you may need to give Renovate the correct credentials.</p>"},{"location":"config-overview/#file-config","title":"File config","text":"<p>Renovate first tries to read the global config from a file. By default Renovate checks for a <code>config.js</code> file in the current working directory. But you can override this by defining <code>RENOVATE_CONFIG_FILE</code> in env, for example: <code>RENOVATE_CONFIG_FILE=/tmp/my-renovate-config.js</code>.</p> <p>By default Renovate allows the config file to be missing and does not error if it cannot find it. But if you have configured <code>RENOVATE_CONFIG_FILE</code> and the path you specified is not found then Renovate will error and exit, because it assumes you have a configuration problem. If the file is found but cannot be parsed then Renovate will also error and exit.</p> <p>Global config files can be <code>.js</code> or <code>.json</code> files. You may use synchronous or asynchronous methods inside a <code>.js</code> file, including even to fetch config information from remote hosts.</p>"},{"location":"config-overview/#additional-file-config","title":"Additional file config","text":"<p>Renovate tried to read an additional config file only if the env var <code>RENOVATE_ADDITIONAL_CONFIG_FILE</code> is set, for example: <code>RENOVATE_ADDITIONAL_CONFIG_FILE=/tmp/my-additional-renovate-config.js</code>.</p> <p>By default Renovate allows the config file to be missing and does not error if it cannot find it. But if you have configured <code>RENOVATE_ADDITIONAL_CONFIG_FILE</code> and the path you specified is not found then Renovate will error and exit, because it assumes you have a configuration problem. If the file is found but cannot be parsed then Renovate will also error and exit.</p> <p>Global config files can be <code>.js</code> or <code>.json</code> files. You may use synchronous or asynchronous methods inside a <code>.js</code> file, including even to fetch config information from remote hosts.</p> <p>Warning</p> <p>Do not name the additional config file <code>config.js</code> as it is reserved for file config.</p>"},{"location":"config-overview/#environment-config","title":"Environment config","text":"<p>Global config can be defined using environment variables. The config options that you can use in environment variables all have the prefix <code>RENOVATE_</code>. For example, <code>RENOVATE_PLATFORM=gitlab</code> is the same as setting <code>\"platform\": \"gitlab\"</code> in File config.</p> <p>Usually there's a clear mapping from configuration option name to the corresponding Environment config name. But we recommend you still check the documentation for the field <code>env</code> for each option to make sure. If the configuration option lacks a <code>env</code> field, the config option also lacks a Environment config variable name.</p> <p>A special case for Environment config is the <code>RENOVATE_CONFIG</code> \"meta\" config option. The <code>RENOVATE_CONFIG</code> option accepts a stringified full config, for example: <code>RENOVATE_CONFIG={\"platform\":\"gitlab\",\"onboarding\":false}</code>. Any additional Environment config variables take precedence over values in <code>RENOVATE_CONFIG</code>.</p>"},{"location":"config-overview/#environment-variable-examples","title":"Environment variable examples","text":"<p>Warning</p> <p>Make sure to escape any punctuation. Be extra careful if you're passing stringified values.</p> <p>Boolean:</p> <ul> <li><code>RENOVATE_ONBOARDING=true</code></li> </ul> <p>String:</p> <ul> <li><code>RENOVATE_BASE_DIR=/tmp/something</code></li> <li><code>RENOVATE_BASE_DIR=\"/tmp/some thing\"</code></li> </ul> <p>Number:</p> <ul> <li><code>RENOVATE_PR_HOURLY_LIMIT=1</code></li> </ul> <p>List with numbers or strings:</p> <ul> <li><code>RENOVATE_LABELS=\"abc,def,label with space\"</code></li> </ul> <p>Objects, or lists with objects:</p> <ul> <li><code>RENOVATE_CONFIG=\"{platform\\\":\\\"gitlab\\\",\\\"onboarding\\\":false}\"</code></li> <li><code>RENOVATE_PACKAGE_RULES=\"[{matchHost:\\\"gitlab\\\",token:\\\"$SOME_TOKEN\\\"}]\"</code></li> </ul> <p>Tip</p> <p>Use \"stringify\" (Example online service) for strings and objects.</p>"},{"location":"config-overview/#experimental-variables","title":"Experimental variables","text":"<p>Renovate has \"experimental\" environment variables, which start with <code>RENOVATE_X_</code>. These variables are experimental, can be changed at any time, and are not parsed as part of regular configuration. Read the Self-hosted experimental environment variables docs to learn more.</p>"},{"location":"config-overview/#logging-variables","title":"Logging variables","text":"<p>Finally, there are some special environment variables that are loaded before configuration parsing because they are used during logging initialization:</p> <ul> <li><code>LOG_CONTEXT</code>: a unique identifier used in each log message to track context</li> <li><code>LOG_FILE</code>: used to enable file logging and specify the log file path</li> <li><code>LOG_FILE_FORMAT</code>: defaults to \"json\", but can be changed to a \"pretty\" human-readable output</li> <li><code>LOG_FILE_LEVEL</code>: log file logging level, defaults to <code>debug</code></li> <li><code>LOG_FORMAT</code>: defaults to a \"pretty\" human-readable output, but can be changed to \"json\"</li> <li><code>LOG_LEVEL</code>: most commonly used to change from the default <code>info</code> to <code>debug</code> logging</li> </ul>"},{"location":"config-overview/#cli-config","title":"CLI config","text":"<p>The final way to configure Global config is through CLI parameters. For example, the CLI parameter <code>--platform=gitlab</code> is the same as setting <code>\"platform\": \"gitlab\"</code> in File config or <code>RENOVATE_PLATFORM=gitlab</code> in Environment config.</p> <p>CLI config is read last and takes precedence over Environment and File config. For example, if you configure conflicting values in Environment, File config and CLI config, then the CLI config will be merged last and \"win\" if values conflict.</p> <p>It is important that you:</p> <ul> <li>Always provide a value, even if the field is boolean (e.g. <code>--onboarding=true</code> and not <code>--onboarding</code>), and</li> <li>Prefer <code>=</code> notation over spaces, e.g. <code>--onboarding=true</code> instead of <code>--onboarding true</code></li> </ul>"},{"location":"config-overview/#inherited-config","title":"Inherited config","text":""},{"location":"config-overview/#use-cases","title":"Use cases","text":"<p>The primary purpose of Inherited config is to allow for default settings of an organization/group. Two main use cases for Inherited config are:</p> <ul> <li>Controlling onboarding settings within an org (e.g. disabling onboarding, making config optional)</li> <li>Defining default config settings for repos within an org</li> </ul> <p>We recommend that organizations use shared presets instead of Inherited config, if possible. But default settings through Inherited config are useful if:</p> <ul> <li>You want to avoid setting Repository config in each repo, or</li> <li>You onboarded many repos prior to having a shared org config, and don't want to retrospectively edit each repo's config</li> </ul>"},{"location":"config-overview/#how-its-found","title":"How it's found","text":"<p>If <code>inheritConfig</code> is <code>true</code> in Global config then Renovate will look for Inherited config before processing each repository. The repository and file name which Renovate looks for can be configured using the other <code>inheritConfig*</code> settings documented in Global config. Default values are <code>{{parentOrg}}/renovate-config</code> for repository name and <code>org-inherited-config.json</code> for file name.</p> <p>If found, Inherited config will be merged on top (i.e. override) Global config. Avoid putting any global-only setting in a Inherited config, as doing so will result in an error.</p> <p>Inherited config may use all Repository config settings, and any Global config options which have the \"supportsInheritConfig\" property in the docs.</p> <p>For information on how the Mend Renovate App supports Inherited config, see the dedicated \"Mend Renovate App Config\" section toward the end of this page.</p>"},{"location":"config-overview/#presets-handling","title":"Presets handling","text":"<p>If the inherited config contains <code>extends</code> presets, then Renovate will:</p> <ol> <li>Resolve the presets</li> <li>Add the resolved preset config to the beginning of the inherited config</li> <li>Merge the presets on top of the global config</li> </ol>"},{"location":"config-overview/#you-can-not-ignore-presets-from-inherited-config","title":"You can not ignore presets from inherited config","text":"<p>You can not use <code>ignorePresets</code> in your repository config to ignore presets within inherited config. This is because inherited config is resolved before the repository config.</p>"},{"location":"config-overview/#repository-config","title":"Repository config","text":"<p>Repository config is the config loaded from a config file in the repository. Alternative file names are supported, but the default is <code>renovate.json</code>. If Renovate finds more than one configuration file in the same repository, then Renovate will use the first configuration file it finds and ignores the other(s).</p>"},{"location":"config-overview/#config-precedence","title":"Config precedence","text":"<p>Once Repository config is loaded, it is merged over the top of the previously loaded Global and Inherited config, meaning it takes precedence over them. Presets referenced with an \"extends\" config are resolved first and take lower precedence over regular/raw config in the same file or config object.</p>"},{"location":"config-overview/#onboarding","title":"Onboarding","text":"<p>When Renovate processes a repository, one of the first decisions it makes is \"Does this repository need to be onboarded?\". By default, Renovate will create an \"Onboarding PR\" with a default config if a repository does not have a Repository config file committed to the default branch.</p>"},{"location":"config-overview/#onboarding-config","title":"Onboarding Config","text":"<p>When Renovate creates an Onboarding PR it will propose a Repository config file to be merged. By default, it is essentially an empty config with only the Renovate JSON schema referenced, but you can change this behavior if desired.</p> <p>If you configure <code>onboardingConfig</code> in either Global config or Inherited config then Renovate will use that config directly instead of the default.</p> <p>If you self-host Renovate in GitLab using <code>renovate-runner</code>, the CI will contain a default RENOVATE_ONBOARDING_CONFIG that will merge with your own configuration settings. For example, the CI by default contains:</p> <pre><code>RENOVATE_ONBOARDING_CONFIG: '{\"$$schema\": \"https://docs.renovatebot.com/renovate-schema.json\", \"extends\": [\"config:recommended\"] }'\n</code></pre> <p>If you want to change the <code>extends</code> in your own configuration, you need to override the variable in your own <code>.gitlab-ci.yml</code>:</p> <pre><code>variables:\n  RENOVATE_ONBOARDING_CONFIG: '{\"$$schema\":\"https://docs.renovatebot.com/renovate-schema.json\",\"extends\":[\"platform&gt;organization/repo:renovate-config\"]}'\n</code></pre> <p>Your <code>renovate.js</code> where you run Renovate cannot contain any <code>extends</code> definition, it will pick the <code>extends</code> from the <code>RENOVATE_ONBOARDING_CONFIG</code> variable. For example, your config can look like this:</p> <pre><code>module.exports = {\n    ...\n    onboardingConfig: {\n      \"argocd\": {\n        \"fileMatch\": [\n          \"application\\\\.yaml$\"\n        ]\n      },\n    };\n</code></pre> <p>The resulting onboarding config will be:</p> <pre><code>{\n  '$schema': 'https://docs.renovatebot.com/renovate-schema.json',\n  'argocd': { 'managerFilePatterns': [\"/application\\\\.yaml$/\"] },\n  'extends': ['platform&gt;organization/repo:renovate-config'],\n}\n</code></pre> <p>Alternatively if you follow Renovate's naming convention for shared presets then it can automatically detect those instead. If the repository <code>{{parentOrg}}/renovate-config</code> has a <code>default.json</code> file then this will be treated as the organization's default preset and included in the Onboarding config. Additionally for platforms which support nested Organization/Group hierarchies, Renovate will \"hunt\" up such hierarchies for a <code>renovate-config</code> repository with default config and stop when it finds the first.</p> <p>Note</p> <p>Renovate will also check for a <code>renovate.json</code> file if it cannot find a <code>default.json</code> file in a preset, however this option is deprecated and not recommended.</p> <p>If a default config is not found in a <code>renovate-config</code> repository within the Organization, Renovate will also check for the presence of a <code>renovate-config.json</code> file within a <code>.{{platform}}</code> repository parallel to the current repository. For example if the repository being onboarded is <code>abc/def</code> on a GitHub platform then Renovate will look for the existence of an <code>abc/.github</code> repository containing a <code>renovate-config.json</code> file.</p>"},{"location":"config-overview/#changing-default-behavior","title":"Changing default behavior","text":"<p>Default onboarding behavior for an Organization can be changed either in Global or Inherited config.</p> <p>For example, if you set <code>onboarding=false</code> then Renovate will not onboard repositories, and skip any repositories without a Repository config. In other words, users need to manually push a valid Repository config file to activate Renovate on the repository.</p> <p>If you set <code>onboarding=false</code> plus <code>requireConfig=optional</code> then it means Renovate will skip onboarding and proceed to run on a repository, even if Renovate does not find any Repository config.</p>"},{"location":"config-overview/#shared-presets","title":"Shared Presets","text":""},{"location":"config-overview/#overview","title":"Overview","text":"<p>The concept of shared configuration is covered in detail on the Presets page, so please read that first.</p>"},{"location":"config-overview/#use-of-presets-in-global-config","title":"Use of Presets in Global config","text":"<p>Presets should be used cautiously in Global config as they often lead to misunderstandings.</p>"},{"location":"config-overview/#globalextends","title":"globalExtends","text":"<p>Sometimes you may not wish to put all settings within the Global config itself and instead commit it to a repository which is then referenced from the Global config. In such cases, use <code>globalExtends</code> instead of <code>extends</code> so that it is resolved immediately and used as part of Global config.</p>"},{"location":"config-overview/#extends","title":"extends","text":"<p>If you use <code>extends</code> within Global config then it's important to note that these are not resolved/expanded during Global config processing and instead are passed through unresolved to be part of Repository config. Passing <code>extends</code> through to be part of Repository config has two major consequences:</p> <ul> <li>It allows repository users to be able to use <code>ignorePresets</code> to ignore all or part of the <code>extends</code> presets, and</li> <li>Presets defined within <code>extends</code> in Global config will take higher precedence that \"regular\" Global config, because it's resolved later</li> </ul>"},{"location":"config-overview/#using-a-centralized-config","title":"Using a centralized config","text":"<p>Using \"centralized\" configs through Renovate presets is important in order to be able to:</p> <ul> <li>Save time by not repeating yourself in every repo with the same config, and</li> <li>Being able to change settings across an entire Organization or groups of repositories in one place</li> </ul> <p>Once you've created a centralized preset config, there are multiple ways you can pass it through to repositories:</p> <ul> <li>Defining it in Global config (either <code>globalExtends</code> or <code>extends</code>)</li> <li>Using it as your Inherited config, or referencing it from Inherited config using <code>extends</code></li> <li>Ensuring it's referenced in Onboarding config so that it's committed as part of the Repository config</li> </ul> <p>The above possibilities go from least to most transparent when it comes to end users.</p> <p>Global config may be invisible to developers without log access, meaning they could be confused by any settings you apply - via presets or directly - within Global config. For example the developers wonder why Renovate is behaving differently to its documented default behavior and may even think it's a bug.</p> <p>Inherited config is visible to developers (it's within a repository they can see) although it's implicitly applied so without log access and if they're not aware to look for an Inherited config repository then they may again be a little confused as to why default behavior has changed.</p> <p>The recommended approach for using a centralized preset is to explicitly \"extend\" it from every repository, which can be achieved easily if it's part of your <code>onboardingConfig</code>. By having your centralized preset part of each Repository config <code>extends</code>, it has these two benefits:</p> <ul> <li>You still have the ability to change shared settings in a single location</li> <li>Any user viewing the repo can see the preset being extended and trace it back to understand which config is applied</li> </ul>"},{"location":"config-overview/#other","title":"Other","text":"<p>The below contains edge cases which you should avoid if possible, and likely don't need to use. They are included here because they can cause \"exceptions\" to some of the previously mentioned rules of config.</p>"},{"location":"config-overview/#optimize-for-disabled","title":"Optimize for Disabled","text":"<p>The <code>optimizeForDisabled</code> option was designed for an edge case where a large percentage of repos are disabled by config. If this option is set to <code>true</code>, Renovate will use a platform API call to see if a <code>renovate.json</code> exists and if it contains <code>\"enabled\": false</code>. If so, the repository will be skipped without a clone necessary. If the file is not present or does not disable Renovate, then Renovate continues as before (having \"wasted\" that extra API call).</p>"},{"location":"config-overview/#force-config","title":"Force config","text":"<p>We recommend you avoid the <code>force</code> config option, if possible.</p> <p>It can be used to \"force\" config over the top of other config or rules which might be merged later, so at times can cause confusion - especially if it's defined in Global config and overriding settings in Repository config.</p>"},{"location":"config-presets/","title":"Shareable Config Presets","text":"<p>This page describes how to configure your shared presets. Read the Key concepts, presets page to learn more about presets in general.</p> <p>Shareable config presets must use the JSON or JSON5 formats, other formats are not supported.</p> <p>Tip</p> <p>Describe what your preset does in the <code>\"description\"</code> field or add comments as Renovate supports <code>JSONC</code> syntax within its preset files.</p>"},{"location":"config-presets/#extending-from-a-preset","title":"Extending from a preset","text":"<p>To use a preset put it in an <code>extends</code> array within your Renovate config. Presets can be nested.</p>"},{"location":"config-presets/#preset-hosting","title":"Preset Hosting","text":"<p>Presets should be hosted in repositories, which usually means the same platform host as Renovate is running against.</p> <p>Alternatively, Renovate can fetch preset files from an HTTP server.</p> <p>Warning</p> <p>We deprecated npm-based presets. We plan to drop the npm-based presets feature in a future major release of Renovate.</p> <p>You can set a Git tag (like a SemVer) to use a specific release of your shared config.</p>"},{"location":"config-presets/#preset-file-naming","title":"Preset File Naming","text":"<p>Presets are repo-hosted, and you can have one or more presets hosted per repository. If you omit a file name from your preset (e.g. <code>github&gt;abc/foo</code>) then Renovate will look for a <code>default.json</code> file in the repo. If you wish to have an alternative file name, you need to specify it (e.g. <code>github&gt;abc/foo//alternative-name.json5</code>).</p> <p>Warning</p> <p>We've deprecated using a <code>renovate.json</code> file for the default preset file name in a repository. If you're using a <code>renovate.json</code> file to share your presets, rename it to <code>default.json</code>.</p>"},{"location":"config-presets/#github","title":"GitHub","text":"name example use preset resolves as filename Git tag GitHub default <code>github&gt;abc/foo</code> <code>default</code> <code>https://github.com/abc/foo</code> <code>default.json</code> Default branch GitHub with preset name <code>github&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> Default branch GitHub with preset name (JSON5) <code>github&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json5</code> Default branch GitHub with preset name and path <code>github&gt;abc/foo//path/xyz</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>path/xyz.json</code> Default branch GitHub default with a tag <code>github&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://github.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> GitHub with preset name with a tag <code>github&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> GitHub with preset name and path with a tag <code>github&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> GitHub with subpreset name and tag <code>github&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#gitlab","title":"GitLab","text":"name example use preset resolves as filename Git tag GitLab default <code>gitlab&gt;abc/foo</code> <code>default</code> <code>https://gitlab.com/abc/foo</code> <code>default.json</code> Default branch GitLab with preset name <code>gitlab&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> Default branch GitLab with preset name (JSON5) <code>gitlab&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json5</code> Default branch GitLab default with a tag <code>gitlab&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://gitlab.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> GitLab with preset name with a tag <code>gitlab&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> GitLab with preset name and path with a tag <code>gitlab&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> GitLab with subpreset name and tag <code>gitlab&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#gitea","title":"Gitea","text":"name example use preset resolves as filename Git tag Gitea default <code>gitea&gt;abc/foo</code> <code>default</code> <code>https://gitea.com/abc/foo</code> <code>default.json</code> Default branch Gitea with preset name <code>gitea&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> Default branch Gitea with preset name (JSON5) <code>gitea&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json5</code> Default branch Gitea default with a tag <code>gitea&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://gitea.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> Gitea with preset name with a tag <code>gitea&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> Gitea with preset name and path with a tag <code>gitea&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> Gitea with subpreset name and tag <code>gitea&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#forgejo","title":"Forgejo","text":"name example use preset resolves as filename Git tag Forgejo default <code>forgejo&gt;abc/foo</code> <code>default</code> <code>https://codeberg.org/abc/foo</code> <code>default.json</code> Default branch Forgejo with preset name <code>forgejo&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://codeberg.org/abc/foo</code> <code>xyz.json</code> Default branch Forgejo with preset name (JSON5) <code>forgejo&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://codeberg.org/abc/foo</code> <code>xyz.json5</code> Default branch Forgejo default with a tag <code>forgejo&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://codeberg.org/abc/foo</code> <code>default.json</code> <code>1.2.3</code> Forgejo with preset name with a tag <code>forgejo&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://codeberg.org/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> Forgejo with preset name and path with a tag <code>forgejo&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://codeberg.org/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> Forgejo with subpreset name and tag <code>forgejo&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://codeberg.org/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#self-hosted-git","title":"Self-hosted Git","text":"name example use preset resolves as filename Git tag Local default <code>local&gt;abc/foo</code> <code>default</code> <code>https://github.company.com/abc/foo</code> <code>default.json</code> Default branch Local with preset path <code>local&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> Default branch Local with preset path (JSON5) <code>local&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json5</code> Default branch Local with preset name and path <code>local&gt;abc/foo//path/xyz</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>path/xyz.json</code> Default branch Local default with a tag <code>local&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://github.company.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> Local with preset name with a tag <code>local&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> Local with preset name and path with a tag <code>local&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> Local with subpreset name and tag <code>local&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> <p>Tip</p> <p>You can't combine the path and sub-preset syntaxes. This means that anything in the form <code>provider&gt;owner/repo//path/to/file:subsubpreset</code> is not supported. One workaround is to use distinct files instead of sub-presets.</p>"},{"location":"config-presets/#example-configs","title":"Example configs","text":"<p>An example of a small rule is <code>:preserveSemverRanges</code>, which has the description \"Preserve (but continue to upgrade) any existing SemVer ranges.\". It simply sets the configuration option <code>rangeStrategy</code> to <code>replace</code>.</p> <p>An example of a full config is <code>config:recommended</code>, which is Renovate's default configuration. It mostly uses Renovate config defaults but adds a few smart customizations such as grouping monorepo packages together.</p> <p>Note</p> <p>The <code>:xyz</code> naming convention (with <code>:</code> prefix) is shorthand for the <code>default:</code> presets. For example: <code>:xyz</code> is the same as <code>default:xyz</code>.</p>"},{"location":"config-presets/#how-to-use-preset-configs","title":"How to Use Preset Configs","text":"<p>By default, Renovate App's onboarding PR suggests the <code>[\"config:recommended\"]</code> preset. If you're self hosting, and want to use the <code>config:recommended</code> preset, then you must add <code>\"onboardingConfig\": { \"extends\": [\"config:recommended\"] }</code> to your bot's config.</p> <p>Read the Full Config Presets page to learn more about our <code>config:</code> presets.</p> <p>A typical onboarding <code>renovate.json</code> looks like this:</p> <pre><code>{\n  \"extends\": [\"config:recommended\"]\n}\n</code></pre> <p>Here's an example of using presets to change Renovate's behavior. You're happy with the <code>config:recommended</code> preset, but want Renovate to create PRs when you're not at the office. You look at our <code>schedule:</code> presets, and find the <code>schedule:nonOfficeHours</code> preset. You put <code>schedule:nonOfficeHours</code> in the <code>extends</code> array of your <code>renovate.json</code> file, like this:</p> <pre><code>{\n  \"extends\": [\"config:recommended\", \"schedule:nonOfficeHours\"]\n}\n</code></pre>"},{"location":"config-presets/#preset-parameters","title":"Preset Parameters","text":"<p>If you browse the \"default\" presets, you will see some that have parameters, e.g.:</p> <pre><code>{\n  \"labels\": {\n    \"description\": \"Apply labels &lt;code&gt;{{arg0}}&lt;/code&gt; and &lt;code&gt;{{arg1}}&lt;/code&gt; to PRs\",\n    \"labels\": [\"{{arg0}}\", \"{{arg1}}\"]\n  },\n  \"assignee\": {\n    \"description\": \"Assign PRs to &lt;code&gt;{{arg0}}&lt;/code&gt;\",\n    \"assignees\": [\"{{arg0}}\"]\n  }\n}\n</code></pre> <p>Here is how you would use these in your Renovate config:</p> <pre><code>{\n  \"extends\": [\":labels(dependencies,devops)\", \":assignee(renovate-tests)\"]\n}\n</code></pre> <p>In short, the number of <code>{{argx}}</code> parameters in the definition is how many parameters you need to provide. Parameters must be strings, non-quoted, and separated by commas if there are more than one.</p> <p>If you find that you are repeating config a lot, you might consider publishing one of these types of parameterized presets yourself. Or if you think your preset would be valuable for others, please contribute a PR to the Renovate repository, see Contributing to presets.</p> <p>Also, the entire parameter string is available as <code>{{args}}</code>. It includes everything between parentheses, verbatim, without the parentheses themselves. If you want to include a comma in the parameter value, you need to use <code>{{args}}</code> instead of <code>{{arg0}}</code>.</p>"},{"location":"config-presets/#github-hosted-presets","title":"GitHub-hosted Presets","text":"<p>To host your preset config on GitHub:</p> <ul> <li>Create a new repository. Normally you'd call it <code>renovate-config</code> but it can be named anything</li> <li>Add configuration files to this new repo for any presets you want to share. For the default preset, <code>default.json</code> will be checked. For named presets, <code>&lt;preset-name&gt;.json</code> will be loaded. For example, loading preset <code>library</code> would load <code>library.json</code>. No other files are necessary.</li> <li>In other repos, reference it in an extends array like <code>\"github&gt;owner/name\"</code>, for example:</li> </ul> <pre><code>{\n  \"extends\": [\"github&gt;renovate-tests/renovate-config\"]\n}\n</code></pre> <p>From then on Renovate will use the Renovate config from the preset repo's default branch. You do not need to add it as a devDependency or add any other files to the preset repo.</p>"},{"location":"config-presets/#gitlab-hosted-presets","title":"GitLab-hosted Presets","text":"<p>For a private GitLab repository Renovate requires at least <code>Reporter</code> level access.</p> <p>To host your preset config on GitLab:</p> <ul> <li>Create a new repository on GitLab. Normally you'd call it <code>renovate-config</code> but it can be named anything</li> <li>Add a <code>default.json</code> to this new repo containing the preset config. No other files are necessary</li> <li>In other repos, reference it in an extends array like <code>\"gitlab&gt;owner/name\"</code>, e.g. <code>\"gitlab&gt;renovate-tests/renovate-config\"</code></li> </ul>"},{"location":"config-presets/#gitea-hosted-presets","title":"Gitea-hosted Presets","text":"<p>To host your preset config on Gitea:</p> <ul> <li>Create a new repository on Gitea. Normally you'd call it <code>renovate-config</code> but you can use any name you want</li> <li>Add a <code>default.json</code> to this new repository containing the preset config. No other files are necessary</li> <li>In other repositories, reference it in an extends array like <code>\"gitea&gt;owner/name\"</code>, e.g. <code>\"gitea&gt;renovate-tests/renovate-config\"</code></li> </ul>"},{"location":"config-presets/#forgejo-hosted-presets","title":"Forgejo-hosted Presets","text":"<p>To host your preset config on Forgejo:</p> <ul> <li>Create a new repository on Forgejo. Normally you'd call it <code>renovate-config</code> but you can use any name you want</li> <li>Add a <code>default.json</code> to this new repository containing the preset config. No other files are necessary</li> <li>In other repositories, reference it in an extends array like <code>\"forgejo&gt;owner/name\"</code>, e.g. <code>\"forgejo&gt;renovate-tests/renovate-config\"</code></li> </ul>"},{"location":"config-presets/#local-presets","title":"Local presets","text":"<p>Renovate also supports local presets, e.g. presets that are hosted on the same platform as the target repository. This is especially helpful in self-hosted scenarios where public presets cannot be used. Local presets are specified either by leaving out any prefix, e.g. <code>owner/name</code>, or explicitly by adding a <code>local&gt;</code> prefix, e.g. <code>local&gt;owner/name</code>. Renovate will determine the current platform and look up the preset from there.</p>"},{"location":"config-presets/#fetching-presets-from-an-http-server","title":"Fetching presets from an HTTP server","text":"<p>If your desired platform is not yet supported, or if you want presets to work when you run Renovate with <code>--platform=local</code>, you can specify presets using HTTP URLs:</p> <pre><code>{\n  \"extends\": [\n    \"http://my.server/users/me/repos/renovate-presets/raw/default.json?at=refs%2Fheads%2Fmain\"\n  ]\n}\n</code></pre> <p>Parameters are supported similar to other methods:</p> <pre><code>{\n  \"extends\": [\n    \"http://my.server/users/me/repos/renovate-presets/raw/default.json?at=refs%2Fheads%2Fmain(param)\"\n  ]\n}\n</code></pre>"},{"location":"config-presets/#templating-presets","title":"Templating presets","text":"<p>You can use Handlebars templates to be flexible with your presets. This can be handy when you want to include presets conditionally.</p> <p>Note</p> <p>The template only supports a small subset of options, but you can extend them via <code>customEnvVariables</code>.</p> <p>Read the templates section to learn more.</p>"},{"location":"config-presets/#example-use-case","title":"Example use-case","text":"<p>The following example shows a self-hosted Renovate preset located in a GitLab repository called <code>renovate/presets</code>.</p> <pre><code>{\n  \"extends\": [\"local&gt;renovate/presets\"]\n}\n</code></pre> <p>Usually you want to validate the preset before you put it in your Renovate configuration Here is an example of how you can use templating to validate and load the preset on a branch level:</p> <pre><code>// config.js\nmodule.exports = {\n  customEnvVariables: {\n    GITLAB_REF: process.env.CI_COMMIT_REF_NAME || 'main',\n  },\n  extends: ['local&gt;renovate/presets#{{ env.GITLAB_REF }}'],\n};\n</code></pre>"},{"location":"config-presets/#contributing-to-presets","title":"Contributing to presets","text":"<p>Have you configured a rule that could help others? Please consider contributing it to the Renovate repository so that it gains higher visibility and saves others from reinventing the same thing.</p> <p>Create a discussion to propose your preset to the Renovate maintainers. The maintainers can also help improve the preset, and let you know where to put it in the code. If you are proposing a \"monorepo\" preset addition then it's OK to raise a PR directly as that can be more efficient than a GitHub Discussion.</p>"},{"location":"config-presets/#grouporganization-level-presets","title":"Group/Organization level presets","text":"<p>Whenever repository onboarding happens, Renovate checks for a a default config to extend. Renovate will check for a repository called <code>renovate-config</code> with a <code>default.json</code> file in the parent user/group/org of the repository. On platforms that support nested groups (e.g. GitLab), Renovate will check for this repository at each level of grouping, from nearest to furthest, and use the first one it finds. On all platforms, it will then look for a repository named like <code>.{{platform}}</code> (e.g. <code>.github</code>) with a <code>renovate-config.json</code>, under the same top-level user/group/org.</p> <p>If found, that repository's preset will be suggested as the sole extended preset, and any existing <code>onboardingConfig</code> config will be ignored/overridden. For example the result may be:</p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"local&gt;myorgname/.github:renovate-config\"]\n}\n</code></pre>"},{"location":"config-presets/#npm-hosted-presets","title":"npm-hosted presets","text":"<p>Warning</p> <p>Using npm-hosted presets is deprecated, we recommend you do not follow these instructions and instead use a <code>local</code> preset.</p> <p>If you manage multiple repositories using Renovate and want the same custom config across all or most of them, then you might want to consider publishing your own preset config so that you can \"extend\" it in every applicable repository. That way when you want to change your Renovate configuration you can make the change in one location rather than having to copy/paste it to every repository individually.</p> <p>Let's say that your username on npm and elsewhere is \"fastcore\". In that case, you can choose between publishing your preset config package as <code>@fastcore/renovate-config</code> or <code>renovate-config-fastcore</code>. Let's assume you choose <code>renovate-config-fastcore</code> as the package name.</p> <p>You then need to publish the <code>renovate-config-fastcore</code> package where the <code>package.json</code> has the field <code>renovate-config</code> and then put your config under the field <code>default</code>. For example:</p> <pre><code>{\n  \"name\": \"renovate-config-fastcore\",\n  \"version\": \"0.0.1\",\n  \"renovate-config\": {\n    \"default\": {\n      \"extends\": [\"config:recommended\", \"schedule:nonOfficeHours\"]\n    }\n  }\n}\n</code></pre> <p>Then in each of your repositories you can add your Renovate config like:</p> <pre><code>{\n  \"extends\": [\"fastcore\"]\n}\n</code></pre> <p>Any repository including this config will then adopt the rules of the default <code>library</code> preset but schedule it on weeknights or weekends.</p> <p>If you prefer to publish using the namespace <code>@fastcore/renovate-config</code> then you would use the <code>@</code> prefix instead:</p> <pre><code>{\n  \"extends\": [\"@fastcore\"]\n}\n</code></pre>"},{"location":"config-validation/","title":"Config Validation","text":"<p>You can check your Renovate configuration with a standalone program called <code>renovate-config-validator</code>. All <code>renovate</code> distributions include this program.</p>"},{"location":"config-validation/#default-behavior","title":"Default behavior","text":"<p>When you run <code>renovate-config-validator</code> with no arguments it will check:</p> <ul> <li>all default locations (if files exist)</li> <li>the <code>RENOVATE_CONFIG_FILE</code> environment variable</li> </ul> <p>For example:</p> <pre><code>$ npx --yes --package renovate -- renovate-config-validator\n INFO: Validating renovate.json\n INFO: Config validated successfully\n</code></pre> <p>If you want to run <code>renovate-config-validator</code> while using a custom filename for your renovate config file, you will need to pass the filename as cli argument.</p>"},{"location":"config-validation/#strict-mode","title":"Strict mode","text":"<p>By default, the validator program fails with a non-zero exit code if there are any validation warnings or errors. You can pass the <code>--strict</code> flag to make it fail if a scanned config needs migration:</p> Strict mode validation<pre><code>$ npx --yes --package renovate -- renovate-config-validator --strict\n INFO: Validating renovate.json\n WARN: Config migration necessary\n       \"oldConfig\": {\n         \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n         \"extends\": [ \"config:base\" ]\n       },\n       \"newConfig\": {\n         \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n         \"extends\": [ \"config:recommended\" ]\n       },\n</code></pre>"},{"location":"config-validation/#pass-file-to-check-as-cli-arguments","title":"Pass file to check as CLI arguments","text":"<p>You can pass the file you want to check to the <code>renovate-config-validator</code> program with a CLI argument. This can be handy to check a config file with a non-default name, like when you're using preset repositories. For example:</p> <pre><code>$ npx --yes --package renovate -- renovate-config-validator first_config.json\n INFO: Validating first_config_.json\n INFO: Config validated successfully\n</code></pre>"},{"location":"config-validation/#validate-your-config-automatically","title":"Validate your config automatically","text":"<p>You can create a pre-commit hook to validate your configuration automatically. Go to the <code>renovatebot/pre-commit-hooks</code> repository for more information.</p>"},{"location":"config-validation/#validation-of-renovate-config-change-prs","title":"Validation of Renovate config change PRs","text":"<p>Renovate can validate configuration changes in Pull Requests when you use a special branch name.</p> <p>Follow these steps to validate your configuration:</p> <ol> <li>Create a new Git branch that matches the <code>{{branchPrefix}}reconfigure</code> pattern. For example, if you're using the default prefix <code>renovate/</code>, your branch name must be <code>renovate/reconfigure</code>.</li> <li>Commit your updated Renovate config file to this branch, and push it to your Git hosting platform.</li> </ol> <p>The next time Renovate runs on that repo it will:</p> <ol> <li>Search for a branch that matches the special reconfigure pattern.</li> <li>Check for a config file in the reconfigure branch. Renovate can even find a renamed configuration file (compared to the config file in the default branch).</li> <li>Add a passing or failing status to the branch, depending on the outcome of the config validation run.</li> <li>If there's an open pull request with validation errors from the reconfigure branch then Renovate comments in the PR with details.</li> <li>Validate each commit the next time Renovate runs on the repository, until the PR is merged.</li> </ol>"},{"location":"configuration-options/","title":"Configuration Options","text":"<p>This document describes all the configuration options you may use in a Renovate configuration file. Any config you define applies to the whole repository (e.g. if you have a monorepo).</p> <p>You can store your Renovate configuration file in one of these locations:</p> <ol> <li><code>renovate.json</code></li> <li><code>renovate.json5</code></li> <li><code>.github/renovate.json</code></li> <li><code>.github/renovate.json5</code></li> <li><code>.gitlab/renovate.json</code></li> <li><code>.gitlab/renovate.json5</code></li> <li><code>.renovaterc</code></li> <li><code>.renovaterc.json</code></li> <li><code>.renovaterc.json5</code></li> <li><code>package.json</code> (within a <code>\"renovate\"</code> section)</li> </ol> <p>Or in a custom file present within the <code>configFileNames</code>. The bot first checks all the files in the <code>configFileNames</code> array before checking from the above file list.</p> <p>Warning</p> <p>Storing the Renovate configuration in a <code>package.json</code> file is deprecated and support may be removed in the future.</p> <p>Note</p> <p>Renovate supports <code>JSONC</code> for <code>.json</code> files and any config files without file extension (e.g. <code>.renovaterc</code>).  We also recommend you prefer using <code>JSONC</code> within a <code>.json</code> file to using a <code>.json5</code> file if you want to add comments.</p> <p>When Renovate runs on a repository, it tries to find the configuration files in the order listed above. Renovate stops the search after it finds the first match.</p> <p>Renovate always uses the config from the repository's default branch, even if that configuration specifies <code>baseBranchPatterns</code>. Renovate does not read/override the config from within each base branch if present.</p> <p>Also, be sure to check out Renovate's shareable config presets to save yourself from reinventing any wheels. Shareable config presets only work with the JSON format.</p> <p>If you have any questions about the config options, or want to get help/feedback about a config, go to the discussions tab in the Renovate repository and start a new \"config help\" discussion. We will do our best to answer your question(s).</p> <p>A <code>subtype</code> in the configuration table specifies what type you're allowed to use within the main element.</p> <p>If a config option has a <code>parent</code> defined, it means it's only allowed to configure it within an object with the parent name, such as <code>packageRules</code> or <code>hostRules</code>.</p> <p>When an array or object configuration option is <code>mergeable</code>, it means that values inside it will be added to any existing object or array that existed with the same name.</p> <p>Note</p> <p>Config options with <code>type=string</code> are always non-mergeable, so <code>mergeable=false</code>.</p>"},{"location":"configuration-options/#abandonmentthreshold","title":"abandonmentThreshold","text":"<p>Flags packages that have not been updated within this period as abandoned.</p> Name Value type string cli <code>--abandonment-threshold</code> env <code>RENOVATE_ABANDONMENT_THRESHOLD</code> <p>The <code>abandonmentThreshold</code> option allows Renovate to flag packages as abandoned when they haven't received updates for a specified period of time.</p> <p>Renovate adds an <code>isAbandoned</code> boolean property to the package lookup result when:</p> <ul> <li><code>abandonmentThreshold</code> is defined (not <code>null</code>)</li> <li>The package has a <code>mostRecentTimestamp</code> timestamp available from the datasource</li> </ul> <p>The <code>mostRecentTimestamp</code> timestamp represents the release date of the highest version, but only if that version also has the most recent timestamp among all releases. This ensures abandonment detection is based on normal package release patterns.</p> <p>If a package's most recent release date plus the <code>abandonmentThreshold</code> duration is in the past, the package is marked as abandoned (<code>isAbandoned: true</code>).</p> <p>This option accepts time duration strings like <code>1 year</code>, <code>6 months</code>, <code>90 days</code>, etc.</p> <p>Example usage:</p> <pre><code>{\n  \"abandonmentThreshold\": \"2 years\"\n}\n</code></pre> <p>You can also apply this setting selectively using <code>packageRules</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"abandonmentThreshold\": \"1 year\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#addlabels","title":"addLabels","text":"<p>Labels to add to Pull Request.</p> Name Value type array subType string mergeable true cli <code>--add-labels</code> env <code>RENOVATE_ADD_LABELS</code> default `[]` <p>The <code>labels</code> field is non-mergeable, meaning that any config setting a list of PR labels will replace any existing list. If you want to append labels for matched rules, then define an <code>addLabels</code> array with one (or more) label strings. All matched <code>addLabels</code> strings will be attached to the PR.</p> <p>Consider this example:</p> <pre><code>{\n  \"labels\": [\"dependencies\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"labels\": [\"linting\"]\n    },\n    {\n      \"matchDepTypes\": [\"optionalDependencies\"],\n      \"addLabels\": [\"optional\"]\n    }\n  ]\n}\n</code></pre> <p>With the above config:</p> <ul> <li>Optional dependencies will have the labels <code>dependencies</code> and <code>optional</code></li> <li>ESLint dependencies will have the label <code>linting</code></li> <li>All other dependencies will have the label <code>dependencies</code></li> </ul> <p>If you want to use dynamic labels, you can use templates such as this example using <code>depName</code> for <code>addLabels</code>:</p> <pre><code>{\n  \"addLabels\": [\"{{depName}}\"]\n}\n</code></pre> <p>Note</p> <p>Keep your labels within the maximum character limit for your Git hosting platform. Renovate usually truncates labels to 50 characters, except for GitLab, which has a 255 character limit.</p>"},{"location":"configuration-options/#additionalbranchprefix","title":"additionalBranchPrefix","text":"<p>Additional string value to be appended to <code>branchPrefix</code>.</p> Name Value type string default <code>\"\"</code> env <code>RENOVATE_ADDITIONAL_BRANCH_PREFIX</code> <p>By default, the value for this config option is an empty string. Normally you don't need to set this config option.</p> <p>Here's an example where <code>additionalBranchPrefix</code> can help you. Say you're using a monorepo and want to split pull requests based on the location of the package definition, so that individual teams can manage their own Renovate pull requests. This can be done with this configuration:</p> <pre><code>{\n  \"additionalBranchPrefix\": \"{{parentDir}}-\"\n}\n</code></pre>"},{"location":"configuration-options/#additionalreviewers","title":"additionalReviewers","text":"<p>Additional reviewers for Pull Requests (in contrast to <code>reviewers</code>, this option adds to the existing reviewer list, rather than replacing it).</p> Name Value type array subType string mergeable true cli <code>--additional-reviewers</code> env <code>RENOVATE_ADDITIONAL_REVIEWERS</code> default `[]` <p>This option adds to the existing reviewer list, rather than replacing it like <code>reviewers</code>.</p> <p>Use <code>additionalReviewers</code> when you want to add to a preset or base list, without replacing the original. For example, when adding focused reviewers for a specific package group.</p> <p>Please note that Reviewers are only added during creation of a PR, but are not modified afterwards.</p>"},{"location":"configuration-options/#assignautomerge","title":"assignAutomerge","text":"<p>Assign reviewers and assignees even if the PR is to be automerged.</p> Name Value type boolean default <code>false</code> cli <code>--assign-automerge</code> env <code>RENOVATE_ASSIGN_AUTOMERGE</code> <p>By default, Renovate will not assign reviewers and assignees to an automerge-enabled PR unless it fails status checks. By configuring this setting to <code>true</code>, Renovate will instead always assign reviewers and assignees for automerging PRs at time of creation.</p>"},{"location":"configuration-options/#assignees","title":"assignees","text":"<p>Assignees for Pull Request (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--assignees</code> env <code>RENOVATE_ASSIGNEES</code> default `[]` <p>Must be valid usernames on the platform in use. This setting is following the same convention as <code>reviewers</code> for platform-specific behaviors such as Github teams.</p>"},{"location":"configuration-options/#assigneesfromcodeowners","title":"assigneesFromCodeOwners","text":"<p>Determine assignees based on configured code owners and changes in PR.</p> Name Value type boolean default <code>false</code> cli <code>--assignees-from-code-owners</code> env <code>RENOVATE_ASSIGNEES_FROM_CODE_OWNERS</code> <p>If enabled Renovate tries to determine PR assignees by matching rules defined in a CODEOWNERS file against the changes in the PR.</p> <p>Read the docs for your platform for details on syntax and allowed file locations:</p> <ul> <li>GitHub Docs, About code owners</li> <li>GitLab, Code Owners</li> <li>Bitbucket, Set up and use code owners</li> </ul>"},{"location":"configuration-options/#assigneessamplesize","title":"assigneesSampleSize","text":"<p>Take a random sample of given size from <code>assignees</code>.</p> Name Value type integer cli <code>--assignees-sample-size</code> env <code>RENOVATE_ASSIGNEES_SAMPLE_SIZE</code> <p>If configured, Renovate will take a random sample of given size from assignees and assign them only, instead of assigning the entire list of <code>assignees</code> you have configured.</p>"},{"location":"configuration-options/#autoapprove","title":"autoApprove","text":"<p>Set to <code>true</code> to automatically approve PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms azure, gerrit, gitlab cli <code>--auto-approve</code> env <code>RENOVATE_AUTO_APPROVE</code> <p>Setting this to <code>true</code> will automatically approve the PRs.</p> <p>You can also configure this using <code>packageRules</code> if you want to use it selectively (e.g. per-package).</p>"},{"location":"configuration-options/#autoreplaceglobalmatch","title":"autoReplaceGlobalMatch","text":"<p>Control whether replacement regular expressions are global matches or only the first match.</p> Name Value type boolean default <code>true</code> cli <code>--auto-replace-global-match</code> env <code>RENOVATE_AUTO_REPLACE_GLOBAL_MATCH</code> <p>Setting this to <code>false</code> will replace only the first match during replacements updates.</p> <p>Disabling this is useful for situations where values are repeated within the dependency string, such as when the <code>currentVersion</code> is also featured somewhere within the <code>currentDigest</code>, but you only want to replace the first instance.</p> <p>Consider this example:</p> <pre><code>FROM java:8@sha256:0e8b2a860\n</code></pre> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"java\"],\n      \"replacementName\": \"eclipse-temurin\",\n      \"replacementVersion\": \"11\"\n    }\n  ]\n}\n</code></pre> <p>With the above replacement scenario, the current dependency has a version of <code>8</code>, which also features several times within the digest section.</p> <p>When using the default <code>autoReplaceGlobalMatch</code> configuration, Renovate will try to replace all instances of <code>8</code> within the dependency string with the <code>replacementVersion</code> value of <code>11</code>. This will replace more than is intended and will be caught during replacement validation steps, resulting in the replacement PR to not be created.</p> <p>When setting <code>autoReplaceGlobalMatch</code> configuration to <code>false</code>, Renovate will only replace the first occurrence of <code>8</code> and will successfully create a replacement PR.</p>"},{"location":"configuration-options/#automerge","title":"automerge","text":"<p>Whether to automerge branches/PRs automatically, without human intervention.</p> Name Value type boolean default <code>false</code> cli <code>--automerge</code> env <code>RENOVATE_AUTOMERGE</code> <p>By default, Renovate raises PRs but leaves them to someone or something else to merge them. By configuring this setting, you allow Renovate to automerge PRs or even branches. Using automerge reduces the amount of human intervention required.</p> <p>Usually you won't want to automerge all PRs, for example most people would want to leave major dependency updates to a human to review first. You could configure Renovate to automerge all but major this way:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"minor\", \"patch\", \"pin\", \"digest\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre> <p>Also note that this option can be combined with other nested settings, such as dependency type. So for example you could choose to automerge all (passing) <code>devDependencies</code> only this way:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre> <p>Note</p> <p>Branches creation follows <code>schedule</code> and the automerge follows <code>automergeSchedule</code>.</p> <p>Note</p> <p>On Azure there can be a delay between a PR being set as completed by Renovate, and Azure merging the PR / finishing its tasks. Renovate tries to delay until Azure is in the expected state, but it will continue if it takes too long. In some cases this can result in a dependency not being merged, and a fresh PR being created for the dependency.</p> <p>Note</p> <p>By default, Renovate will not assign reviewers and assignees to an automerge-enabled PR unless it fails status checks. By configuring <code>assignAutomerge</code> setting to <code>true</code>, Renovate will instead always assign reviewers and assignees for automerging PRs at time of creation.</p> <p>Automerge and GitHub branch protection rules</p> <p>You must select at least one status check in the Require status checks to pass before merging section of your branch protection rules on GitHub, if you match all three conditions:</p> <ul> <li><code>automerge=true</code></li> <li><code>platformAutomerge=true</code>, Renovate defaults to <code>true</code></li> <li>You use GitHub's Require status checks to pass before merging branch protection rule</li> </ul> <p>If you don't select any status check, and you use platform automerge, then GitHub might automerge PRs with failing tests!</p>"},{"location":"configuration-options/#automergecomment","title":"automergeComment","text":"<p>PR comment to add to trigger automerge. Only used if <code>automergeType=pr-comment</code>.</p> Name Value type string default <code>\"automergeComment\"</code> cli <code>--automerge-comment</code> env <code>RENOVATE_AUTOMERGE_COMMENT</code> <p>Use this only if you configure <code>automergeType=\"pr-comment\"</code>.</p> <p>Example use:</p> <pre><code>{\n  \"automerge\": true,\n  \"automergeType\": \"pr-comment\",\n  \"automergeComment\": \"bors: r+\"\n}\n</code></pre>"},{"location":"configuration-options/#automergeschedule","title":"automergeSchedule","text":"<p>Limit automerge to these times of day or week.</p> Name Value type array subType string cli <code>--automerge-schedule</code> default <pre><code>[\"at any time\"]\n</code></pre> default `[]` <p>Use the <code>automergeSchedule</code> option to define times of week or month during which Renovate may automerge its PRs. The default value for <code>automergeSchedule</code> is \"at any time\", which functions the same as setting a <code>null</code> schedule. To configure this option refer to <code>schedule</code> as the syntax is the same.</p> <p>Warning</p> <p>When <code>platformAutomerge</code> is enabled, Renovate enqueues the platform PR automerge at time of creation, so the schedule specified in <code>automergeSchedule</code> cannot be followed. If it's essential that automerging only happens within the specific <code>automergeSchedule</code> time window, then you need to set <code>platformAutomerge</code> to <code>false</code> and instead rely on Renovate's automerge instead of the platform one.</p>"},{"location":"configuration-options/#automergestrategy","title":"automergeStrategy","text":"<p>The merge strategy to use when automerging PRs. Used only if <code>automergeType=pr</code>.</p> Name Value type string allowedValues auto, fast-forward, merge-commit, rebase, rebase-merge, squash default <code>\"auto\"</code> supportedPlatforms azure, bitbucket, forgejo, gitea, github cli <code>--automerge-strategy</code> env <code>RENOVATE_AUTOMERGE_STRATEGY</code> <p>The automerge strategy defaults to <code>auto</code>, so Renovate decides how to merge pull requests as best it can. If possible, Renovate follows the merge strategy set on the platform itself for the repository.</p> <p>If you've set <code>automerge=true</code> and <code>automergeType=pr</code> for any of your dependencies, then you may choose what automerge strategy Renovate uses by setting the <code>automergeStrategy</code> config option. If you're happy with the default behavior, you don't need to do anything.</p> <p>You may choose from these values:</p> <ul> <li><code>auto</code>, Renovate decides how to merge</li> <li><code>fast-forward</code>, \"fast-forwarding\" the main branch reference, no new commits in the resultant tree</li> <li><code>merge-commit</code>, create a new merge commit</li> <li><code>rebase</code>, rewrite history as part of the merge, but usually keep the individual commits</li> <li><code>rebase-merge</code>, create a new merge commit, but rebase the commits prior merging (azure-only)</li> <li><code>squash</code>, flatten the commits that are being merged into a single new commit</li> </ul> <p>Platforms may only support some of these merge strategies.</p> <p>If the chosen automerge strategy is not supported on your platform then Renovate stops automerging. In that case you'll have to set a supported automerge strategy.</p>"},{"location":"configuration-options/#automergetype","title":"automergeType","text":"<p>How to automerge, if enabled.</p> Name Value type string allowedValues branch, pr, pr-comment default <code>\"pr\"</code> cli <code>--automerge-type</code> env <code>RENOVATE_AUTOMERGE_TYPE</code> <p>This setting is only applicable if you opt in to configure <code>automerge</code> to <code>true</code> for any of your dependencies.</p> <p>Automerging defaults to using Pull Requests (<code>automergeType=\"pr\"</code>). In that case Renovate first creates a branch and associated Pull Request, and then automerges the PR on a subsequent run once it detects the PR's status checks are \"green\". If by the next run the PR is already behind the base branch it will be automatically rebased, because Renovate only automerges branches which are up-to-date and green. If Renovate is scheduled for hourly runs on the repository but commits are made every 15 minutes to the main branch, then an automerge like this will keep getting deferred with every rebase.</p> <p>Tip</p> <p>If you have no tests but still want Renovate to automerge, you need to add <code>\"ignoreTests\": true</code> to your configuration.</p> <p>If you prefer that Renovate more silently automerge without Pull Requests at all, you can configure <code>\"automergeType\": \"branch\"</code>. In this case Renovate will:</p> <ul> <li>Create the branch, wait for test results</li> <li>Rebase it any time it gets out of date with the base branch</li> <li>Automerge the branch commit if it's: (a) up-to-date with the base branch, and (b) passing all tests</li> <li>As a backup, raise a PR only if either: (a) tests fail, or (b) tests remain pending for too long (default: 24 hours)</li> </ul> <p>The final value for <code>automergeType</code> is <code>\"pr-comment\"</code>, intended only for users who already have a \"merge bot\" such as bors-ng and want Renovate to not actually automerge by itself and instead tell <code>bors-ng</code> to merge for it, by using a comment in the PR. If you're not already using <code>bors-ng</code> or similar, don't worry about this option.</p>"},{"location":"configuration-options/#azureworkitemid","title":"azureWorkItemId","text":"<p>The id of an existing work item on Azure Boards to link to each PR.</p> Name Value type integer default 0 supportedPlatforms azure cli <code>--azure-work-item-id</code> env <code>RENOVATE_AZURE_WORK_ITEM_ID</code> <p>When creating a PR in Azure DevOps, some branches can be protected with branch policies to check for linked work items. Creating a work item in Azure DevOps is beyond the scope of Renovate, but Renovate can link an already existing work item when creating PRs.</p>"},{"location":"configuration-options/#basebranchpatterns","title":"baseBranchPatterns","text":"<p>List of one or more custom base branches defined as exact strings and/or via regex expressions.</p> Name Value type array subType string env <code>RENOVATE_BASE_BRANCH_PATTERNS</code> default `[]` <p>This configuration option was formerly known as <code>baseBranches</code>.</p> <p>By default, Renovate will detect and process only the repository's default branch. For most projects, this is the expected approach. Renovate also allows users to explicitly configure <code>baseBranchPatterns</code>, e.g. for use cases such as:</p> <ul> <li>You wish Renovate to process only a non-default branch, e.g. <code>dev</code>: <code>\"baseBranchPatterns\": [\"dev\"]</code></li> <li>You have multiple release streams you need Renovate to keep up to date, e.g. in branches <code>main</code> and <code>next</code>: <code>\"baseBranchPatterns\": [\"main\", \"next\"]</code></li> <li>You want to update your main branch and consistently named release branches, e.g. <code>main</code> and <code>release/&lt;version&gt;</code>: <code>\"baseBranchPatterns\": [\"main\", \"/^release\\\\/.*/\"]</code></li> </ul> <p>It's possible to add this setting into the <code>renovate.json</code> file as part of the \"Configure Renovate\" onboarding PR. If so then Renovate will reflect this setting in its description and use package file contents from the custom base branch(es) instead of default.</p> <p>The simplest approach is exact matches, e.g. <code>[\"main\", \"dev\"]</code>. <code>baseBranchPatterns</code> also supports Regular Expressions that must begin and end with <code>/</code>, e.g.:</p> <pre><code>{\n  \"baseBranchPatterns\": [\"main\", \"/^release\\\\/.*/\"]\n}\n</code></pre> <p>You can negate the regex by prefixing it with <code>!</code>. Only use a single negation and do not mix it with other branch names, since all branches are combined with <code>or</code>. With a negation, all branches except those matching the regex will be added to the result:</p> <pre><code>{\n  \"baseBranchPatterns\": [\"!/^pre-release\\\\/.*/\"]\n}\n</code></pre> <p>You can also use the special <code>\"$default\"</code> string to denote the repository's default branch, which is useful if you have it in an org preset, e.g.:</p> <pre><code>{\n  \"baseBranchPatterns\": [\"$default\", \"/^release\\\\/.*/\"]\n}\n</code></pre> <p>Note</p> <p>Do not use the <code>baseBranchPatterns</code> config option when you've set a <code>forkToken</code>. You may need a <code>forkToken</code> when you're using the Forking Renovate app.</p>"},{"location":"configuration-options/#bbautoresolveprtasks","title":"bbAutoResolvePrTasks","text":"<p>The PR tasks will be automatically completed after the PR is raised.</p> Name Value type boolean default <code>false</code> supportedPlatforms bitbucket cli <code>--bb-auto-resolve-pr-tasks</code> env <code>RENOVATE_BB_AUTO_RESOLVE_PR_TASKS</code> <p>Configuring this to <code>true</code> means that Renovate will mark all PR Tasks as complete.</p>"},{"location":"configuration-options/#bbusedefaultreviewers","title":"bbUseDefaultReviewers","text":"<p>Use the default reviewers (Bitbucket only).</p> Name Value type boolean default <code>true</code> supportedPlatforms bitbucket, bitbucket-server cli <code>--bb-use-default-reviewers</code> env <code>RENOVATE_BB_USE_DEFAULT_REVIEWERS</code> <p>Configuring this to <code>true</code> means that Renovate will detect and apply the default reviewers rules to PRs (Bitbucket only).</p>"},{"location":"configuration-options/#branchconcurrentlimit","title":"branchConcurrentLimit","text":"<p>Limit to a maximum of x concurrent branches. 0 means no limit, <code>null</code> (default) inherits value from <code>prConcurrentLimit</code>.</p> Name Value type integer cli <code>--branch-concurrent-limit</code> env <code>RENOVATE_BRANCH_CONCURRENT_LIMIT</code> <p>By default, Renovate won't enforce any concurrent branch limits. The <code>config:recommended</code> preset that many extend from limits the number of concurrent branches to 10, but in many cases a limit as low as 3 or 5 can be most efficient for a repository.</p> <p>If you want the same limit for both concurrent branches and concurrent PRs, then set a value for <code>prConcurrentLimit</code> and it will be re-used for branch calculations too. But if you want to allow more concurrent branches than concurrent PRs, you can configure both values (e.g. <code>branchConcurrentLimit=5</code> and <code>prConcurrentLimit=3</code>).</p> <p>This limit is enforced on a per-repository basis.</p> <p>Example config:</p> <pre><code>{\n  \"branchConcurrentLimit\": 3\n}\n</code></pre> <p>Warning</p> <p>Leaving PRs/branches as unlimited or as a high number increases the time it takes for Renovate to process a repository. If you find that Renovate is too slow when rebasing out-of-date branches, decrease the <code>branchConcurrentLimit</code>.</p> <p>If you have too many concurrent branches which rebase themselves each run, Renovate can take a lot of time to rebase. Solutions:</p> <ul> <li>Decrease the concurrent branch limit (note: this won't go and delete any existing, so won't have an effect until you either merge or close existing ones manually)</li> <li>Remove automerge and/or automatic rebasing (set <code>rebaseWhen</code> to <code>conflicted</code>). However if you have branch protection saying PRs must be up to date then it's not ideal to remove automatic rebasing</li> </ul>"},{"location":"configuration-options/#branchname","title":"branchName","text":"<p>Branch name template.</p> Name Value type string default <code>\"{{{branchPrefix}}}{{{additionalBranchPrefix}}}{{{branchTopic}}}\"</code> env <code>RENOVATE_BRANCH_NAME</code> <p>If you truly need to configure this then it probably means either:</p> <ul> <li>You are hopefully mistaken, and there's a better approach you should use, so open a new \"config help\" discussion at the Renovate discussions tab or</li> <li>You have a use case we didn't expect, please open a discussion to see if we want to get a feature request from you</li> </ul> <p>This feature has been deprecated</p> <p>We strongly recommended that you avoid configuring this field directly. Please edit <code>branchPrefix</code>, <code>additionalBranchPrefix</code>, or <code>branchTopic</code> instead.</p>"},{"location":"configuration-options/#branchnamestrict","title":"branchNameStrict","text":"<p>Whether to be strict about the use of special characters within the branch name.</p> Name Value type boolean default <code>false</code> cli <code>--branch-name-strict</code> env <code>RENOVATE_BRANCH_NAME_STRICT</code> <p>If <code>true</code>, Renovate removes special characters when slugifying the branch name:</p> <ul> <li>all special characters are removed</li> <li>only alphabetic characters are allowed</li> <li>hyphens <code>-</code> are used to separate sections</li> </ul> <p>The default <code>false</code> behavior will mean that special characters like <code>.</code> and <code>/</code> may end up in the branch name.</p> <p>Note</p> <p>Renovate will not apply any search/replace to the <code>branchPrefix</code> part of the branch name. If you don't want any <code>/</code> in your branch name then you will also need to change <code>branchPrefix</code> from the default <code>renovate/</code> value to something like <code>renovate-</code>.</p>"},{"location":"configuration-options/#branchprefix","title":"branchPrefix","text":"<p>Prefix to use for all branch names.</p> Name Value type string default <code>\"renovate/\"</code> cli <code>--branch-prefix</code> env <code>RENOVATE_BRANCH_PREFIX</code> <p>You can modify this field if you want to change the prefix used. For example if you want branches to be like <code>deps/eslint-4.x</code> instead of <code>renovate/eslint-4.x</code> then you configure <code>branchPrefix</code> = <code>deps/</code>. Or if you wish to avoid forward slashes in branch names then you could use <code>renovate_</code> instead, for example.</p> <p><code>branchPrefix</code> must be configured at the root of the configuration (e.g. not within any package rule) and is not allowed to use template values. e.g. instead of <code>renovate/{{parentDir}}-</code>, configure the template part in <code>additionalBranchPrefix</code>, like <code>\"additionalBranchPrefix\": \"{{parentDir}}-\"</code>.</p> <p>Note</p> <p>This setting does not change the default onboarding branch name, i.e. <code>renovate/configure</code>. If you wish to change that too, you need to also configure the field <code>onboardingBranch</code> in your global bot config.</p>"},{"location":"configuration-options/#branchprefixold","title":"branchPrefixOld","text":"<p>Old branchPrefix value to check for existing PRs.</p> Name Value type string default <code>\"renovate/\"</code> cli <code>--branch-prefix-old</code> env <code>RENOVATE_BRANCH_PREFIX_OLD</code> <p>Renovate uses branch names as part of its checks to see if an update PR was created previously, and already merged or ignored. If you change <code>branchPrefix</code>, then no previously closed PRs will match, which could lead to Renovate recreating PRs in such cases. Instead, set the old <code>branchPrefix</code> value as <code>branchPrefixOld</code> to allow Renovate to look for those branches too, and avoid this happening.</p>"},{"location":"configuration-options/#branchtopic","title":"branchTopic","text":"<p>Branch topic.</p> Name Value type string default <code>\"{{{depNameSanitized}}}-{{{newMajor}}}{{#if separateMinorPatch}}{{#if isPatch}}.{{{newMinor}}}{{/if}}{{/if}}{{#if separateMultipleMinor}}{{#if isMinor}}.{{{newMinor}}}{{/if}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}\"</code> env <code>RENOVATE_BRANCH_TOPIC</code> <p>This field is combined with <code>branchPrefix</code> and <code>additionalBranchPrefix</code> to form the full <code>branchName</code>. <code>branchName</code> uniqueness is important for dependency update grouping or non-grouping so be cautious about ever editing this field manually. This is an advanced field, and it's recommend you seek a config review before applying it.</p>"},{"location":"configuration-options/#bumpversion","title":"bumpVersion","text":"<p>Bump the version in the package file being updated.</p> Name Value type string allowedValues major, minor, patch, prerelease supportedManagers helmv3, npm, nuget, maven, sbt cli <code>--bump-version</code> env <code>RENOVATE_BUMP_VERSION</code> default <code>null</code> <p>Currently, this config option only works with these managers:</p> <ul> <li><code>cargo</code></li> <li><code>helmv3</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>maven</code></li> <li><code>ocb</code></li> <li><code>pep621</code></li> <li><code>poetry</code></li> <li><code>sbt</code></li> </ul> <p>Raise a feature request if you want to use this config option with other package managers.</p> <p>Use <code>bumpVersion</code> if you want Renovate to update the <code>version</code> field in your package file when it updates the dependencies in that file. This can be handy when you have automated your package's release, as you you don't need extra steps after the Renovate upgrade, you can just release a new version.</p> <p>Configure this value to <code>\"prerelease\"</code>, <code>\"patch\"</code>, <code>\"minor\"</code> or <code>\"major\"</code> to have Renovate update the version in your edited package file. e.g. if you wish Renovate to always increase the target <code>package.json</code> version with a patch update, configure this to <code>\"patch\"</code>.</p> <p>For <code>npm</code> only you can also configure this field to <code>\"mirror:x\"</code> where <code>x</code> is the name of a package in the <code>package.json</code>. Doing so means that the <code>package.json</code> <code>version</code> field will mirror whatever the version is that <code>x</code> depended on. Make sure that version is a pinned version of course, as otherwise it won't be valid.</p> <p>For <code>sbt</code> note that Renovate will update the version string only for packages that have the version string in their project's <code>built.sbt</code> file.</p>"},{"location":"configuration-options/#bumpversions","title":"bumpVersions","text":"<p>A list of bumpVersion config options to bump generic version numbers.</p> Name Value type array subType object default `[]` <p>The <code>bumpVersions</code> option allows Renovate to update semantic version strings in your code when dependencies are updated. This is useful for files or version fields that Renovate does not natively support or for custom versioning needs.</p> <p>The option is an array of rules, each specifying how and where to bump versions. Each rule includes the following fields:</p> <ul> <li><code>filePatterns</code>: A list of regex patterns to match file names. These patterns follow Renovate's string pattern matching syntax. Templates can also be used for dynamic patterns.</li> <li><code>matchStrings</code>: An array of regex patterns to locate version strings within the matched files. Any of the regexes can match the content. Each pattern must include a named capture group <code>version</code> to extract the version string.</li> <li><code>bumpType</code>: Specifies the type of version bump which defaults to <code>patch</code>. This field supports templates for conditional logic. Supported values are documented in the bumpType section.</li> <li><code>name</code> (optional): A descriptive name for the rule, which is used in logs for easier identification.</li> </ul> <p>Tip</p> <p>You can use templates in <code>filePatternTemplates</code>, <code>bumpType</code>, and <code>matchStrings</code>. This way you can leverage the power of Renovate's templating engine to change based on the context of the upgrade.</p> <p>Here is an example of a <code>bumpVersions</code> configuration:</p> <pre><code>{\n  \"bumpVersions\": [\n    {\n      \"name\": \"Updating release version file\",\n      \"filePatterns\": [\".release-version\"],\n      \"bumpType\": \"minor\",\n      \"matchStrings\": [\"^(?&lt;version&gt;.+)$\"]\n    }\n  ]\n}\n</code></pre> <p>In this example:</p> <ul> <li>Renovate scans files named <code>.release-version</code>.</li> <li>It matches the entire file content as the version string.</li> <li>It bumps the version to the next minor release.</li> </ul> <p>Conditional Bumping with <code>packageRules</code>:</p> <p>You can use <code>packageRules</code> to apply <code>bumpVersions</code> conditionally. For example, to bump versions only for updates in the <code>charts/</code> directory:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"charts/**\"],\n      \"bumpVersions\": [\n        {\n          \"filePatterns\": [\"{{packageFileDir}}/Chart.{yaml,yml}\"],\n          \"matchStrings\": [\"version:\\\\s(?&lt;version&gt;[^\\\\s]+)\"],\n          \"bumpType\": \"{{#if isPatch}}patch{{else}}minor{{/if}}\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>In this configuration:</p> <ul> <li>If Renovate updates dependencies in the <code>charts/</code> directory check the <code>Chart.yaml</code> file next to the updated file.</li> <li>The version string is extracted from lines matching <code>version: &lt;value&gt;</code>.</li> <li>The <code>bumpType</code> is dynamically set to <code>patch</code> for if the dependency update is a patch update and <code>minor</code> otherwise.</li> </ul> <p>debugging <code>bumpVersions</code></p> <p>Use <code>logLevelRemap</code> to remap, <code>trace</code> log level messages to a higher level e.g. <code>debug</code>. All messages are prefixed with <code>bumpVersions</code> or <code>bumpVersions(&lt;name&gt;)</code> to help you filter them in the logs.</p> <pre><code>{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/bumpVersions/\",\n      \"newLogLevel\": \"debug\"\n    }\n  ]\n}\n</code></pre> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#bumptype","title":"bumpType","text":"<p>The semver level to use when bumping versions. This is used by the <code>bumpVersions</code> feature.</p> Name Value type string parents bumpVersions cli <code>--bump-type</code> env <code>RENOVATE_BUMP_TYPE</code> default <code>null</code> <p>The <code>bumpType</code> field specifies the type of version bump to apply. Supported values are:</p> <ul> <li><code>prerelease</code></li> <li><code>patch</code></li> <li><code>minor</code></li> <li><code>major</code></li> </ul> <p>This field supports templates for conditional logic. For example:</p> <pre><code>{\n  \"bumpType\": \"{{#if isPatch}}patch{{else}}minor{{/if}}\"\n}\n</code></pre> <p>In this example, the bump type is set to <code>patch</code> for patch updates and <code>minor</code> for all other cases.</p>"},{"location":"configuration-options/#filepatterns","title":"filePatterns","text":"<p>A list of patterns to match files that contain the version string.</p> Name Value type array subType string parents bumpVersions cli <code>--file-patterns</code> env <code>RENOVATE_FILE_PATTERNS</code> default `[]` <p>The <code>filePatterns</code> field defines which files should be scanned for version strings. It accepts one or more patterns following Renovate's string pattern matching syntax. Templates can also be used for dynamic patterns. See Templates for more information.</p> <p>For example:</p> <pre><code>{\n  \"filePatterns\": [\"**/version.txt\", \"{{packageFileDir}}/Chart.yaml\"]\n}\n</code></pre> <p>This configuration matches files named <code>version.txt</code> in any directory and <code>Chart.yaml</code> files in specific package directories.</p>"},{"location":"configuration-options/#name","title":"name","text":"<p>A name for the bumpVersion config. This is used for logging and debugging.</p> Name Value type string parents bumpVersions cli <code>--name</code> env <code>RENOVATE_NAME</code> default <code>null</code> <p>The <code>name</code> field is an optional identifier for the bump version rule. It is used in logs to help identify which rule is being applied.</p> <p>For example:</p> <pre><code>{\n  \"name\": \"Update release version\"\n}\n</code></pre> <p>This name will appear in Renovate logs, making it easier to debug or trace specific rules.</p>"},{"location":"configuration-options/#clonesubmodules","title":"cloneSubmodules","text":"<p>Set to <code>true</code> to initialize submodules during repository clone.</p> Name Value type boolean default <code>false</code> cli <code>--clone-submodules</code> env <code>RENOVATE_CLONE_SUBMODULES</code> <p>Enabling this option will mean that detected Git submodules will be cloned at time of repository clone. By default all will be cloned, but this can be customized by configuring <code>cloneSubmodulesFilter</code> too. Submodules are always cloned recursively.</p> <p>Important: private submodules aren't supported by Renovate, unless the underlying <code>ssh</code> layer already has the correct permissions.</p>"},{"location":"configuration-options/#clonesubmodulesfilter","title":"cloneSubmodulesFilter","text":"<p>List of submodules names or patterns to clone when cloneSubmodules=true.</p> Name Value type array subType string default <pre><code>[\"*\"]\n</code></pre> cli <code>--clone-submodules-filter</code> env <code>RENOVATE_CLONE_SUBMODULES_FILTER</code> default `[]` <p>Use this option together with <code>cloneSubmodules</code> if you wish to clone only a subset of submodules.</p> <p>This config option supports regex and glob filters, including negative matches. For more details on this syntax see Renovate's string pattern matching documentation.</p>"},{"location":"configuration-options/#commitbody","title":"commitBody","text":"<p>Commit message body template. Will be appended to commit message, separated by two line returns.</p> Name Value type string env <code>RENOVATE_COMMIT_BODY</code> default <code>null</code> <p>Configure this if you wish Renovate to add a commit body, otherwise Renovate uses a regular single-line commit.</p> <p>For example, To add <code>[skip ci]</code> to every commit you could configure:</p> <pre><code>{\n  \"commitBody\": \"[skip ci]\"\n}\n</code></pre> <p>Another example would be if you want to configure a DCO sign off to each commit.</p> <p>If you want Renovate to sign off its commits, add the <code>:gitSignOff</code> preset to your <code>extends</code> array:</p> <pre><code>{\n  \"extends\": [\":gitSignOff\"]\n}\n</code></pre>"},{"location":"configuration-options/#commitbodytable","title":"commitBodyTable","text":"<p>If enabled, append a table in the commit message body describing all updates in the commit.</p> Name Value type boolean default <code>false</code> cli <code>--commit-body-table</code> env <code>RENOVATE_COMMIT_BODY_TABLE</code>"},{"location":"configuration-options/#commitmessage","title":"commitMessage","text":"<p>Message to use for commit messages and pull request titles.</p> Name Value type string default <code>\"{{{commitMessagePrefix}}} {{{commitMessageAction}}} {{{commitMessageTopic}}} {{{commitMessageExtra}}} {{{commitMessageSuffix}}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE</code> <p>This feature has been deprecated</p> <p>We deprecated editing the <code>commitMessage</code> directly, and we recommend you stop using this config option. Instead use config options like <code>commitMessageAction</code>, <code>commitMessageExtra</code>, and so on, to create the commit message you want.</p>"},{"location":"configuration-options/#commitmessageaction","title":"commitMessageAction","text":"<p>Action verb to use in commit messages and PR titles.</p> Name Value type string default <code>\"Update\"</code> env <code>RENOVATE_COMMIT_MESSAGE_ACTION</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. Actions may be like <code>Update</code>, <code>Pin</code>, <code>Roll back</code>, <code>Refresh</code>, etc. Check out the default value for <code>commitMessage</code> to understand how this field is used.</p>"},{"location":"configuration-options/#commitmessageextra","title":"commitMessageExtra","text":"<p>Extra description used after the commit message topic - typically the version.</p> Name Value type string default <code>\"to {{#if isPinDigest}}{{{newDigestShort}}}{{else}}{{#if isMajor}}{{prettyNewMajor}}{{else}}{{#if isSingleVersion}}{{prettyNewVersion}}{{else}}{{#if newValue}}{{{newValue}}}{{else}}{{{newDigestShort}}}{{/if}}{{/if}}{{/if}}{{/if}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE_EXTRA</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. The \"extra\" is usually an identifier of the new version, e.g. \"to v1.3.2\" or \"to tag 9.2\".</p>"},{"location":"configuration-options/#commitmessagelowercase","title":"commitMessageLowerCase","text":"<p>Lowercase PR- and commit titles.</p> Name Value type string allowedValues auto, never default <code>\"auto\"</code> cli <code>--commit-message-lower-case</code> env <code>RENOVATE_COMMIT_MESSAGE_LOWER_CASE</code> <p>With <code>semanticCommits</code> pr- and commit-titles will by default (<code>\"auto\"</code>) be converted to all-lowercase. Set this to <code>\"never\"</code> to leave the titles untouched, allowing uppercase characters in semantic commit titles.</p>"},{"location":"configuration-options/#commitmessageprefix","title":"commitMessagePrefix","text":"<p>Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if <code>semanticCommits</code> is enabled.</p> Name Value type string env <code>RENOVATE_COMMIT_MESSAGE_PREFIX</code> default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. The \"prefix\" is usually an automatically applied semantic commit prefix, but it can also be statically configured.</p>"},{"location":"configuration-options/#commitmessagesuffix","title":"commitMessageSuffix","text":"<p>Suffix to add to end of commit messages and PR titles.</p> Name Value type string env <code>RENOVATE_COMMIT_MESSAGE_SUFFIX</code> default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to add a suffix to commit messages. Usually left empty except for internal use (multiple base branches, and vulnerability alerts).</p>"},{"location":"configuration-options/#commitmessagetopic","title":"commitMessageTopic","text":"<p>The upgrade topic/noun used in commit messages and PR titles.</p> Name Value type string default <code>\"dependency {{depName}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE_TOPIC</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>You can use <code>commitMessageTopic</code> to change the <code>commitMessage</code> and <code>prTitle</code> without copy/pasting the whole string. The \"topic\" usually refers to the dependency being updated, for example: <code>\"dependency react\"</code>.</p> <p>We recommend you use <code>matchManagers</code> and <code>commitMessageTopic</code> in a <code>packageRules</code> array to set the commit message topic, like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"github-actions\"],\n      \"commitMessageTopic\": \"{{depName}}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#composerignoreplatformreqs","title":"composerIgnorePlatformReqs","text":"<p>Configure use of <code>--ignore-platform-reqs</code> or <code>--ignore-platform-req</code> for the Composer package manager.</p> Name Value type array subType string cli <code>--composer-ignore-platform-reqs</code> env <code>RENOVATE_COMPOSER_IGNORE_PLATFORM_REQS</code> default `[]` <p>By default, Renovate will ignore Composer platform requirements as the PHP platform used by Renovate most probably won't match the required PHP environment of your project as configured in your <code>composer.json</code> file.</p> <p>Composer <code>2.2</code> and up will be run with <code>--ignore-platform-req='ext-*' --ignore-platform-req='lib-*'</code>, which ignores extension and library platform requirements but not the PHP version itself and should work in most cases.</p> <p>Older Composer versions will be run with <code>--ignore-platform-reqs</code>, which means that all platform constraints (including the PHP version) will be ignored by default. This can result in updated dependencies that are not compatible with your platform.</p> <p>To customize this behavior, you can explicitly ignore platform requirements (for example <code>ext-zip</code>) by setting them separately in this array. Each item will be added to the Composer command with <code>--ignore-platform-req</code>, resulting in it being ignored during its invocation. Note that this requires your project to use Composer V2, as V1 doesn't support excluding single platform requirements. The used PHP version will be guessed automatically from your <code>composer.json</code> definition, so <code>php</code> should not be added as explicit dependency.</p> <p>If an empty array is configured, Renovate uses its default behavior.</p> <p>Set to <code>null</code> (not recommended) to fully omit <code>--ignore-platform-reqs/--ignore-platform-req</code> during Composer invocation. This requires the Renovate image to be fully compatible with your Composer platform requirements in order for the Composer invocation to succeed, otherwise Renovate will fail to create the updated lock file. The Composer output should inform you about the reasons the update failed.</p>"},{"location":"configuration-options/#confidential","title":"confidential","text":"<p>If enabled, issues created by Renovate are set as confidential.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--confidential</code> env <code>RENOVATE_CONFIDENTIAL</code> <p>If enabled, all issues created by Renovate are set as confidential, even in a public repository.</p> <p>Note</p> <p>The Dependency Dashboard issue will also be confidential. By default issues created by Renovate are visible to all users.</p> <p>Note</p> <p>This option is applicable to GitLab only.</p>"},{"location":"configuration-options/#configmigration","title":"configMigration","text":"<p>Enable this to get config migration PRs when needed.</p> Name Value type boolean default <code>false</code> cli <code>--config-migration</code> env <code>RENOVATE_CONFIG_MIGRATION</code> <p>If enabled, Renovate raises a pull request when it needs to migrate the Renovate config file. Renovate only performs <code>configMigration</code> on <code>.json</code> and <code>.json5</code> files.</p> <p>We're adding new features to Renovate bot often. Often you can keep using your Renovate config and use the new features right away. But sometimes you need to update your Renovate configuration. To help you with this, Renovate will create config migration pull requests, when you enable <code>configMigration</code>.</p> <p>Example:</p> <p>After we changed the <code>baseBranchPatterns</code> feature, the Renovate configuration migration pull request would make this change:</p> <pre><code>{\n- \"baseBranch\": \"main\"\n+ \"baseBranchPatterns\": [\"main\"]\n}\n</code></pre> <p>Warning</p> <p>The <code>configMigration</code> feature writes plain JSON for <code>.json</code> files, and JSON5 for <code>.json5</code> files. Renovate may downgrade JSON5 content to plain JSON. When downgrading JSON5 to JSON Renovate may also remove the JSON5 comments. This can happen because Renovate wrongly converts JSON5 to JSON, thus removing the comments.</p> <p>For more details, read the config migration documentation.</p> <p>This feature is flagged as experimental</p> <p>Config migration PRs are still being improved, in particular to reduce the amount of reordering and whitespace changes.To track this feature visit the following GitHub issue #16359.</p>"},{"location":"configuration-options/#configwarningreuseissue","title":"configWarningReuseIssue","text":"<p>Set this to <code>true</code> to make Renovate reuse/reopen an existing closed Config Warning issue, instead of opening a new one each time.</p> Name Value type boolean default <code>false</code> cli <code>--config-warning-reuse-issue</code> env <code>RENOVATE_CONFIG_WARNING_REUSE_ISSUE</code> <p>If no existing issue is found, Renovate's default behavior is to create a new Config Warning issue. Accordingly, you'll get a new issue each time you have a Config Warning, although never more than one open at a time. Configure this option to <code>true</code> if you prefer Renovate to reopen any found matching closed issue whenever there is a config warning. The downside of this is that you may end up with a very old issue getting \"recycled\" each time and it will sort older than others.</p>"},{"location":"configuration-options/#constraints","title":"constraints","text":"<p>Configuration object to define language or manager version constraints.</p> Name Value type object mergeable true supportedManagers bundler, composer, gomod, npm, pep621, pipenv, poetry freeChoice true additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> env <code>RENOVATE_CONSTRAINTS</code> <p>Constraints are used in package managers which use third-party tools to update \"artifacts\" like lock files or checksum files. Typically, the constraint is detected automatically by Renovate from files within the repository and there is no need to manually configure it.</p> <p>Constraints are also used to manually restrict which datasource versions are possible to upgrade to based on their language support. For now this datasource constraint feature only supports <code>python</code>, other compatibility restrictions will be added in the future.</p> <pre><code>{\n  \"constraints\": {\n    \"python\": \"2.7\"\n  }\n}\n</code></pre> <p>If you need to override constraints that Renovate detects from the repository, wrap it in the <code>force</code> object like so:</p> <pre><code>{\n  \"force\": {\n    \"constraints\": {\n      \"node\": \"&lt; 15.0.0\"\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>Make sure not to mix this up with the term <code>compatibility</code>, which Renovate uses in the context of version releases, e.g. if a Docker image is <code>node:12.16.0-alpine</code> then the <code>-alpine</code> suffix represents <code>compatibility</code>.</p>"},{"location":"configuration-options/#constraintsfiltering","title":"constraintsFiltering","text":"<p>Perform release filtering based on language constraints.</p> Name Value type string allowedValues none, strict default <code>\"none\"</code> env <code>RENOVATE_CONSTRAINTS_FILTERING</code> <p>This option controls whether Renovate filters new releases based on configured or detected <code>constraints</code>. Renovate supports two options:</p> <ul> <li><code>none</code>: No release filtering (all releases allowed)</li> <li><code>strict</code>: If the release's constraints match the package file constraints, then it's included</li> </ul> <p>More advanced filtering options may come in future.</p> <p>There must be a <code>constraints</code> object in your Renovate config, or constraints detected from package files, for this to work. Additionally, the \"datasource\" within Renovate must be capable of returning <code>constraints</code> values about each package's release.</p> <p>This feature is limited to the following datasources:</p> <ul> <li><code>crate</code></li> <li><code>jenkins-plugins</code></li> <li><code>npm</code></li> <li><code>packagist</code></li> <li><code>pypi</code></li> <li><code>rubygems</code></li> </ul> <p>Sometimes when using private registries they may omit constraints information, which then is another reason such filtering may not work even if the datasource and corresponding default public registry supports it.</p> <p>Warning</p> <p>Enabling this feature may result in many package updates being filtered out silently. See below for a description of how it works.</p> <p>When <code>constraintsFiltering=strict</code>, the following logic applies:</p> <ul> <li>Are there <code>constraints</code> for this repository, either detected from source or from config?</li> <li>Does this package's release declare constraints of its own (e.g. <code>engines</code> in Node.js)?</li> <li>If so, filter out this release unless the repository constraint is a subset of the release constraint</li> </ul> <p>Here are some examples:</p> Your repo engines.node Dependency release engines.node Result <code>18</code> <code>16 \\|\\| 18</code> allowed <code>^18.10.0</code> <code>&gt;=18</code> allowed <code>^16.10.0 \\|\\| &gt;=18.0.0</code> <code>&gt;= 16.0.0</code> allowed <code>&gt;=16</code> <code>16 \\|\\| 18</code> filtered <code>16</code> <code>^16.10.0</code> filtered <p>When using with <code>npm</code>, we recommend you:</p> <ul> <li>Use <code>constraintsFiltering</code> on <code>dependencies</code>, not <code>devDependencies</code> (usually you do not need to be strict about development dependencies)</li> <li>Do not enable <code>rollbackPrs</code> at the same time (otherwise your current version may be rolled back if it's incompatible)</li> </ul>"},{"location":"configuration-options/#customdatasources","title":"customDatasources","text":"<p>Defines custom datasources for usage by managers.</p> Name Value type object mergeable true cli <code>--custom-datasources</code> env <code>RENOVATE_CUSTOM_DATASOURCES</code> <p>Use <code>customDatasources</code> to fetch releases from APIs or statically hosted sites and Renovate has no own datasource. These datasources can be referred by <code>customManagers</code> or can be used to overwrite default datasources.</p> <p>For more details see the <code>custom</code> datasource documentation.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.To track this feature visit the following GitHub issue #23286.</p>"},{"location":"configuration-options/#custommanagers","title":"customManagers","text":"<p>Custom managers using regex matching.</p> Name Value type array subType object cli <code>--custom-managers</code> mergeable true env <code>RENOVATE_CUSTOM_MANAGERS</code> default `[]` <p>Use <code>customManagers</code>(previously <code>regexManagers</code>) entries to configure the custom managers in Renovate.</p> <p>You can define custom managers to handle:</p> <ul> <li>Proprietary file formats or conventions</li> <li>Popular file formats not yet supported as a manager by Renovate</li> </ul> <p>Renovate has two custom managers:</p> Custom manager Matching engine <code>regex</code> Regular Expression, with named capture groups. <code>jsonata</code> JSONata query. <p>To use a custom manager, you must give Renovate this information:</p> <ol> <li><code>managerFilePatterns</code>: regex/glob pattern of the file to extract deps from</li> <li><code>matchStrings</code>: <code>regex</code> patterns or <code>jsonata</code> queries used to process the file</li> </ol> <p>The <code>matchStrings</code> must capture/extract the following three fields:</p> <ul> <li><code>datasource</code></li> <li><code>depName</code> and / or <code>packageName</code></li> <li><code>currentValue</code></li> </ul> <p>Alternatively, you could also use corresponding templates (e.g. <code>depNameTemplate</code>) for these fields. But, we recommend you use only one of these methods, or you'll get confused.</p> <p>Also, we recommend you explicitly set which <code>versioning</code> Renovate should use.</p> <p>Renovate defaults to <code>semver-coerced</code> versioning if both condition are met:</p> <ul> <li>The <code>versioning</code> field is missing in the custom manager config</li> <li>The Renovate datasource does not set its own default versioning</li> </ul> <p>For more details and examples regarding each custom manager, see our documentation for the <code>regex</code> manager and the <code>JSONata</code> manager. For template fields, use the triple brace <code>{{{ }}}</code> notation to avoid Handlebars escaping any special characters.</p> <p>Tip</p> <p>Look at our Custom Manager Presets, they may have what you need.</p>"},{"location":"configuration-options/#autoreplacestringtemplate","title":"autoReplaceStringTemplate","text":"<p>Optional <code>extractVersion</code> for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>Allows overwriting how the matched string is replaced. This allows for some migration strategies. E.g. moving from one Docker image repository to another one.</p> helm-values.yaml<pre><code># The image of the service &lt;registry&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;\nimage: my.old.registry/aRepository/andImage:1.18-alpine\n</code></pre> The regex definition<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/values.yaml$/\"],\n      \"matchStrings\": [\n        \"image:\\\\s+(?&lt;depName&gt;my\\\\.old\\\\.registry/aRepository/andImage):(?&lt;currentValue&gt;[^\\\\s]+)\"\n      ],\n      \"depNameTemplate\": \"my.new.registry/aRepository/andImage\",\n      \"autoReplaceStringTemplate\": \"image: {{{depName}}}:{{{newValue}}}\",\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n</code></pre> <p>This will lead to following update where <code>1.21-alpine</code> is the newest version of <code>my.new.registry/aRepository/andImage</code>:</p> <pre><code># The image of the service &lt;registry&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;\nimage: my.new.registry/aRepository/andImage:1.21-alpine\n</code></pre> <p>Note</p> <p>Can only be used with the custom regex manager.</p>"},{"location":"configuration-options/#currentvaluetemplate","title":"currentValueTemplate","text":"<p>Optional <code>currentValue</code> for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If the <code>currentValue</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#customtype","title":"customType","text":"<p>Custom manager to use. Valid only within a <code>customManagers</code> object.</p> Name Value type string allowedValues jsonata, regex parents customManagers default <code>null</code> <p>It specifies which custom manager to use. There are two available options: <code>regex</code> and <code>jsonata</code>.</p> <p>Example:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/values.yaml$/\"],\n      \"matchStrings\": [\n        \"ENV .*?_VERSION=(?&lt;currentValue&gt;.*) # (?&lt;datasource&gt;.*?)/(?&lt;depName&gt;.*?)\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre> Parsing a JSON file with a custom manager<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"json\",\n      \"managerFilePatterns\": [\"/file.json/\"],\n      \"matchStrings\": [\n        \"packages.{ \\\"depName\\\": package, \\\"currentValue\\\": version }\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#datasourcetemplate","title":"datasourceTemplate","text":"<p>Optional datasource for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If the <code>datasource</code> for a dependency is not captured with a named group, then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#depnametemplate","title":"depNameTemplate","text":"<p>Optional depName for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If <code>depName</code> cannot be captured with a named capture group in <code>matchString</code> then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#deptypetemplate","title":"depTypeTemplate","text":"<p>Optional <code>depType</code> for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If <code>depType</code> cannot be captured with a named capture group in <code>matchString</code> then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#extractversiontemplate","title":"extractVersionTemplate","text":"<p>Optional <code>extractVersion</code> for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If <code>extractVersion</code> cannot be captured with a named capture group in <code>matchString</code>, then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#fileformat","title":"fileFormat","text":"<p>It specifies the syntax of the package file being managed by the custom JSONata manager.</p> Name Value type string allowedValues json, toml, yaml parents customManagers requiredIf [object Object] default <code>null</code> <p>Note</p> <p>Can only be used with the custom jsonata manager.</p> <p>It specifies the syntax of the package file that's managed by the custom <code>jsonata</code> manager. This setting helps the system correctly parse and interpret the configuration file's contents.</p> <p>Only the <code>json</code>, <code>toml</code> and <code>yaml</code> formats are supported. <code>yaml</code> files are parsed as multi document YAML files.</p> Parsing a JSON file with a custom manager<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"json\",\n      \"managerFilePatterns\": [\"/.renovaterc/\"],\n      \"matchStrings\": [\n        \"packages.{ 'depName': package, 'currentValue': version }\"\n      ]\n    }\n  ]\n}\n</code></pre> Parsing a YAML file with a custom manager<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"yaml\",\n      \"managerFilePatterns\": [\"/file.yml/\"],\n      \"matchStrings\": [\n        \"packages.{ 'depName': package, 'currentValue': version }\"\n      ]\n    }\n  ]\n}\n</code></pre> Parsing a TOML file with a custom manager<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"toml\",\n      \"managerFilePatterns\": [\"/file.toml/\"],\n      \"matchStrings\": [\n        \"packages.{ 'depName': package, 'currentValue': version }\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchstrings","title":"matchStrings","text":"<p>Queries to use. Valid only within <code>bumpVersions</code> or <code>customManagers</code> object.</p> Name Value type array subType string parents bumpVersions, customManagers default `[]` <p>Each <code>matchStrings</code> must be one of the following:</p> <ol> <li>A valid regular expression, which may optionally include named capture groups (if using <code>customType=regex</code>)</li> <li>Or, a valid, escaped JSONata query (if using <code>customType=json</code>)</li> </ol> <p>Example:</p> matchStrings with a valid regular expression<pre><code>{\n  \"matchStrings\": [\n    \"ENV .*?_VERSION=(?&lt;currentValue&gt;.*) # (?&lt;datasource&gt;.*?)/(?&lt;depName&gt;.*?)\\\\s\"\n  ]\n}\n</code></pre> matchStrings with a valid JSONata query<pre><code>{\n  \"matchStrings\": [\n    \"packages.{ \\\"depName\\\": package, \\\"currentValue\\\": version }\"\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchstringsstrategy","title":"matchStringsStrategy","text":"<p>Strategy how to interpret matchStrings.</p> Name Value type string default <code>\"any\"</code> allowedValues any, recursive, combination parents customManagers <p><code>matchStringsStrategy</code> controls behavior when multiple <code>matchStrings</code> values are provided. Three options are available:</p> <ul> <li><code>any</code> (default)</li> <li><code>recursive</code></li> <li><code>combination</code></li> </ul> <p>Note</p> <p><code>matchStringsStrategy</code> can only be used in a custom regex manager config!</p>"},{"location":"configuration-options/#any","title":"any","text":"<p>Each provided <code>matchString</code> will be matched individually to the content of the <code>packageFile</code>. If a <code>matchString</code> has multiple matches in a file each will be interpreted as an independent dependency.</p> <p>As example the following configuration will update all three lines in the Dockerfile.</p> renovate.json<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^Dockerfile$/\"],\n      \"matchStringsStrategy\": \"any\",\n      \"matchStrings\": [\n        \"ENV [A-Z]+_VERSION=(?&lt;currentValue&gt;.*) # (?&lt;datasource&gt;.*?)/(?&lt;depName&gt;.*?)(\\\\&amp;versioning=(?&lt;versioning&gt;.*?))?\\\\s\",\n        \"FROM (?&lt;depName&gt;\\\\S*):(?&lt;currentValue&gt;\\\\S*)\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n</code></pre> Dockerfile<pre><code>FROM amd64/ubuntu:24.04\nENV GRADLE_VERSION=6.2 # gradle-version/gradle&amp;versioning=maven\nENV NODE_VERSION=10.19.0 # github-tags/nodejs/node&amp;versioning=node\n</code></pre>"},{"location":"configuration-options/#recursive","title":"recursive","text":"<p>If using <code>recursive</code> the <code>matchStrings</code> will be looped through and the full match of the last will define the range of the next one. This can be used to narrow down the search area to prevent multiple matches. But the <code>recursive</code> strategy still allows the matching of multiple dependencies as described below. All matches of the first <code>matchStrings</code> pattern are detected, then each of these matches will be used as basis for the input for the next <code>matchStrings</code> pattern, and so on. If the next <code>matchStrings</code> pattern has multiple matches then it will split again. This process will be followed as long there is a match plus a next <code>matchingStrings</code> pattern is available.</p> <p>Matched groups will be available in subsequent matching layers.</p> <p>This is an example how this can work. The first custom manager will only upgrade <code>grafana/loki</code> as looks for the <code>backup</code> key then looks for the <code>test</code> key and then uses this result for extraction of necessary attributes. But the second custom manager will upgrade both definitions as its first <code>matchStrings</code> matches both <code>test</code> keys.</p> renovate.json<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^example.json$/\"],\n      \"matchStringsStrategy\": \"recursive\",\n      \"matchStrings\": [\n        \"\\\"backup\\\":\\\\s*{[^}]*}\",\n        \"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n        \"\\\"name\\\":\\\\s*\\\"(?&lt;depName&gt;.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?&lt;datasource&gt;.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    },\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^example.json$/\"],\n      \"matchStringsStrategy\": \"recursive\",\n      \"matchStrings\": [\n        \"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n        \"\\\"name\\\":\\\\s*\\\"(?&lt;depName&gt;.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?&lt;datasource&gt;.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n</code></pre> example.json<pre><code>{\n  \"backup\": {\n    \"test\": {\n      \"name\": \"grafana/loki\",\n      \"type\": \"docker\",\n      \"value\": \"1.6.1\"\n    }\n  },\n  \"setup\": {\n    \"test\": {\n      \"name\": \"python\",\n      \"type\": \"docker\",\n      \"value\": \"3.9.0\"\n    }\n  }\n}\n</code></pre>"},{"location":"configuration-options/#combination","title":"combination","text":"<p>You may use this option to combine the values of multiple lines inside a file. You can combine multiple lines with <code>matchStringStrategy</code> values, but the <code>combination</code> approach is less susceptible to white space or line breaks stopping a match.</p> <p><code>combination</code> can only match one dependency per file. To update multiple dependencies with <code>combination</code> you must define multiple custom managers.</p> <p>Matched group values will be merged to form a single dependency.</p> renovate.json<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^main.yml$/\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"prometheus_image:\\\\s*\\\"(?&lt;depName&gt;.*)\\\"\\\\s*//\",\n        \"prometheus_version:\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s*//\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    },\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^main.yml$/\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"thanos_image:\\\\s*\\\"(?&lt;depName&gt;.*)\\\"\\\\s*//\",\n        \"thanos_version:\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s*//\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n</code></pre> Ansible variable file (YAML)<pre><code>prometheus_image: \"prom/prometheus\"  // a comment\nprometheus_version: \"v2.21.0\" // a comment\n------\nthanos_image: \"prom/prometheus\"  // a comment\nthanos_version: \"0.15.0\" // a comment\n</code></pre> <p>In the above example, each custom manager will match a single dependency each.</p>"},{"location":"configuration-options/#packagenametemplate","title":"packageNameTemplate","text":"<p>Optional packageName for extracted dependencies, else defaults to <code>depName</code> value. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p><code>packageName</code> is used for looking up dependency versions. It will be compiled using Handlebars and the regex <code>groups</code> result. It will default to the value of <code>depName</code> if left unconfigured/undefined.</p>"},{"location":"configuration-options/#registryurltemplate","title":"registryUrlTemplate","text":"<p>Optional registry URL for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If the <code>registryUrls</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#versioningtemplate","title":"versioningTemplate","text":"<p>Optional versioning for extracted dependencies. Valid only within a <code>customManagers</code> object.</p> Name Value type string parents customManagers default <code>null</code> <p>If the <code>versioning</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#customizedashboard","title":"customizeDashboard","text":"<p>Customize sections in the Dependency Dashboard issue.</p> Name Value type object freeChoice true additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> cli <code>--customize-dashboard</code> env <code>RENOVATE_CUSTOMIZE_DASHBOARD</code> <p>You may use the <code>customizeDashboard</code> object to customize the Dependency Dashboard.</p> <p>Supported fields:</p> <ul> <li><code>repoProblemsHeader</code>: This field will replace the header of the Repository Problems in the Dependency Dashboard issue.</li> </ul>"},{"location":"configuration-options/#defaultregistryurltemplate","title":"defaultRegistryUrlTemplate","text":"<p>Template for generating a <code>defaultRegistryUrl</code> for custom datasource.</p> Name Value type string default <code>\"\"</code> parents customDatasources <p>This field is used to build a <code>registryUrl</code> for the dependency. It is not needed if either:</p> <ul> <li>The dependency can be found with the default <code>registryUrls</code> of the datasource (e.g. npmjs registry if the datasource is <code>npm</code>), or</li> <li>The matching groups you specified as part of the matching already include a <code>registryUrl</code> group   As this is a template it can be dynamically set.   E.g. add the <code>packageName</code> as part of the URL:</li> </ul> <pre><code>{\n  customDatasources: {\n    foo: {\n      defaultRegistryUrlTemplate: 'https://example.foo.bar/v1/{{ packageName }}',\n    },\n  },\n}\n</code></pre>"},{"location":"configuration-options/#format","title":"format","text":"<p>Format of the custom datasource.</p> Name Value type string parents customDatasources default <code>\"json\"</code> allowedValues json, plain <p>Defines which format the API is returning. Currently <code>json</code> or <code>plain</code> are supported, see the <code>custom</code> datasource documentation for more information.</p>"},{"location":"configuration-options/#transformtemplates","title":"transformTemplates","text":"<p>List of jsonata transformation rules.</p> Name Value type array subType string parents customDatasources cli <code>--transform-templates</code> env <code>RENOVATE_TRANSFORM_TEMPLATES</code> default `[]` <p><code>transformTemplates</code> is a list of jsonata rules which get applied serially. Use this if the API does not return a Renovate compatible schema.</p>"},{"location":"configuration-options/#defaultregistryurls","title":"defaultRegistryUrls","text":"<p>List of registry URLs to use as the default for a datasource.</p> Name Value type array subType string default `[]` <p>Override a datasource's default registries with this config option. The datasources's <code>customRegistrySupport</code> value must be <code>true</code> for the config option to work.</p> <p>Default registries are only used when both:</p> <ul> <li>The manager did not extract any <code>registryUrls</code> values, and</li> <li>No <code>registryUrls</code> values have been applied via config, such as <code>packageRules</code></li> </ul> <p>Think of <code>defaultRegistryUrls</code> as a way to specify the \"fallback\" registries for a datasource, for use when no <code>registryUrls</code> are extracted or configured. Compare that to <code>registryUrls</code>, which are a way to override registries.</p>"},{"location":"configuration-options/#dependencydashboard","title":"dependencyDashboard","text":"<p>Whether to create a \"Dependency Dashboard\" issue in the repository.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD</code> <p>Starting from version <code>v26.0.0</code> the \"Dependency Dashboard\" is enabled by default as part of the commonly-used <code>config:recommended</code> preset.</p> <p>To disable the Dependency Dashboard, add the preset <code>:disableDependencyDashboard</code> or set <code>dependencyDashboard</code> to <code>false</code>.</p> <pre><code>{\n  \"extends\": [\"config:recommended\", \":disableDependencyDashboard\"]\n}\n</code></pre> <p>Configuring <code>dependencyDashboard</code> to <code>true</code> will lead to the creation of a \"Dependency Dashboard\" issue within the repository. This issue has a list of all PRs pending, open, closed (unmerged) or in error. The goal of this issue is to give visibility into all updates that Renovate is managing.</p> <p>Examples of what having a Dependency Dashboard will allow you to do:</p> <ul> <li>View all PRs in one place, rather than having to filter PRs by author</li> <li>Rebase/retry multiple PRs without having to open each individually</li> <li>Override any rate limiting (e.g. concurrent PRs) or scheduling to force Renovate to create a PR that would otherwise be suppressed</li> <li>Recreate an unmerged PR (e.g. for a major update that you postponed by closing the original PR)</li> </ul> <p>Tip</p> <p>Enabling the Dependency Dashboard by itself does not change the \"control flow\" of Renovate. Renovate still creates and manages PRs, and still follows your schedules and rate limits. The Dependency Dashboard gives you extra visibility and control over your updates.</p>"},{"location":"configuration-options/#dependencydashboardapproval","title":"dependencyDashboardApproval","text":"<p>Controls if updates need manual approval from the Dependency Dashboard issue before PRs are created.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard-approval</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_APPROVAL</code> <p>This feature allows you to use Renovate's Dependency Dashboard to force approval of updates before they are created.</p> <p>By setting <code>dependencyDashboardApproval</code> to <code>true</code> in config (including within <code>packageRules</code>), you can tell Renovate to wait for your approval from the Dependency Dashboard before creating a branch/PR. You can approve a pending PR by selecting the checkbox in the Dependency Dashboard issue.</p> <p>Tip</p> <p>When you set <code>dependencyDashboardApproval</code> to <code>true</code> the Dependency Dashboard issue will be created automatically, you do not need to turn on <code>dependencyDashboard</code> explicitly.</p> <p>You can configure Renovate to wait for approval for:</p> <ul> <li>all package upgrades</li> <li>major, minor, patch level upgrades</li> <li>specific package upgrades</li> <li>upgrades coming from specific package managers</li> </ul> <p>If you want to require approval for all upgrades, set <code>dependencyDashboardApproval</code> to <code>true</code>:</p> <pre><code>{\n  \"dependencyDashboardApproval\": true\n}\n</code></pre> <p>If you want to require approval for major updates, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>major</code> object:</p> <pre><code>{\n  \"major\": {\n    \"dependencyDashboardApproval\": true\n  }\n}\n</code></pre> <p>If you want to approve specific packages, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>packageRules</code> entry where you have defined a specific package or pattern.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/^@package-name/\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#dependencydashboardautoclose","title":"dependencyDashboardAutoclose","text":"<p>Set to <code>true</code> to let Renovate close the Dependency Dashboard issue if there are no more updates.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard-autoclose</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_AUTOCLOSE</code> <p>You can configure this to <code>true</code> if you prefer Renovate to close an existing Dependency Dashboard whenever there are no outstanding PRs left.</p>"},{"location":"configuration-options/#dependencydashboardcategory","title":"dependencyDashboardCategory","text":"<p>The category to group branches on the Dependency Dashboard issue.</p> Name Value type string <p>You can use this to categorize updates on the Dependency Dashboard. For example, to visually distinguish between production and dev updates, or to split between teams or logical parts of a monorepo. In practice this means it introduces an extra level of hierarchy/heading in the Dashboard's markdown.</p> <p>To create a category for all CI/CD updates, you can configure a package rule like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCategories\": [\"cd\", \"ci\"],\n      \"dependencyDashboardCategory\": \":hammer_and_wrench: Continuous Integration &amp; Continuous Deployment\"\n    }\n  ]\n}\n</code></pre> <p>When you configure categories, updates that do not match any of the configured categories will be grouped under the \"Other\" category.</p> <p>Some sections in the Dependency Dashboard also contain an action that applies to all updates in that section, such as to approve or rebase all updates. If there are categories in that section, the action will be put in an extra \"All\" category at the end of the section. This is to explicitly clarify that the action applies to all updates in the section, not to just a specific category.</p> <p>The Dependency Dashboard categories are only used to visually organize updates within the Dependency Dashboard issue. They do not impact grouping of updates into a single update like how e.g. <code>branchName</code> and <code>groupName</code> do.</p>"},{"location":"configuration-options/#dependencydashboardfooter","title":"dependencyDashboardFooter","text":"<p>Any text added here will be placed last in the Dependency Dashboard issue body, with a divider separator before it.</p> Name Value type string cli <code>--dependency-dashboard-footer</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_FOOTER</code> default <code>null</code>"},{"location":"configuration-options/#dependencydashboardheader","title":"dependencyDashboardHeader","text":"<p>Any text added here will be placed first in the Dependency Dashboard issue body.</p> Name Value type string default <code>\"This issue lists Renovate updates and detected dependencies. Read the [Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/) docs to learn more.\"</code> cli <code>--dependency-dashboard-header</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_HEADER</code>"},{"location":"configuration-options/#dependencydashboardlabels","title":"dependencyDashboardLabels","text":"<p>These labels will always be applied on the Dependency Dashboard issue, even when they have been removed manually.</p> Name Value type array subType string cli <code>--dependency-dashboard-labels</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_LABELS</code> default `[]` <p>The labels only get updated when the Dependency Dashboard issue updates its content and/or title. It is pointless to edit the labels, as Renovate bot restores the labels on each run.</p>"},{"location":"configuration-options/#dependencydashboardosvvulnerabilitysummary","title":"dependencyDashboardOSVVulnerabilitySummary","text":"<p>Control if the Dependency Dashboard issue lists CVEs supplied by osv.dev.</p> Name Value type string allowedValues none, all, unresolved default <code>\"none\"</code> cli <code>--dependency-dashboard-o-s-v-vulnerability-summary</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_O_S_V_VULNERABILITY_SUMMARY</code> <p>Use this option to control if the Dependency Dashboard lists the OSV-sourced CVEs for your repository. You can choose from:</p> <ul> <li><code>none</code> (default) do not list any CVEs</li> <li><code>unresolved</code> list CVEs that have no fixes</li> <li><code>all</code> list all CVEs</li> </ul> <p>You will only get OSV-based vulnerability alerts for direct dependencies.</p> <p>This feature is independent of the <code>osvVulnerabilityAlerts</code> option.</p> <p>The source of these CVEs is OSV.dev.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#dependencydashboardreportabandonment","title":"dependencyDashboardReportAbandonment","text":"<p>Controls whether abandoned packages are reported in the dependency dashboard.</p> Name Value type boolean default <code>true</code> cli <code>--dependency-dashboard-report-abandonment</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_REPORT_ABANDONMENT</code> <p>Controls whether abandoned packages are reported in the dependency dashboard.</p> <p>When enabled (default), Renovate will display a collapsible section in the dependency dashboard listing packages that have been identified as abandoned based on the <code>abandonmentThreshold</code> configuration. This helps you identify dependencies that may need attention due to lack of maintenance.</p> <p>Set this to <code>false</code> if you prefer not to see abandoned packages in your dependency dashboard.</p>"},{"location":"configuration-options/#dependencydashboardtitle","title":"dependencyDashboardTitle","text":"<p>Title for the Dependency Dashboard issue.</p> Name Value type string default <code>\"Dependency Dashboard\"</code> cli <code>--dependency-dashboard-title</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_TITLE</code> <p>Configure this option if you prefer a different title for the Dependency Dashboard.</p>"},{"location":"configuration-options/#description","title":"description","text":"<p>Plain text description for a config or preset.</p> Name Value type array subType string mergeable true default `[]` <p>The description field can be used inside any configuration object to add a human-readable description of the object's config purpose. A description field embedded within a preset is also collated as part of the onboarding description unless the preset only consists of presets itself. Presets which consist only of other presets have their own description omitted from the onboarding description because they will be fully described by the preset descriptions within.</p>"},{"location":"configuration-options/#digest","title":"digest","text":"<p>Configuration to apply when updating a digest (no change in tag/version).</p> Name Value type object default <pre><code>{\n  \"branchTopic\": \"{{{depNameSanitized}}}-digest\",\n  \"commitMessageExtra\": \"to {{newDigestShort}}\",\n  \"commitMessageTopic\": \"{{{depName}}} digest\"\n}\n</code></pre> mergeable true env <code>RENOVATE_DIGEST</code> <p>Add to this object if you wish to define rules that apply only to PRs that update digests.</p>"},{"location":"configuration-options/#draftpr","title":"draftPR","text":"<p>If set to <code>true</code> then Renovate creates draft PRs, instead of normal status PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms azure, forgejo, gitea, github, gitlab cli <code>--draft-p-r</code> env <code>RENOVATE_DRAFT_P_R</code> <p>If you want the PRs created by Renovate to be considered as drafts rather than normal PRs, you could add this property to your <code>renovate.json</code>:</p> <pre><code>{\n  \"draftPR\": true\n}\n</code></pre> <p>This option is evaluated at PR/MR creation time.</p> <p>Note</p> <p>Forgejo, Gitea and GitLab implement draft status by checking if the PR's title starts with certain strings. This means that <code>draftPR</code> on Forgejo, Gitea and GitLab are incompatible with the legacy method of triggering Renovate to rebase a PR by renaming the PR to start with <code>rebase!</code>.</p>"},{"location":"configuration-options/#enabled","title":"enabled","text":"<p>Enable or disable corresponding functionality.</p> Name Value type boolean default <code>true</code> parents ., packageRules, ansible, ansible-galaxy, argocd, asdf, azure-pipelines, batect, batect-wrapper, bazel, bazel-module, bazelisk, bicep, bitbucket-pipelines, bitrise, buildkite, buildpacks, bun, bun-version, bundler, cake, cargo, cdnurl, circleci, cloudbuild, cocoapods, composer, conan, copier, cpanfile, crossplane, crow, deps-edn, devbox, devcontainer, docker-compose, dockerfile, droneci, fleet, flux, fvm, git-submodules, github-actions, gitlabci, gitlabci-include, glasskube, gleam, gomod, gradle, gradle-wrapper, haskell-cabal, helm-requirements, helm-values, helmfile, helmsman, helmv3, hermit, homebrew, html, jenkins, jsonnet-bundler, kotlin-script, kubernetes, kustomize, leiningen, maven, maven-wrapper, meteor, mint, mise, mix, nix, nodenv, npm, nuget, nvm, ocb, osgi, pep621, pep723, pip-compile, pip_requirements, pip_setup, pipenv, pixi, poetry, pre-commit, pub, puppet, pyenv, quadlet, renovate-config-presets, ruby-version, runtime-version, sbt, scalafmt, setup-cfg, sveltos, swift, tekton, terraform, terraform-version, terragrunt, terragrunt-version, tflint-plugin, travis, typst, unity3d, velaci, vendir, woodpecker, hostRules, vulnerabilityAlerts, major, minor, patch, pin, digest, pinDigest, lockFileMaintenance, rollback, replacement cli <code>--enabled</code> env <code>RENOVATE_ENABLED</code> <p>The most common use of <code>enabled</code> is if you want to turn Renovate's functionality off, for some reason.</p> <p>For example, if you wanted to disable Renovate completely on a repository, you could make this your <code>renovate.json</code>:</p> <pre><code>{\n  \"enabled\": false\n}\n</code></pre> <p>To disable Renovate for all <code>eslint</code> packages, you can configure a package rule like:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint**\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>To disable Renovate for npm <code>devDependencies</code> but keep it for <code>dependencies</code> you could configure:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"npm\"],\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#enabledmanagers","title":"enabledManagers","text":"<p>A list of package managers to enable. Only managers on the list are enabled.</p> Name Value type array subType string mergeable false cli <code>--enabled-managers</code> env <code>RENOVATE_ENABLED_MANAGERS</code> default `[]` <p>This is a way to allow only certain package managers and implicitly disable all others.</p> <p>Example:</p> <pre><code>{\n  \"enabledManagers\": [\"dockerfile\", \"npm\"]\n}\n</code></pre> <p>To enable custom managers you will need to add <code>custom.</code> prefix before their names</p> <p>Example:</p> <pre><code>{\n  \"enabledManagers\": [\"custom.regex\"]\n}\n</code></pre> <p>For the full list of available managers, see the Supported Managers documentation.</p>"},{"location":"configuration-options/#encrypted","title":"encrypted","text":"<p>An object containing configuration encrypted with project key.</p> Name Value type object cli <code>--encrypted</code> env <code>RENOVATE_ENCRYPTED</code> <p>Before you put any secrets in your repository configuration, encrypt the secrets. You can encrypt secrets using either a HTML page, or the CLI.</p> <p>To encrypt secrets for the Mend Renovate App for github.com with a HTML page, go to app.renovatebot.com/encrypt and complete the form. If you're self-hosting Renovate, you may download and edit the form, to use your own PGP public key.</p> <p>You can also encrypt secrets from the CLI, using the <code>curl</code>, <code>echo</code>, <code>jq</code>, <code>gpg</code>, <code>grep</code> and <code>tr</code> CLI programs. Here is an example:</p> <pre><code>curl https://app.renovatebot.com/renovate.pgp --output renovate.pgp\necho -n '{\"o\":\"your-organization\", \"r\":\"your-repository (optional)\", \"v\":\"your-secret-value\"}' | jq . -c | gpg --encrypt -a --recipient-file renovate.pgp | grep -v '^----' | tr -d '\\n'\n</code></pre> <p>The above script uses:</p> <ul> <li><code>curl</code> to download the Mend Renovate hosted app's public key</li> <li><code>echo</code> to echo a JSON object into <code>jq</code></li> <li><code>jq</code> to validate the JSON and then compact it</li> <li><code>gpg</code> to encrypt the contents</li> <li><code>grep</code> and <code>tr</code> to extract the encrypted payload which we will use</li> </ul> <p>The <code>jq</code> step is optional, you can leave it out if you wish. Its primary value is validating that the string you echo to <code>gpg</code> is valid JSON, and compact.</p> <p>Note</p> <p>Encrypted secrets must have at least an org/group scope, and optionally a repository scope. This means that Renovate will check if a secret's scope matches the current repository before applying it, and warn/discard if there is a mismatch.</p> <p>Encrypted secrets usually have a single organization. But you may encrypt a secret with more than one organization, for example: <code>org1,org2</code>. This way the secret can be used in both the <code>org1</code> and <code>org2</code> organizations.</p> <p>For more information on how to use secrets for private packages, read Private package support.</p>"},{"location":"configuration-options/#env","title":"env","text":"<p>Environment variables that Renovate uses when executing package manager commands.</p> Name Value type object cli <code>--env</code> env <code>RENOVATE_ENV</code> <p>This option allows users to specify explicit environment variables values. It is valid only as a top-level configuration option and not, for example, within <code>packageRules</code>.</p> <p>Warning</p> <p>The bot administrator must configure a list of allowed environment names in the <code>allowedEnv</code> config option, before users can use those allowed names in the <code>env</code> option.</p> <p>Behavior:</p> <ul> <li>This option only applies when Renovate runs package manager commands (e.g. <code>npm install</code>), within the <code>updateArtifacts()</code> function</li> <li>Values set in the <code>env</code> configuration override corresponding environment variables, including those from <code>customEnvVariables</code> and <code>process.env</code></li> </ul> Example renovate.json with env configuration<pre><code>{\n  \"env\": {\n    \"SOME_ENV_VARIABLE\": \"SOME_STRING_VALUE\"\n  }\n}\n</code></pre>"},{"location":"configuration-options/#excludecommitpaths","title":"excludeCommitPaths","text":"<p>A file matching any of these glob patterns will not be committed, even if the file has been updated.</p> Name Value type array subType string cli <code>--exclude-commit-paths</code> env <code>RENOVATE_EXCLUDE_COMMIT_PATHS</code> default `[]` <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Be careful you know what you're doing with this option. The initial intended use is to allow the user to exclude certain dependencies from being added/removed/modified when \"vendoring\" dependencies. Example:</p> <pre><code>{\n  \"excludeCommitPaths\": [\"vendor/golang.org/x/text/**\"]\n}\n</code></pre> <p>The above would mean Renovate would not include files matching the above glob pattern in the commit, even if it thinks they should be updated.</p>"},{"location":"configuration-options/#expandcodeownersgroups","title":"expandCodeOwnersGroups","text":"<p>Expand the configured code owner groups into a full list of group members.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--expand-code-owners-groups</code> env <code>RENOVATE_EXPAND_CODE_OWNERS_GROUPS</code> <p>If configured, Renovate will expand any matching <code>CODEOWNERS</code> groups into a full list of group members and assign them individually instead of the group. This is particularly useful when combined with <code>assigneesSampleSize</code> and <code>assigneesFromCodeOwners</code>, so that only a subset of the Codeowners are assigned instead of the whole group.</p>"},{"location":"configuration-options/#extends","title":"extends","text":"<p>Configuration presets to use or extend.</p> Name Value type array subType string env <code>RENOVATE_EXTENDS</code> default `[]` <p>See shareable config presets for details. Learn how to use presets by reading the Key concepts, Presets page.</p>"},{"location":"configuration-options/#extractversion","title":"extractVersion","text":"<p>A regex (<code>re2</code>) to extract a version from a datasource's raw version string.</p> Name Value type string format regex default <code>null</code> <p>Only use this config option when the raw version strings from the datasource do not match the expected format that you need in your package file. You must define a \"named capture group\" called <code>version</code> like in the examples below.</p> <p>For example, to extract only the major.minor precision from a GitHub release, the following would work:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"foo\"],\n      \"extractVersion\": \"^(?&lt;version&gt;v\\\\d+\\\\.\\\\d+)\"\n    }\n  ]\n}\n</code></pre> <p>The above will change a raw version of <code>v1.31.5</code> to <code>v1.31</code>, for example.</p> <p>Alternatively, to strip a <code>release-</code> prefix:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"bar\"],\n      \"extractVersion\": \"^release-(?&lt;version&gt;.*)$\"\n    }\n  ]\n}\n</code></pre> <p>The above will change a raw version of <code>release-2.0.0</code> to <code>2.0.0</code>, for example. A similar one could strip leading <code>v</code> prefixes:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"baz\"],\n      \"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#fetchchangelogs","title":"fetchChangeLogs","text":"<p>Controls if and when changelogs/release notes are fetched.</p> Name Value type string allowedValues off, branch, pr default <code>\"pr\"</code> env <code>RENOVATE_FETCH_CHANGE_LOGS</code> <p>Use this config option to configure changelogs/release notes fetching. The available options are:</p> <ul> <li><code>off</code> - disable changelogs fetching</li> <li><code>branch</code> - fetch changelogs while creating/updating branch</li> <li><code>pr</code>(default) - fetches changelogs while creating/updating pull-request</li> </ul> <p>Avoid setting <code>fetchChangeLogs=branch</code>, because this slows down Renovate. But if you're embedding changelogs in commit information, you may use <code>fetchChangeLogs=branch</code>.</p> <p>Renovate can fetch changelogs when they are hosted on one of these platforms:</p> <ul> <li>Bitbucket Cloud</li> <li>Bitbucket Server / Data Center</li> <li>GitHub (.com and Enterprise Server)</li> <li>GitLab (.com and CE/EE)</li> </ul> <p>If you are running on any platform except <code>github.com</code>, you need to configure a Personal Access Token to allow Renovate to fetch changelogs notes from <code>github.com</code>.</p> <p>Note</p> <p>Renovate can only show changelogs from some platforms and some package managers. We're planning improvements so that Renovate can show more changelogs. Read issue 14138 on GitHub to get an overview of the planned work.</p>"},{"location":"configuration-options/#filterunavailableusers","title":"filterUnavailableUsers","text":"<p>Filter reviewers and assignees based on their availability.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--filter-unavailable-users</code> env <code>RENOVATE_FILTER_UNAVAILABLE_USERS</code> <p>When this option is enabled PRs are not assigned to users that are unavailable. This option only works on platforms that support the concept of user availability. For now, you can only use this option on the GitLab platform.</p>"},{"location":"configuration-options/#followtag","title":"followTag","text":"<p>If defined, packages will follow this release tag exactly.</p> Name Value type string default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>For <code>followTag</code> to work, the datasource must support distribution streams or tags, like for example npm does.</p> <p>The main use case is to follow a pre-release tag of a dependency, say TypeScripts's <code>\"insiders\"</code> build:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"typescript\"],\n      \"followTag\": \"insiders\"\n    }\n  ]\n}\n</code></pre> <p>If you've set a <code>followTag</code> then Renovate skips its normal major/minor/patch upgrade logic and stable/unstable consistency logic, and instead keeps your dependency version synced strictly to the version in the tag.</p> <p>Renovate follows tags strictly, this can cause problems when a tagged stream is no longer maintained. For example: you're following the <code>next</code> tag, but later the stream you actually want is called <code>stable</code> instead. If <code>next</code> is no longer getting updates, you must switch your <code>followTag</code> to <code>stable</code> to get updates again.</p>"},{"location":"configuration-options/#forkmodedisallowmaintaineredits","title":"forkModeDisallowMaintainerEdits","text":"<p>Disallow maintainers to push to Renovate pull requests when running in fork mode.</p> Name Value type boolean default <code>false</code> supportedPlatforms github cli <code>--fork-mode-disallow-maintainer-edits</code> env <code>RENOVATE_FORK_MODE_DISALLOW_MAINTAINER_EDITS</code> <p>Use <code>forkModeDisallowMaintainerEdits</code> to disallow maintainers from editing Renovate's pull requests when in fork mode.</p> <p>If GitHub pull requests are created from a fork repository, the PR author can decide to allow upstream repository to modify the PR directly.</p> <p>Allowing maintainers to edit pull requests directly is helpful when Renovate pull requests require more changes. The reviewer can simply push to the pull request without having to create a new PR. More details here.</p> <p>You may decide to disallow edits to Renovate pull requests in order to workaround issues in Renovate where modified fork branches are not deleted properly: See this issue. If this option is enabled, reviewers will need to create a new PR if more changes are needed.</p> <p>Note</p> <p>This option is only relevant if you set <code>forkToken</code>.</p>"},{"location":"configuration-options/#forkprocessing","title":"forkProcessing","text":"<p>Whether to process forked repositories. By default, all forked repositories are skipped when in <code>autodiscover</code> mode.</p> Name Value type string allowedValues auto, enabled, disabled default <code>\"auto\"</code> cli <code>--fork-processing</code> env <code>RENOVATE_FORK_PROCESSING</code> <p>By default, Renovate skips any forked repositories when in <code>autodiscover</code> mode. It even skips a forked repository that has a Renovate configuration file, because Renovate doesn't know if that file was added by the forked repository.</p> <p>Process a fork in <code>autodiscover</code> mode</p> <p>If you want Renovate to run on a forked repository when in <code>autodiscover</code> mode then:</p> <ul> <li>Ensure a <code>renovate.json</code> config exists with <code>\"forkProcessing\": \"enabled\"</code> in your repository,</li> <li>Or run the CLI command with <code>--fork-processing=enabled</code></li> </ul> <p>Process a fork in other modes</p> <p>If you're running Renovate in some other mode, for example when giving a list of repositories to Renovate, but want to skip forked repositories: set <code>\"forkProcessing\": \"disabled\"</code> in your global config.</p> <p>When using the Mend Renovate App</p> <p>The behavior of <code>forkProcessing</code> depends on how you allow Renovate to run on your account.</p> <p>Renovate runs on all repositories</p> <p>If you allow Renovate to run on all your repositories, <code>forkProcessing</code> will be <code>\"disabled\"</code>. To run Renovate on a fork: add <code>\"forkProcessing\": \"enabled\"</code> to the forked repository's <code>renovate.json</code> file.</p> <p>Renovate runs on selected repositories</p> <p>If you allow Renovate to run on \"Selected\" repositories, <code>forkProcessing</code> will be <code>\"enabled\"</code> for each \"Selected\" repository.</p> <p>Allowed filenames</p> <p>Only the <code>onboardingConfigFileName</code> (which defaults to <code>renovate.json</code>) is supported for <code>forkProcessing</code>. You can't use other filenames because Renovate only checks the default filename when using the Git-hosting platform's API.</p>"},{"location":"configuration-options/#gitauthor","title":"gitAuthor","text":"<p>Author to use for Git commits. Must conform to RFC5322.</p> Name Value type string cli <code>--git-author</code> env <code>RENOVATE_GIT_AUTHOR</code> default <code>null</code> <p>You can customize the Git author that's used whenever Renovate creates a commit, although we do not recommend this. When this field is unset (default), Renovate will use its platform credentials (e.g. token) to learn/discover its account's git author automatically.</p> <p>Note</p> <p>If running as a GitHub App and using <code>platformCommit</code>, GitHub itself sets the git author in commits so you should not configure this field.</p> <p>The <code>gitAuthor</code> option accepts a RFC5322-compliant string. It's recommended to include a name followed by an email address, e.g.</p> <pre><code>Development Bot &lt;dev-bot@my-software-company.com&gt;\n</code></pre> <p>Danger</p> <p>We strongly recommend that the Git author email you use is unique to Renovate. Otherwise, if another bot or human shares the same email and pushes to one of Renovate's branches then Renovate will mistake the branch as unmodified and potentially force push over the changes.</p>"},{"location":"configuration-options/#gitignoredauthors","title":"gitIgnoredAuthors","text":"<p>Git authors which are ignored by Renovate. Must conform to RFC5322.</p> Name Value type array subType string cli <code>--git-ignored-authors</code> env <code>RENOVATE_GIT_IGNORED_AUTHORS</code> default `[]` <p>Specify commit authors ignored by Renovate. This field accepts RFC5322-compliant strings.</p> <p>By default, Renovate will treat any PR as modified if another Git author has added to the branch. When a PR is considered modified, Renovate won't perform any further commits such as if it's conflicted or needs a version update. If you have other bots which commit on top of Renovate PRs, and don't want Renovate to treat these PRs as modified, then add the other Git author(s) to <code>gitIgnoredAuthors</code>.</p> <p>Example:</p> <pre><code>{\n  \"gitIgnoredAuthors\": [\"some-bot@example.org\"]\n}\n</code></pre>"},{"location":"configuration-options/#gitlabignoreapprovals","title":"gitLabIgnoreApprovals","text":"<p>Ignore approval rules for MRs created by Renovate, which is useful for automerge.</p> Name Value type boolean default <code>false</code> cli <code>--git-lab-ignore-approvals</code> env <code>RENOVATE_GIT_LAB_IGNORE_APPROVALS</code> <p>Ignore the default project level approval(s), so that Renovate bot can automerge its merge requests, without needing approval(s). Under the hood, it creates a MR-level approval rule where <code>approvals_required</code> is set to <code>0</code>. This option works only when <code>automerge=true</code> and either <code>automergeType=pr</code> or <code>automergeType=branch</code>. Also, approval rules overriding should not be prevented in GitLab settings.</p>"},{"location":"configuration-options/#gogetdirs","title":"goGetDirs","text":"<p>Directory pattern to run <code>go get</code> on.</p> Name Value type array subType string default <pre><code>[\"./...\"]\n</code></pre> supportedManagers gomod cli <code>--go-get-dirs</code> env <code>RENOVATE_GO_GET_DIRS</code> default `[]` <p>By default, Renovate will run <code>go get -d -t ./...</code> to update the <code>go.sum</code>. If you need to modify this path, for example in order to ignore directories, you can override the default <code>./...</code> value using this option:</p> <pre><code>{\n  \"goGetDirs\": [\"./some-project/\", \"./tools/...\"]\n}\n</code></pre>"},{"location":"configuration-options/#group","title":"group","text":"<p>Config if <code>groupName</code> is enabled.</p> Name Value type object default <pre><code>{\"branchTopic\": \"{{{groupSlug}}}\", \"commitMessageTopic\": \"{{{groupName}}}\"}\n</code></pre> mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>The default configuration for groups are essentially internal to Renovate and you normally shouldn't need to modify them. But you may add settings to any group by defining your own <code>group</code> configuration object.</p>"},{"location":"configuration-options/#groupname","title":"groupName","text":"<p>Human understandable name for the dependency group.</p> Name Value type string cli <code>--group-name</code> env <code>RENOVATE_GROUP_NAME</code> <p>There are multiple cases where it can be useful to group multiple upgrades together. Internally Renovate uses this for branches such as \"Pin Dependencies\", \"Lock File Maintenance\", etc. Another example used previously is to group together all related <code>eslint</code> packages, or perhaps <code>angular</code> or <code>babel</code>. To enable grouping, you configure the <code>groupName</code> field to something non-null.</p> <p>The <code>groupName</code> field allows free text and does not have any semantic interpretation by Renovate. All updates sharing the same <code>groupName</code> will be placed into the same branch/PR. For example, to group all non-major devDependencies updates together into a single PR:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"groupName\": \"devDependencies (non-major)\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#groupslug","title":"groupSlug","text":"<p>Slug to use for group (e.g. in branch name). Slug is calculated from <code>groupName</code> if <code>null</code>.</p> Name Value type string <p>By default, Renovate will \"slugify\" the groupName to determine the branch name. For example if you named your group \"devDependencies (non-major)\" then the branchName would be <code>renovate/devdependencies-non-major</code>. If you wished to override this then you could configure like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"groupName\": \"devDependencies (non-major)\",\n      \"groupSlug\": \"dev-dependencies\"\n    }\n  ]\n}\n</code></pre> <p>As a result of the above, the branchName would be <code>renovate/dev-dependencies</code> instead.</p> <p>Note</p> <p>You shouldn't usually need to configure this unless you really care about your branch names.</p>"},{"location":"configuration-options/#hashedbranchlength","title":"hashedBranchLength","text":"<p>If enabled, branch names will use a hashing function to ensure each branch has that length.</p> Name Value type integer env <code>RENOVATE_HASHED_BRANCH_LENGTH</code> <p>Some code hosting systems have restrictions on the branch name lengths, this option lets you get around these restrictions. You can set the <code>hashedBranchLength</code> option to a number of characters that works for your system and then Renovate will generate branch names with the correct length by hashing <code>additionalBranchPrefix</code> and <code>branchTopic</code>, and then truncating the hash so that the full branch name (including <code>branchPrefix</code>) has the right number of characters.</p> <p>Example: If you have set <code>branchPrefix: \"deps-\"</code> and <code>hashedBranchLength: 12</code> it will result in a branch name like <code>deps-5bf36ec</code> instead of the traditional pretty branch name like <code>deps-react-17.x</code>.</p>"},{"location":"configuration-options/#hostrules","title":"hostRules","text":"<p>Host rules/configuration including credentials.</p> Name Value type array subType object cli <code>--host-rules</code> mergeable true env <code>RENOVATE_HOST_RULES</code> default `[]` <p>The primary purpose of <code>hostRules</code> is to configure credentials for host authentication. You tell Renovate how to match against the host you need authenticated, and then you also tell it which credentials to use.</p> <p>The lookup keys for <code>hostRules</code> are: <code>hostType</code> and <code>matchHost</code>, both of which are optional.</p> <p>Supported credential fields are <code>token</code>, <code>username</code>, <code>password</code>, <code>timeout</code>, <code>enabled</code> and <code>insecureRegistry</code>.</p> <p>Example for configuring <code>docker</code> auth:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"docker.io\",\n      \"username\": \"&lt;some-username&gt;\",\n      \"password\": \"&lt;some-password&gt;\"\n    }\n  ]\n}\n</code></pre> <p>If multiple <code>hostRules</code> match a request, then they will be applied in the following order/priority:</p> <ol> <li>rules with only <code>hostType</code> specified</li> <li>rules with only <code>matchHost</code> specified (sorted by <code>matchHost</code> length if multiple match)</li> <li>rules with both <code>matchHost</code> and <code>hostType</code> specified (sorted by <code>matchHost</code> length if multiple match)</li> </ol> <p>To disable requests to a particular host, you can configure a rule like:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"registry.npmjs.org\",\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>A preset alternative to the above is:</p> <pre><code>{\n  \"extends\": [\":disableHost(registry.npmjs.org)\"]\n}\n</code></pre> <p>To match specific ports you have to add a protocol to <code>matchHost</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com:9118\",\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>Warning</p> <p>Using <code>matchHost</code> without a protocol behaves the same as if you had set no <code>matchHost</code> configuration.</p> <p>Note</p> <p>Disabling a host is only 100% effective if added to self-hosted config. Renovate currently still checks its cache for results first before trying to connect, so if a public host is blocked in your repository config (e.g. <code>renovate.json</code>) then it's possible you may get cached results from that host if another repository using the same bot has successfully queried for the same dependency recently.</p>"},{"location":"configuration-options/#abortignorestatuscodes","title":"abortIgnoreStatusCodes","text":"<p>A list of HTTP status codes safe to ignore even when <code>abortOnError=true</code>.</p> Name Value type array subType number parents hostRules default `[]` <p>This field can be used to configure status codes that Renovate ignores and passes through when <code>abortOnError</code> is set to <code>true</code>. For example to also skip 404 responses then configure the following:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"abortOnError\": true,\n      \"abortIgnoreStatusCodes\": [404]\n    }\n  ]\n}\n</code></pre> <p>Tip</p> <p>This field is not mergeable, so the last-applied host rule takes precedence.</p>"},{"location":"configuration-options/#abortonerror","title":"abortOnError","text":"<p>If enabled, Renovate aborts its run when HTTP request errors occur.</p> Name Value type boolean default <code>false</code> parents hostRules <p>Use this field to configure Renovate to abort runs for custom hosts. By default, Renovate will only abort for known public hosts, which has the downside that transient errors for other hosts can cause autoclosing of PRs.</p> <p>To abort Renovate runs for HTTP failures from any host:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"abortOnError\": true\n    }\n  ]\n}\n</code></pre> <p>To abort Renovate runs for any <code>docker</code> datasource failures:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"abortOnError\": true\n    }\n  ]\n}\n</code></pre> <p>To abort Renovate for errors for a specific <code>docker</code> host:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"docker.company.com\",\n      \"abortOnError\": true\n    }\n  ]\n}\n</code></pre> <p>When this field is enabled, Renovate will abort its run if it encounters either (a) any low-level http error (e.g. <code>ETIMEDOUT</code>) or (b) gets a response not matching any of the configured <code>abortIgnoreStatusCodes</code> (e.g. <code>500 Internal Error</code>);</p>"},{"location":"configuration-options/#artifactauth","title":"artifactAuth","text":"<p>A list of package managers to enable artifact auth. Only managers on the list are enabled. All are enabled if <code>null</code>.</p> Name Value type array subType string parents hostRules allowedValues composer default `[]` <p>You may use this field whenever it is needed to only enable authentication for a specific set of managers.</p> <p>For example, using this option could be used whenever authentication using Git for private composer packages is already being handled through the use of SSH keys, which results in no need for also setting up authentication using tokens.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"gitlab\",\n      \"matchHost\": \"gitlab.myorg.com\",\n      \"token\": \"abc123\",\n      \"artifactAuth\": [\"composer\"]\n    }\n  ]\n}\n</code></pre> <p>Supported artifactAuth and hostType combinations:</p> artifactAuth hostTypes <code>composer</code> <code>gitlab</code>, <code>packagist</code>, <code>github</code>, <code>git-tags</code> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#authtype","title":"authType","text":"<p>Authentication type for HTTP header. e.g. <code>\"Bearer\"</code> or <code>\"Basic\"</code>. Use <code>\"Token-Only\"</code> to use only the token without an authorization type.</p> Name Value type string parents hostRules default <code>\"Bearer\"</code> <p>You may use the <code>authType</code> option to create a custom HTTP <code>authorization</code> header. For <code>authType</code> to work, you must also set your own <code>token</code>.</p> <p>Do not set <code>authType=Bearer</code>: it's the default setting for Renovate anyway. Do not set a username or password when you're using <code>authType</code>, as <code>authType</code> doesn't use usernames or passwords.</p> <p>An example for npm basic auth with token:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"npm.custom.org\",\n      \"token\": \"&lt;some-token&gt;\",\n      \"authType\": \"Basic\"\n    }\n  ]\n}\n</code></pre> <p>This will generate the following header: <code>authorization: Basic &lt;some-token&gt;</code>.</p> <p>To use a bare token in the authorization header (required by e.g. Hex) - use the <code>authType</code> \"Token-Only\":</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://hex.pm/api/repos/private_repo/\",\n      \"token\": \"&lt;some-token&gt;\",\n      \"authType\": \"Token-Only\"\n    }\n  ]\n}\n</code></pre> <p>This will generate the header <code>authorization: &lt;some-token&gt;</code>.</p>"},{"location":"configuration-options/#concurrentrequestlimit","title":"concurrentRequestLimit","text":"<p>Limit concurrent requests per host.</p> Name Value type integer parents hostRules <p>Usually the default setting is fine, but you can use <code>concurrentRequestLimit</code> to limit the number of concurrent outstanding requests. You only need to adjust this setting if a datasource is rate limiting Renovate or has problems with the load. The limit will be set for any host it applies to.</p> <p>Example config:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"concurrentRequestLimit\": 2\n    }\n  ]\n}\n</code></pre> <p>Use an exact host for <code>matchHost</code> and not a domain (e.g. <code>api.github.com</code> as shown above and not <code>github.com</code>). Do not combine with <code>hostType</code> in the same rule or it won't work.</p>"},{"location":"configuration-options/#dnscache","title":"dnsCache","text":"<p>Enable got DNS cache.</p> Name Value type boolean default <code>false</code> parents hostRules <p>Enable got dnsCache support. It uses <code>lru-cache</code> with the <code>max</code> option set to <code>1000</code>.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p> <p>This feature has been deprecated</p> <p>This option is deprecated and will be removed in a future release.</p>"},{"location":"configuration-options/#enablehttp2","title":"enableHttp2","text":"<p>Enable got HTTP/2 support.</p> Name Value type boolean default <code>false</code> parents hostRules <p>Enable got http2 support.</p>"},{"location":"configuration-options/#headers","title":"headers","text":"<p>Put fields to be forwarded to the HTTP request headers in the headers config option.</p> Name Value type object parents hostRules <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>You can provide a <code>headers</code> object that includes fields to be forwarded to the HTTP request headers. By default, all headers starting with \"X-\" are allowed.</p> <p>A bot administrator may configure an override for <code>allowedHeaders</code> to configure more permitted headers.</p> <p><code>headers</code> value(s) configured in the bot admin <code>hostRules</code> (for example in a <code>config.js</code> file) are not validated, so it may contain any header regardless of <code>allowedHeaders</code>.</p> <p>For example:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com/all-versions\",\n      \"headers\": {\n        \"X-custom-header\": \"secret\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#hosttype","title":"hostType","text":"<p>hostType for a package rule. Can be a platform name or a datasource name.</p> Name Value type string parents hostRules default <code>null</code> <p><code>hostType</code> is another way to filter rules and can be either a platform such as <code>github</code> and <code>bitbucket-server</code>, or it can be a datasource such as <code>docker</code> and <code>rubygems</code>. You usually don't need to configure it in a host rule if you have already configured <code>matchHost</code> and only one host type is in use for those, as is usually the case. <code>hostType</code> can help for cases like an enterprise registry that serves multiple package types and has different authentication for each, although it's often the case that multiple <code>matchHost</code> rules could achieve the same thing.</p>"},{"location":"configuration-options/#httpscertificate","title":"httpsCertificate","text":"<p>The certificate chains in PEM format.</p> Name Value type string parents hostRules <p>Specifies the Certificate chains in PEM format for mTLS authentication.</p>"},{"location":"configuration-options/#httpscertificateauthority","title":"httpsCertificateAuthority","text":"<p>The overriding trusted CA certificate.</p> Name Value type string parents hostRules <p>By default, Renovate uses the curated list of well-known CAs by Mozilla. You may use another Certificate Authority instead, by setting it in the <code>httpsCertificateAuthority</code> config option.</p>"},{"location":"configuration-options/#httpsprivatekey","title":"httpsPrivateKey","text":"<p>The private key in PEM format.</p> Name Value type string parents hostRules <p>Specifies the private key in PEM format for mTLS authentication.</p> <p>Warning</p> <p>Do not put your private key into this field, to avoid losing confidentiality completely. You must use secrets to pass it down securely instead.</p>"},{"location":"configuration-options/#insecureregistry","title":"insecureRegistry","text":"<p>Explicitly turn on insecure Docker registry access (HTTP).</p> Name Value type boolean default <code>false</code> parents hostRules <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Enable this option to allow Renovate to connect to an insecure Docker registry that is HTTP only. This is insecure and is not recommended.</p> <p>Example:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"reg.insecure.com\",\n      \"insecureRegistry\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#keepalive","title":"keepAlive","text":"<p>Enable HTTP keep-alive for hosts.</p> Name Value type boolean default <code>false</code> parents hostRules <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>If enabled, this allows a single TCP connection to remain open for multiple HTTP(S) requests/responses.</p>"},{"location":"configuration-options/#matchhost","title":"matchHost","text":"<p>A domain name, host name or base URL to match against.</p> Name Value type string parents hostRules default <code>null</code> <p>This can be a base URL (e.g. <code>https://api.github.com</code>) or a hostname like <code>github.com</code> or <code>api.github.com</code>. If the value starts with <code>http(s)</code> then it will only match against URLs which start with the full base URL. Otherwise, it will be matched by checking if the URL's hostname matches the <code>matchHost</code> directly or ends with it. When checking the end of the hostname, a single dot is prefixed to the value of <code>matchHost</code>, if one is not already present, to ensure it can only match against whole domain segments.</p> <p>The <code>matchHost</code> URL must be the same as the <code>registryUrl</code> set in <code>.npmrc</code>, or you'll get authentication issues when the artifacts are updated when yarn or npm runs.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://gitlab.myorg.com/api/v4/packages/npm/\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n</code></pre> <p>The above corresponds with an <code>.npmrc</code> like the following:</p> <pre><code>registry=https://gitlab.myorg.com/api/v4/packages/npm/\n</code></pre> <p>Note</p> <p>Values containing a URL path but missing a scheme will be prepended with 'https://' (e.g. <code>domain.com/path</code> -&gt; <code>https://domain.com/path</code>)</p>"},{"location":"configuration-options/#maxrequestspersecond","title":"maxRequestsPerSecond","text":"<p>Limit requests rate per host.</p> Name Value type integer parents hostRules default 0 <p>In addition to <code>concurrentRequestLimit</code>, you can limit the maximum number of requests that can be made per one second. It can be used to set minimal delay between two requests to the same host. Fractional values are allowed, e.g. <code>0.25</code> means 1 request per 4 seconds. Default value <code>0</code> means no limit.</p> <p>Example config:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"maxRequestsPerSecond\": 2\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#maxretryafter","title":"maxRetryAfter","text":"<p>Maximum retry-after header value to wait for before retrying a failed request.</p> Name Value type integer default 60 parents hostRules <p>A remote host may return a <code>4xx</code> response with a <code>Retry-After</code> header value, which indicates that Renovate has been rate-limited. Renovate may try to contact the host again after waiting a certain time, that's set by the host. By default, Renovate tries again after the <code>Retry-After</code> header value has passed, up to a maximum of 60 seconds. If the <code>Retry-After</code> value is more than 60 seconds, Renovate will abort the request instead of waiting.</p> <p>You can configure a different maximum value in seconds using <code>maxRetryAfter</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"maxRetryAfter\": 25\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#newloglevel","title":"newLogLevel","text":"<p>New log level to use if matchMessage matches.</p> Name Value type string allowedValues trace, debug, info, warn, error, fatal parents logLevelRemap default <code>null</code> <p>For log level remapping, <code>newLogLevel</code> will set for the particular log message:</p> <pre><code>{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/Error executing maven wrapper update command/\",\n      \"newLogLevel\": \"warn\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#readonly","title":"readOnly","text":"<p>Match against requests that only read data and do not mutate anything.</p> Name Value type boolean parents hostRules default <code>true</code> <p>If the <code>readOnly</code> field is being set to <code>true</code> inside the host rule, it will match only against the requests that are known to be read operations. Examples are <code>GET</code> requests or <code>HEAD</code> requests, but also it could be certain types of GraphQL queries.</p> <p>This option could be used to avoid rate limits for certain platforms like GitHub or Bitbucket, by offloading the read operations to a different user.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"readOnly\": true,\n      \"token\": \"********\"\n    }\n  ]\n}\n</code></pre> <p>If more than one token matches for a read-only request then the <code>readOnly</code> token will be given preference.</p>"},{"location":"configuration-options/#timeout","title":"timeout","text":"<p>Timeout (in milliseconds) for queries to external endpoints.</p> Name Value type integer parents hostRules <p>Use this figure to adjust the timeout for queries. The default is 60s, which is quite high. To adjust it down to 10s for all queries, do this:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"timeout\": 10000\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#ignoredeprecated","title":"ignoreDeprecated","text":"<p>Avoid upgrading from a non-deprecated version to a deprecated one.</p> Name Value type boolean default <code>true</code> cli <code>--ignore-deprecated</code> env <code>RENOVATE_IGNORE_DEPRECATED</code> <p>By default, Renovate won't update a dependency version to a deprecated release unless the current version was itself deprecated. The goal of this is to make sure you don't upgrade from a non-deprecated version to a deprecated one, only because it's higher than the current version.</p> <p>If for some reason you wish to force deprecated updates with Renovate, you can configure <code>ignoreDeprecated</code> to <code>false</code>, which we do not recommend for most situations.</p>"},{"location":"configuration-options/#ignoredeps","title":"ignoreDeps","text":"<p>Dependencies to ignore.</p> Name Value type array subType string mergeable true cli <code>--ignore-deps</code> env <code>RENOVATE_IGNORE_DEPS</code> default `[]` <p>The <code>ignoreDeps</code> configuration field allows you to define a list of dependency names to be ignored by Renovate. Currently it supports only \"exact match\" dependency names and not any patterns. e.g. to ignore both <code>eslint</code> and <code>eslint-config-base</code> you would add this to your config:</p> <pre><code>{\n  \"ignoreDeps\": [\"eslint\", \"eslint-config-base\"]\n}\n</code></pre> <p>The above is the same as if you wrote this package rule:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint\", \"eslint-config-base\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#ignorepaths","title":"ignorePaths","text":"<p>Skip any package file whose path matches one of these. Can be a string or glob pattern.</p> Name Value type array mergeable false subType string default <pre><code>[\"**/node_modules/**\", \"**/bower_components/**\"]\n</code></pre> cli <code>--ignore-paths</code> env <code>RENOVATE_IGNORE_PATHS</code> default `[]` <p>Renovate will extract dependencies from every file it finds in a repository, unless that file is explicitly ignored. With this setting you can selectively ignore package files that would normally be \"autodiscovered\" and updated by Renovate.</p> <p>For instance if you have a project with an <code>\"examples/\"</code> directory you wish to ignore:</p> <pre><code>{\n  \"ignorePaths\": [\"**/examples/**\"]\n}\n</code></pre> <p>Renovate's default ignore is <code>node_modules</code> and <code>bower_components</code> only. If you are extending from the popular <code>config:recommended</code> preset then it adds ignore patterns for <code>vendor</code>, <code>examples</code>, <code>test(s)</code> and <code>fixtures</code> directories too.</p>"},{"location":"configuration-options/#ignoreplugins","title":"ignorePlugins","text":"<p>Set this to <code>true</code> if <code>allowPlugins=true</code> but you wish to skip running plugins when updating lock files.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-plugins</code> env <code>RENOVATE_IGNORE_PLUGINS</code> <p>Set this to <code>true</code> if running plugins causes problems. Applicable for Composer only for now.</p>"},{"location":"configuration-options/#ignorepresets","title":"ignorePresets","text":"<p>A list of presets to ignore, including any that are nested inside an <code>extends</code> array.</p> Name Value type array subType string env <code>RENOVATE_IGNORE_PRESETS</code> default `[]` <p>Use this if you are extending a complex preset but don't want to use every \"sub preset\" that it includes. For example, consider this config:</p> <pre><code>{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePresets\": [\"group:monorepos\"]\n}\n</code></pre> <p>It would take the entire <code>\"config:recommended\"</code> preset - which has a lot of sub-presets - but ignore the <code>\"group:monorepos\"</code> rule.</p>"},{"location":"configuration-options/#ignorereviewers","title":"ignoreReviewers","text":"<p>Reviewers to be ignored in PR reviewers presence (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--ignore-reviewers</code> env <code>RENOVATE_IGNORE_REVIEWERS</code> default `[]` <p>By default, Renovate does not add assignees or reviewers to PRs which are configured for automerge. If tests have failed, Renovate then does add them, but only if the assignees and reviewers list is empty. In the case that a user is automatically added as reviewer (such as Renovate Approve bot) and you want to ignore it for the purpose of this decision, add it to the <code>ignoreReviewers</code> list.</p> <pre><code>{\n  \"reviewers\": [\"foo\"],\n  \"ignoreReviewers\": [\"renovate-approve\"]\n}\n</code></pre> <p>Please note that Reviewers are only added during creation of a PR, but are not modified afterwards.</p>"},{"location":"configuration-options/#ignorescripts","title":"ignoreScripts","text":"<p>Set this to <code>false</code> if <code>allowScripts=true</code> and you wish to run scripts when updating lock files.</p> Name Value type boolean default <code>true</code> supportedManagers npm, bun, composer, copier cli <code>--ignore-scripts</code> env <code>RENOVATE_IGNORE_SCRIPTS</code> <p>By default, Renovate will disable package manager scripts. Allowing packager manager scripts is a risk:</p> <ul> <li>Untrusted or compromised repository users could use package manager scripts to exploit the system where Renovate runs, and</li> <li>Malicious package authors could use scripts to exploit a repository and Renovate system, for example to exfiltrate source code and secrets</li> </ul> <p>No script execution on free Mend-hosted Renovate</p> <p>The Mend Renovate App does not allow scripts to run. We do not plan to let users on free tiers run scripts, because the risk of abuse is too high.</p> <p>Renovate Enterprise Cloud can be configured to run scripts</p> <p>Scripts can be enabled for paying customers on Mend.io hosted apps. Please ask Mend.io sales about \"Renovate Enterprise Cloud\".</p> <p>Allowing scripts if self-hosting Renovate</p> <p>If you are self-hosting Renovate, and want to allow Renovate to run any scripts:</p> <ol> <li>Set the self-hosted config option <code>allowScripts</code> to <code>true</code> in your bot/admin configuration</li> <li>Set <code>ignoreScripts</code> to <code>false</code> for the package managers you want to allow to run scripts (only works for the supportedManagers listed in the table above)</li> </ol>"},{"location":"configuration-options/#ignoretests","title":"ignoreTests","text":"<p>Set to <code>true</code> to enable automerging without tests.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-tests</code> env <code>RENOVATE_IGNORE_TESTS</code> <p>Currently Renovate's default behavior is to only automerge if every status check has succeeded.</p> <p>Setting this option to <code>true</code> means that Renovate will ignore all status checks. You can set this if you don't have any status checks but still want Renovate to automerge PRs. Beware: configuring Renovate to automerge without any tests can lead to broken builds on your base branch, please think again before enabling this!</p>"},{"location":"configuration-options/#ignoreunstable","title":"ignoreUnstable","text":"<p>Ignore versions with unstable SemVer.</p> Name Value type boolean default <code>true</code> cli <code>--ignore-unstable</code> env <code>RENOVATE_IGNORE_UNSTABLE</code> <p>By default, Renovate won't update any package versions to unstable versions (e.g. <code>4.0.0-rc3</code>) unless the current version has the same <code>major.minor.patch</code> and was already unstable (e.g. it was already on <code>4.0.0-rc2</code>). Renovate will also not \"jump\" unstable versions automatically, e.g. if you are on <code>4.0.0-rc2</code> and newer versions <code>4.0.0</code> and <code>4.1.0-alpha.1</code> exist then Renovate will update you to <code>4.0.0</code> only. If you need to force permanent unstable updates for a package, you can add a package rule setting <code>ignoreUnstable</code> to <code>false</code>. In that case you will usually also want to set <code>respectLatest</code> to <code>false</code> so that Renovate considers versions ahead of <code>latest</code>.</p> <p>Also check out the <code>followTag</code> configuration option above if you wish Renovate to keep you pinned to a particular release tag.</p>"},{"location":"configuration-options/#includepaths","title":"includePaths","text":"<p>Include package files only within these defined paths.</p> Name Value type array subType string cli <code>--include-paths</code> env <code>RENOVATE_INCLUDE_PATHS</code> default `[]` <p>If you wish for Renovate to process only select paths in the repository, use <code>includePaths</code>.</p> <p>Alternatively, if you need to exclude certain paths in the repository then consider <code>ignorePaths</code> instead. If you are more interested in including only certain package managers (e.g. <code>npm</code>), then consider <code>enabledManagers</code> instead.</p>"},{"location":"configuration-options/#internalchecksassuccess","title":"internalChecksAsSuccess","text":"<p>Whether to consider passing internal checks such as <code>minimumReleaseAge</code> when determining branch status.</p> Name Value type boolean default <code>false</code> cli <code>--internal-checks-as-success</code> env <code>RENOVATE_INTERNAL_CHECKS_AS_SUCCESS</code> <p>By default, internal Renovate checks such as <code>renovate/stability-days</code> are not counted towards a branch being \"green\" or not. This is primarily to prevent automerge when the only check is a passing Renovate check.</p> <p>Internal checks will always be counted/considered if they are in pending or failed states. If there are multiple passing checks for a branch, including non-Renovate ones, then this setting won't make any difference.</p> <p>Change this setting to <code>true</code> if you want to use internal Renovate checks towards a passing branch result.</p>"},{"location":"configuration-options/#internalchecksfilter","title":"internalChecksFilter","text":"<p>When and how to filter based on internal checks.</p> Name Value type string allowedValues strict, flexible, none default <code>\"strict\"</code> cli <code>--internal-checks-filter</code> env <code>RENOVATE_INTERNAL_CHECKS_FILTER</code> <p>This setting determines whether Renovate controls when and how filtering of internal checks are performed, particularly when multiple versions of the same update type are available. Currently this applies to the <code>minimumReleaseAge</code> check only.</p> <ul> <li><code>none</code>: No filtering will be performed, and the highest release will be used regardless of whether it's pending or not</li> <li><code>strict</code>: All pending releases will be filtered. PRs will be skipped unless a non-pending version is available</li> <li><code>flexible</code>: Similar to strict, but in the case where all versions are pending then a PR will be created with the highest pending version</li> </ul> <p>The <code>flexible</code> mode can result in \"flapping\" of Pull Requests, for example: a pending PR with version <code>1.0.3</code> is first released but then downgraded to <code>1.0.2</code> once it passes <code>minimumReleaseAge</code>. We recommend that you use the <code>strict</code> mode, and enable the <code>dependencyDashboard</code> so that you can see suppressed PRs.</p>"},{"location":"configuration-options/#keepupdatedlabel","title":"keepUpdatedLabel","text":"<p>If set, users can add this label to PRs to request they be kept updated with the base branch.</p> Name Value type string supportedPlatforms azure, forgejo, gerrit, gitea, github, gitlab cli <code>--keep-updated-label</code> env <code>RENOVATE_KEEP_UPDATED_LABEL</code> default <code>null</code> <p>On supported platforms you may add a label to a PR so that Renovate recreates/rebases the PR when the branch falls behind the base branch. Adding the <code>keepUpdatedLabel</code> label to a PR makes Renovate behave as if <code>rebaseWhen</code> were set to <code>behind-base-branch</code>, but only for the given PR. Renovate does not remove the label from the PR after it finishes rebasing. This is different from the <code>rebaseLabel</code> option, where Renovate removes the label from the PR after rebasing.</p> <p><code>keepUpdatedLabel</code> can be useful when you have approved certain PRs and want Renovate to keep the PRs up-to-date until you're ready to merge them. The setting <code>keepUpdatedLabel</code> is best used in this scenario:</p> <ul> <li>By default, you configure <code>rebaseWhen</code> to <code>never</code> or <code>conflicted</code> to reduce rebasing</li> <li>Sometimes, you want Renovate to keep specific PRs up-to-date with their base branch (equivalent to <code>rebaseWhen=behind-base-branch</code>)</li> </ul>"},{"location":"configuration-options/#labels","title":"labels","text":"<p>Labels to set in Pull Request.</p> Name Value type array subType string cli <code>--labels</code> env <code>RENOVATE_LABELS</code> default `[]` <p>By default, Renovate won't add any labels to PRs. If you want Renovate to add labels to PRs it creates then define a <code>labels</code> array of one or more label strings. If you want the same label(s) for every PR then you can configure it at the top level of config. However you can also fully override them on a per-package basis.</p> <p>Consider this example:</p> <pre><code>{\n  \"labels\": [\"dependencies\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"labels\": [\"linting\"]\n    }\n  ]\n}\n</code></pre> <p>With the above config, every PR raised by Renovate will have the label <code>dependencies</code> while PRs containing <code>eslint</code>-related packages will instead have the label <code>linting</code>.</p> <p>Behavior details:</p> <ul> <li>On Forgejo, Gitea, GitHub and GitLab: Renovate will keep PR labels in sync with configured labels, provided that no other user or bot has made changes to the labels after PR creation. If labels are changed by any other account, Renovate will stop making further changes.</li> <li>For other platforms, Renovate will add labels only at time of PR creation and not update them after that.</li> </ul> <p>The <code>labels</code> array is non-mergeable, meaning if multiple <code>packageRules</code> match then Renovate uses the last value for <code>labels</code>. If you want to add/combine labels, use the <code>addLabels</code> config option, which is mergeable.</p> <p>Note</p> <p>Keep your labels within the maximum character limit for your Git hosting platform. Renovate usually truncates labels to 50 characters, except for GitLab, which has a 255 character limit.</p>"},{"location":"configuration-options/#lockfilemaintenance","title":"lockFileMaintenance","text":"<p>Configuration for lock file maintenance.</p> Name Value type object default <pre><code>{\n  \"enabled\": false,\n  \"recreateWhen\": \"always\",\n  \"rebaseStalePrs\": true,\n  \"branchTopic\": \"lock-file-maintenance\",\n  \"commitMessageAction\": \"Lock file maintenance\",\n  \"commitMessageTopic\": null,\n  \"commitMessageExtra\": null,\n  \"schedule\": [\"before 4am on monday\"],\n  \"groupName\": null,\n  \"prBodyDefinitions\": {\"Change\": \"All locks refreshed\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_LOCK_FILE_MAINTENANCE</code> <p>You can use <code>lockFileMaintenance</code> to refresh lock files to keep them up-to-date.</p> <p>When Renovate performs <code>lockFileMaintenance</code> it deletes the lock file and runs the relevant package manager. That package manager creates a new lock file, where all dependency versions are updated to the latest version. Renovate then commits that lock file to the update branch and creates the lock file update PR.</p> <p>Supported lock files:</p> Manager Lockfile <code>bun</code> <code>bun.lockb</code>, <code>bun.lock</code> <code>bundler</code> <code>Gemfile.lock</code> <code>cargo</code> <code>Cargo.lock</code> <code>composer</code> <code>composer.lock</code> <code>conan</code> <code>conan.lock</code> <code>devbox</code> <code>devbox.lock</code> <code>gleam</code> <code>manifest.toml</code> <code>gradle</code> <code>gradle.lockfile</code> <code>helmv3</code> <code>Chart.lock</code> <code>jsonnet-bundler</code> <code>jsonnetfile.lock.json</code> <code>mix</code> <code>mix.lock</code> <code>nix</code> <code>flake.lock</code> <code>npm</code> <code>package-lock.json</code>, <code>pnpm-lock.yaml</code>, <code>yarn.lock</code> <code>nuget</code> <code>packages.lock.json</code> <code>pep621</code> <code>pdm.lock</code>, <code>uv.lock</code> <code>pip-compile</code> <code>requirements.txt</code> <code>pipenv</code> <code>Pipfile.lock</code> <code>pixi</code> <code>pixi.lock</code> <code>poetry</code> <code>poetry.lock</code> <code>pub</code> <code>pubspec.lock</code> <code>terraform</code> <code>.terraform.lock.hcl</code> <p>Support for new lock files may be added via feature request.</p> <p>By default, <code>lockFileMaintenance</code> is disabled. To enable <code>lockFileMaintenance</code> add this to your configuration:</p> <pre><code>{\n  \"lockFileMaintenance\": { \"enabled\": true }\n}\n</code></pre> <p>To reduce \"noise\" in the repository, Renovate performs <code>lockFileMaintenance</code> <code>\"before 4am on monday\"</code>, i.e. to achieve once-per-week semantics. Depending on its running schedule, Renovate may run a few times within that time window - even possibly updating the lock file more than once - but it hopefully leaves enough time for tests to run and automerge to apply, if configured.</p>"},{"location":"configuration-options/#loglevelremap","title":"logLevelRemap","text":"<p>Remap log levels to different levels.</p> Name Value type array subType object mergeable true default `[]` <p>This option allows you to remap log levels for specific messages.</p> <p>Be careful with remapping <code>warn</code> or <code>error</code> messages to lower log levels, as it may hide important information.</p> <pre><code>{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/^pip-compile:/\",\n      \"newLogLevel\": \"info\"\n    },\n    {\n      \"matchMessage\": \"Package lookup error\",\n      \"newLogLevel\": \"warn\"\n    },\n    {\n      \"matchMessage\": \"/^Please upgrade the version of Node.js/\",\n      \"newLogLevel\": \"info\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#major","title":"major","text":"<p>Configuration to apply when an update type is <code>major</code>.</p> Name Value type object mergeable true env <code>RENOVATE_MAJOR</code> <p>Add to this object if you wish to define rules that apply only to major updates.</p>"},{"location":"configuration-options/#managerfilepatterns","title":"managerFilePatterns","text":"<p>RegEx (<code>re2</code>) and glob patterns for matching manager files.</p> Name Value type array subType string mergeable true parents ansible, ansible-galaxy, argocd, asdf, azure-pipelines, batect, batect-wrapper, bazel, bazel-module, bazelisk, bicep, bitbucket-pipelines, bitrise, buildkite, buildpacks, bun, bun-version, bundler, cake, cargo, cdnurl, circleci, cloudbuild, cocoapods, composer, conan, copier, cpanfile, crossplane, crow, deps-edn, devbox, devcontainer, docker-compose, dockerfile, droneci, fleet, flux, fvm, git-submodules, github-actions, gitlabci, gitlabci-include, glasskube, gleam, gomod, gradle, gradle-wrapper, haskell-cabal, helm-requirements, helm-values, helmfile, helmsman, helmv3, hermit, homebrew, html, jenkins, jsonnet-bundler, kotlin-script, kubernetes, kustomize, leiningen, maven, maven-wrapper, meteor, mint, mise, mix, nix, nodenv, npm, nuget, nvm, ocb, osgi, pep621, pep723, pip-compile, pip_requirements, pip_setup, pipenv, pixi, poetry, pre-commit, pub, puppet, pyenv, quadlet, renovate-config-presets, ruby-version, runtime-version, sbt, scalafmt, setup-cfg, sveltos, swift, tekton, terraform, terraform-version, terragrunt, terragrunt-version, tflint-plugin, travis, typst, unity3d, velaci, vendir, woodpecker, customManagers default `[]` <p>Formerly known as <code>fileMatch</code>, which supported regex-only.</p> <p><code>managerFilePatterns</code> supports both regex and glob patterns. Any existing config containing <code>fileMatch</code> patterns will be automatically migrated.</p> <p>Do not use the below guide for <code>fileMatch</code> if you are using an older version of Renovate.</p> <p><code>managerFilePatterns</code> tells Renovate which repository files to parse and extract. Patterns in the user config are added to the default values, they do not replace the default values.</p> <p>The default <code>managerFilePatterns</code> patterns can not be removed. If you need to include, or exclude, specific paths then use the <code>ignorePaths</code> or <code>includePaths</code> instead.</p> <p>Some managers have sensible defaults. For example, the Go manager looks for any <code>go.mod</code> file by default, which covers most cases without extra configuration.</p> <p>At other times, the possible files is too vague for Renovate to have any default. For example, Kubernetes manifests can exist in any <code>*.yaml</code> file. We do not want Renovate to parse every YAML file in every repository, just in case some of them have a Kubernetes manifest. Therefore Renovate's default <code>managerFilePatterns</code> for the <code>kubernetes</code> manager is an empty array (<code>[]</code>). Because the array is empty, you as user must tell Renovate which directories/files to check.</p> <p>Finally, there are cases where Renovate's default <code>managerFilePatterns</code> is good, but you may be using file patterns that a bot couldn't possibly guess. For example, Renovate's default <code>managerFilePatterns</code> for <code>Dockerfile</code> is <code>['/(^|/|\\\\.)([Dd]ocker|[Cc]ontainer)file$/', '/(^|/)([Dd]ocker|[Cc]ontainer)file[^/]*$/']</code>. This will catch files like <code>backend/Dockerfile</code>, <code>prefix.Dockerfile</code> or <code>Dockerfile-suffix</code>, but it will miss files like <code>ACTUALLY_A_DOCKERFILE.template</code>. Because <code>managerFilePatterns</code> is \"mergeable\", you can add the missing file to the <code>filePattern</code> like this:</p> <pre><code>{\n  \"dockerfile\": {\n    \"managerFilePatterns\": [\"/^ACTUALLY_A_DOCKERFILE\\\\.template$/\"]\n  }\n}\n</code></pre> <p>You must configure <code>managerFilePatterns</code> inside a manager object. In the example above, the manager object is the <code>dockerfile</code>. For reference, here is a list of supported managers.</p>"},{"location":"configuration-options/#milestone","title":"milestone","text":"<p>The number of a milestone. If set, the milestone will be set when Renovate creates the PR.</p> Name Value type integer supportedPlatforms github cli <code>--milestone</code> env <code>RENOVATE_MILESTONE</code> <p>If set to the number of an existing GitHub milestone, Renovate will add that milestone to its PR. Renovate will only add a milestone when it creates the PR.</p> Example Renovate config<pre><code>{\n  \"milestone\": 12\n}\n</code></pre>"},{"location":"configuration-options/#minimumgroupsize","title":"minimumGroupSize","text":"<p>The minimum number of updates which must be in a group for branches to be created.</p> Name Value type integer default 1 cli <code>--minimum-group-size</code> env <code>RENOVATE_MINIMUM_GROUP_SIZE</code> <p>If set to to a positive value x then branch creation will be postponed until x or more updates are available in the branch.</p> <p>This applies to both these scenarios:</p> <ul> <li>Grouped updates with more than one dependency updated together, and</li> <li>Branches with multiple updates of the same dependency (e.g. in multiple files)</li> </ul> <p>Example:</p> Create only a grouped update when there are 3 or more node updates<pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"We need to update Node in two places - always wait until both upgrades are available\",\n      \"matchDepNames\": [\"node\"],\n      \"groupName\": \"Node.js\",\n      \"minimumGroupSize\": 3\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#minimumreleaseage","title":"minimumReleaseAge","text":"<p>Time required before a new release is considered stable.</p> Name Value type string cli <code>--minimum-release-age</code> env <code>RENOVATE_MINIMUM_RELEASE_AGE</code> <p>This feature used to be called <code>stabilityDays</code>.</p> <p>If <code>minimumReleaseAge</code> is set to a time duration and the update has a release timestamp header, then Renovate will check if the set duration has passed. This behaviour can be changed using <code>minimumReleaseAgeBehaviour</code>.</p> <p>Note: Renovate will wait for the set duration to pass for each separate version. Renovate does not wait until the package has seen no releases for x time-duration(<code>minimumReleaseAge</code>).</p> <p>Do not use <code>minimumReleaseAge</code> to slow down fast releasing project updates. Instead setup a custom <code>schedule</code> for that package, read our selective-scheduling help to learn how.</p> <p>When the time passed since the release is less than the set <code>minimumReleaseAge</code>: Renovate adds a \"pending\" status check to that update's branch. After enough days have passed: Renovate replaces the \"pending\" status with a \"passing\" status check.</p> <p>The datasource that Renovate uses must have a release timestamp for the <code>minimumReleaseAge</code> config option to work. Some datasources may have a release timestamp, but in a format Renovate does not support. In those cases a feature request needs to be implemented.</p> <p>You can confirm if your datasource supports the release timestamp by viewing the documentation for the given datasource.</p> <p>Note</p> <p>If you use a custom registry, for instance as a pull-through cache, additional configuration may be required. The the documentation for the datasource provides information about which field(s) need to be returned from the registry. Alternatively, it may be possible to configure the <code>registryUrls</code>, like we can see in the below Maven example:</p> <p>Warning for Maven users</p> <p>For <code>minimumReleaseAge</code> to work, the Maven source must return reliable <code>last-modified</code> headers.</p> <p> If your custom Maven source registry is pull-through and does not support the <code>last-modified</code> header, like GAR (Google Artifact Registry's Maven implementation) then you can extend the Maven source registry URL with <code>https://repo1.maven.org/maven2</code> as the first item. Then the <code>currentVersionTimestamp</code> via <code>last-modified</code> will be taken from Maven central for public dependencies.</p> <p><pre><code>\"registryUrls\": [\n  \"https://repo1.maven.org/maven2\",\n  \"https://europe-maven.pkg.dev/org-artifacts/maven-virtual\"\n],\n</code></pre> </p> <p>Note</p> <p>Configuring this option will add a <code>renovate/stability-days</code> option to the status checks.</p> <p>Examples of how you can use <code>minimumReleaseAge</code>:</p>"},{"location":"configuration-options/#suppress-branchpr-creation-for-x-days","title":"Suppress branch/PR creation for X days","text":"<p>If you use <code>minimumReleaseAge=3 days</code> and <code>internalChecksFilter=\"strict\"</code> then Renovate only creates branches when 3 (or more days) have passed since the version was released. We recommend you set <code>dependencyDashboard=true</code>, so you can see these pending PRs.</p>"},{"location":"configuration-options/#prevent-holding-broken-npm-packages","title":"Prevent holding broken npm packages","text":"<p>npm packages less than 72 hours (3 days) old can be unpublished from the npm registry, which could result in a service impact if you have already updated to it. Set <code>minimumReleaseAge</code> to <code>3 days</code> for npm packages to prevent relying on a package that can be removed from the registry:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"minimumReleaseAge\": \"3 days\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#await-x-time-duration-before-automerging","title":"Await X time duration before Automerging","text":"<p>If you enable <code>automerge</code> and <code>minimumReleaseAge</code>, Renovate will create PRs immediately, but only automerge them when the <code>minimumReleaseAge</code> time-duration has passed.</p> <p>Renovate adds a \"renovate/stability-days\" pending status check to each branch/PR. This pending check prevents the branch going green to automerge before the time has passed.</p>"},{"location":"configuration-options/#minimumreleaseagebehaviour","title":"minimumReleaseAgeBehaviour","text":"<p>When set in conjunction with <code>minimumReleaseAge</code>, controls whether the <code>releaseTimestamp</code> for a dependency update is required.</p> Name Value type string default <code>\"timestamp-optional\"</code> allowedValues timestamp-required, timestamp-optional cli <code>--minimum-release-age-behaviour</code> env <code>RENOVATE_MINIMUM_RELEASE_AGE_BEHAVIOUR</code> <p>When <code>minimumReleaseAge</code> is set to a time duration, the <code>minimumReleaseAgeBehaviour</code> will be used to control whether the release timestamp is required.</p> <p>When set to <code>timestamp-required</code>, this version is not treated stable unless there is release timestamp, and that release timestamp is past the <code>minimumReleaseAge</code>.</p> <p>When set to <code>timestamp-optional</code>, Renovate will treat a release without a releaseTimestamp as stable.</p> <p>This only applies when used with <code>minimumReleaseAge</code>.</p>"},{"location":"configuration-options/#minor","title":"minor","text":"<p>Configuration to apply when an update type is <code>minor</code>.</p> Name Value type object mergeable true env <code>RENOVATE_MINOR</code> <p>Add to this object if you wish to define rules that apply only to minor updates.</p>"},{"location":"configuration-options/#mode","title":"mode","text":"<p>Mode of operation.</p> Name Value type string default <code>\"full\"</code> allowedValues full, silent cli <code>--mode</code> env <code>RENOVATE_MODE</code> <p>This configuration option was created primarily for use with Mend's hosted app, but can also be useful for some self-hosted use cases.</p> <p>It enables a new <code>silent</code> mode to allow repos to be scanned for updates and for users to be able to request such updates be opened in PRs on demand through the Mend UI, without needing the Dependency Dashboard issue in the repo.</p> <p>Although similar, the options <code>mode=silent</code> and <code>dryRun</code> can be used together. When both are configured, <code>dryRun</code> takes precedence, so for example PRs won't be created.</p> <p>Configuring <code>silent</code> mode is quite similar to <code>dryRun=lookup</code> except:</p> <ul> <li>It will bypass onboarding checks (unlike when performing a dry run on a non-onboarded repo) similar to <code>requireConfig=optional</code></li> <li>It can create branches/PRs if <code>checkedBranches</code> is set</li> <li>It will keep any existing branches up-to-date (e.g. ones created previously using <code>checkedBranches</code>)</li> </ul> <p>When in <code>silent</code> mode Renovate will:</p> <ul> <li>not create or update any Issue: even the Dependency Dashboard or Config Warning Issues will stay as-is</li> <li>not prune or close any existing Issues</li> <li>not create any Config Migration PRs, even if you explicitly enabled Config Migration PRs in your Renovate config</li> </ul>"},{"location":"configuration-options/#npmtoken","title":"npmToken","text":"<p>npm token used to authenticate with the default registry.</p> Name Value type string cli <code>--npm-token</code> env <code>RENOVATE_NPM_TOKEN</code> default <code>null</code> <p>See Private npm module support for details on how this is used. Typically you would encrypt it and put it inside the <code>encrypted</code> object.</p>"},{"location":"configuration-options/#npmrc","title":"npmrc","text":"<p>String copy of <code>.npmrc</code> file. Use <code>\\n</code> instead of line breaks.</p> Name Value type string cli <code>--npmrc</code> env <code>RENOVATE_NPMRC</code> default <code>null</code> <p>See Private npm module support for details on how this is used.</p>"},{"location":"configuration-options/#npmrcmerge","title":"npmrcMerge","text":"<p>Whether to merge <code>config.npmrc</code> with repo <code>.npmrc</code> content if both are found.</p> Name Value type boolean default <code>false</code> cli <code>--npmrc-merge</code> env <code>RENOVATE_NPMRC_MERGE</code> <p>This option exists to provide flexibility about whether <code>npmrc</code> strings in config should override <code>.npmrc</code> files in the repo, or be merged with them. In some situations you need the ability to force override <code>.npmrc</code> contents in a repo (<code>npmrcMerge=false</code>) while in others you might want to simply supplement the settings already in the <code>.npmrc</code> (<code>npmrcMerge=true</code>). A use case for the latter is if you are a Renovate bot admin and wish to provide a default token for <code>npmjs.org</code> without removing any other <code>.npmrc</code> settings which individual repositories have configured (such as scopes/registries).</p> <p>If <code>false</code> (default), it means that defining <code>config.npmrc</code> will result in any <code>.npmrc</code> file in the repo being overridden and its values ignored. If configured to <code>true</code>, it means that any <code>.npmrc</code> file in the repo will have <code>config.npmrc</code> prepended to it before running <code>npm</code>.</p>"},{"location":"configuration-options/#osvvulnerabilityalerts","title":"osvVulnerabilityAlerts","text":"<p>Use vulnerability alerts from <code>osv.dev</code>.</p> Name Value type boolean default <code>false</code> cli <code>--osv-vulnerability-alerts</code> env <code>RENOVATE_OSV_VULNERABILITY_ALERTS</code> <p>Renovate integrates with OSV, an open-source vulnerability database, to check if extracted dependencies have known vulnerabilities. Set <code>osvVulnerabilityAlerts</code> to <code>true</code> to get pull requests with vulnerability fixes (once they are available).</p> <p>You will only get OSV-based vulnerability alerts for direct dependencies. Renovate only queries the OSV database for dependencies that use one of these datasources:</p> <ul> <li><code>crate</code></li> <li><code>go</code></li> <li><code>hackage</code></li> <li><code>hex</code></li> <li><code>maven</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>packagist</code></li> <li><code>pypi</code></li> <li><code>rubygems</code></li> </ul> <p>The entire database is downloaded locally by renovate-offline and queried offline.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.To track this feature visit the following GitHub issue #20542.</p>"},{"location":"configuration-options/#packagerules","title":"packageRules","text":"<p>Rules for matching packages.</p> Name Value type array mergeable true cli <code>--package-rules</code> env <code>RENOVATE_PACKAGE_RULES</code> default `[]` <p><code>packageRules</code> is a powerful feature that lets you apply rules to individual packages or to groups of packages using regex pattern matching.</p> <p><code>packageRules</code> is a collection of rules, that are all evaluated. If multiple rules match a dependency, configurations from matching rules will be merged together. The order of rules matters, because later rules may override configuration options from earlier ones, if they both specify the same option.</p> <p>The matching process for a package rule:</p> <ul> <li>Each package rule must include at least one <code>match...</code> matcher.</li> <li>If multiple matchers are included in one package rule, all of them must match.</li> <li>Each matcher must contain at least one pattern. Some matchers allow both positive and negative patterns.</li> <li>If a matcher includes any positive patterns, it must match at least one of them.</li> <li>A matcher returns <code>false</code> if it matches any negative pattern, even if a positive match also occurred.</li> </ul> <p>For more details on positive and negative pattern syntax see Renovate's string pattern matching documentation.</p> <p>Here is an example if you want to group together all packages starting with <code>eslint</code> into a single branch/PR:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint**\"],\n      \"groupName\": \"eslint packages\"\n    }\n  ]\n}\n</code></pre> <p>Note how the above uses <code>matchPackageNames</code> with a prefix pattern.</p> <p>Here's an example config to limit the \"noisy\" AWS SDK packages to weekly updates:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule AWS SDK updates on Sunday nights (9 PM - 12 AM)\",\n      \"matchPackageNames\": [\"@aws-sdk/*\"],\n      \"schedule\": [\"* 21-23 * * 0\"]\n    }\n  ]\n}\n</code></pre> <p>For Maven dependencies, the package name is <code>&lt;groupId:artefactId&gt;</code>, e.g. <code>\"matchPackageNames\": [\"com.thoughtworks.xstream:xstream\"]</code></p> <p>Note how the above uses an exact match string for <code>matchPackageNames</code> instead of a pattern However you can mix together both patterns and exact matches in the same package rule and the rule will be applied if either match. Example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"neutrino\", \"@neutrino/**\"],\n      \"groupName\": \"neutrino monorepo\"\n    }\n  ]\n}\n</code></pre> <p>The above rule will group together the <code>neutrino</code> package and any package starting with <code>@neutrino/</code>.</p> <p>File name matches are convenient to use if you wish to apply configuration rules to certain package or lock files using patterns. For example, if you have an <code>examples</code> directory and you want all updates to those examples to use the <code>chore</code> prefix instead of <code>fix</code>, then you could add this configuration:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"examples/**\"],\n      \"extends\": [\":semanticCommitTypeAll(chore)\"]\n    }\n  ]\n}\n</code></pre> <p>If you wish to limit Renovate to apply configuration rules to certain files in the root repository directory, you have to use <code>matchFileNames</code> with a <code>minimatch</code> glob (which can include an exact file name match) or RE2 regex.</p> <p>For more details on supported syntax see Renovate's string pattern matching documentation.</p> <p>For example you have multiple <code>package.json</code> and want to use <code>dependencyDashboardApproval</code> only on the root <code>package.json</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"package.json\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n</code></pre> <p>Tip</p> <p>Order your <code>packageRules</code> so the least important rules are at the top, and the most important rules at the bottom. This way important rules override settings from earlier rules if needed.</p> <p>Warning</p> <p>Avoid nesting any <code>object</code>-type configuration in a <code>packageRules</code> array, such as a <code>major</code> or <code>minor</code> block.</p>"},{"location":"configuration-options/#allowedversions","title":"allowedVersions","text":"<p>A version range or regex pattern capturing allowed versions for dependencies.</p> Name Value type string parents packageRules default <code>null</code> <p>You can use <code>allowedVersions</code> - usually within a <code>packageRules</code> entry - to limit how far to upgrade a dependency.</p> <p>For example, if you want to upgrade to Angular v1.5 but not to <code>angular</code> v1.6 or higher, you could set <code>allowedVersions</code> to <code>&lt;= 1.5</code> or <code>&lt; 1.6.0</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"angular\"],\n      \"allowedVersions\": \"&lt;=1.5\"\n    }\n  ]\n}\n</code></pre> <p>Renovate calculates the valid syntax for this at runtime, because it depends on the dynamic versioning scheme.</p> <p>Warning</p> <p><code>allowedVersions</code> and <code>matchUpdateTypes</code> cannot be used in the same package rule.</p>"},{"location":"configuration-options/#using-regular-expressions","title":"Using regular expressions","text":"<p>You can use Regular Expressions in the <code>allowedVersions</code> config. You must begin and end your Regular Expression with the <code>/</code> character!</p> <p>For example, this config only allows 3 or 4-part versions, without any prefixes in the version:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"com.thoughtworks.xstream:xstream\"],\n      \"allowedVersions\": \"/^[0-9]+\\\\.[0-9]+\\\\.[0-9]+(\\\\.[0-9]+)?$/\"\n    }\n  ]\n}\n</code></pre> <p>Again: note how the Regular Expression begins and ends with the <code>/</code> character.</p>"},{"location":"configuration-options/#ignore-versions-with-negated-regex-syntax","title":"Ignore versions with negated regex syntax","text":"<p>You can use a special negated regex syntax to ignore certain versions. You must use the <code>!/ /</code> syntax, like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"chalk\"],\n      \"allowedVersions\": \"!/java$/\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#changelogurl","title":"changelogUrl","text":"<p>Set a custom URL for the changelog. Renovate will put this URL in the PR body text.</p> Name Value type string parents packageRules default <code>null</code> <p>Sometimes Renovate does not show the correct changelog for a package. As a workaround for this problem, you can give Renovate the URL to the changelog with the <code>changelogUrl</code> config option. When set, Renovate will put a link to the changelogs in the Renovate PR body.</p> <p>Renovate does not show the complete changelogs from the <code>changelogUrl</code> in its PR body text, you only get the URL from Renovate. To read the changelogs you must use the link.</p> Setting the changelog URL for the dummy package<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"changelogUrl\": \"https://github.com/org/dummy\"\n    }\n  ]\n}\n</code></pre> <p><code>changelogUrl</code> supports template compilation.</p> Setting the changelog URL for the dummy package using a template<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"changelogUrl\": \"https://github.com/org/monorepo/blob/{{{sourceDirectory}}}/my-custom-changelog.txt\"\n    }\n  ]\n}\n</code></pre> <p>Note</p> <p>Renovate can fetch changelogs from Bitbucket, Bitbucket Server / Data Center, Forgejo, Gitea, GitHub and GitLab platforms only, and setting the URL to an unsupported host/platform type won't change that.</p> <p>For more details on supported syntax see Renovate's string pattern matching documentation.</p>"},{"location":"configuration-options/#matchbasebranches","title":"matchBaseBranches","text":"<p>List of strings containing exact matches (e.g. <code>[\"main\"]</code>) and/or regex expressions (e.g. <code>[\"/^release/.*/\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use this field to restrict rules to a particular branch. e.g.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchBaseBranches\": [\"main\"],\n      \"matchPackageNames\": [\"!/^eslint/\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>This field also supports Regular Expressions if they begin and end with <code>/</code>. e.g.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchBaseBranches\": [\"/^release/.*/\"],\n      \"matchPackageNames\": [\"!/^eslint/\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchcategories","title":"matchCategories","text":"<p>List of categories to match (for example: <code>[\"python\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use <code>matchCategories</code> to restrict rules to a particular language or group. Matching is done using \"any\" logic, i.e. \"match any of the following categories\". The categories can be found in the manager documentation.</p> <p>Note</p> <p>Rules with <code>matchCategories</code> are only applied after extraction of dependencies. If you want to configure which managers are being extracted at all, use <code>enabledManagers</code> instead.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCategories\": [\"python\"],\n      \"addLabels\": [\"py\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchconfidence","title":"matchConfidence","text":"<p>Merge confidence levels to match against (<code>low</code>, <code>neutral</code>, <code>high</code>, <code>very high</code>). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string allowedValues low, neutral, high, very high parents packageRules mergeable true default `[]` <p>Warning</p> <p>This configuration option needs a Mend API key, and is in private beta testing only. API keys are not available for free or via the <code>renovatebot/renovate</code> repository.</p> Grouping high merge confidence updates<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchConfidence\": [\"high\", \"very high\"],\n      \"groupName\": \"high merge confidence\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchcurrentage","title":"matchCurrentAge","text":"<p>Matches the current age of the package derived from its release timestamp. Valid only within a <code>packageRules</code> object.</p> Name Value type string parents packageRules mergeable true default <code>null</code> <p>Use this field if you want to match packages based on the age of the current (existing, in-repo) version.</p> <p>For example, if you want to group updates for dependencies where the existing version is more than 2 years old:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentAge\": \"&gt; 2 years\",\n      \"groupName\": \"old dependencies\"\n    }\n  ]\n}\n</code></pre> <p>The <code>matchCurrentAge</code> string must start with one of <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code> or <code>&lt;=</code>.</p> <p>Only one date part is supported, so you cannot do <code>&gt; 1 year 1 month</code>. Instead you should do <code>&gt; 13 months</code>.</p> <p>Note</p> <p>We recommend you only use the words hour(s), day(s), week(s), month(s) and year(s) in your time ranges.</p>"},{"location":"configuration-options/#matchcurrentvalue","title":"matchCurrentValue","text":"<p>A regex or glob pattern to match against the raw <code>currentValue</code> string of a dependency. Valid only within a <code>packageRules</code> object.</p> Name Value type string parents packageRules mergeable true default <code>null</code> <p>This option is matched against the <code>currentValue</code> field of a dependency.</p> <p><code>matchCurrentValue</code> supports Regular Expressions and glob patterns. For example, the following enforces that updates from <code>1.*</code> versions will be merged automatically:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"1.*\",\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre> <p>Regular Expressions must begin and end with <code>/</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"/^1\\\\./\"\n    }\n  ]\n}\n</code></pre> <p>This field also supports a special negated regex syntax to ignore certain versions. Use the syntax <code>!/ /</code> like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"!/^0\\\\./\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchcurrentversion","title":"matchCurrentVersion","text":"<p>A version, or range of versions, to match against the current version of a package. Valid only within a <code>packageRules</code> object.</p> Name Value type string parents packageRules mergeable true default <code>null</code> <p>The <code>currentVersion</code> field will be one of the following (in order of preference):</p> <ul> <li>locked version if a lock file exists</li> <li>resolved version</li> <li>current value</li> </ul> <p>Consider using instead <code>matchCurrentValue</code> if you wish to match against the raw string value of a dependency.</p> <p><code>matchCurrentVersion</code> can be an exact version or a version range:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=1.0.0\",\n      \"matchPackageNames\": [\"angular\"]\n    }\n  ]\n}\n</code></pre> <p>The syntax of the version range must follow the versioning scheme used by the matched package(s). This is usually defined by the manager which discovered them or by the default versioning for the package's datasource. For example, a Gradle package would typically need Gradle constraint syntax (e.g. <code>[,7.0)</code>) and not SemVer syntax (e.g. <code>&lt;7.0</code>).</p> <p>This field also supports Regular Expressions which must begin and end with <code>/</code>. For example, the following enforces that only <code>1.*</code> versions will be used:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentVersion\": \"/^1\\\\./\"\n    }\n  ]\n}\n</code></pre> <p>This field also supports a special negated regex syntax to ignore certain versions. Use the syntax <code>!/ /</code> like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentVersion\": \"!/^0\\\\./\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchdatasources","title":"matchDatasources","text":"<p>List of datasources to match (e.g. <code>[\"orb\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use this field to restrict rules to a particular datasource. e.g.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"orb\"],\n      \"labels\": [\"circleci-orb!!\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchdepnames","title":"matchDepNames","text":"<p>Dep names to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>This field behaves the same as <code>matchPackageNames</code> except it matches against <code>depName</code> instead of <code>packageName</code>.</p>"},{"location":"configuration-options/#matchdeptypes","title":"matchDepTypes","text":"<p>List of depTypes to match (e.g. [<code>peerDependencies</code>]). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use this field if you want to limit a <code>packageRule</code> to certain <code>depType</code> values. This matching can be an exact match, Glob match, or Regular Expression match.</p> <p>For more details on supported syntax see Renovate's string pattern matching documentation. Note that Glob matching (including exact name matching) is case-insensitive.</p> <p>Invalid if used outside of a <code>packageRule</code>.</p>"},{"location":"configuration-options/#matchfilenames","title":"matchFileNames","text":"<p>List of strings to do an exact match against package and lock files with full path. Only works inside a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules default `[]` <p>Renovate will compare <code>matchFileNames</code> glob or RE2 regex matching against the dependency's package file and also lock file if one exists.</p> <p>For more details on supported syntax see Renovate's string pattern matching documentation.</p> <p>The following example matches <code>package.json</code> but not <code>package/frontend/package.json</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"package.json\"],\n      \"labels\": [\"npm\"]\n    }\n  ]\n}\n</code></pre> <p>The following example matches any <code>package.json</code>, including files like <code>backend/package.json</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Group dependencies from package.json files\",\n      \"matchFileNames\": [\"**/package.json\"],\n      \"groupName\": \"All package.json changes\"\n    }\n  ]\n}\n</code></pre> <p>The following example matches any file in directories starting with <code>app/</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Group all dependencies from the app directory\",\n      \"matchFileNames\": [\"app/**\"],\n      \"groupName\": \"App dependencies\"\n    }\n  ]\n}\n</code></pre> <p>The following example matches any <code>.toml</code> file in a <code>v2</code> or <code>v3</code> directory:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Group all dependencies from legacy projects\",\n      \"matchFileNames\": [\"/v[123]/.*\\\\.toml/\"],\n      \"groupName\": \"Legacy project dependencies\"\n    }\n  ]\n}\n</code></pre> <p>It is recommended that you avoid using \"negative\" globs, like <code>**/!(package.json)</code>, because such patterns might still return true if they match against the lock file name (e.g. <code>package-lock.json</code>).</p>"},{"location":"configuration-options/#matchjsonata","title":"matchJsonata","text":"<p>A JSONata expression to match against the full config object. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use the <code>matchJsonata</code> field to define custom matching logic using JSONata query logic. Renovate will evaluate the provided JSONata expressions against the passed values (<code>manager</code>, <code>packageName</code>, etc.).</p> <p>See the JSONata docs for more details on JSONata syntax.</p> <p>Here are some example <code>matchJsonata</code> strings for inspiration:</p> <pre><code>$exists(deprecationMessage)\n$exists(vulnerabilityFixVersion)\nmanager = 'dockerfile' and depType = 'final'\nupdateType = 'major' and newVersionAgeInDays &lt; 7\n</code></pre> <p><code>matchJsonata</code> accepts an array of strings, and will return <code>true</code> if any of those JSONata expressions evaluate to <code>true</code>.</p>"},{"location":"configuration-options/#matchmanagers","title":"matchManagers","text":"<p>List of package managers to match (e.g. <code>[\"pipenv\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use this field to restrict rules to a particular package manager. e.g.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"node\"],\n      \"matchManagers\": [\"dockerfile\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#matchmessage","title":"matchMessage","text":"<p>Regex/minimatch expression to match against log message.</p> Name Value type string parents logLevelRemap default <code>null</code>"},{"location":"configuration-options/#matchnewvalue","title":"matchNewValue","text":"<p>A regex or glob pattern to match against the raw <code>newValue</code> string of a dependency. Valid only within a <code>packageRules</code> object.</p> Name Value type string parents packageRules mergeable true default <code>null</code> <p>This option is matched against the <code>newValue</code> field of a dependency.</p> <p><code>matchNewValue</code> supports Regular Expressions and glob patterns. For example, the following enforces that updates to <code>1.*</code> versions will be merged automatically:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"1.*\",\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre> <p>Regular Expressions must begin and end with <code>/</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"/^1\\\\./\"\n    }\n  ]\n}\n</code></pre> <p>This field also supports a special negated regex syntax to ignore certain versions. Use the syntax <code>!/ /</code> like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"!/^0\\\\./\"\n    }\n  ]\n}\n</code></pre> <p>For more details on this syntax see Renovate's string pattern matching documentation.</p>"},{"location":"configuration-options/#matchpackagenames","title":"matchPackageNames","text":"<p>Package names to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Use this field to match against the <code>packageName</code> field. This matching can be an exact match, Glob match, or Regular Expression match.</p> <p>For more details on supported syntax see Renovate's string pattern matching documentation. Note that Glob matching (including exact name matching) is case-insensitive.</p> exact name match<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"angular\"],\n      \"rangeStrategy\": \"pin\"\n    }\n  ]\n}\n</code></pre> <p>The above will configure <code>rangeStrategy</code> to <code>pin</code> only for the npm package <code>angular</code>.</p> prefix match using Glob<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"@angular/**\", \"!@angular/abc\"],\n      \"rangeStrategy\": \"replace\"\n    }\n  ]\n}\n</code></pre> <p>The above will set a replaceStrategy for any npm package which starts with <code>@angular/</code> except <code>@angular/abc</code>.</p> pattern match using RegEx<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"/^angular/\"],\n      \"groupName\": \"Angular\"\n    }\n  ]\n}\n</code></pre> <p>The above will group together any npm package which starts with the string <code>angular</code>.</p>"},{"location":"configuration-options/#matchrepositories","title":"matchRepositories","text":"<p>List of repositories to match (e.g. <code>[\"**/*-archived\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parents packageRules mergeable true default `[]`"},{"location":"configuration-options/#matchsourceurls","title":"matchSourceUrls","text":"<p>A list of exact match URLs (or URL patterns) to match sourceUrl against.</p> Name Value type array subType string parents packageRules mergeable true default `[]` <p>Here's an example of where you use this to group together all packages from the Vue monorepo:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchSourceUrls\": [\"https://github.com/vuejs/vue\"],\n      \"groupName\": \"Vue monorepo packages\"\n    }\n  ]\n}\n</code></pre> <p>For more details on supported syntax see Renovate's string pattern matching documentation.</p>"},{"location":"configuration-options/#matchupdatetypes","title":"matchUpdateTypes","text":"<p>Update types to match against (<code>major</code>, <code>minor</code>, <code>pin</code>, <code>pinDigest</code>, etc). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string allowedValues major, minor, patch, pin, pinDigest, digest, lockFileMaintenance, rollback, bump, replacement parents packageRules mergeable true default `[]` <p>Use <code>matchUpdateTypes</code> to match rules against types of updates. For example to apply a special label to <code>major</code> updates:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"major\"],\n      \"labels\": [\"UPDATE-MAJOR\"]\n    }\n  ]\n}\n</code></pre> <p>For more details on supported syntax see Renovate's string pattern matching documentation.</p> <p>Warning</p> <p>Packages that follow SemVer are allowed to make breaking changes in any <code>0.x</code> version, even <code>patch</code> and <code>minor</code>. Check if you're using any <code>0.x</code> package, and see if you need custom <code>packageRules</code> for it. When setting up automerge for dependencies, make sure to stop accidental automerges of <code>0.x</code> versions. Read the automerge non-major updates docs for a config example that blocks <code>0.x</code> updates.</p> <p>Warning</p> <p><code>matchUpdateTypes</code> and <code>allowedVersions</code> cannot be used in the same package rule.</p> <p>Tokens can be configured via <code>hostRules</code> using the <code>\"merge-confidence\"</code> <code>hostType</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"merge-confidence\",\n      \"token\": \"********\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#overridedatasource","title":"overrideDatasource","text":"<p>Override the datasource value.</p> Name Value type string parents packageRules default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>If a particular <code>datasource</code>/<code>packageName</code> combination has a lookup problem, you may be able to fix it by changing <code>datasource</code> and potentially also <code>packageName</code>. Here is an example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"renovate/renovate\"],\n      \"overrideDatasource\": \"npm\",\n      \"overridePackageName\": \"renovate\"\n    }\n  ]\n}\n</code></pre> <p><code>overrideDatasource</code> does not support template compilation. Be cautious as using this setting incorrectly could break all lookups.</p>"},{"location":"configuration-options/#overridedepname","title":"overrideDepName","text":"<p>Override the depName value.</p> Name Value type string parents packageRules default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Be careful using this feature because it may cause undesirable changes such as to branch names.</p> <p>In Renovate terminology, <code>packageName</code> is the exact package name needing to be looked up on a registry, while <code>depName</code> is essentially the \"pretty\" name. For example, the <code>packageName</code> is <code>docker.io/library/node</code> while the <code>depName</code> might be <code>node</code> for short.</p> <p><code>depName</code> is used in PR titles as well as branch names, so changes to <code>depName</code> will have effects on those.</p> <p><code>overrideDepName</code> supports template compilation. Example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"overrideDepName\": \"{{replace 'docker.io/library/' '' depName}}\"\n    }\n  ]\n}\n</code></pre> <p>Be cautious as using this setting incorrectly could break all lookups.</p>"},{"location":"configuration-options/#overridepackagename","title":"overridePackageName","text":"<p>Override the packageName value.</p> Name Value type string parents packageRules default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>See the <code>overrideDatasource</code> documentation for an example of use. <code>overridePackageName</code> supports template compilation.</p> <p>Be cautious as using this setting incorrectly could break all lookups.</p>"},{"location":"configuration-options/#prpriority","title":"prPriority","text":"<p>Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.</p> Name Value type integer allowNegative true default 0 parents packageRules <p>Sometimes Renovate needs to rate limit its creation of PRs, e.g. hourly or concurrent PR limits. By default, Renovate sorts/prioritizes based on the update type, going from smallest update to biggest update. Renovate creates update PRs in this order:</p> <ol> <li><code>pinDigest</code></li> <li><code>pin</code></li> <li><code>digest</code></li> <li><code>patch</code></li> <li><code>minor</code></li> <li><code>major</code></li> </ol> <p>If you have dependencies that are more or less important than others then you can use the <code>prPriority</code> field for PR sorting. The default value is 0, so setting a negative value will make dependencies sort last, while higher values sort first.</p> <p>Here's an example of how you would define PR priority so that <code>devDependencies</code> are raised last and <code>react</code> is raised first:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"prPriority\": -1\n    },\n    {\n      \"matchPackageNames\": [\"react\"],\n      \"prPriority\": 5\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#replacementname","title":"replacementName","text":"<p>The name of the new dependency that replaces the old deprecated dependency.</p> Name Value type string parents packageRules default <code>null</code> <p>This config option only works with some managers. We're working to support more managers, subscribe to issue renovatebot/renovate#24883 to follow our progress.</p> <p>Managers which do not support replacement:</p> <ul> <li><code>bazel</code></li> <li><code>git-submodules</code></li> <li><code>gomod</code></li> <li><code>gradle</code></li> <li><code>homebrew</code></li> <li><code>regex</code></li> <li><code>sbt</code></li> </ul> <p>Use the <code>replacementName</code> config option to set the name of a replacement package.</p> <p>Can be used in combination with <code>replacementVersion</code>.</p> <p>You can suggest a new community package rule by editing the <code>replacements.json</code> file on the Renovate repository and opening a pull request.</p>"},{"location":"configuration-options/#replacementnametemplate","title":"replacementNameTemplate","text":"<p>Controls what the replacement package name.</p> Name Value type string default <code>\"{{{packageName}}}\"</code> parents packageRules <p>Note</p> <p><code>replacementName</code> will take precedence if used within the same package rule.</p> <p>Use the <code>replacementNameTemplate</code> config option to control the replacement name.</p> <p>Use the triple brace <code>{{{ }}}</code> notation to avoid Handlebars escaping any special characters.</p> <p>For example, the following package rule can be used to replace the registry for <code>docker</code> images:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"docker.io/**\"],\n      \"replacementNameTemplate\": \"{{{replace 'docker\\\\.io/' 'ghcr.io/' packageName}}}\"\n    }\n  ]\n}\n</code></pre> <p>Or, to add a registry prefix to any <code>docker</code> images that do not contain an explicit registry:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"official images\",\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"/^[a-z-]+$/\"],\n      \"replacementNameTemplate\": \"some.registry.org/library/{{{packageName}}}\"\n    },\n    {\n      \"description\": \"non-official images\",\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"/^[a-z-]+/[a-z-]+$/\"],\n      \"replacementNameTemplate\": \"some.registry.org/{{{packageName}}}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#replacementversion","title":"replacementVersion","text":"<p>The version of the new dependency that replaces the old deprecated dependency.</p> Name Value type string parents packageRules default <code>null</code> <p>This config option only works with some managers. We're working to support more managers, subscribe to issue renovatebot/renovate#14149 to follow our progress. For a list of managers which do not support replacement read the <code>replacementName</code> config option docs.</p> <p>Use the <code>replacementVersion</code> config option to set the version of a replacement package. Must be used with <code>replacementName</code>. For example to replace the npm package <code>jade</code> with version <code>2.0.0</code> of the package <code>pug</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"jade\"],\n      \"replacementName\": \"pug\",\n      \"replacementVersion\": \"2.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#replacementversiontemplate","title":"replacementVersionTemplate","text":"<p>Template field for the version of the new dependency that replaces the old deprecated dependency.</p> Name Value type string parents packageRules default <code>null</code> <p>Note</p> <p><code>replacementVersion</code> will take precedence if used within the same package rule.</p> <p>Use the <code>replacementVersionTemplate</code> config option to control the replacement version.</p> <p>For example, the following package rule can be used to replace version with major-only version (17.0.1 -&gt; 17):</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"replacementVersionTemplate\": \"{{ lookup (split currentValue '.') 0 }}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#sourcedirectory","title":"sourceDirectory","text":"<p>The source directory in which the package is present at its source.</p> Name Value type string parents packageRules default <code>null</code> <p>Use this field to set the directory in which the package is present at the source of the package.</p> Setting the source directory for the kube-prometheus package from bitnami charts repo<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"sourceUrl\": \"https://github.com/bitnami/charts\",\n      \"sourceDirectory\": \"bitnami/kube-prometheus\"\n    }\n  ]\n}\n</code></pre> <p>Note</p> <p><code>sourceDirectory</code> should be only be configured along with <code>sourceUrl</code>.</p>"},{"location":"configuration-options/#sourceurl","title":"sourceUrl","text":"<p>The source URL of the package.</p> Name Value type string parents packageRules default <code>null</code> <p>Use this field to set the source URL for a package, including overriding an existing one. Source URLs are necessary to link to the source of the package and in order to look up changelogs.</p> Setting the source URL for the dummy package<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"sourceUrl\": \"https://github.com/org/dummy\"\n    }\n  ]\n}\n</code></pre>"},{"location":"configuration-options/#patch","title":"patch","text":"<p>Configuration to apply when an update type is <code>patch</code>.</p> Name Value type object mergeable true env <code>RENOVATE_PATCH</code> <p>Add to this object if you wish to define rules that apply only to patch updates.</p>"},{"location":"configuration-options/#pin","title":"pin","text":"<p>Configuration to apply when an update type is <code>pin</code>.</p> Name Value type object default <pre><code>{\n  \"rebaseWhen\": \"behind-base-branch\",\n  \"groupName\": \"Pin Dependencies\",\n  \"groupSlug\": \"pin-dependencies\",\n  \"commitMessageAction\": \"Pin\",\n  \"group\": {\"commitMessageTopic\": \"dependencies\", \"commitMessageExtra\": \"\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_PIN</code> <p>Add to this object if you wish to define rules that apply only to PRs that pin dependencies.</p>"},{"location":"configuration-options/#pindigest","title":"pinDigest","text":"<p>Configuration to apply when pinning a digest (no change in tag/version).</p> Name Value type object default <pre><code>{\n  \"groupName\": \"Pin Dependencies\",\n  \"groupSlug\": \"pin-dependencies\",\n  \"commitMessageAction\": \"Pin\",\n  \"group\": {\"commitMessageTopic\": \"dependencies\", \"commitMessageExtra\": \"\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_PIN_DIGEST</code> <p>Add to this object if you wish to define rules that apply only to PRs that pin digests.</p>"},{"location":"configuration-options/#pindigests","title":"pinDigests","text":"<p>Whether to add digests to Dockerfile source images.</p> Name Value type boolean default <code>false</code> cli <code>--pin-digests</code> env <code>RENOVATE_PIN_DIGESTS</code> <p>If enabled Renovate will pin Docker images or GitHub Actions by means of their SHA256 digest and not only by tag so that they are immutable.</p>"},{"location":"configuration-options/#platformautomerge","title":"platformAutomerge","text":"<p>Controls if platform-native auto-merge is used.</p> Name Value type boolean default <code>true</code> supportedPlatforms azure, forgejo, gitea, github, gitlab cli <code>--platform-automerge</code> env <code>RENOVATE_PLATFORM_AUTOMERGE</code> <p>Note</p> <p>If you use the default <code>platformAutomerge=true</code> then you should enable your Git hosting platform's capabilities to enforce test passing before PR merge. If you don't do this, the platform might merge Renovate PRs even if the repository's tests haven't started, are in still in progress, or possibly even when they have failed. On GitHub this is called \"Require status checks before merging\", which you can find in the \"Branch protection rules\" section of the settings for your repository. GitHub docs, about protected branches GitHub docs, require status checks before merging If you're using another platform, search their documentation for a similar feature.</p> <p>If you have enabled <code>automerge</code> and set <code>automergeType=pr</code> in the Renovate config, then leaving <code>platformAutomerge</code> as <code>true</code> speeds up merging via the platform's native automerge functionality.</p> <p>On GitHub and GitLab, Renovate re-enables the PR for platform-native automerge whenever it's rebased.</p> <p><code>platformAutomerge</code> will configure PRs to be merged after all (if any) branch policies have been met. This option is available for Azure, Forgejo, Gitea, GitHub and GitLab. It falls back to Renovate-based automerge if the platform-native automerge is not available.</p> <p>You can also fine-tune the behavior by setting <code>packageRules</code> if you want to use it selectively (e.g. per-package).</p> <p>Note that the outcome of <code>rebaseWhen=auto</code> can differ when <code>platformAutomerge=true</code>. Normally when you set <code>rebaseWhen=auto</code> Renovate rebases any branch that's behind the base branch automatically, and some people rely on that. This behavior is no longer guaranteed when <code>platformAutomerge</code> is <code>true</code> because the platform might automerge a branch which is not up-to-date. For example, GitHub might automerge a Renovate branch even if it's behind the base branch at the time.</p> <p>Please check platform specific docs for version requirements.</p> <p>To learn how to use GitHub's Merge Queue feature with Renovate, read our Key Concepts, Automerge, GitHub Merge Queue docs.</p>"},{"location":"configuration-options/#platformcommit","title":"platformCommit","text":"<p>Use platform API to perform commits instead of using Git directly.</p> Name Value type string default <code>\"auto\"</code> allowedValues auto, disabled, enabled supportedPlatforms github cli <code>--platform-commit</code> env <code>RENOVATE_PLATFORM_COMMIT</code> <p>Only use this option if you run Renovate as a GitHub App. It does not apply when you use a Personal Access Token as credential.</p> <p>When <code>platformCommit</code> is enabled, Renovate will create commits with GitHub's API instead of using <code>git</code> directly. This way Renovate can use GitHub's Commit signing support for bots and other GitHub Apps feature.</p> <p>Note</p> <p>When using platform commits, GitHub determines the git author string to use and Renovate's own gitAuthor is ignored.</p>"},{"location":"configuration-options/#postupdateoptions","title":"postUpdateOptions","text":"<p>Enable post-update options to be run after package/artifact updating.</p> Name Value type array subType string allowedValues bundlerConservative, composerWithAll, dotnetWorkloadRestore, gomodMassage, gomodTidy, gomodTidy1.17, gomodTidyE, gomodUpdateImportPaths, gomodSkipVendor, gomodVendor, helmUpdateSubChartArchives, kustomizeInflateHelmCharts, npmDedupe, npmInstallTwice, pnpmDedupe, yarnDedupeFewer, yarnDedupeHighest mergeable true default `[]` <p>Table with options:</p> Name Description <code>bundlerConservative</code> Enable conservative mode for <code>bundler</code> (Ruby dependencies). This will only update the immediate dependency in the lockfile instead of all subdependencies. <code>composerWithAll</code> Run <code>composer update</code> with <code>--with-all-dependencies</code> flag instead of the default <code>--with-dependencies</code>. <code>dotnetWorkloadRestore</code> Run <code>dotnet workload restore</code> before <code>dotnet restore</code> commands. <code>gomodMassage</code> Enable massaging <code>replace</code> directives before calling <code>go</code> commands. <code>gomodTidy</code> Run <code>go mod tidy</code> after Go module updates. This is implicitly enabled for major module updates when <code>gomodUpdateImportPaths</code> is enabled. <code>gomodTidy1.17</code> Run <code>go mod tidy -compat=1.17</code> after Go module updates. <code>gomodTidyE</code> Run <code>go mod tidy -e</code> after Go module updates. <code>gomodUpdateImportPaths</code> Update source import paths on major module updates, using mod. <code>gomodSkipVendor</code> Never run <code>go mod vendor</code> after Go module updates. <code>gomodVendor</code> Always run <code>go mod vendor</code> after Go module updates even if vendor files aren't detected. <code>helmUpdateSubChartArchives</code> Update subchart archives in the <code>/charts</code> folder. <code>kustomizeInflateHelmCharts</code> Inflate updated helm charts referenced in the kustomization. <code>npmDedupe</code> Run <code>npm install</code> with <code>--prefer-dedupe</code> for npm &gt;= 7 or <code>npm dedupe</code> after <code>package-lock.json</code> update for npm &lt;= 6. <code>npmInstallTwice</code> Run <code>npm install</code> commands twice to work around bugs where <code>npm</code> generates invalid lock files if run only once <code>pnpmDedupe</code> Run <code>pnpm dedupe --ignore-scripts</code> after <code>pnpm-lock.yaml</code> updates. <code>yarnDedupeFewer</code> Run <code>yarn-deduplicate --strategy fewer</code> after <code>yarn.lock</code> updates. <code>yarnDedupeHighest</code> Run <code>yarn-deduplicate --strategy highest</code> (<code>yarn dedupe --strategy highest</code> for Yarn &gt;=2.2.0) after <code>yarn.lock</code> updates."},{"location":"configuration-options/#postupgradetasks","title":"postUpgradeTasks","text":"<p>Post-upgrade tasks that are executed before a commit is made by Renovate.</p> Name Value type object default <pre><code>{\"commands\": [], \"fileFilters\": [], \"executionMode\": \"update\"}\n</code></pre> cli <code>--post-upgrade-tasks</code> env <code>RENOVATE_POST_UPGRADE_TASKS</code> <p>Post-upgrade tasks are commands that are executed by Renovate after a dependency has been updated but before the commit is created. The intention is to run any other command line tools that would modify existing files or generate new files when a dependency changes.</p> <p>Post-upgrade tasks are blocked by default for security reasons, so the admin of Renovate needs to choose whether to allow specific commands or any commands to be run - it depends on how much they trust their users in repos. In Mend-hosted Renovate apps, commands remain blocked by default but can be allowed on-request for any paying (\"Renovate Enterprise\" or Mend Appsec) customers or trusted OSS repositories - please reach out if so.</p> <p>Each command must match at least one of the patterns defined in <code>allowedCommands</code> (a global-only configuration option) in order to be executed. If the list of allowed tasks is empty then no tasks will be executed.</p> <p>e.g.</p> <pre><code>{\n  \"postUpgradeTasks\": {\n    \"commands\": [\"tslint --fix\"],\n    \"fileFilters\": [\"yarn.lock\", \"**/*.js\"],\n    \"executionMode\": \"update\"\n  }\n}\n</code></pre> <p>The <code>postUpgradeTasks</code> configuration consists of four fields:</p>"},{"location":"configuration-options/#commands","title":"commands","text":"<p>A list of post-upgrade commands that are executed before a commit is made by Renovate.</p> Name Value type array subType string parents postUpgradeTasks env <code>RENOVATE_COMMANDS</code> default `[]` <p>A list of commands that are executed after Renovate has updated a dependency but before the commit is made.</p> <p>You can use Handlebars templating in these commands. They will be compiled prior to the comparison against <code>allowedCommands</code>.</p> <p>Note</p> <p>Do not use <code>git add</code> in your commands to add new files to be tracked, add them by including them in your <code>fileFilters</code> instead.</p>"},{"location":"configuration-options/#datafiletemplate","title":"dataFileTemplate","text":"<p>A template to create post-upgrade command data file from.</p> Name Value type string parents postUpgradeTasks default <code>null</code> <p>A template to create data file from. The template uses the same format as <code>commands</code>. The data file is created as a temporary file and the path to the data file is stored in the <code>RENOVATE_POST_UPGRADE_COMMAND_DATA_FILE</code> environment variable avaliable to each post-upgrade command. The primary purpose of the data file is to store some update information in a file which would be consumed from a post-upgrade command. This is particularly useful if a post-upgrade command needs to have a long line of arguments. Example:</p> <pre><code>{\n  \"postUpgradeTasks\": {\n    \"commands\": [\n      \"my-script.py --data-file \\\"$RENOVATE_POST_UPGRADE_COMMAND_DATA_FILE\\\"\"\n    ],\n    \"dataFileTemplate\": \"[{{#each upgrades}}{\\\"depName\\\": \\\"{{{depName}}}\\\", \\\"currentValue\\\": \\\"{{{currentValue}}}\\\", \\\"newValue\\\": \\\"{{{newValue}}}\\\"}{{#unless @last}},{{\\/unless}}{{\\/each}}]\"\n  }\n}\n</code></pre> <p>Note</p> <p><code>dataFileTemplate</code> is ignored if there is no <code>commands</code> configured.</p>"},{"location":"configuration-options/#executionmode","title":"executionMode","text":"<p>Controls when the post upgrade tasks run: on every update, or once per upgrade branch.</p> Name Value type string parents postUpgradeTasks allowedValues update, branch default <code>\"update\"</code> env <code>RENOVATE_EXECUTION_MODE</code> <p>Defaults to <code>update</code>, but can also be set to <code>branch</code>. This sets the level the postUpgradeTask runs on, if set to <code>update</code> the postUpgradeTask will be executed for every dependency on the branch. If set to <code>branch</code> the postUpgradeTask is executed for the whole branch.</p>"},{"location":"configuration-options/#filefilters","title":"fileFilters","text":"<p>Files that match the glob pattern will be committed after running a post-upgrade task.</p> Name Value type array subType string parents postUpgradeTasks default <pre><code>[\"**/*\"]\n</code></pre> env <code>RENOVATE_FILE_FILTERS</code> default `[]` <p>A list of glob-style matchers that determine which files will be included in the final commit made by Renovate. Dotfiles are included.</p> <p>Optional field which defaults to any non-ignored file in the repo (<code>**/*</code> glob pattern). Specify a custom value for this if you wish to exclude certain files which are modified by your <code>postUpgradeTasks</code> and you don't want committed.</p>"},{"location":"configuration-options/#workingdirtemplate","title":"workingDirTemplate","text":"<p>A template describing the working directory in which post-upgrade tasks should be executed.</p> Name Value type string parents postUpgradeTasks default <code>null</code> <p>A template describing the working directory in which the commands should be executed, relative to the repository root. If the template evaluates to a false value, then the command will be executed from the root of the repository. Example:</p> <pre><code>{\n  \"postUpgradeTasks\": {\n    \"commands\": [\"my-script.py\"],\n    \"workingDirTemplate\": \"{{{packageFileDir}}}\"\n  }\n}\n</code></pre>"},{"location":"configuration-options/#prbodycolumns","title":"prBodyColumns","text":"<p>List of columns to use in PR bodies.</p> Name Value type array subType string default <pre><code>[\"Package\", \"Type\", \"Update\", \"Change\", \"Pending\"]\n</code></pre> cli <code>--pr-body-columns</code> env <code>RENOVATE_PR_BODY_COLUMNS</code> default `[]` <p>Use this array to provide a list of column names you wish to include in the PR tables.</p> Adding the package file name to the table<pre><code>{\n  \"prBodyColumns\": [\n    \"Package\",\n    \"Update\",\n    \"Type\",\n    \"New value\",\n    \"Package file\",\n    \"References\"\n  ]\n}\n</code></pre> <p>Note</p> <p>\"Package file\" is predefined in the default <code>prBodyDefinitions</code> object so does not require a definition before it can be used.</p>"},{"location":"configuration-options/#prbodydefinitions","title":"prBodyDefinitions","text":"<p>Table column definitions to use in PR tables.</p> Name Value type object freeChoice true mergeable true default <pre><code>{\n  \"Package\": \"{{{depNameLinked}}}{{#if newName}}{{#unless (equals depName newName)}} \u2192 {{{newNameLinked}}}{{/unless}}{{/if}}\",\n  \"Type\": \"{{{depType}}}\",\n  \"Update\": \"{{{updateType}}}\",\n  \"Current value\": \"{{{currentValue}}}\",\n  \"New value\": \"{{{newValue}}}\",\n  \"Change\": \"`{{{displayFrom}}}` -&gt; `{{{displayTo}}}`\",\n  \"Pending\": \"{{{displayPending}}}\",\n  \"References\": \"{{{references}}}\",\n  \"Package file\": \"{{{packageFile}}}\",\n  \"Age\": \"{{#if newVersion}}[![age](https://developer.mend.io/api/mc/badges/age/{{datasource}}/{{replace '/' '%2f' packageName}}/{{{newVersion}}}?slim=true)](https://docs.renovatebot.com/merge-confidence/){{/if}}\",\n  \"Adoption\": \"{{#if newVersion}}[![adoption](https://developer.mend.io/api/mc/badges/adoption/{{datasource}}/{{replace '/' '%2f' packageName}}/{{{newVersion}}}?slim=true)](https://docs.renovatebot.com/merge-confidence/){{/if}}\",\n  \"Passing\": \"{{#if newVersion}}[![passing](https://developer.mend.io/api/mc/badges/compatibility/{{datasource}}/{{replace '/' '%2f' packageName}}/{{{currentVersion}}}/{{{newVersion}}}?slim=true)](https://docs.renovatebot.com/merge-confidence/){{/if}}\",\n  \"Confidence\": \"{{#if newVersion}}[![confidence](https://developer.mend.io/api/mc/badges/confidence/{{datasource}}/{{replace '/' '%2f' packageName}}/{{{currentVersion}}}/{{{newVersion}}}?slim=true)](https://docs.renovatebot.com/merge-confidence/){{/if}}\"\n}\n</code></pre> cli <code>--pr-body-definitions</code> env <code>RENOVATE_PR_BODY_DEFINITIONS</code> <p>You can configure this object to either:</p> <ul> <li>modify the template for an existing table column in PR bodies, or</li> <li>add a definition for a new/additional column.</li> </ul> Modifying the default value for the Package column to put it inside a code block<pre><code>{\n  \"prBodyDefinitions\": {\n    \"Package\": \"`{{{depName}}}`\"\n  }\n}\n</code></pre> Adding a custom Sourcegraph column definition<pre><code>{\n  \"prBodyDefinitions\": {\n    \"Sourcegraph\": \"[![code search for \\\"{{{depName}}}\\\"](https://sourcegraph.com/search/badge?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}}&amp;label=matches)](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}})\"\n  },\n  \"prBodyColumns\": [\n    \"Package\",\n    \"Update\",\n    \"New value\",\n    \"References\",\n    \"Sourcegraph\"\n  ]\n}\n</code></pre> <p>Tip</p> <p>Columns must also be included in the <code>prBodyColumns</code> array in order to be used, so that's why it's included above in the example.</p>"},{"location":"configuration-options/#prbodynotes","title":"prBodyNotes","text":"<p>List of extra notes or templates to include in the Pull Request body.</p> Name Value type array subType string mergeable true cli <code>--pr-body-notes</code> env <code>RENOVATE_PR_BODY_NOTES</code> default `[]` <p>Use this field to add custom content inside PR bodies, including conditionally.</p> Adding an extra Warning to major updates<pre><code>{\n  \"prBodyNotes\": [\"{{#if isMajor}}:warning: MAJOR MAJOR MAJOR :warning:{{/if}}\"]\n}\n</code></pre>"},{"location":"configuration-options/#prbodytemplate","title":"prBodyTemplate","text":"<p>Pull Request body template. Controls which sections are rendered in the body of the pull request.</p> Name Value type string default <code>\"{{{header}}}{{{table}}}{{{warnings}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{controls}}}{{{footer}}}\"</code> env <code>RENOVATE_PR_BODY_TEMPLATE</code> <p>The available sections are:</p> <ul> <li><code>header</code></li> <li><code>table</code></li> <li><code>warnings</code></li> <li><code>notes</code></li> <li><code>changelogs</code></li> <li><code>configDescription</code></li> <li><code>controls</code></li> <li><code>footer</code></li> </ul>"},{"location":"configuration-options/#prconcurrentlimit","title":"prConcurrentLimit","text":"<p>Limit to a maximum of x concurrent branches/PRs. 0 means no limit.</p> Name Value type integer default 10 cli <code>--pr-concurrent-limit</code> env <code>RENOVATE_PR_CONCURRENT_LIMIT</code> <p>This setting - if enabled - limits Renovate to a maximum of <code>x</code> concurrent PRs open at any time.</p> <p>This limit is enforced on a per-repository basis.</p> <p>Note</p> <p>Renovate always creates security PRs, even if the concurrent PR limit is already reached. Security PRs have <code>[SECURITY]</code> in their PR title.</p>"},{"location":"configuration-options/#prcreation","title":"prCreation","text":"<p>When to create the PR for a branch.</p> Name Value type string allowedValues immediate, not-pending, status-success, approval default <code>\"immediate\"</code> cli <code>--pr-creation</code> env <code>RENOVATE_PR_CREATION</code> <p>This setting tells Renovate when to create PRs:</p> <ul> <li><code>immediate</code> (default): Renovate creates PRs immediately after creating the corresponding branch</li> <li><code>not-pending</code>: Renovate waits until status checks have completed (passed or failed) before raising the PR</li> <li><code>status-success</code>: Renovate only creates PRs if/when the the test pass</li> <li><code>approval</code>: Renovate creates branches for updates immediately, but creates the PR after getting Dependency Dashboard approval</li> </ul> <p>When prCreation is set to <code>immediate</code>, you'll get a Pull Request and possible associated notification right away when a new update is available. You'll have to wait until the checks have been performed, before you can decide if you want to merge the PR.</p> <p>When prCreation is set to <code>not-pending</code>, Renovate creates the PR only once all tests have passed or failed. When you get the PR notification, you can take action immediately, as you have the full test results. If there are no checks associated, Renovate will create the PR once 24 hours have elapsed since creation of the commit.</p> <p>When prCreation is set to <code>status-success</code>, Renovate creates the PR only if all tests have passed. When a branch remains without PR due to a failing test: select the corresponding PR from the Dependency Dashboard, and push your fixes to the branch.</p> <p>When prCreation is set to <code>approval</code>, Renovate creates the PR only when approved via the Dependency Dashboard. Renovate still creates the branch immediately.</p> <p>Note</p> <p>For all cases of non-immediate PR creation, Renovate doesn't run instantly once tests complete. Instead, Renovate create the PR on its next run after the relevant tests have completed, so there will be some delay.</p> <p>Warning</p> <p>If you set <code>prCreation=approval</code> you must not use <code>dependencyDashboardApproval=true</code>!</p>"},{"location":"configuration-options/#prfooter","title":"prFooter","text":"<p>Text added here will be placed last in the PR body, with a divider separator before it.</p> Name Value type string default <code>\"This PR has been generated by [Renovate Bot](https://github.com/renovatebot/renovate).\"</code> cli <code>--pr-footer</code> env <code>RENOVATE_PR_FOOTER</code>"},{"location":"configuration-options/#prheader","title":"prHeader","text":"<p>Text added here will be placed first in the PR body.</p> Name Value type string cli <code>--pr-header</code> env <code>RENOVATE_PR_HEADER</code> default <code>null</code>"},{"location":"configuration-options/#prhourlylimit","title":"prHourlyLimit","text":"<p>Rate limit PRs to maximum x created per hour. 0 means no limit.</p> Name Value type integer default 2 cli <code>--pr-hourly-limit</code> env <code>RENOVATE_PR_HOURLY_LIMIT</code> <p>This config option slows down the rate at which Renovate creates PRs.</p> <p>Slowing Renovate down can be handy when you're onboarding a repository with a lot of dependencies. What may happen if you don't set a <code>prHourlyLimit</code>:</p> <ol> <li>Renovate creates an Onboarding PR</li> <li>You merge the onboarding PR to activate Renovate</li> <li>Renovate creates a \"Pin Dependencies\" PR (if needed)</li> <li>You merge the \"Pin Dependencies\" PR</li> <li>Renovate creates every single upgrade PR needed, which can be a lot</li> </ol> <p>The above may cause:</p> <ul> <li>Renovate bot's PRs to overwhelm your CI systems</li> <li>a lot of test runs, because branches are rebased each time you merge a PR</li> </ul> <p>To prevent these problems you can set <code>prHourlyLimit</code> to a value like <code>1</code> or <code>2</code>. Renovate will only create that many PRs within each hourly period (<code>:00</code> through <code>:59</code>). You still get all the PRs in a reasonable time, perhaps over a day or so. Now you can merge the PRs at a do-able rate, once the tests pass.</p> <p>Tip</p> <p>The <code>prHourlyLimit</code> setting does not limit the number of concurrently open PRs, only the rate at which PRs are created. The <code>prHourlyLimit</code> setting is enforced on a per-repository basis.</p>"},{"location":"configuration-options/#prnotpendinghours","title":"prNotPendingHours","text":"<p>Timeout in hours for when <code>prCreation=not-pending</code>.</p> Name Value type integer default 25 cli <code>--pr-not-pending-hours</code> env <code>RENOVATE_PR_NOT_PENDING_HOURS</code> <p>If you configure <code>prCreation=not-pending</code>, then Renovate will wait until tests are non-pending (all pass or at least one fails) before creating PRs. However there are cases where PRs may remain in pending state forever, e.g. absence of tests or status checks that are configure to pending indefinitely. This is why we configured an upper limit for how long we wait until creating a PR.</p> <p>Note</p> <p>If the option <code>minimumReleaseAge</code> is non-zero then Renovate disables the <code>prNotPendingHours</code> functionality.</p>"},{"location":"configuration-options/#prtitle","title":"prTitle","text":"<p>Pull Request title template. Inherits from <code>commitMessage</code> if null.</p> Name Value type string env <code>RENOVATE_PR_TITLE</code> <p>The PR title is important for some of Renovate's matching algorithms (e.g. determining whether to recreate a PR or not) so ideally don't modify it much.</p> <p>This feature has been deprecated</p> <p>Direct editing of <code>prTitle</code> is now deprecated. Instead use config options like <code>commitMessageAction</code>, <code>commitMessageExtra</code>, and so on, as they will be passed through to <code>prTitle</code>.</p>"},{"location":"configuration-options/#prtitlestrict","title":"prTitleStrict","text":"<p>Whether to bypass appending extra context to the Pull Request title.</p> Name Value type boolean default <code>false</code> env <code>RENOVATE_PR_TITLE_STRICT</code> <p>There are certain scenarios where the default behavior appends extra context to the PR title.</p> <p>These scenarios include if a <code>baseBranch</code> or if there is a grouped update and either <code>separateMajorMinor</code> or <code>separateMinorPatch</code> is true.</p> <p>Using this option allows you to skip these default behaviors and use other templating methods to control the format of the PR title.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#printconfig","title":"printConfig","text":"<p>If enabled, Renovate logs the fully resolved config for each repository, plus the fully resolved presets.</p> Name Value type boolean default <code>false</code> cli <code>--print-config</code> env <code>RENOVATE_PRINT_CONFIG</code> <p>This option is useful for troubleshooting, particularly if using presets. e.g. run <code>renovate foo/bar --print-config &gt; config.log</code> and the fully-resolved config will be included in the log file.</p>"},{"location":"configuration-options/#prunebranchafterautomerge","title":"pruneBranchAfterAutomerge","text":"<p>Set to <code>true</code> to enable branch pruning after automerging.</p> Name Value type boolean default <code>true</code> cli <code>--prune-branch-after-automerge</code> env <code>RENOVATE_PRUNE_BRANCH_AFTER_AUTOMERGE</code> <p>By default Renovate deletes, or \"prunes\", the branch after automerging. Set <code>pruneBranchAfterAutomerge</code> to <code>false</code> to keep the branch after automerging.</p>"},{"location":"configuration-options/#prunestalebranches","title":"pruneStaleBranches","text":"<p>Set to <code>false</code> to disable pruning stale branches.</p> Name Value type boolean default <code>true</code> cli <code>--prune-stale-branches</code> env <code>RENOVATE_PRUNE_STALE_BRANCHES</code> <p>By default, Renovate will \"prune\" any of its own branches/PRs which it thinks are no longer needed. Such branches are referred to as \"stale\", and may be the result of Open, Merged, or Closed/Ignored PRs. It usually doesn't know why they're there, instead it simply knows that it has no need for them.</p> <p>If a branch appears stale but has been modified by a different git author, then Renovate won't delete the branch or autoclose any associated PR. Instead, it will update the title to append \" - abandoned\" plus add a comment noting that autoclosing is skipped.</p> <p>If a branch appears stale and hasn't been modified, then:</p> <ul> <li>If an Open PR exist for the branch, then Renovate will rename the PR to append \" - autoclosed\" before closing/abandoning it</li> <li>Renovate will delete the branch</li> </ul> <p>You can configure <code>pruneStaleBranches=false</code> to disable deleting orphan branches and autoclosing PRs, but then you will be responsible for such branch/PR \"cleanup\" so it is not recommended.</p>"},{"location":"configuration-options/#rangestrategy","title":"rangeStrategy","text":"<p>Determines how to modify or update existing ranges.</p> Name Value type string default <code>\"auto\"</code> allowedValues auto, pin, bump, replace, widen, update-lockfile, in-range-only <p>Behavior:</p> <ul> <li><code>auto</code> = Renovate decides (this will be done on a manager-by-manager basis)</li> <li><code>pin</code> = convert ranges to exact versions, e.g. <code>^1.0.0</code> -&gt; <code>1.1.0</code></li> <li><code>bump</code> = e.g. bump the range even if the new version satisfies the existing range, e.g. <code>^1.0.0</code> -&gt; <code>^1.1.0</code></li> <li><code>replace</code> = Replace the range with a newer one if the new version falls outside it, and update nothing otherwise</li> <li><code>widen</code> = Widen the range with newer one, e.g. <code>^1.0.0</code> -&gt; <code>^1.0.0 || ^2.0.0</code></li> <li><code>update-lockfile</code> = Update the lock file when in-range updates are available, otherwise <code>replace</code> for updates out of range. Works for <code>bundler</code>, <code>cargo</code>, <code>composer</code>, <code>gleam</code>, <code>npm</code>, <code>yarn</code>, <code>pnpm</code>, <code>terraform</code>, <code>poetry</code> and <code>uv</code> so far</li> <li><code>in-range-only</code> = Update the lock file when in-range updates are available, ignore package file updates</li> </ul> <p>Renovate's <code>\"auto\"</code> strategy works like this for npm:</p> <ol> <li>Widen <code>peerDependencies</code></li> <li>If an existing range already ends with an \"or\" operator like <code>\"^1.0.0 || ^2.0.0\"</code>, then Renovate widens it into <code>\"^1.0.0 || ^2.0.0 || ^3.0.0\"</code></li> <li>Otherwise, if the update is outside the existing range, Renovate replaces the range. So <code>\"^2.0.0\"</code> is replaced by <code>\"^3.0.0\"</code></li> <li>Finally, if the update is in-range, Renovate will update the lockfile with the new exact version.</li> </ol> <p>By default, Renovate assumes that if you are using ranges then it's because you want them to be wide/open. Renovate won't deliberately \"narrow\" any range by increasing the semver value inside.</p> <p>For example, if your <code>package.json</code> specifies a value for <code>left-pad</code> of <code>^1.0.0</code> and the latest version on npmjs is <code>1.2.0</code>, then Renovate won't change anything because <code>1.2.0</code> satisfies the range. If instead you'd prefer to be updated to <code>^1.2.0</code> in cases like this, then configure <code>rangeStrategy</code> to <code>bump</code> in your Renovate config.</p> <p>This feature supports caret (<code>^</code>) and tilde (<code>~</code>) ranges only, like <code>^1.0.0</code> and <code>~1.0.0</code>.</p> <p>The <code>in-range-only</code> strategy may be useful if you want to leave the package file unchanged and only do <code>update-lockfile</code> within the existing range. The <code>in-range-only</code> strategy behaves like <code>update-lockfile</code>, but discards any updates where the new version of the dependency is not equal to the current version. We recommend you avoid using the <code>in-range-only</code> strategy unless you strictly need it. Using the <code>in-range-only</code> strategy may result in you being multiple releases behind without knowing it.</p>"},{"location":"configuration-options/#rebaselabel","title":"rebaseLabel","text":"<p>Label to request a rebase from Renovate bot.</p> Name Value type string default <code>\"rebase\"</code> cli <code>--rebase-label</code> env <code>RENOVATE_REBASE_LABEL</code> <p>On supported platforms it is possible to add a label to a PR to manually request Renovate to recreate/rebase it. By default this label is <code>\"rebase\"</code> but you can configure it to anything you want by changing this <code>rebaseLabel</code> field.</p>"},{"location":"configuration-options/#rebasewhen","title":"rebaseWhen","text":"<p>Controls when Renovate rebases an existing branch.</p> Name Value type string allowedValues auto, never, conflicted, behind-base-branch, automerging default <code>\"auto\"</code> cli <code>--rebase-when</code> env <code>RENOVATE_REBASE_WHEN</code> <p>Possible values and meanings:</p> <ul> <li><code>auto</code>: Renovate will autodetect the best setting. It will use <code>behind-base-branch</code> if configured to automerge or repository has been set to require PRs to be up to date. Otherwise, <code>conflicted</code> will be used instead</li> <li><code>automerging</code>: Renovate will use <code>behind-base-branch</code> if configured to automerge, Otherwise, <code>never</code> will be used instead</li> <li><code>never</code>: Renovate will never rebase the branch or update it unless manually requested</li> <li><code>conflicted</code>: Renovate will rebase only if the branch is conflicted</li> <li><code>behind-base-branch</code>: Renovate will rebase whenever the branch falls 1 or more commit behind its base branch</li> </ul> <p><code>rebaseWhen=conflicted</code> is not recommended if you have enabled Renovate automerge, because:</p> <ul> <li>It could result in a broken base branch if two updates are merged one after another without testing the new versions together</li> <li>If you have enforced that PRs must be up-to-date before merging (e.g. using branch protection on GitHub), then automerge won't be possible as soon as a PR gets out-of-date but remains non-conflicted</li> </ul> <p>It is also recommended to avoid <code>rebaseWhen=never</code> as it can result in conflicted branches with outdated PR descriptions and/or status checks.</p> <p>Avoid setting <code>rebaseWhen=never</code> and then also setting <code>prCreation=not-pending</code> as this can prevent creation of PRs.</p>"},{"location":"configuration-options/#recreatewhen","title":"recreateWhen","text":"<p>Recreate PRs even if same ones were closed previously.</p> Name Value type string default <code>\"auto\"</code> allowedValues auto, always, never cli <code>--recreate-when</code> env <code>RENOVATE_RECREATE_WHEN</code> <p>This feature used to be called <code>recreateClosed</code>.</p> <p>By default, Renovate detects if it proposed an update to a project before, and will not propose the same update again. For example the Webpack 3.x case described in the <code>separateMajorMinor</code> documentation. You can use <code>recreateWhen</code> to customize this behavior down to a per-package level. For example we override it to <code>always</code> in the following cases where branch names and PR titles must be reused:</p> <ul> <li>Package groups</li> <li>When pinning versions</li> <li>Lock file maintenance</li> </ul> <p>You can select which behavior you want from Renovate:</p> <ul> <li><code>always</code>: Recreates all closed or blocking PRs</li> <li><code>auto</code>: The default option. Recreates only immortal PRs (default)</li> <li><code>never</code>: No PR is recreated, doesn't matter if it is immortal or not</li> </ul> <p>We recommend that you stick with the default setting for this option. Only change this setting if you really need to.</p>"},{"location":"configuration-options/#registryaliases","title":"registryAliases","text":"<p>Aliases for registries.</p> Name Value mergeable true type object additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> supportedManagers ansible, bitbucket-pipelines, buildpacks, crossplane, crow, devcontainer, docker-compose, dockerfile, droneci, gitlabci, helm-requirements, helmfile, helmv3, kubernetes, kustomize, maven, terraform, vendir, woodpecker cli <code>--registry-aliases</code> env <code>RENOVATE_REGISTRY_ALIASES</code> <p>You can use the <code>registryAliases</code> object to set registry aliases. Renovate applies all <code>registryAliases</code> objects, from top to bottom.</p> <p>This feature works with the following managers:</p> <ul> <li><code>ansible</code></li> <li><code>bitbucket-pipelines</code></li> <li><code>circleci</code></li> <li><code>crow</code></li> <li><code>docker-compose</code></li> <li><code>dockerfile</code></li> <li><code>droneci</code></li> <li><code>flux</code></li> <li><code>github-actions</code></li> <li><code>gitlabci</code></li> <li><code>helm-requirements</code></li> <li><code>helm-values</code></li> <li><code>helmfile</code></li> <li><code>helmv3</code></li> <li><code>kubernetes</code></li> <li><code>terraform</code></li> <li><code>woodpecker</code></li> </ul> Setting generic aliases<pre><code>{\n  \"registryAliases\": {\n    \"jfrogecosystem\": \"some.jfrog.mirror\",\n    \"jfrog.com\": \"some.jfrog.mirror\"\n  }\n}\n</code></pre> Setting aliases for a specific Renovate manager only<pre><code>{\n  \"gitlabci\": {\n    \"registryAliases\": {\n      \"$HARBOR_HOST/$HARBOR_PROJECT\": \"registry.example.com/proxy\",\n      \"$HARBOR_HOST/tools\": \"registry.example.com/tools\"\n    }\n  }\n}\n</code></pre>"},{"location":"configuration-options/#registryurls","title":"registryUrls","text":"<p>List of URLs to try for dependency lookup. Package manager specific.</p> Name Value type array subType string default `[]` <p>Usually Renovate is able to either (a) use the default registries for a datasource, or (b) automatically detect during the manager extract phase which custom registries are in use. In case there is a need to configure them manually, it can be done using this <code>registryUrls</code> field, typically using <code>packageRules</code> like so:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"registryUrls\": [\"https://docker.mycompany.domain\"]\n    }\n  ]\n}\n</code></pre> <p>The field supports multiple URLs but it is datasource-dependent on whether only the first is used or multiple.</p>"},{"location":"configuration-options/#replacement","title":"replacement","text":"<p>Configuration to apply when replacing a dependency.</p> Name Value type object default <pre><code>{\n  \"branchTopic\": \"{{{depNameSanitized}}}-replacement\",\n  \"commitMessageAction\": \"Replace\",\n  \"commitMessageExtra\": \"with {{newName}} {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{#if isSingleVersion}}{{{prettyNewVersion}}}{{else}}{{{newValue}}}{{/if}}{{/if}}\",\n  \"prBodyNotes\": [\n    \"This is a special PR that replaces `{{{depName}}}` with the community suggested minimal stable replacement version.\"\n  ]\n}\n</code></pre> mergeable true env <code>RENOVATE_REPLACEMENT</code> <p>Add to this object if you wish to define rules that apply only to PRs that replace dependencies.</p>"},{"location":"configuration-options/#replacementapproach","title":"replacementApproach","text":"<p>Select whether to perform a direct replacement or alias replacement.</p> Name Value type string allowedValues replace, alias supportedManagers npm default <code>\"replace\"</code> cli <code>--replacement-approach</code> env <code>RENOVATE_REPLACEMENT_APPROACH</code> <p>For <code>npm</code> manager when <code>replacementApproach=alias</code> then instead of replacing <code>\"foo\": \"1.2.3\"</code> with <code>\"@my/foo\": \"1.2.4\"</code> we would instead replace it with <code>\"foo\": \"npm:@my/foo@1.2.4\"</code>.</p> <pre><code>{\n  \"replacementApproach\": \"alias\"\n}\n</code></pre>"},{"location":"configuration-options/#respectlatest","title":"respectLatest","text":"<p>Ignore versions newer than npm \"latest\" version.</p> Name Value type boolean default <code>true</code> cli <code>--respect-latest</code> env <code>RENOVATE_RESPECT_LATEST</code> <p>Similar to <code>ignoreUnstable</code>, this option controls whether to update to versions that are greater than the version tagged as <code>latest</code> in the repository. By default, <code>renovate</code> will update to a version greater than <code>latest</code> only if the current version is itself past latest.</p> <p>Note</p> <p>By default, respectLatest will be set to <code>false</code> for Maven results if a <code>latest</code> tag is found. This is because many Maven registries don't have a reliable <code>latest</code> tag - it just means whatever was last published. You need to override this to <code>respectLatest=true</code> in <code>packageRules</code> in order to use it.</p>"},{"location":"configuration-options/#reviewers","title":"reviewers","text":"<p>Requested reviewers for Pull Requests (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--reviewers</code> env <code>RENOVATE_REVIEWERS</code> default `[]` <p>Must be valid usernames.</p> <p>Required reviewers on GitHub</p> <p>If you're assigning a team to review on GitHub, you must use the prefix <code>team:</code> and add the last part of the team name. Say the full team name on GitHub is <code>@organization/foo</code>, then you'd set the config option like this:</p> <pre><code>{\n  \"reviewers\": [\"team:foo\"]\n}\n</code></pre> <p>Required reviewers on Azure DevOps</p> <p>To mark a reviewer as required on Azure DevOps, you must use the prefix <code>required:</code>.</p> <p>For example: if the username or team name is <code>bar</code> then you would set the config option like this:</p> <pre><code>{\n  \"reviewers\": [\"required:bar\"]\n}\n</code></pre> <p>Please note that Reviewers are only added during creation of a PR, but are not modified afterwards.</p> <p>Note</p> <p>By default, Renovate will not assign reviewers and assignees to an automerge-enabled PR unless it fails status checks. By configuring <code>assignAutomerge</code> setting to <code>true</code>, Renovate will instead always assign reviewers and assignees for automerging PRs at time of creation.</p>"},{"location":"configuration-options/#reviewersfromcodeowners","title":"reviewersFromCodeOwners","text":"<p>Determine reviewers based on configured code owners and changes in PR.</p> Name Value type boolean default <code>false</code> cli <code>--reviewers-from-code-owners</code> env <code>RENOVATE_REVIEWERS_FROM_CODE_OWNERS</code> <p>If enabled Renovate tries to determine PR reviewers by matching rules defined in a CODEOWNERS file against the changes in the PR.</p> <p>Read the docs for your platform for details on syntax and allowed file locations:</p> <ul> <li>GitHub Docs, About code owners</li> <li>GitLab, Code Owners</li> <li>Bitbucket, Set up and use code owners</li> </ul> <p>Please note that Reviewers are only added during creation of a PR, but are not modified afterwards.</p>"},{"location":"configuration-options/#reviewerssamplesize","title":"reviewersSampleSize","text":"<p>Take a random sample of given size from <code>reviewers</code>.</p> Name Value type integer cli <code>--reviewers-sample-size</code> env <code>RENOVATE_REVIEWERS_SAMPLE_SIZE</code>"},{"location":"configuration-options/#rollback","title":"rollback","text":"<p>Configuration to apply when rolling back a version.</p> Name Value type object default <pre><code>{\n  \"branchTopic\": \"{{{depNameSanitized}}}-rollback\",\n  \"commitMessageAction\": \"Roll back\",\n  \"semanticCommitType\": \"fix\"\n}\n</code></pre> mergeable true env <code>RENOVATE_ROLLBACK</code> <p>Add to this object if you wish to define rules that apply only to PRs that roll back versions.</p>"},{"location":"configuration-options/#rollbackprs","title":"rollbackPrs","text":"<p>Create PRs to roll back versions if the current version is not found in the registry.</p> Name Value type boolean default <code>false</code> cli <code>--rollback-prs</code> env <code>RENOVATE_ROLLBACK_PRS</code> <p>There are times when a dependency version in use by a project gets removed from the registry. For some registries, existing releases or even whole packages can be removed or \"yanked\" at any time, while for some registries only very new or unused releases can be removed. Renovate's \"rollback\" feature exists to propose a downgrade to the next-highest release if the current release is no longer found in the registry.</p> <p>Renovate does not create these rollback PRs by default, so this functionality needs to be opted-into. We recommend you do this selectively with <code>packageRules</code> and not globally.</p>"},{"location":"configuration-options/#schedule","title":"schedule","text":"<p>Limit branch creation to these times of day or week.</p> Name Value type array subType string cli <code>--schedule</code> default <pre><code>[\"at any time\"]\n</code></pre> default `[]` <p>The <code>schedule</code> option allows you to define times of the day, week or month when you are willing to allow Renovate to create branches.</p> <p>Setting a <code>schedule</code> does not itself cause or trigger Renovate to run. It's like putting a sign on your office which says \"DHL deliveries only accepted between 9-11am\". Such a sign won't cause DHL to come to your office only at 9-11am, instead it simply means that if they come at any other time of the day then they'll honor the sign and skip you. It also means that if they rarely attempt between 9-11am then you'll often get no deliveries in a day.</p> <p>Similarly, if you set too restrictive of a Renovate <code>schedule</code> and the chance of Renovate running on your repo during those hours is low, then you might find your dependency updates regularly skipped. For this reason we recommend you allow a time window of at least 3-4 hours in any <code>schedule</code>, unless your instance of Renovate is expected to run more frequently than that.</p> <p>Renovate supports the standard Cron syntax, as well as deprecated support for a subset of Later syntax. We recommend you always use Cron syntax, due to its superior testing and robustness. Config support questions are no longer accepted for Later syntax problems - you will be recommended to use Cron instead.</p> <p>The default value for <code>schedule</code> is \"at any time\", which is functionally the same as declaring a <code>null</code> schedule or <code>* * * * *</code> with Cron. i.e. Renovate will create Pull Requests at any time of any day, as needed.</p> <p>The easiest way to define a schedule is to use a preset if one of them fits your requirements. See Schedule presets for details and feel free to request a new one in the source repository if you think it would help others.</p> <p>Here are some example schedules and their Cron equivalent:</p> English description Supported by Later? Cron syntax every weekend Yes <code>* * * * 0,6</code> before 5:00am Yes <code>* 0-4 * * *</code> after 10pm and before 5am every weekday Yes <code>* 22-23,0-4 * * 1-5</code> on friday and saturday Yes <code>* * * * 5,6</code> every 3 months on the first day of the month Yes <code>* * 1 */3 *</code> <p>Note</p> <p>For Cron schedules, you must use the <code>*</code> wildcard for the minutes value, as Renovate doesn't support minute granularity. And the cron schedule must have five comma separated parts.</p> <p>One example might be that you don't want Renovate to run during your typical business hours, so that your build machines don't get clogged up testing <code>package.json</code> updates. You could then configure a schedule like this at the repository level:</p> <pre><code>{\n  \"description\": \"Schedule on weekdays at night (10 PM - 4 AM) and anytime on weekends\",\n  \"schedule\": [\"* 22-23,0-4 * * *\", \"* * * * 0,6\"]\n}\n</code></pre> <p>This would mean that Renovate can run for 7 hours each night, plus all the time on weekends. Note how the above example makes use of the \"OR\" logic of combining multiple schedules in the array.</p> <p>Note</p> <p>If both the day of the week and the day of the month are restricted in the schedule, then Renovate only runs when both the day of the month and day of the week match! For example: <code>* * 1-7 * 4</code> means Renovate only runs on the first Thursday of the month.</p> <p>It's common to use <code>schedule</code> in combination with <code>timezone</code>. You should configure <code>updateNotScheduled=false</code> if you want the schedule more strictly enforced so that updates to existing branches aren't pushed out of schedule. You can also configure <code>automergeSchedule</code> to limit the hours in which branches/PRs are automerged (if <code>automerge</code> is configured).</p>"},{"location":"configuration-options/#semanticcommitscope","title":"semanticCommitScope","text":"<p>Commit scope to use if Semantic Commits are enabled.</p> Name Value type string default <code>\"deps\"</code> cli <code>--semantic-commit-scope</code> env <code>RENOVATE_SEMANTIC_COMMIT_SCOPE</code> <p>By default you will see Angular-style commit prefixes like <code>\"chore(deps):\"</code>. If you wish to change it to something else like <code>\"package\"</code> then it will look like <code>\"chore(package):\"</code>. You can also use <code>parentDir</code> or <code>baseDir</code> to namespace your commits for monorepos e.g. <code>\"{{parentDir}}\"</code>.</p>"},{"location":"configuration-options/#semanticcommittype","title":"semanticCommitType","text":"<p>Commit type to use if Semantic Commits is enabled.</p> Name Value type string default <code>\"chore\"</code> cli <code>--semantic-commit-type</code> env <code>RENOVATE_SEMANTIC_COMMIT_TYPE</code> <p>By default you will see Angular-style commit prefixes like <code>\"chore(deps):\"</code>. If you wish to change it to something else like \"ci\" then it will look like <code>\"ci(deps):\"</code>.</p>"},{"location":"configuration-options/#semanticcommits","title":"semanticCommits","text":"<p>Enable Semantic Commit prefixes for commits and PR titles.</p> Name Value type string allowedValues auto, enabled, disabled default <code>\"auto\"</code> cli <code>--semantic-commits</code> env <code>RENOVATE_SEMANTIC_COMMITS</code> <p>If you are using a semantic prefix for your commits, then you will want to enable this setting. Although it's configurable to a package-level, it makes most sense to configure it at a repository level. If configured to <code>enabled</code>, then the <code>semanticCommitScope</code> and <code>semanticCommitType</code> fields will be used for each commit message and PR title.</p> <p>Renovate autodetects if your repository is already using semantic commits or not and follows suit, so you only need to configure this if you wish to override Renovate's autodetected setting.</p>"},{"location":"configuration-options/#separatemajorminor","title":"separateMajorMinor","text":"<p>If set to <code>false</code>, Renovate will upgrade dependencies to their latest release only. Renovate will not separate major or minor branches.</p> Name Value type boolean default <code>true</code> cli <code>--separate-major-minor</code> env <code>RENOVATE_SEPARATE_MAJOR_MINOR</code> <p>Renovate's default behavior is to create a separate branch/PR if both minor and major version updates exist (note that your choice of <code>rangeStrategy</code> value can influence which updates exist in the first place however). For example, if you were using Webpack 2.0.0 and versions 2.1.0 and 3.0.0 were both available, then Renovate would create two PRs so that you have the choice whether to apply the minor update to 2.x or the major update of 3.x. If you were to apply the minor update then Renovate would keep updating the 3.x branch for you as well, e.g. if Webpack 3.0.1 or 3.1.0 were released. If instead you applied the 3.0.0 update then Renovate would clean up the unneeded 2.x branch for you on the next run.</p> <p>It is recommended that you leave this option to <code>true</code>, because of the polite way that Renovate handles this. For example, let's say in the above example that you decided you wouldn't update to Webpack 3 for a long time and don't want to build/test every time a new 3.x version arrives. In that case, simply close the \"Update Webpack to version 3.x\" PR and it won't be recreated again even if subsequent Webpack 3.x versions are released. You can continue with Webpack 2.x for as long as you want and get any updates/patches that are made for it. Then eventually when you do want to update to Webpack 3.x you can make that update to <code>package.json</code> yourself and commit it to the base branch once it's tested. After that, Renovate will resume providing you updates to 3.x again! i.e. if you close a major upgrade PR then it won't come back again, but once you make the major upgrade yourself then Renovate will resume providing you with minor or patch updates.</p> <p>This option also has priority over package groups configured by <code>packageRule</code>. So Renovate will propose separate PRs for major and minor updates of packages even if they are grouped. If you want to enforce grouped package updates, you need to set this option to <code>false</code> within the <code>packageRule</code>.</p>"},{"location":"configuration-options/#separateminorpatch","title":"separateMinorPatch","text":"<p>If set to <code>true</code>, Renovate will separate <code>minor</code> and <code>patch</code> updates into separate branches.</p> Name Value type boolean default <code>false</code> cli <code>--separate-minor-patch</code> env <code>RENOVATE_SEPARATE_MINOR_PATCH</code> <p>By default, Renovate groups <code>patch</code> (<code>1.0.x</code>) and <code>minor</code> (<code>1.x.0</code>) releases into a single PR. For example: you are running version <code>1.0.0</code> of a package, which has two updates:</p> <ul> <li><code>1.0.1</code>, a <code>patch</code> type update</li> <li><code>1.1.0</code>, a <code>minor</code> type update</li> </ul> <p>By default, Renovate creates a single PR for the <code>1.1.0</code> version.</p> <p>If you want Renovate to create separate PRs for <code>patch</code> and <code>minor</code> upgrades, set <code>separateMinorPatch</code> to <code>true</code>. Getting separate updates from Renovate can be handy when you want to, for example, automerge <code>patch</code> updates but manually merge <code>minor</code> updates.</p>"},{"location":"configuration-options/#separatemultiplemajor","title":"separateMultipleMajor","text":"<p>If set to <code>true</code>, PRs will be raised separately for each available <code>major</code> upgrade version.</p> Name Value type boolean default <code>false</code> cli <code>--separate-multiple-major</code> env <code>RENOVATE_SEPARATE_MULTIPLE_MAJOR</code> <p>Configure this to <code>true</code> if you wish to get one PR for every separate major version upgrade of a dependency. e.g. if you are on webpack@v1 currently then default behavior is a PR for upgrading to webpack@v3 and not for webpack@v2. If this setting is true then you would get one PR for webpack@v2 and one for webpack@v3.</p>"},{"location":"configuration-options/#separatemultipleminor","title":"separateMultipleMinor","text":"<p>If set to <code>true</code>, Renovate creates separate PRs for each <code>minor</code> stream.</p> Name Value type boolean default <code>false</code> cli <code>--separate-multiple-minor</code> env <code>RENOVATE_SEPARATE_MULTIPLE_MINOR</code> <p>Enable this for dependencies when it is important to split updates into separate PRs per minor release stream (e.g. <code>python</code>).</p> <p>For example, if you are on <code>python@v3.9.0</code> currently, then by default Renovate creates a PR to upgrade you to the latest version such as <code>python@v3.12.x</code>. By default, Renovate skips versions in between, like <code>python@v3.10.x</code>.</p> <p>But if you set <code>separateMultipleMinor=true</code> then you get separate PRs for each minor stream, like <code>python@3.9.x</code>, <code>python@v3.10.x</code> and <code>python@v3.11.x</code>, etc.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#skipartifactsupdate","title":"skipArtifactsUpdate","text":"<p>Skip Renovate's automatic artifact updating.</p> Name Value type boolean default <code>false</code> cli <code>--skip-artifacts-update</code> env <code>RENOVATE_SKIP_ARTIFACTS_UPDATE</code> <p>Use this option when automatic artifact updating fails, is incorrect, or not needed.</p> <p>This option was formerly known as <code>updateLockFiles</code>.</p> <p>When this option is set, Renovate won't attempt to update artifacts such as lock files, so you will need to update them yourself, either manually or through secondary automation such as CI workflows.</p> <p>Note</p> <p>When this option is used in package rules, along with grouped upgrades, artifact updating will only be skipped if every upgrade in the grouped branch wants to skip it.</p> <p>Warning</p> <p>When artifact updates are skipped and the <code>packageManager</code> field in <code>package.json</code> is updated, the new version will not contain a hash. The hash is only applied when artifacts are updated. For example, a value of <code>packageManager: \"yarn@3.0.0+sha224.deadbeef\"</code> would be updated to just <code>packageManager: \"yarn@3.1.0\"</code> rather than <code>packageManager: \"yarn@3.1.0+sha224.f0cacc1a\"</code>.</p>"},{"location":"configuration-options/#skipinstalls","title":"skipInstalls","text":"<p>Skip installing modules/dependencies if lock file updating is possible without a full install.</p> Name Value type boolean cli <code>--skip-installs</code> env <code>RENOVATE_SKIP_INSTALLS</code> default <code>null</code> <p>By default, Renovate will use the most efficient approach to updating package files and lock files, which in most cases skips the need to perform a full module install by the bot. If this is set to false, then a full install of modules will be done. This is currently applicable to <code>npm</code> only, and only used in cases where bugs in <code>npm</code> result in incorrect lock files being updated.</p>"},{"location":"configuration-options/#statuschecknames","title":"statusCheckNames","text":"<p>Custom strings to use as status check names.</p> Name Value type object mergeable true default <pre><code>{\n  \"artifactError\": \"renovate/artifacts\",\n  \"configValidation\": \"renovate/config-validation\",\n  \"mergeConfidence\": \"renovate/merge-confidence\",\n  \"minimumReleaseAge\": \"renovate/stability-days\"\n}\n</code></pre> cli <code>--status-check-names</code> env <code>RENOVATE_STATUS_CHECK_NAMES</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>You can customize the name/context of status checks that Renovate adds to commits/branches/PRs.</p> <p>This option enables you to modify any existing status checks name/context, but adding new status checks this way is not supported. Setting the value to <code>null</code> or an empty string, effectively disables or skips that status check. This option is mergeable, which means you only have to specify the status checks that you want to modify.</p> Example of overriding status check strings<pre><code>{\n  \"statusCheckNames\": {\n    \"minimumReleaseAge\": \"custom/stability-days\",\n    \"mergeConfidence\": \"custom/merge-confidence-level\"\n  }\n}\n</code></pre>"},{"location":"configuration-options/#stopupdatinglabel","title":"stopUpdatingLabel","text":"<p>Label to make Renovate stop updating a PR.</p> Name Value type string default <code>\"stop-updating\"</code> supportedPlatforms azure, forgejo, gerrit, gitea, github, gitlab cli <code>--stop-updating-label</code> env <code>RENOVATE_STOP_UPDATING_LABEL</code> <p>This feature only works on supported platforms, check the table above.</p> <p>If you want Renovate to stop updating a PR, you can apply a label to the PR. By default, Renovate listens to the label: <code>\"stop-updating\"</code>.</p> <p>You can set your own label name with the <code>\"stopUpdatingLabel\"</code> field:</p> <pre><code>{\n  \"stopUpdatingLabel\": \"take-a-break-renovate\"\n}\n</code></pre>"},{"location":"configuration-options/#suppressnotifications","title":"suppressNotifications","text":"<p>Options to suppress various types of warnings and other notifications.</p> Name Value type array subType string allowedValues artifactErrors, branchAutomergeFailure, configErrorIssue, dependencyLookupWarnings, lockFileErrors, missingCredentialsError, onboardingClose, prEditedNotification, prIgnoreNotification mergeable true default `[]` <p>Use this field to suppress various types of warnings and other notifications from Renovate. For example:</p> <pre><code>{\n  \"suppressNotifications\": [\"prIgnoreNotification\"]\n}\n</code></pre> <p>The above config will suppress the comment which is added to a PR whenever you close a PR unmerged.</p>"},{"location":"configuration-options/#timezone","title":"timezone","text":"<p>Must conform to IANA Time Zone format.</p> Name Value type string cli <code>--timezone</code> env <code>RENOVATE_TIMEZONE</code> default <code>null</code> <p>We recommend that you only configure the <code>timezone</code> option if both of these are true:</p> <ul> <li>you want to use the <code>schedule</code> feature</li> <li>and you want Renovate to evaluate the <code>schedule</code> in your timezone</li> </ul> <p>Please see the above link for valid timezone names.</p>"},{"location":"configuration-options/#updateinternaldeps","title":"updateInternalDeps","text":"<p>Whether to update internal dep versions in a monorepo. Works on Yarn Workspaces.</p> Name Value type boolean default <code>false</code> cli <code>--update-internal-deps</code> env <code>RENOVATE_UPDATE_INTERNAL_DEPS</code> <p>Renovate defaults to skipping any internal package dependencies within monorepos. In such case dependency versions won't be updated by Renovate.</p> <p>To opt in to letting Renovate update internal package versions normally, set this configuration option to true.</p>"},{"location":"configuration-options/#updatenotscheduled","title":"updateNotScheduled","text":"<p>Whether to update branches when not scheduled. Renovate will not create branches outside of the schedule.</p> Name Value type boolean default <code>true</code> cli <code>--update-not-scheduled</code> env <code>RENOVATE_UPDATE_NOT_SCHEDULED</code> <p>When schedules are in use, it generally means \"no updates\". However there are cases where updates might be desirable - e.g. if you have configured <code>prCreation=not-pending</code>, or you have <code>rebaseWhen=behind-base-branch</code> and the base branch is updated so you want Renovate PRs to be rebased.</p> <p>This defaults to <code>true</code>, meaning that Renovate will perform certain \"desirable\" updates to existing PRs even when outside of schedule. If you wish to disable all updates outside of scheduled hours then configure this field to <code>false</code>.</p>"},{"location":"configuration-options/#updatepinneddependencies","title":"updatePinnedDependencies","text":"<p>Whether to update pinned (single version) dependencies or not.</p> Name Value type boolean default <code>true</code> cli <code>--update-pinned-dependencies</code> env <code>RENOVATE_UPDATE_PINNED_DEPENDENCIES</code> <p>By default, Renovate will try to update all detected dependencies, regardless of whether they are defined using pinned single versions (e.g. <code>1.2.3</code>) or constraints/ranges (e.g. (<code>^1.2.3</code>). You can set this option to <code>false</code> if you wish to disable updating for pinned (single version) dependencies specifically.</p>"},{"location":"configuration-options/#usebasebranchconfig","title":"useBaseBranchConfig","text":"<p>Whether to read configuration from base branches instead of only the default branch.</p> Name Value type string allowedValues merge, none default <code>\"none\"</code> cli <code>--use-base-branch-config</code> env <code>RENOVATE_USE_BASE_BRANCH_CONFIG</code> <p>By default, Renovate will read config file from the default branch only and will ignore any config files in base branches. You can configure <code>useBaseBranchConfig=merge</code> to instruct Renovate to merge the config from each base branch over the top of the config in the default branch.</p> <p>The config file name in the base branch must be the same as in the default branch and cannot be <code>package.json</code>. This scenario may be useful for testing the config changes in base branches instantly.</p>"},{"location":"configuration-options/#userstrings","title":"userStrings","text":"<p>User-facing strings for the Renovate comment when a PR is closed.</p> Name Value type object freeChoice true default <pre><code>{\n  \"ignoreTopic\": \"Renovate Ignore Notification\",\n  \"ignoreMajor\": \"Because you closed this PR without merging, Renovate will ignore this update. You will not get PRs for *any* future `{{{newMajor}}}.x` releases. But if you manually upgrade to `{{{newMajor}}}.x` then Renovate will re-enable `minor` and `patch` updates automatically.\",\n  \"ignoreDigest\": \"Because you closed this PR without merging, Renovate will ignore this update. You will not get PRs for the `{{{depName}}}` `{{{newDigestShort}}}` update again.\",\n  \"ignoreOther\": \"Because you closed this PR without merging, Renovate will ignore this update (`{{{newValue}}}`). You will get a PR once a newer version is released. To ignore this dependency forever, add it to the `ignoreDeps` array of your Renovate config.\",\n  \"artifactErrorWarning\": \"You probably do not want to merge this PR as-is.\"\n}\n</code></pre> cli <code>--user-strings</code> env <code>RENOVATE_USER_STRINGS</code> <p>When a PR is closed, Renovate posts a comment to let users know that future updates will be ignored. If you want, you can change the text in the comment with the <code>userStrings</code> config option.</p> <p>You can edit these user-facing strings:</p> <ul> <li><code>artifactErrorWarning</code>: Text of the PR comment when artifact errors occur during updates.</li> <li><code>ignoreDigest</code>: Text of the PR comment for digest upgrades.</li> <li><code>ignoreMajor</code>: Text of the PR comment for major upgrades.</li> <li><code>ignoreOther</code>: Text of the PR comment for other (neither digest nor major) upgrades.</li> <li><code>ignoreTopic</code>: Topic of the PR comment.</li> </ul> <p>For example:</p> <pre><code>{\n  \"userStrings\": {\n    \"artifactErrorWarning\": \"Custom text for artifact errors.\",\n    \"ignoreTopic\": \"Custom topic for PR comment\",\n    \"ignoreMajor\": \"Custom text for major upgrades.\",\n    \"ignoreDigest\": \"Custom text for digest upgrades.\",\n    \"ignoreOther\": \"Custom text for other upgrades.\"\n  }\n}\n</code></pre>"},{"location":"configuration-options/#versioncompatibility","title":"versionCompatibility","text":"<p>A regex (<code>re2</code>) with named capture groups to show how version and compatibility are split from a raw version string.</p> Name Value type string format regex default <code>null</code> <p>This option is used for advanced use cases where the version string embeds more data than just the version. It's typically used with docker and tags datasources.</p> <p>Here are two examples:</p> <ul> <li>The image tag <code>ghcr.io/umami-software/umami:postgresql-v1.37.0</code> embeds text like <code>postgresql-</code> as a prefix to the actual version to differentiate different DB types.</li> <li>Docker image tags like <code>node:18.10.0-alpine</code> embed the base image as a suffix to the version.</li> </ul> <p>Here is an example of solving these types of cases:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"ghcr.io/umami-software/umami\"],\n      \"versionCompatibility\": \"^(?&lt;compatibility&gt;.*)-(?&lt;version&gt;.*)$\",\n      \"versioning\": \"semver\"\n    },\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"node\"],\n      \"versionCompatibility\": \"^(?&lt;version&gt;[^-]+)(?&lt;compatibility&gt;-.*)?$\",\n      \"versioning\": \"node\"\n    }\n  ]\n}\n</code></pre> <p>This feature is most useful when the <code>currentValue</code> is a version and not a range/constraint.</p> <p>This feature can be used in combination with <code>extractVersion</code> although that's likely only a rare edge case. When combined, <code>extractVersion</code> is applied to datasource results first, and then <code>versionCompatibility</code>. <code>extractVersion</code> should be used when the raw version string returned by the <code>datasource</code> contains extra details (such as a <code>v</code> prefix) when compared to the value/version used within the repository.</p> <p>During the lookup phase, Renovate evaluates the <code>versionCompatibility</code> regex against the <code>currentValue</code> string. If there is a match, the version part is stored internally temporarily as <code>compareValue</code> and the compatibility part stored as <code>currentCompatibility</code>. Storing <code>currentCompatibility</code> allows Renovate to reuse this value later to filter for new versions with the same compatibility. Renovate applies this compatibility check to datasource lookup results by passing both the <code>versionCompatibility</code> and <code>currentCompatibility</code> strings to a filter.</p> <p>For a new version to be allowed, it must:</p> <ul> <li>Satisfy the <code>versionCompatibility</code> regex, and</li> <li>Have the same <code>compatibility</code> part as the <code>currentValue</code></li> </ul> <p>At this point, Renovate's core lookup logic is comparing versions to versions, and ignoring compatibility strings like <code>-jre8</code>. Finally, once updates are decided, Renovate restores the compatibility part to the <code>newValue</code> result.</p>"},{"location":"configuration-options/#versioning","title":"versioning","text":"<p>Versioning to use for filtering and comparisons.</p> Name Value type string allowedValues aws-eks-addon, aws-machine-image, azure-rest-api, bazel-module, cargo, composer, conan, conda, deb, debian, devbox, docker, git, glasskube, go-mod-directive, gradle, hashicorp, helm, hermit, hex, ivy, kubernetes-api, lambda-node, loose, maven, nixpkgs, node, npm, nuget, pep440, perl, poetry, pvp, python, redhat, regex, rez, rpm, ruby, same-major, semver, semver-coerced, semver-partial, swift, ubuntu, unity3d, unity3d-packages default <code>null</code> <p>Usually, each language or package manager has a specific type of \"versioning\": JavaScript uses npm's SemVer implementation, Python uses pep440, etc.</p> <p>Renovate also uses custom versioning, like <code>\"docker\"</code> to address the most common way people tag versions using Docker, and <code>\"loose\"</code> as a fallback that tries SemVer first. Otherwise Renovate does its best to sort and compare.</p> <p>By exposing <code>versioning</code> to config, you can override the default versioning for a package manager if needed. We do not recommend overriding the default versioning, but there are some cases such as Docker or Gradle where versioning is not strictly defined and you may need to specify the versioning type per-package.</p> <p>Renovate supports 4-part versions (1.2.3.4) in full for the NuGet package manager. Other managers can use the <code>\"loose\"</code> versioning fallback: the first 3 parts are used as the version, all trailing parts are used for alphanumeric sorting.</p> <p>A key characteristic of the <code>\"docker\"</code> versioning is that it attempts to preserve the precision of the current version string. For example, if your current version has two parts (e.g., 5.6), Renovate will propose updates that also have two parts (e.g., 5.7), rather than a three-part SemVer equivalent (e.g., 5.7.0).</p> <p>Example Use Case: \"Floating Patch Versions\" using 2 digits versioning</p> <p>You may want to use a 2-part version like 5.6 to indicate the minor version while automatically receiving the latest patch updates (a \"floating patch\"). At the same time, you still want Renovate to create merge requests for minor or major updates like 5.7 or 6.2. The default semver versioning would update 5.6 to a 3-part version like 5.6.1, which would break the floating patch behavior.</p> <p>In the below <code>renovate.json</code> extract example, Renovate will use the <code>docker</code> versioning for the <code>.gitlab-ci.yml</code> file, so you can pin the minor version while still receiving the latest patch updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\".gitlab-ci.yml\"],\n      \"versioning\": \"docker\"\n    }\n  ]\n}\n</code></pre> <p>When using this strategy, make sure that the package you're referencing does support 2-part versions, e.g. that it has a version like <code>5.6</code> available in the registry in addition to <code>5.6.1</code> or <code>5.6.2</code>.</p>"},{"location":"configuration-options/#vulnerabilityalerts","title":"vulnerabilityAlerts","text":"<p>Config to apply when a PR is needed due to a vulnerability in the existing package version.</p> Name Value type object default <pre><code>{\n  \"groupName\": null,\n  \"schedule\": [],\n  \"dependencyDashboardApproval\": false,\n  \"minimumReleaseAge\": null,\n  \"rangeStrategy\": \"update-lockfile\",\n  \"commitMessageSuffix\": \"[SECURITY]\",\n  \"branchTopic\": \"{{{datasource}}}-{{{depNameSanitized}}}-vulnerability\",\n  \"prCreation\": \"immediate\",\n  \"vulnerabilityFixStrategy\": \"lowest\"\n}\n</code></pre> mergeable true supportedPlatforms github <p>Renovate can read GitHub's Vulnerability Alerts to customize its Pull Requests. For this to work, you must enable the Dependency graph, and Dependabot alerts. Follow these steps:</p> <ol> <li>While logged in to GitHub, navigate to your repository</li> <li>Select the \"Settings\" tab</li> <li>Select \"Code security and analysis\" in the sidebar</li> <li>Enable the \"Dependency graph\"</li> <li>Enable \"Dependabot alerts\"</li> <li>If you're running Renovate in app mode: make sure the app has <code>read</code> permissions for \"Dependabot alerts\".    If you're the account administrator, browse to the app (for example the Mend Renovate App), select \"Configure\", and then scroll down to the \"Permissions\" section and make sure that <code>read</code> access to \"Dependabot alerts\" is mentioned</li> </ol> <p>Once the above conditions are met, and you got one or more vulnerability alerts from GitHub for this repository, then Renovate tries to raise fix PRs.</p> <p>You may use the <code>vulnerabilityAlerts</code> configuration object to customize vulnerability-fix PRs.</p> Setting a custom label and assignee<pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"labels\": [\"security\"],\n    \"automerge\": true,\n    \"assignees\": [\"@renovate-tests\"]\n  }\n}\n</code></pre> <p>Warning</p> <p>There's a small chance that a wrong vulnerability alert results in a flapping/looping vulnerability fix. If you allow Renovate to <code>automerge</code> vulnerability fixes, please check if the automerged fix is correct.</p> <p>Note</p> <p>When Renovate creates a <code>vulnerabilityAlerts</code> PR, it ignores settings like <code>prConcurrentLimit</code>, <code>branchConcurrentLimit</code>, <code>prHourlyLimit</code>, or <code>schedule</code>. This means that Renovate always tries to create a <code>vulnerabilityAlerts</code> PR. In short: vulnerability alerts \"skip the line\".</p> <p>To disable the vulnerability alerts feature, set <code>enabled=false</code> in a <code>vulnerabilityAlerts</code> config object, like this:</p> Disabling vulnerability alerts<pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"enabled\": false\n  }\n}\n</code></pre> <p>Note</p> <p>If you want to raise only vulnerability fix PRs, you may use the <code>security:only-security-updates</code> preset.</p>"},{"location":"configuration-options/#vulnerabilityfixstrategy","title":"vulnerabilityFixStrategy","text":"<p>Strategy to use when fixing vulnerabilities. <code>lowest</code> will propose the earliest version with a fix, <code>highest</code> will always pick the latest version.</p> Name Value type string allowedValues lowest, highest default <code>\"lowest\"</code> parents vulnerabilityAlerts cli <code>--vulnerability-fix-strategy</code> env <code>RENOVATE_VULNERABILITY_FIX_STRATEGY</code> <p>When a vulnerability fix is available, Renovate will default to picking the lowest fixed version (<code>vulnerabilityFixStrategy=lowest</code>). For example, if the current version is <code>1.0.0</code>, and a vulnerability is fixed in <code>1.1.0</code>, while the latest version is <code>1.2.0</code>, then Renovate will propose an update to <code>1.1.0</code> as the vulnerability fix.</p> <p>If <code>vulnerabilityFixStrategy=highest</code> is configured then Renovate will use its normal strategy for picking upgrades, e.g. in the above example it will propose an update to <code>1.2.0</code> to fix the vulnerability.</p> Setting vulnerabilityFixStrategy to highest<pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"vulnerabilityFixStrategy\": \"highest\"\n  }\n}\n</code></pre>"},{"location":"configuration-templates/","title":"Config Template Editing","text":"<p>This document describes how you can edit branch names, commit messages, PR titles and PR content.</p>"},{"location":"configuration-templates/#branch-name","title":"Branch Name","text":"<p>The branch name is very important for Renovate because it helps determine \"grouping\" of updates, and also makes it efficient when an existing PR needs to be updated when a newer version of a package is released. If you change the <code>branchPrefix</code> while you have ignored some upgrades (closed PR without merging), you might get a duplicate PR after the new <code>branchPrefix</code> setting is picked up by the bot.</p> <p><code>branchName</code> default value is <code>{{{branchPrefix}}}{{{additionalBranchPrefix}}}{{{branchTopic}}}</code>.</p> <p>The most common branch name you will see looks like this: <code>renovate/react-18.x</code>. In this example, the <code>branchPrefix</code> is the default <code>renovate/</code>, <code>additionalBranchPrefix</code> is empty, and <code>branchTopic</code> is <code>react-18.x</code>.</p> <p>Most users will be happy with the default <code>branchPrefix</code> of <code>renovate/</code>, but you can change this if you don't like the default. Say you don't want the forward slashes, in that case you would use <code>renovate-</code> as your <code>branchPrefix</code>. The onboarding PR will always use <code>renovate/configure</code>.</p> <p><code>additionalBranchPrefix</code> is optional and by default is empty.</p> <p><code>branchTopic</code> depends on the package manager and upgrade type, so you will see a lot of variety. This is probably a setting you want to change yourself. Be careful, and consider creating a new \"config help\" post at the discussions tab in the Renovate repository to get help from the Renovate team with your config.</p>"},{"location":"configuration-templates/#commit-message","title":"Commit Message","text":"<p>Renovate uses one commit per branch. The <code>commitMessage</code> reflects the contents of the branch and is usually the same as the PR title.</p> <p><code>commitMessage</code> has a default value of <code>{{{commitMessagePrefix}}} {{{commitMessageAction}}} {{{commitMessageTopic}}} {{{commitMessageExtra}}} {{{commitMessageSuffix}}}</code>, with the intention that you only edit some of those subcomponents.</p> <p>You usually don't need to edit <code>commitMessagePrefix</code>, this option is used by Renovate if it needs to add a prefix to conform to the Semantic Commit convention. Avoid editing the commit message, unless you know what you're doing.</p> <p><code>commitMessageAction</code> is usually one word, like 'Update', 'Pin', 'Refresh', etc. You're probably fine leaving this setting alone, though you can change it. e.g. if you prefer that Renovate uses the term 'Upgrade' instead of 'Update' then you could configure <code>\"commitMessageAction\": \"Upgrade\"</code>.</p> <p><code>commitMessageTopic</code> is usually two to three words that show what is being updated. e.g. it might be <code>dependency react</code> or <code>Docker image ubuntu</code>. You may want to edit this. If you think your new <code>commitMessageTopic</code> is helpful for others, please open a PR.</p> <p><code>commitMessageExtra</code> refers to the version being updated to. e.g. <code>to v18</code> for a major upgrade, or <code>to v18.0.2</code> for a patch update. It can be empty in some cases, like if the action/topic doesn't change a package version, e.g. <code>Pin Docker digests</code>.</p> <p><code>commitMessageSuffix</code> defaults to empty but is currently used in two cases:</p> <ul> <li>Differentiating major from non-major groups</li> <li>Differentiating between PRs from different base branches, maybe for <code>major</code> updates you always want the PR to end with <code>(MAJOR)</code>, for instance</li> </ul> <p><code>commitBody</code> is used if you wish to add multi-line commit messages, such as for the <code>Signed-off-by</code> fields, or adding <code>[skip-ci]</code>, etc. It is appended to the generated <code>commitMessage</code>, separated by a newline.</p>"},{"location":"configuration-templates/#pr-title","title":"PR Title","text":"<p>Because commit messages match with the PR title, the PR title template defaults to <code>null</code> and inherits/copies the value from <code>commitMessage</code>. If you have a requirement where <code>prTitle</code> should be different from <code>commitMessage</code>, then please raise a feature request for discussion.</p>"},{"location":"configuration-templates/#pr-body","title":"PR Body","text":"<p>You can change the PR body in the following ways:</p> <ul> <li>Change the entire layout/flow by using <code>prBodyTemplate</code> (we do not recommend this)</li> <li>Add a header by using <code>prHeader</code></li> <li>Add a footer by using <code>prFooter</code></li> <li>Add a note by using <code>prBodyNotes</code></li> <li>Edit the embedded table by using <code>prBodyDefinitions</code> and <code>prBodyColumns</code></li> </ul>"},{"location":"contributing-to-renovate/","title":"Contributing to Renovate","text":"<p>Thank you for thinking of contributing to Renovate! The <code>docs/development/</code> directory of the <code>renovatebot/renovate</code> repository has all the developer-facing documentation.</p>"},{"location":"contributing-to-renovate/#i-want-to-write-code","title":"I want to write code","text":""},{"location":"contributing-to-renovate/#read-this-first","title":"Read this first","text":"<ol> <li>Contributing guide</li> <li>Best practices</li> <li>Local Development or Remote Development</li> </ol>"},{"location":"contributing-to-renovate/#creatingediting-renovate-preset","title":"Creating/editing Renovate preset","text":"<ol> <li>Creating/editing Renovate presets</li> </ol>"},{"location":"contributing-to-renovate/#adding-a-new-package-manager","title":"Adding a new package manager","text":"<ol> <li>Adding a Package Manager</li> </ol>"},{"location":"contributing-to-renovate/#background-information","title":"Background information","text":"<ol> <li>Design Decisions</li> <li>Zod schema guideline</li> <li>Branches and commits behavior</li> <li>Configuration</li> <li>Static Data</li> <li>How to bump Renovate to next NodeJS LTS release</li> </ol>"},{"location":"contributing-to-renovate/#i-want-to-write-documentation","title":"I want to write documentation","text":"<p>Read the Contributing guide, and the Renovate style guide.</p>"},{"location":"contributing-to-renovate/#i-want-to-triage-incoming-discussions","title":"I want to triage incoming discussions","text":"<p>Start by reading:</p> <ol> <li>Contributing guide</li> <li>Triage guide</li> <li>Issue labeling</li> </ol> <p>You may need to direct a Renovate user to one of these pages:</p> <ol> <li>About minimal reproductions</li> <li>New package manager questionnaire</li> <li>Help Us Help You</li> </ol>"},{"location":"dependency-pinning/","title":"Should you Pin your JavaScript Dependencies?","text":"<p>Once you start using a tool/service like Renovate, probably the biggest decision you need to make is whether to \"pin\" your dependencies instead of using SemVer ranges. The answer is \"It's your choice\", but we can certainly make some generalizations/recommendations to help you.</p> <p>If you don't want to read the in-depth discussion, you can skip ahead to our recommendations in the \"So what's best?\" section.</p>"},{"location":"dependency-pinning/#what-is-dependency-pinning","title":"What is Dependency Pinning?","text":"<p>To ensure we're all talking about the same thing, it's important to define exactly what we mean by dependency \"pinning\".</p> <p>Historically, projects use SemVer ranges in their <code>package.json</code>. For instance, if you run <code>npm install foobar</code> you will see an entry like <code>\"foobar\": \"^1.1.0\"</code> added to your <code>package.json</code>. Verbosely, this means \"any foobar version greater than or equal to 1.1.0 but less than 2\". The project will automatically use <code>1.1.1</code> if it's released, or <code>1.2.0</code>, or <code>1.2.1</code>, etc - meaning you will get not only patch updates but also feature (minor) releases too.</p> <p>Another alternative is ranges like <code>\"foobar\": \"~1.1.0\"</code> which means \"any foobar version greater than or equal to 1.1.0 but less than 1.2\". This narrows the range to only patch updates to the 1.1 range.</p> <p>If instead you \"pin\" your dependencies rather than use ranges, it means you use exact entries like <code>\"foobar\": \"1.1.0\"</code> which means \"use only foobar version 1.1.0 and no other\".</p>"},{"location":"dependency-pinning/#why-use-ranges","title":"Why use ranges?","text":"<p>For projects of any type, the main reason to use ranges is so that you can \"automatically\" get updated releases - which may even include security fixes. By \"automatically\", we mean that any time you run <code>npm install</code> you will get the very latest version matching your SemVer - assuming you're not using a lock file, that is.</p>"},{"location":"dependency-pinning/#tilde-vs-caret","title":"Tilde vs Caret","text":"<p>If you're familiar with the theory of SemVer, you might think that you only need to use tilde ranges (e.g. <code>\"~1.1.0\"</code>) to get bug fixes, rather than caret ranges (e.g. <code>\"^1.1.0\"</code>). This is true in theory but not in practice. The reality is that for most projects, fixes are not \"backported\" to previous minor releases, and minor releases themselves may include fixes. So for example release <code>1.2.0</code> may include one new feature and one fix, so if you stick with <code>1.1.0</code> then you will miss out on the fix as there will never be a <code>1.1.1</code> once <code>1.2.0</code> is already released. This is the reality of most open source packages.</p>"},{"location":"dependency-pinning/#ranges-for-libraries","title":"Ranges for Libraries","text":"<p>A second reason for using ranges applies to \"libraries\" that are published as npm packages with the intention that they are used/<code>require()</code>'d by other packages. In this case, it is usually a bad idea to pin all your dependencies because it will introduce an unnecessarily narrow range (one release!) and cause most users of your package to bloat their <code>node_modules</code> with duplicates.</p> <p>For example, you might have pinned <code>foobar</code> to version <code>1.1.0</code> and another author pinned his/her <code>foobar</code> dependency to <code>1.2.2</code>. Any user of both your packages will end up with npm trying to install two separate versions of <code>foobar</code>, which might not even work. Even if both projects use a service like Renovate to keep their pinned dependencies up to date with the very latest versions, it's still not a good idea - there will always be times when one package has updated/released before the other one and they will be out of sync. e.g. there might be a space of 30 minutes where your package specifies foobar <code>1.1.0</code> and the other one specifies <code>1.1.1</code> and your joint downstream users end up with a duplicate.</p>"},{"location":"dependency-pinning/#why-pin-dependencies","title":"Why pin dependencies?","text":"<p>You mainly pin versions for certainty, and visibility. When you have a pinned version of each dependency in your <code>package.json</code>, you know exactly which version of each dependency is installed at any time. This benefits when upgrading versions as well as when rolling back in case of problems.</p> <p>Note</p> <p>We'll cover lock files later, don't worry.</p>"},{"location":"dependency-pinning/#upgrading-pinned-versions","title":"Upgrading pinned versions","text":"<p>Let's say that a \"faulty\" version <code>1.2.0</code> of <code>foobar</code> is released and it breaks one of your tests.</p> <p>If you were using default caret SemVer ranges, then your <code>main</code> branch is now \"broken\" because its <code>package.json</code> says that any version 1.x above 1.1.0 is acceptable, and npm will choose the latest (<code>1.2.0</code>). You would need to manually check and work out which dependency caused the failure (<code>foobar</code> may not have been the only dependency to have \"automatically\" upgraded since the last time your tests passed) and then you would need to pin the dependency yourself to stop <code>npm</code> installing <code>1.2.0</code>.</p> <p>Consider the same situation if instead you were pinning dependency versions. Your <code>main</code> branch would not be broken because it's pinned to <code>foobar@1.1.0</code> - instead you'd have a Pull Request for upgrading to <code>foobar@1.2.0</code> which would fail. You'd know not to merge it and can wait for <code>foobar@1.2.1</code> or later when it's fixed. By pinning dependencies you know exactly what you're running and you know exactly what failed.</p> <p>Now consider a similar theoretical scenario where <code>foobar@1.2.0</code> is faulty but it is not caught by any of your automated tests. This is more common and more dangerous.</p> <p>If you were using SemVer ranges then this new version of <code>foobar</code> will likely be deployed to production automatically one day, sometime after which you notice errors and realize you need to fix it. Like before, you need to manually work out which dependency caused it - assuming you guess correctly that it was a new dependency version at fault - and pin it manually by editing <code>package.json</code> one dependency at a time.</p> <p>Alternatively, if you were instead pinning <code>foobar</code> then you would get a PR for <code>foobar@1.2.0</code> which awaits your approval. So first of all, you can choose to read the changelogs and/or visually inspect the branch yourself before merging, hopefully saving you from pushing this faulty code to production.</p> <p>If you did not catch the fault before merging, you are still better off with a pinned version. If you discover something wrong in production, you can easily \"roll back\" commits in your development environment until you find which rollback fixes the problem. Then you can simply revert that commit (reversing <code>foobar@1.1.0</code> -&gt; <code>foobar@1.2.0</code>) and push that to <code>main</code>. When the next release of <code>foobar</code> comes out (e.g. <code>1.2.1</code>) you will be prompted with a new PR and hopefully inspect it carefully this time before merge!</p> <p>As you can see in the above, pinning dependencies makes your build more consistent and predictable as a developer.</p>"},{"location":"dependency-pinning/#downside-of-pinned-dependencies-upgrade-noise","title":"Downside of pinned dependencies - upgrade \"noise\"","text":"<p>The one major downside to your development workflow of pinning dependencies is the potential for increased \"noise\" in your repository. As mentioned above, you can expect to get Pull Requests whenever there is a new version of your dependencies available. Depending on how many repositories you maintain, and how many dependencies are in each, you may find this default approach to be overwhelming (e.g. waking up to 10 new Pull Requests each day).</p>"},{"location":"dependency-pinning/#reducing-the-noise-of-dependency-updates","title":"Reducing the \"noise\" of dependency updates","text":"<p>The increased volume of Pull Requests for upgrading dependencies may be considered by some to be undesirable \"noise\" in their day. To some extent this is simply a trade-off for having your dependencies pinned and predictable, but there are also ways you can reduce this noise while still gaining the majority of the benefits:</p>"},{"location":"dependency-pinning/#pull-request-automerging","title":"Pull Request automerging","text":"<p>There are some dependencies that either (a) don't have the potential to break something in production, or (b) are fully tested by your tests.</p> <p>For example, it's very hard for <code>eslint</code> to break anything in production. If your build/tests pass, then you are fine. Consider enabling automerge for all lint packages to save yourself the work of manually approving the update each time. In this case you might wake up to 5/10 of your overnight Pull Requests having already merged themselves.</p> <p>Another example of a good candidate for automerging might be a database driver like <code>node-postgres</code> (<code>pg</code> on npm), if you have 100% test coverage of your API. In that case if the <code>pg</code> package has a minor or patch update and passes all tests then you may as well merge it automatically if you were not going to do a manual inspection anyway.</p>"},{"location":"dependency-pinning/#branch-automerging","title":"Branch automerging","text":"<p>In the above suggestion of Pull Request automerging, you might still find it annoying if you get GitHub Notifications for every PR that is created and merged. In that case, you could set <code>automergeType</code> to <code>branch</code>, which means Renovate will:</p> <ul> <li>Create a new branch for testing</li> <li>Wait until after tests have completed</li> <li>Push the commit directly to <code>main</code> if tests pass, or</li> <li>Raise a PR only if tests failed</li> </ul> <p>With this approach, updates will be essentially \"silent\" - causing no notifications - but you will be able to see each commit on <code>main</code> of course.</p>"},{"location":"dependency-pinning/#scheduling","title":"Scheduling","text":"<p>Although it can feel satisfying to get updates \"immediately\" when they're available, the reality is that you usually don't need updates so frequently. And worse still, npm package versions that are less than 24 hours can be unpublished, which would really break your build if you've pinned to a version that no longer exists.</p> <p>So to reduce the interruptions of automated dependency updates, consider putting Renovate on a schedule, such as:</p> <ul> <li>Update only on weekends? This way you update packages at most once per week, and your CI build runners are likely to be idle anyway</li> <li>Update daily, but between midnight and 5am? This way developers aren't bothered by notifications when they're working, and you're keeping the build machines free for the developers</li> </ul> <p>To learn all about controlling Renovate's schedule, read the key concepts, scheduling docs.</p>"},{"location":"dependency-pinning/#grouping-related-packages","title":"Grouping related packages","text":"<p>Although it's good to isolate each dependency update for ease of troubleshooting, there are times when the extra noise isn't worth it, or when packages naturally belong together anyway (such as all <code>babel</code> packages). You can add a package rule in our Renovate configuration to group these together and you'll get one branch combined even if multiple packages have updates available.</p>"},{"location":"dependency-pinning/#pinning-dependencies-and-lock-files","title":"Pinning Dependencies and Lock Files","text":"<p>Since both <code>yarn</code> and <code>npm@5</code> both support lock files, it's a common question to ask \"Why should I pin dependencies if I'm already using a lock file?\". It's a good question!</p> <p></p> <p>Lock files are a great companion to SemVer ranges or pinning dependencies, because these files lock (pin) deeper into your dependency tree than you see in <code>package.json</code>.</p>"},{"location":"dependency-pinning/#what-a-lock-file-will-do-for-you","title":"What a lock file will do for you","text":"<p>When kept in sync with its associated <code>package.json</code>, a lock file will further lock down the exact dependencies and sub-dependencies that your project uses, so that everyone running <code>npm install</code> or <code>yarn install</code> will install the exact same dependencies as the person or bot that last updated the lock file.</p> <p>To reuse an earlier example, this means that you could have <code>foobar@^1.1.0</code> in your <code>package.json</code> and be locked to <code>1.1.0</code> in your lock file, so that when the broken <code>foobar@1.2.0</code> is released, nobody on the team installs it.</p>"},{"location":"dependency-pinning/#what-a-lock-file-doesnt-do-for-you","title":"What a lock file doesn't do for you","text":"<p>If a lock file gets out of sync with its <code>package.json</code>, it can no longer be guaranteed to lock anything, and the <code>package.json</code> will be the source of truth for installs.</p> <p>The lock file has only delayed the inevitable problem, and provides much less visibility than <code>package.json</code>, because it's not designed to be human readable and is quite dense.</p> <p></p> <p>If the <code>package.json</code> has a range, and a new in-range version is released that would break the build, then essentially your <code>package.json</code> is in a state of \"broken\", even if the lock file is still holding things together.</p> <p>The upside is that the lockfile will hold back <code>foobar</code> to <code>1.1.0</code> unless it's forced to upgrade, so the break is postponed. The downside is how you will discover the break eventually.</p> <p>The easiest case is if for some reason you need to upgrade <code>foobar</code>, e.g. for a new feature it has, so you might run something like <code>yarn upgrade foobar</code>. Then you might either discover the break during your development or when you push your new development to CI for testing. In this case, hopefully you'll guess it's <code>foobar</code> that broke it and not your own code.</p> <p>Alternatively, maybe someone thinks \"This lockfile is probably really out of date and might be missing some essential patches\" and decides to <code>yarn upgrade</code> the whole thing in one go. No doubt the diff will be full of green and red as many direct and indirect dependencies will have changed versions. Then it's pushed to CI for testing, fails, and you have to guess which of the changes caused it until you eventually narrow it down to <code>foobar</code>. This might require even manually looking through the lock file diffs line by line. Maybe dep <code>blahblah</code> also broke at the same time, to make it even harder.</p> <p>By ceding control of direct dependency versions to the lock file, you have lost the ability to know when things are updated. You also may be missing out on really important patches you're not even aware of, because they're \"in range\" yet locked back to vulnerable or buggy versions in the lock file.</p> <p>Reconsider the same scenario if <code>foobar</code> had instead been pinned to <code>1.1.0</code> in <code>package.json</code>. The (broken) upgrade to <code>1.2.0</code> would have been explicitly proposed to you via a Renovate PR, you would see the break, and know that the version is bad. Meanwhile you could be upgrading all the other essential fixes of other dependencies without worrying about <code>foobar</code>. You could even be running <code>yarn upgrade</code> regularly to be getting indirect package updates in the lockfile and seeing if everything still passes.</p> <p>So the lock file does not solve the same SemVer problems that pinning solves - but it compliments it. For this reason our usual recommendation is using a lock file regardless of whether you pin dependencies or not, and pinning even if you have a lock file.</p> <p>But you may also go ahead and configure however you want. Also, we're open to ideas for how to make lock file updates more \"visible\" too. e.g. are you interested in a Renovate feature where you get a lockfile-only PR any time a direct dependency gets an in-range update?</p>"},{"location":"dependency-pinning/#what-about-indirectsub-dependencies","title":"What about indirect/sub-dependencies?","text":"<p>A good argument made by @LinusU is:</p> <p>Pinning will only protect you against breakage in a, in many cases, small percentage of your packages. If you for example have installed Express and pinned it, you will only protect yourself against a bad Express release, it will not help with the 30 dependencies that Express has.</p> <p>Because of this, I personally think that pinning dependencies just creates a false sense of security, and that using a lock file is superior in every way.</p> <p>It is true that pinning applies only to direct dependencies, and \"indirect\" dependencies typically count for a lot more in total in your lockfile than direct. e.g. those 30 ones that Express relies on.</p> <p>Does pinning give you \"increased\" security? Undeniably. The question is not whether it does, but whether that increased security comes at a cost (e.g. \"noise\"). But Linus also points out that a false sense of security is a cost too.</p> <p>Don't forget that there is some form of transitive trust too. You need to pick your direct dependencies carefully, and which versions of them you use. Hopefully in doing that you pick dependencies partly for how well they look after their own dependencies and versions (e.g. do they have good enough test coverage, do they use something like Renovate to keep updated, etc?). So the reality is that even if 90% of the entries in your lock file are indirect dependencies, those are ones you have somewhat \"delegated\" responsibility for to your dependencies. e.g. I'd hope that Express are even better at watching their dependencies for breaks than I am, to use the example above.</p> <p>But certainly \"does it give a false sense of security\" is not a question we can really answer quantifiably.</p>"},{"location":"dependency-pinning/#so-whats-best","title":"So what's best?","text":"<p>We recommend:</p> <ol> <li>Any apps (web or Node.js) that aren't <code>require()</code>'d by other packages should pin all types of dependencies for greatest reliability/predictability</li> <li>Browser or dual browser/node.js libraries that are consumed/<code>required()</code>'d by others should keep using SemVer ranges for <code>dependencies</code> but can use pinned dependencies for <code>devDependencies</code></li> <li>Node.js-only libraries can consider pinning all dependencies, because application size/duplicate dependencies are not as much a concern in Node.js compared to the browser. Of course, don't do that if your library is a micro one likely to be consumed in disk-sensitive environments</li> <li>Use a lock file</li> </ol> <p>As noted earlier, when you pin dependencies then you will see an increase in the raw volume of dependency updates, compared to if you use ranges. If/when this starts bothering you, add Renovate rules to reduce the volume, such as scheduling updates, grouping them, or automerging \"safe\" ones.</p>"},{"location":"dependency-pinning/#references","title":"References","text":"<p>This is a \"living\" document and we plan to update it whenever we think of something new or someone makes a valid point we've missed or misunderstood.</p> <p>Updated 2018-01-19 after excellent feedback on lockfiles by @LinusU</p>"},{"location":"docker/","title":"Docker","text":"<p>Renovate supports upgrading dependencies in various types of Docker definition files:</p> <ul> <li>Docker's <code>Dockerfile</code> files</li> <li>Docker Compose <code>docker-compose.yml</code>, <code>compose.yml</code> files</li> <li>Visual Studio Code dev containers and GitHub Codespaces images and features</li> <li>CircleCI config files</li> <li>Kubernetes manifest files</li> <li>Ansible configuration files</li> </ul>"},{"location":"docker/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any files matching each manager's configured <code>managerFilePatterns</code></li> <li>Matching files are parsed, Renovate checks if the file(s) has any Docker image references (e.g. <code>FROM</code> lines in a <code>Dockerfile</code>)</li> <li>If the image tag in use \"looks\" like a version (e.g. <code>myimage:1</code>, <code>myimage:1.1</code>, <code>myimage:1.1.0</code>, <code>myimage:1-onbuild</code>) then Renovate checks the Docker registry for upgrades (e.g. from <code>myimage:1.1.0</code> to <code>myimage:1.2.0</code>)</li> </ol>"},{"location":"docker/#preservation-of-version-precision","title":"Preservation of Version Precision","text":"<p>By default, Renovate preserves the precision level specified in the Docker images. For example, if the existing image is pinned at <code>myimage:1.1</code> then Renovate only proposes upgrades to <code>myimage:1.2</code> or <code>myimage:1.3</code>. This means that you will not get upgrades to a more specific versions like <code>myimage:1.2.0</code> or <code>myimage:1.3.0</code>. Renovate does not yet support \"pinning\" an imprecise version to a precise version, e.g. from <code>myimage:1.2</code> to <code>myimage:1.2.0</code>, but it's a feature we'd like to work on one day.</p>"},{"location":"docker/#version-compatibility","title":"Version compatibility","text":"<p>Although suffixes in SemVer indicate pre-releases (e.g. <code>v1.2.0-alpha.2</code>), in Docker they typically indicate compatibility, e.g. <code>1.2.0-alpine</code>. By default Renovate assumes suffixes indicate compatibility, for this reason Renovate will not change any suffixes. Renovate will update <code>1.2.0-alpine</code> to <code>1.2.1-alpine</code> but never updates to <code>1.2.1</code> or <code>1.2.1-stretch</code> as that would change the suffix.</p> <p>If this behavior does not suit a particular package you have, Renovate allows you to customize the <code>versioning</code> scheme it uses. For example, you have a Docker image <code>foo/bar</code> that sticks to SemVer versioning. This means that you need to tell Renovate that suffixes indicate pre-release versions, and not compatibility.</p> <p>You could then use this <code>packageRules</code> array, to tell Renovate to use <code>semver</code> versioning for the <code>foo/bar</code> package:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"foo/bar\"],\n      \"versioning\": \"semver\"\n    }\n  ]\n}\n</code></pre> <p>Another example is the official <code>python</code> image, which follows <code>pep440</code> versioning.</p> Telling Renovate to use the pep440 versioning scheme<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"python\"],\n      \"versioning\": \"pep440\"\n    }\n  ]\n}\n</code></pre> <p>If traditional versioning doesn't work, try Renovate's built-in <code>loose</code> <code>versioning</code>. Renovate will perform a best-effort sort of the versions, regardless of whether they have letters or digits.</p> <p>If both the traditional versioning, and the <code>loose</code> versioning do not give the results you want, try the <code>regex</code> <code>versioning</code>. This approach uses regex capture group syntax to specify which part of the version string is major, minor, patch, pre-release, or compatibility. See the docs for <code>versioning</code> for documentation and examples of <code>regex</code> versioning in action.</p>"},{"location":"docker/#digest-pinning","title":"Digest Pinning","text":"<p>We recommend that you pin your Docker images to an exact digest. By pinning to a digest you make your Docker builds immutable, every time you do a <code>pull</code> you get the same content.</p> <p>If you work with dependencies in the JavaScript/npm ecosystem, you may be used to exact versions being immutable. For example, if you set a version like <code>2.0.1</code>, you and your colleagues always get the exact same \"code\".</p> <p>Docker's tags are not immutable versions, even if tags look like a version. You probably expect <code>myimage:1</code> and <code>myimage:1.2</code> to change over time, but you might incorrectly assume that <code>myimage:1.2.0</code> never changes. Although it probably shouldn't, the reality is that any Docker image tag can change content, and potentially break.</p> <p>By replacing Docker tags with Docker digests as the image's primary identifier you'll get immutable builds. Working with strings like <code>FROM node@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code> is hard. Luckily Renovate can update the digests for you.</p> <p>When pinning a digest, Renovate retains the Docker tag in the <code>FROM</code> line for readability, like this: <code>FROM node:14.15.1@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code>.</p>"},{"location":"docker/#digest-updating","title":"Digest Updating","text":"<p>If you follow our advice to replace a tag like <code>node:14</code> with a pinned digest like <code>node:14@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code>, you will get Renovate PRs whenever the <code>node:14</code> image is updated on Docker Hub.</p> <p>Previously this update would have been \"invisible\" to you - one day you pull code that represents <code>node:14.15.0</code> and the next day you pull code that represents <code>node:14.15.1</code>. But you can never be sure, especially as Docker caches. Maybe some of your colleagues, or worse still your build machine, are stuck on an older version with a security vulnerability.</p> <p>By pinning to a digest instead, you will get these updates via Pull Requests, or even committed directly to your repository if you enable branch automerge for convenience. This makes sure everyone on your team uses the latest versions.</p>"},{"location":"docker/#version-upgrading","title":"Version Upgrading","text":"<p>Renovate also supports upgrading versions in Docker tags, so from <code>myimage:1.2.0</code> to <code>myimage:1.2.1</code>, or from <code>myimage:1.2</code> to <code>myimage:1.3</code>. If a tag looks like a version, Renovate will upgrade it like a version.</p> <p>We recommend you use the <code>major.minor.patch</code> tagging scheme, so change <code>myimage:1</code> to <code>myimage:1.1.1</code> first. This way you can see the changes in Renovate PRs. You can see the difference between a PR that upgrades <code>myimage</code> from <code>1.1.1</code> to <code>1.1.2</code> and a PR that changes the contents of the version you already use (<code>1.1.1</code>).</p> <p>By default, Renovate will upgrade <code>minor</code> and <code>patch</code> versions, so from <code>1.2.0</code> to <code>1.2.1</code>, but not upgrade <code>major</code> versions. If you wish to enable <code>major</code> versions: add the preset <code>docker:enableMajor</code> to the <code>extends</code> array in your <code>renovate.json</code> file.</p> <p>Renovate has some Docker-specific intelligence when it comes to versions. For example:</p>"},{"location":"docker/#ubuntu-codenames","title":"Ubuntu codenames","text":"<p>Renovate understands Ubuntu release code names and will offer upgrades to the latest LTS release.</p> <p>You must only use the first term of the code name in lowercase. So use <code>noble</code> for the Noble Numbat release.</p> <p>For example, Renovate will offer to upgrade the following <code>Dockerfile</code> layer:</p> <pre><code>- FROM ubuntu:jammy\n+ FROM ubuntu:noble\n</code></pre>"},{"location":"docker/#debian-codenames","title":"Debian codenames","text":"<p>Renovate understands Debian release code names and rolling updates schedule and will offer upgrades to the latest stable release. For example from <code>debian:bullseye</code> to <code>debian:bookworm</code>.</p> <p>The Debian codename must be in lowercase.</p> <p>For example, Renovate will offer to upgrade the following <code>Dockerfile</code> layer:</p> <pre><code>- FROM debian:bullseye\n+ FROM debian:bookworm\n</code></pre>"},{"location":"docker/#configuringdisabling","title":"Configuring/Disabling","text":"<p>If you wish to make changes that apply to all Docker managers, then add them to the <code>docker</code> config object. This is not foolproof, because some managers like <code>circleci</code> and <code>ansible</code> support multiple datasources that do not inherit from the <code>docker</code> config object.</p> <p>If you wish to override Docker settings for one particular type of manager, use that manager's config object instead. For example, to disable digest updates for Docker Compose only but leave them for other managers like <code>Dockerfile</code>, you would use this:</p> <pre><code>{\n  \"docker-compose\": {\n    \"digest\": {\n      \"enabled\": false\n    }\n  }\n}\n</code></pre> <p>The following configuration options are applicable to Docker:</p>"},{"location":"docker/#disable-all-docker-renovation","title":"Disable all Docker Renovation","text":"<p>Add <code>\"docker:disable\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#disable-renovate-for-only-certain-dockerfiles","title":"Disable Renovate for only certain Dockerfiles","text":"<p>Add all paths to ignore into the <code>ignorePaths</code> configuration field. e.g.</p> <pre><code>{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePaths\": [\"docker/old-files/\"]\n}\n</code></pre>"},{"location":"docker/#enable-docker-major-updates","title":"Enable Docker major updates","text":"<p>Add <code>\"docker:enableMajor\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#disable-digest-pinning","title":"Disable digest pinning","text":"<p>Add <code>\"default:pinDigestsDisabled\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#automerge-digest-updates","title":"Automerge digest updates","text":"<p>Add <code>\"default:automergeDigest\"</code> to your <code>extends</code> array. If you want Renovate to commit directly to your base branch without opening a PR first, add <code>\"default:automergeBranchPush\"</code> to the <code>extends</code> array.</p>"},{"location":"docker/#registry-authentication","title":"Registry authentication","text":"<p>There are many different registries, and many ways to authenticate to those registries. We will explain how to authenticate for the most common registries.</p>"},{"location":"docker/#docker-hub","title":"Docker Hub","text":"<p>Here is an example of configuring a Docker username/password for Docker Hub in <code>config.js</code>. The Docker Hub password is stored in a process environment variable.</p> config.js<pre><code>module.exports = {\n  hostRules: [\n    {\n      hostType: 'docker',\n      matchHost: 'docker.io',\n      username: '&lt;your-username&gt;',\n      password: process.env.DOCKER_HUB_PASSWORD,\n    },\n  ],\n};\n</code></pre> <p>You can add more host rules, read the <code>hostRules</code> documentation for more information.</p>"},{"location":"docker/#self-hosted-docker-registry","title":"Self-hosted Docker registry","text":"<p>Say you host some Docker images yourself, and use a password to access your self-hosted Docker images. In addition to self-hosting, you also pull images from Docker Hub, without a password. In this example you would configure a specific Docker host like this:</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      hostType: 'docker',\n      matchHost: 'your.host.io',\n      username: '&lt;your-username&gt;',\n      password: process.env.SELF_HOSTED_DOCKER_IMAGES_PASSWORD,\n    },\n  ],\n};\n</code></pre>"},{"location":"docker/#aws-ecr-amazon-web-services-elastic-container-registry","title":"AWS ECR (Amazon Web Services Elastic Container Registry)","text":""},{"location":"docker/#using-access-key-id-secret","title":"Using access key id &amp; secret","text":"<p>Renovate can authenticate with AWS ECR using AWS access key id &amp; secret as the username &amp; password, for example:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"matchHost\": \"12345612312.dkr.ecr.us-east-1.amazonaws.com\",\n      \"username\": \"AKIAABCDEFGHIJKLMNOPQ\",\n      \"encrypted\": {\n        \"password\": \"w...A\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"docker/#using-get-login-password","title":"Using <code>get-login-password</code>","text":"<p>Renovate can also authenticate with AWS ECR using the output from the <code>aws ecr get-login-password</code> command as outlined in the AWS documentation. To make use of this authentication mechanism, specify the username as <code>AWS</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"matchHost\": \"12345612312.dkr.ecr.us-east-1.amazonaws.com\",\n      \"username\": \"AWS\",\n      \"encrypted\": {\n        \"password\": \"w...A\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"docker/#google-container-registry-google-artifact-registry","title":"Google Container Registry / Google Artifact Registry","text":""},{"location":"docker/#using-workload-identity","title":"Using Workload Identity","text":"<p>To let Renovate authenticate with Workload Identity, you must:</p> <ul> <li>Configure Workload Identity</li> <li>Give the Service Account the <code>artifactregistry.repositories.downloadArtifacts</code> permission</li> </ul>"},{"location":"docker/#with-application-default-credentials-self-hosted-only","title":"With Application Default Credentials (self-hosted only)","text":"<p>To let Renovate authenticate with ADC, you must:</p> <ul> <li>Configure ADC as normal</li> <li>Not provide a username, password or token</li> </ul> <p>Renovate will get the credentials with the <code>google-auth-library</code>.</p>"},{"location":"docker/#with-short-lived-access-token-github-actions-self-hosted-only","title":"With short-lived access token / GitHub Actions (self-hosted only)","text":"Example for Workload Identity plus Renovate host rules<pre><code>- name: authenticate to google cloud\n  id: auth\n  uses: google-github-actions/auth@v3.0.0\n  with:\n    token_format: 'access_token'\n    workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}\n    service_account: ${{ env.SERVICE_ACCOUNT }}\n\n- name: renovate\n  uses: renovatebot/github-action@v43.0.19\n  env:\n    RENOVATE_HOST_RULES: |\n      [\n        {\n          matchHost: \"us-central1-docker.pkg.dev\",\n          hostType: \"docker\",\n          username: \"oauth2accesstoken\",\n          password: \"${{ steps.auth.outputs.access_token }}\"\n        }\n      ]\n  with:\n    token: ${{ secrets.RENOVATE_TOKEN }}\n    configurationFile: .github/renovate.json5\n</code></pre> <p>You can find a full GitHub Workflow example on the renovatebot/github-action repository.</p>"},{"location":"docker/#using-long-lived-service-account-credentials","title":"Using long-lived service account credentials","text":"<p>To access the Google Container Registry (deprecated) or the Google Artifact Registry, use the JSON service account with <code>Basic</code> authentication, and use the:</p> <ul> <li><code>_json_key</code> as username</li> <li>full Google Cloud Platform service account JSON as password</li> </ul> <p>To avoid JSON-in-JSON wrapping, which can cause problems, encode the JSON service account beforehand.</p> <p>Google Container Registry does not natively support <code>_json_key_base64</code> and a base64 encoded service account. Google Artifact Registry supports <code>_json_key_base64</code> and a base64 encoded service account natively. If all your dependencies are on the Google Artifact Registry, you can base64 encode and use the service account directly:</p> <ol> <li>Download your JSON service account and store it on your machine. Make sure that the service account has <code>read</code> (and only <code>read</code>) permissions to your artifacts</li> <li>Base64 encode the service account credentials by running <code>cat service-account.json | base64</code></li> <li>Add the encoded service account to your configuration file</li> <li> <p>If you want to add it to your self-hosted configuration file:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"password\": \"&lt;base64 service account&gt;\"\n    }\n  ]\n}\n</code></pre> </li> <li> <p>If you want to add it to your repository Renovate configuration file, encrypt it and then add it:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"encrypted\": {\n        \"password\": \"&lt;encrypted base64 service account&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> </li> </ol> <p>If you have dependencies on Google Container Registry (and Artifact Registry) you need to use <code>_json_key</code> and a slightly different encoding:</p> <ol> <li>Download your JSON service account and store it on your machine. Make sure that the service account has <code>read</code> (and only <code>read</code>) permissions to your artifacts</li> <li>Open the file and prefix the content with <code>_json_key:</code>. The file should look like this:</li> </ol> <pre><code>_json_key:{\n  \"type\": \"service_account\",\n  \"project_id\": \"sample-project\",\n  \"private_key_id\": \"5786ff7e615522b932a2a37b4a6f9645c4316dbd\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDaOkxZut9uDUHV\\n...\\n/PWs0Wa2z5+IawMD7nO63+b6\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"renovate-lookup@sample-project.iam.gserviceaccount.com\",\n  \"client_id\": \"115429165445403928973\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/renovate-lookup%40sample-project.iam.gserviceaccount.com\"\n}\n</code></pre> <ol> <li>Base64 encode the prefixed service account credentials by running <code>cat prefixed-service-account.json | base64</code></li> <li>Add the prefixed and encoded service account to your configuration file</li> <li> <p>If you want to add it to your self-hosted configuration file:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"authType\": \"Basic\",\n      \"token\": \"&lt;base64 prefixed service account&gt;\"\n    }\n  ]\n}\n</code></pre> </li> <li> <p>If you want to add it to your repository Renovate configuration file, encrypt it and then add it:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"authType\": \"Basic\",\n      \"encrypted\": {\n        \"token\": \"&lt;encrypted base64 prefixed service account&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> </li> </ol>"},{"location":"docker/#using-short-lived-access-token-gitlab-ci-google-cloud","title":"Using short-lived access token / Gitlab CI / Google Cloud","text":"<p>For this example, assume that you want to:</p> <ul> <li>Run the GitLab CI in the Google Cloud</li> <li>Store your Docker images in the Google Container Registry (GCR)</li> </ul>"},{"location":"docker/#accessing-the-google-container-registry","title":"Accessing the Google Container Registry","text":"<p>Accessing the GCR uses Bearer token based authentication.</p> <p>First, install the Google Cloud SDK. Then get the token by running: <code>gcloud auth print-access-token</code>.</p>"},{"location":"docker/#short-lived-gcr-bearer-tokens","title":"Short-lived GCR Bearer tokens","text":"<p>The GCR Bearer token expires after 60 minutes. This means you can not re-use the token in a later build.</p> <p>Instead, before Renovate starts in the GCR context, you must:</p> <ol> <li>Fetch the Google access token</li> <li>Inject the token into the <code>hostRules</code> configuration</li> </ol> <p>The following text explains one way to fetch the token, and inject it into Renovate.</p>"},{"location":"docker/#basic-approach","title":"Basic approach","text":"<p>The basic approach is:</p> <ol> <li>Create a custom image: fetch the GCR token, and inject the token into Renovate's <code>config.js</code> file</li> <li>Then run Renovate as one of the stages of your project</li> </ol>"},{"location":"docker/#independent-runs","title":"Independent runs","text":"<p>To make the run independent of any user, use a <code>Project Access Token</code>. Give the Project Access Token these scopes:</p> <ul> <li><code>api</code></li> <li><code>read_api</code></li> <li><code>write_repository</code></li> </ul> <p>Then use the Project Access Token as the <code>RENOVATE_TOKEN</code> variable for GitLab CI. For more (<code>gitlab-ci.yml</code>) configuration examples, see the <code>renovate-runner</code> repository on GitLab.</p>"},{"location":"docker/#create-a-custom-image","title":"Create a custom image","text":"<p>To access the token, you need a custom Renovate Docker image. Make sure to install the Google Cloud SDK into the custom image, as you need the <code>gcloud auth print-access-token</code> command later.</p> <p>For example:</p> <pre><code>FROM renovate/renovate:41.159.4\n# Include the \"Docker tip\" which you can find here https://cloud.google.com/sdk/docs/install\n# under \"Installation\" for \"Debian/Ubuntu\"\nRUN ...\n</code></pre>"},{"location":"docker/#accessing-the-google-container-registry-gcr","title":"Accessing the Google Container Registry (GCR)","text":"<p>Renovate needs the current Google Access Token to access the Google Container Registry (GCR). Here's an example of how to set that up:</p> <pre><code>hostRules: [\n  {\n    matchHost: 'eu.gcr.io',\n    token: 'MyReallySecretTokenThatExpiresAfter60Minutes',\n  },\n];\n</code></pre> <p>One way to give Renovate the short-lived Google Access Token is to:</p> <ol> <li>Write a script that generates a <code>config.js</code> file, with the token, in your <code>gitlab-ci.yml</code> file</li> <li>Run the <code>config.js</code> creation script just before you start Renovate</li> </ol> <p>For example:</p> <pre><code>script:\n  - 'echo \"module.exports = { hostRules: [ { matchHost: ''eu.gcr.io'', token: ''\"$(gcloud auth print-access-token)\"'' } ] };\" &gt; config.js'\n  - renovate $RENOVATE_EXTRA_FLAGS\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#what-is-the-default-behavior","title":"What is the default behavior?","text":"<p>Renovate will:</p> <ul> <li>Look for configuration options in a configuration file (e.g. <code>renovate.json</code>) and in each <code>package.json</code> file</li> <li>Find and process all package files (e.g. <code>package.json</code>, <code>composer.json</code>, <code>Dockerfile</code>, etc) in each repository</li> <li>Use separate branches/PR for each dependency</li> <li>Use separate branches for each major version of each dependency</li> <li>Pin devDependencies to a single version, rather than use ranges</li> <li>Pin dependencies to a single version if it appears not to be a library</li> <li>Update <code>yarn.lock</code> or <code>package-lock.json</code> files, if found</li> <li>Create Pull Requests immediately after branch creation</li> </ul>"},{"location":"faq/#which-renovate-versions-are-officially-supported","title":"Which Renovate versions are officially supported?","text":"<p>Only the latest version of Renovate is supported by the Renovate maintainers. The Renovate team only fixes bugs in an older version if:</p> <ul> <li>the Mend Renovate App needs to stay on that older major version for a short time, or</li> <li>some critical bug needs to be fixed and the new major is blocked</li> </ul> <p>If you're using the Mend Renovate App, you don't need to do anything, as the Renovate maintainers update it regularly. If you're self hosting Renovate, use the latest release if possible.</p>"},{"location":"faq/#renovate-core-features-not-supported-on-all-platforms","title":"Renovate core features not supported on all platforms","text":"Feature Platforms which lack feature See Renovate issue(s) Dependency Dashboard Azure, Bitbucket, Bitbucket Server, Gerrit #9592 The Mend Renovate App Azure, Bitbucket Server, Forgejo, Gitea, GitLab"},{"location":"faq/#major-platform-features-not-supported-by-renovate","title":"Major platform features not supported by Renovate","text":"<p>Some major platform features are not supported at all by Renovate.</p> Feature name Platform See Renovate issue(s) Jira issues Bitbucket #20568 Jira issues Bitbucket Server #3796 Merge trains GitLab #5573 Configurable merge strategy and message Only Bitbucket, Forgejo and Gitea for now #10867 #10869 #10870"},{"location":"faq/#what-is-this-main-branch-i-see-in-the-documentation","title":"What is this <code>main</code> branch I see in the documentation?","text":"<p>When you create a new repository with Git, Git creates a base branch for you. The default branch name that Git uses is <code>master</code> (this will be changed to <code>main</code> later).</p> <p>The Git-hosting ecosystem decided to use <code>main</code> instead of <code>master</code>. When you create a new repository on say GitHub or GitLab, you'll get a <code>main</code> branch as your base branch.</p> <p>We replaced <code>master</code> with <code>main</code> in our documentation where possible.</p> <p>A branch name has no special meaning within the Git program, it's only a name. The base branch could be called <code>trunk</code> or <code>mainline</code> or <code>prod</code>, and Git would work just as well.</p>"},{"location":"faq/#what-if-i-need-to","title":"What if I need to .. ?","text":""},{"location":"faq/#troubleshoot-renovate","title":"Troubleshoot Renovate","text":"<p>If you have problems with Renovate, or want to know where Renovate keeps the logging output then read our troubleshooting documentation.</p>"},{"location":"faq/#tell-renovate-to-ask-for-approval-before-creating-a-pull-request","title":"Tell Renovate to ask for approval before creating a Pull Request","text":"<p>By default, Renovate creates a pull request right away whenever there's an update. But maybe you want Renovate to ask for your approval before it creates a pull request. Use the \"Dependency Dashboard approval\" workflow to get updates for certain packages - or certain types of updates - only after you give approval via the Dependency Dashboard.</p> <p>The basic idea is that you create a new <code>packageRules</code> entry and describe what kind of package, or type of updates you want to approve beforehand.</p> Manually approve all major npm package manager updates<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"major\"],\n      \"matchManagers\": [\"npm\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n</code></pre> Manually approve all major Jest updates<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"jest\"],\n      \"matchUpdateTypes\": [\"major\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n</code></pre> <p>You may even configure Renovate bot to ask for approval for all updates. The <code>dependencyDashboardApproval</code> config option is outside of a <code>packageRules</code> array, and so applies to all updates:</p> <pre><code>{\n  \"dependencyDashboardApproval\": true\n}\n</code></pre> <p>Read our documentation on the dependencyDashboardApproval config option.</p>"},{"location":"faq/#use-an-alternative-branch-as-my-pull-request-target","title":"Use an alternative branch as my Pull Request target","text":"<p>Say your repository's default branch is <code>main</code> but you want Renovate to use the <code>next</code> branch as its PR target. You can configure the PR target branch via the <code>baseBranchPatterns</code> option.</p> <p>Add this line to the <code>renovate.json</code> file that's in the default branch (<code>main</code> in this example).</p> <pre><code>{\n  \"baseBranchPatterns\": [\"next\"]\n}\n</code></pre> <p>You can set more than one PR target branch in the <code>baseBranchPatterns</code> array.</p>"},{"location":"faq/#support-private-npm-modules","title":"Support private npm modules","text":"<p>See the dedicated Private npm module support page.</p>"},{"location":"faq/#control-renovates-schedule","title":"Control Renovate's schedule","text":"<p>To learn about controlling Renovate schedule, read the key concepts, scheduling docs.</p>"},{"location":"faq/#disable-renovate-for-certain-dependency-types","title":"Disable Renovate for certain dependency types","text":"<p>Define a <code>packageRules</code> entry which has the dependency type(s) in <code>matchDepTypes</code> and <code>\"enabled\": false</code>.</p>"},{"location":"faq/#use-a-single-branchpr-for-all-dependency-upgrades","title":"Use a single branch/PR for all dependency upgrades","text":"<p>Add a configuration for configuration option <code>groupName</code> set to value <code>\"all\"</code>, at the top level of your <code>renovate.json</code> or <code>package.json</code>.</p>"},{"location":"faq/#use-separate-branches-per-dependency-but-not-one-per-major-release","title":"Use separate branches per dependency, but not one per major release","text":"<p>Set configuration option <code>separateMajorMinor</code> to <code>false</code>.</p>"},{"location":"faq/#keep-using-semver-ranges-instead-of-pinning-dependencies","title":"Keep using SemVer ranges, instead of pinning dependencies","text":"<p>Set configuration option <code>rangeStrategy</code> to <code>\"replace\"</code>.</p>"},{"location":"faq/#keep-lock-files-including-sub-dependencies-up-to-date-even-when-packagejson-hasnt-changed","title":"Keep lock files (including sub-dependencies) up-to-date, even when <code>package.json</code> hasn't changed","text":"<p>By default, if you enable lock-file maintenance, Renovate will update the lockfile <code>[\"before 4am on monday\"]</code>. If you want to update the lock file more often, set the <code>schedule</code> field inside the <code>lockFileMaintenance</code> object.</p>"},{"location":"faq/#wait-until-tests-have-passed-before-creating-the-pr","title":"Wait until tests have passed before creating the PR","text":"<p>Set the configuration option <code>prCreation</code> to <code>\"status-success\"</code>. Branches with failing tests will remain in Git and get updated if needed. Renovate will only create a PR once the tests pass.</p>"},{"location":"faq/#wait-until-tests-have-passed-before-creating-a-pr-but-create-the-pr-even-if-they-fail","title":"Wait until tests have passed before creating a PR, but create the PR even if they fail","text":"<p>Set the configuration option <code>prCreation</code> to <code>\"not-pending\"</code>.</p>"},{"location":"faq/#assign-prs-to-specific-users","title":"Assign PRs to specific user(s)","text":"<p>Set the configuration option <code>assignees</code> to an array of usernames.</p>"},{"location":"faq/#add-labels-to-prs","title":"Add labels to PRs","text":"<p>Set the configuration option <code>labels</code> to an array of labels to use.</p>"},{"location":"faq/#apply-a-rule-but-only-to-package-abc","title":"Apply a rule, but only to package <code>abc</code>?","text":"<ol> <li>Add a <code>packageRules</code> array to your configuration</li> <li>Create one object inside this array</li> <li>Set field <code>matchPackageNames</code> to value <code>[\"abc\"]</code></li> <li>Add the configuration option to the same object</li> </ol> <p>e.g.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"abc\"],\n      \"assignees\": [\"importantreviewer\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"faq/#apply-a-rule-but-only-for-packages-starting-with-abc","title":"Apply a rule, but only for packages starting with <code>abc</code>","text":"<p>Do the same as above, but instead of an exact match, use a glob prefix:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": \"abc**\",\n      \"assignees\": [\"importantreviewer\"]\n    }\n  ]\n}\n</code></pre> <p>For more examples, see String Pattern Matching, example glob patterns.</p>"},{"location":"faq/#group-all-packages-starting-with-abc-together-in-one-pr","title":"Group all packages starting with <code>abc</code> together in one PR","text":"<p>As above, but apply a <code>groupName</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": \"abc**\",\n      \"groupName\": \"abc packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"faq/#change-the-default-values-for-branch-name-commit-message-pr-title-or-pr-description","title":"Change the default values for branch name, commit message, PR title or PR description","text":"<p>You can use the <code>branchName</code>, <code>commitMessage</code>, <code>prTitle</code> or <code>prBody</code> configuration options to change the defaults for those settings.</p>"},{"location":"faq/#automatically-merge-passing-pull-requests","title":"Automatically merge passing Pull Requests","text":"<p>Set the configuration option <code>automerge</code> to <code>true</code>. Nest it inside a <code>patch</code> or <code>minor</code> object if you only want to automerge certain types of updates.</p>"},{"location":"faq/#separate-patch-releases-from-minor-releases","title":"Separate patch releases from minor releases","text":""},{"location":"faq/#renovates-default-behavior-for-majorminor-releases","title":"Renovate's default behavior for major/minor releases","text":"<p>By default, Renovate separates major and minor releases. Patch releases are treated as \"minor\". Here's an example:</p> <p>Say you're using version <code>0.8.0</code> of the <code>foo</code> package. The <code>foo</code> maintainers release the following versions:</p> <ul> <li><code>0.8.1</code> (patch)</li> <li><code>0.9.0</code> (minor)</li> <li><code>1.0.0</code> (major)</li> </ul> <p>Renovate creates the following PRs:</p> <ul> <li>Update dependency <code>foo</code> to <code>0.9.0</code> (minor)</li> <li>Update dependency <code>foo</code> to <code>1.0.0</code> (major)</li> </ul> <p>Renovate groups the patch and minor versions into one PR. This means you only get a PR for the minor version, <code>0.9.0</code>.</p> <p>You can override this default behavior. To learn more read the section below.</p>"},{"location":"faq/#overriding-the-default-behavior-for-majorminor-releases","title":"Overriding the default behavior for major/minor releases","text":"<p>You can see in the example above that Renovate won't normally create a PR for the <code>foo</code> patch release.</p> <p>You can tell Renovate to create a separate PR for the patch release by setting <code>separateMinorPatch</code> to <code>true</code>.</p> <p>In both cases, Renovate will open 3 PRs:</p> <ul> <li>Update dependency <code>foo</code> to <code>0.8.1</code> (patch)</li> <li>Update dependency <code>foo</code> to <code>0.9.0</code> (minor)</li> <li>Update dependency <code>foo</code> to <code>1.0.0</code> (major)</li> </ul> <p>Usually you don't want more PRs though. It can be nice to get patch PRs when you're using automerge:</p> <ul> <li>Get daily patch updates which are automerged once tests pass</li> <li>Get weekly updates for minor and major updates</li> </ul> <p>This means you barely notice Renovate during the week, while you still get the benefits of patch level updates.</p>"},{"location":"faq/#whats-the-difference-between-depname-and-packagename","title":"What's the difference between <code>depName</code> and <code>packageName</code>?","text":"<p>Renovate uses two important config options to define a dependency's name: <code>depName</code> and <code>packageName</code>.</p> <p>The <code>depName</code> is the short \"pretty name\" of the dependency. This is the user-facing name for the dependency. By default, Renovate uses the <code>depName</code>:</p> <ul> <li>in the title of Pull Requests/Merge Requests</li> <li>in commit messages</li> <li>on the Dependency Dashboard</li> </ul> <p>The <code>packageName</code> is the full exact name. Renovate uses the <code>packageName</code> to find the dependency in the package registry.</p> <p>Often <code>depName</code> and <code>packageName</code> are the same, but not always.</p> <p>Renovate uses the \"pretty\" <code>depName</code> in branch names and PR titles/content, because the <code>depName</code> is easier to read than the <code>packageName</code>.</p> <p>For instance, given the following Gradle plugin:</p> <pre><code>plugins {\n    id(\"com.gradle.develocity\").version(\"3.18.1\")\n}\n</code></pre> <p>Renovate will give the dependency these properties:</p> <ul> <li><code>depName</code>: <code>com.gradle.develocity</code></li> <li><code>packageName</code>: <code>com.gradle.develocity:com.gradle.develocity.gradle.plugin</code></li> </ul> <p>Again, often the <code>depName</code> and <code>packageName</code> are equal. The names Renovate uses for the <code>depName</code> and <code>packageName</code> depend on the package manager (and package ecosystem naming conventions). For instance, <code>depName</code> and <code>packageName</code> may be different when you proxy Docker images.</p>"},{"location":"gitlab-bot-security/","title":"GitLab bot security","text":"<p>Make sure you understand GitLab's security model, before you run a \"bot\" service like Renovate on GitLab, particularly the pipeline credentials.</p> <p>Warning</p> <p>If you have any doubts or concerns about this content that could affect other users, please follow our Security Policy and report them confidentially.</p>"},{"location":"gitlab-bot-security/#ci_job_token-permissions","title":"<code>CI_JOB_TOKEN</code> permissions","text":"<p>The concept of <code>CI_JOB_TOKEN</code> permissions was overhauled in GitLab release 8.12, jobs now run with the permissions of the user account which triggered the pipeline. For security reasons the token was limited to read-only permissions and a limited set of API endpoints, but it\u2019s been extended to allow write access to the GitLab Package Registry. Any pipeline triggered by a user account thus has permissions to:</p> <ul> <li>read any repository which that account has access to</li> <li>publish packages to them</li> </ul> <p>With the current GitLab CI permissions model, you should only commit to a project which you trust completely. Because that project could maliciously steal repository data, publish fake releases, or spam releases.</p>"},{"location":"gitlab-bot-security/#risks-of-hosting-a-renovate-gitlab-appbotservice","title":"Risks of hosting a Renovate GitLab app/bot/service","text":"<p>With GitLab's current security model, we find the risks of running a public bot service like Renovate are too high. Therefore we stopped hosting Renovate on GitLab, and are waiting for a better security model.</p> <p>You should remember that when accounts are invited into projects or groups on GitLab, acceptance happens automatically. This was a useful feature to leverage for a shared service.</p> <p>If you are running a self-hosted Renovate service, we recommend you:</p> <ul> <li>Run a shared service only within projects which have shared visibility/security within the users, or which have a low risk that a user would try to gain access to a private project they don't otherwise have access to</li> <li>If running with <code>autodiscover</code>, also configure a value for <code>autodiscoverFilter</code> so that the bot can't be invited to projects or groups you don't intend</li> </ul>"},{"location":"gitlab-bot-security/#security-solutions-and-workarounds","title":"Security solutions and workarounds","text":"<p>The following research notes may help you to assess the GitLab bot security risk.</p>"},{"location":"gitlab-bot-security/#public-projects-only","title":"Public projects only","text":"<p>If you only run a bot service on public projects, the risk of unauthorized users accessing private project data is zero. But malicious users can still spoof or spam packages to any other public project they are not a member of, this rules out this approach for a public hosted service.</p> <p>A public-visibility-only bot service should be low risk for most self-hosted GitLab instances. But you can't stop users from inviting the bot into private projects by accident, which is risky.</p>"},{"location":"gitlab-bot-security/#project-access-tokens","title":"Project Access Tokens","text":"<p>Project Access Tokens (PATs) are a recently added feature for GitLab. The main downsides to using PATs for a shared bot service are:</p> <ul> <li>You can not provision PATs through the API, so project maintainers would need to provision a project bot account and then save it to Renovate manually and per-project</li> <li>PATs are a paid-only feature for gitlab.com, which prevents users on the free plan from using them</li> <li>At the time of writing, there are still some issues with getting PATs to trigger and authenticate CI</li> <li>Any service using PATs would get MRs from a user like <code>@project_123_bot</code> instead of <code>@renovate-bot</code></li> </ul> <p>The big benefit of PATs is their limited scope: users with write access to one project cannot read/write to other projects.</p>"},{"location":"gitlab-bot-security/#group-access-tokens","title":"Group Access Tokens","text":"<p>Group Access Tokens are still in the planning stage, but may offer a more scalable way to manage a Renovate service. Tokens could be provisioned into Renovate per-group. Permissions and visibility must be kept uniform throughout the group to prevent a privilege escalation.</p> <p>Many GitLab users do not have uniform permissions and visibility throughout groups today, so this is a risk of Group Access Tokens in general. The <code>gitlab-org</code> organization on GitLab shows how common it is to mix project visibility within a same group.</p> <p>And the same as with PATs, if Group Access Tokens becomes a paid feature then users on a free plan can't use the feature.</p>"},{"location":"gitlab-bot-security/#skipping-ci","title":"Skipping CI","text":"<p>The security problem described above is that if a user triggers a malicious pipeline then they can be exploited, so skipping CI altogether would seem to be a way to avoid that. If Renovate can reliably force CI skipping for both (a) branch push, and (b) MR creation/updating then there should be no security exploit risk, but of course then there are no tests run instead. A possibility in future could be to combine this with a force push from a user or project token to trigger tests.</p> <p>The above solution/workaround will be actively researched in collaboration with GitLab.</p>"},{"location":"gitlab-bot-security/#oauth","title":"OAuth","text":"<p>An alternative to a bot service running with a bot PAT would be to have it run using user OAuth tokens. In this scenario, an OAuth app would be needed to allow users to \"install\" the bot into projects with members they trust not to exploit them, and then commits and Merge Requests would appear to be authored by the user, not any bot. Bot services are better if they are provisioned with a \"bot identity\" so that users can quickly distinguish bot activity from real user activity.</p>"},{"location":"gitlab-bot-security/#recommended-migration","title":"Recommended migration","text":"<p>Until we can safely reactivate the hosted app, we recommend users migrate to use self-hosted pipelines to run Renovate. Read the renovate-bot/renovate-runner README on GitLab to learn how.</p>"},{"location":"gitlab-bot-security/#status-of-the-renovate-app-for-gitlab","title":"Status of the Renovate app for GitLab","text":"<p>We're trying to find a workable design for the GitLab app, so we can enable it safely again. If you have any ideas, please open a discussion and let us know!</p> <p>GitLab introduced Group Access Tokens &amp; API for paid &amp; self-hosted instances, but a good permission setup/flow is still not possible. Check out GitLab issue #346298.</p>"},{"location":"gitlab-bot-security/#acknowledgments","title":"Acknowledgments","text":"<p>Thank you to Nejc Habjan for bringing this security challenge to our attention, and also to his colleagues at Siemens for their help researching the risks. Thanks also to the GitLab security team for being responsive to our questions.</p>"},{"location":"golang/","title":"Automated Dependency Updates for Go Modules","text":"<p>Renovate supports upgrading dependencies in <code>go.mod</code> files and associated <code>go.sum</code> checksums.</p> <p>If you're self-hosting Renovate, you may use these environment variables:</p> <ul> <li><code>GOPROXY</code></li> <li><code>GONOPROXY</code></li> <li><code>GOPRIVATE</code></li> <li><code>GOINSECURE</code></li> </ul> <p>To learn what these variables do, read the Go Modules Reference about the<code>GOPROXY</code> protocol.</p>"},{"location":"golang/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>go.mod</code> files</li> <li>Renovate extracts existing dependencies from <code>require</code> statements</li> <li>Renovate resolves the dependency's source repository and checks for SemVer tags if found. Otherwise commits and <code>v0.0.0-....</code> syntax will be used</li> <li>If Renovate finds an update, Renovate will update <code>go.mod</code> to the new value</li> <li>Renovate runs <code>go get</code> to update the <code>go.sum</code> files (you can configure which directories are included using the <code>goGetDirs</code> option)</li> <li>If the user has enabled the option <code>gomodUpdateImportPaths</code> in the <code>postUpdateOptions</code> array, then Renovate uses mod to update import paths on major updates, which can update any Go source file</li> <li>If the user has any of the available <code>gomodTidy</code> options (e.g. <code>gomodTidy1.17</code>) in the <code>postUpdateOptions</code>, then Renovate runs <code>go mod tidy</code> with the respective options (multiple options are allowed).</li> <li><code>go mod vendor</code> is run if vendored modules are detected</li> <li>A PR will be created with <code>go.mod</code>,<code>go.sum</code>, and any updated vendored files updated in the one commit</li> <li>If the source repository has either a \"changelog\" file or uses GitHub releases, then Release Notes for each version will be embedded in the generated PR</li> </ol>"},{"location":"golang/#enabling-go-modules-updating","title":"Enabling Go Modules Updating","text":"<p>Renovate updates Go Modules by default. To install Renovate Bot itself, either enable the Renovate App on GitHub, or check out Renovate OSS for self-hosted.</p>"},{"location":"golang/#technical-details","title":"Technical Details","text":""},{"location":"golang/#replace-massaging","title":"Replace massaging","text":"<p>Renovate can massage <code>replace</code> statements it finds prior to running <code>go</code> commands, and then massage them back afterwards. This capability was added - and originally default behavior - because relative <code>replace</code> statements outside of the current repo will not work when Renovate clones the repo locally.</p> <p>On the other hand, this massaging of <code>replace</code> statements may lead to unexpected results, especially because <code>go mod tidy</code> may not fully tidy the <code>go.sum</code> if it is missing the <code>replace</code> directives in <code>go.mod</code>. It has therefore been disabled by default.</p> <p>To enable this replace massaging behavior, add <code>gomodMassage</code> to your <code>postUpdateOptions</code> array.</p>"},{"location":"golang/#module-tidying","title":"Module Tidying","text":"<p>Go Modules tidying is not enabled by default, and is opt-in via the <code>postUpdateOptions</code> config option. The reason for this is that a <code>go mod tidy</code> command may make changes to <code>go.mod</code> and <code>go.sum</code> that are completely unrelated to the updated module(s) in the PR, and so may be confusing to some users.</p>"},{"location":"golang/#module-vendoring","title":"Module Vendoring","text":"<p>Vendoring of Go Modules is done automatically if <code>vendor/modules.txt</code> is present. Renovate will commit all files changed within the <code>vendor/</code> folder.</p> <p>Note</p> <p>Renovate does not support vendoring major upgrades of Go modules. Follow issue #21010.</p>"},{"location":"golang/#go-binary-version","title":"Go binary version","text":"<p>By default, Renovate will keep up with the latest version of the <code>go</code> binary.</p> <p>You can force Renovate to use a specific version of Go by setting a constraint.</p> Getting Renovate to use the latest patch version of the 1.23 Go binary<pre><code>{\n  \"constraints\": {\n    \"go\": \"1.23\"\n  }\n}\n</code></pre> <p>We do not support patch level versions for the minimum <code>go</code> version. This means you cannot use <code>go 1.23.3</code>, but you can use <code>go 1.23</code> as a constraint.</p>"},{"location":"golang/#custom-registry-support-and-authentication","title":"Custom registry support, and authentication","text":"<p>This example shows how you can use a <code>hostRules</code> configuration to configure Renovate for use with a custom private Go module source using Git to pull the modules when updating <code>go.sum</code> and vendored modules. All token <code>hostRules</code> with a <code>hostType</code> (e.g. <code>github</code>, <code>gitlab</code>, <code>bitbucket</code>, ... ) and host rules without a <code>hostType</code> are setup for authentication.</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      matchHost: 'github.enterprise.com',\n      token: process.env.GO_GITHUB_TOKEN,\n      hostType: 'github',\n    },\n    {\n      matchHost: 'someGitHost.enterprise.com',\n      token: process.env.GO_GIT_TOKEN,\n    },\n  ],\n};\n</code></pre>"},{"location":"java/","title":"Java Dependency Updates","text":"<p>Renovate can update Gradle and Maven dependencies. This includes libraries and plugins as well as the Gradle Wrapper.</p>"},{"location":"java/#lts-releases","title":"LTS releases","text":"<p>The <code>config:recommended</code> preset includes the <code>workarounds:javaLTSVersions</code> preset. The workaround limits Renovate to upgrade to LTS versions of the Java runtime only.</p> <p>If you want Renovate to offer all <code>major</code> Java updates then add <code>workarounds:javaLTSVersions</code> to the <code>ignorePreset</code> array:</p> <pre><code>{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePresets\": [\"workarounds:javaLTSVersions\"]\n}\n</code></pre>"},{"location":"java/#gradle","title":"Gradle","text":"<p>Renovate detects versions that are specified in a string <code>'group:artifact:version'</code> and those specified in a map <code>(group:groupName, name:ArtifactName, version:Version)</code>.</p>"},{"location":"java/#gradle-file-support","title":"Gradle File Support","text":"<p>Renovate can update:</p> <ul> <li><code>*.gradle</code>/<code>*.gradle.kts</code> files</li> <li>Dependencies with version definitions in <code>gradle.properties</code> files</li> <li>Gradle lockfiles stored in <code>*.lockfile</code> files</li> <li><code>*.versions.toml</code> files in any directory or <code>*.toml</code> files inside the <code>gradle</code>   directory (Gradle Version Catalogs docs)</li> <li><code>versions.props</code> and <code>versions.lock</code> from the gradle-consistent-versions plugin</li> </ul> <p>Renovate does not support:</p> <ul> <li>Android projects that require extra configuration to run (e.g. setting the Android SDK)</li> <li>Catalogs with version ranges</li> <li>Catalog versions using <code>reject</code>, and <code>rejectAll</code> constraints</li> <li>Catalog versions using more than one of <code>require</code>, <code>strictly</code>, <code>prefer</code> in a single declaration</li> <li>Catalogs with custom names that do not end in <code>.toml</code></li> <li>Catalogs outside the <code>gradle</code> folder, whose names do not end in <code>.versions.toml</code> (unless overridden via <code>managerFilePatterns</code> configuration)</li> </ul>"},{"location":"java/#gradle-plugin-support","title":"Gradle Plugin Support","text":"<p>Renovate can also update Gradle plugins. It supports the <code>id(&lt;pluginId&gt;)</code> syntax as well as the <code>kotlin(&lt;kotlinPluginId&gt;)</code> shortcut for <code>id(org.jetbrains.kotlin.&lt;kotlinPluginId&gt;)</code>.</p> <p>For specifying <code>packageRules</code> it is important to know how <code>depName</code> and <code>packageName</code> are defined for a Gradle plugin:</p> <ul> <li>The <code>depName</code> field is equal to <code>&lt;pluginId&gt;</code></li> <li>The <code>packageName</code> field is equal to <code>&lt;pluginId&gt;:&lt;pluginId&gt;.gradle.plugin</code></li> </ul> <p>This is a direct consequence of the Plugin Marker Artifact naming convention.</p>"},{"location":"java/#gradle-wrapper","title":"Gradle Wrapper","text":"<p>Renovate can update the Gradle Wrapper of a project.</p> <p>This includes the source declaration inside the <code>gradle/wrapper/gradle-wrapper.properties</code> as well as accompanied files such as <code>gradlew</code>, <code>gradlew.bat</code>, and <code>gradle/wrapper/gradle-wrapper.jar</code>.</p>"},{"location":"java/#how-it-works","title":"How It Works","text":"<p>Renovate extracts the Gradle Wrapper version used from the <code>distributionUrl</code> inside the <code>gradle-wrapper.properties</code>. Once the version is determined, Renovate will look for newer versions from the <code>gradle-version</code> datasource. Renovate will then invoke the Gradle Wrapper to update itself, as recommended by Gradle.</p> <p>For the extraction to work, the <code>distributionUrl</code> must point to a file of type <code>.zip</code>, which includes the version in its name, and defines one of the official distribution types (bin, all).</p>"},{"location":"java/#support-for-mirrors-and-custom-distributions","title":"Support for mirrors and custom distributions","text":"<p>As Renovate takes the <code>distributionUrl</code> defined inside the <code>gradle-wrapper.properties</code> as basis for its update, source declarations other than to the official Gradle Wrapper are supported.</p> <p>This can be used for hosting the official distributions with a proxy server, an offline mirror or even providing a custom distribution of the Gradle Wrapper, e.g. to provide a company-wide base configuration for all Gradle projects.</p> <p>But the <code>gradle-version</code> datasource is used to determine available versions. In case the available versions at the defined source differ from those available from Gradle or the default datasource cannot be reached, e.g. due to network restrictions, the datasource may be reconfigured via a <code>packageRule</code>:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"gradle-version\"],\n      \"registryUrls\": [\n        \"https://domain.tld/repository/custom-gradle-wrapper/versions.json\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"java/#maven","title":"Maven","text":"<p>Renovate can update dependency versions found in Maven <code>pom.xml</code> files.</p>"},{"location":"java/#maven-file-support","title":"Maven File Support","text":"<p>Renovate will search repositories for all <code>pom.xml</code> files and processes them independently.</p> <p>Renovate will also parse <code>settings.xml</code> files in the following locations:</p> <ul> <li><code>.mvn/settings.xml</code></li> <li><code>.m2/settings.xml</code></li> <li><code>settings.xml</code></li> </ul> <p>Any repository URLs found within will be added as <code>registryUrls</code> to extracted dependencies.</p>"},{"location":"java/#custom-registry-support-and-authentication","title":"Custom registry support, and authentication","text":"<p>The manager for Gradle makes use of the <code>maven</code> datasource. Renovate can be configured to access more repositories and access repositories authenticated.</p> <p>This example shows how you can use a <code>config.js</code> file to configure Renovate for use with Artifactory. We're using environment variables to pass the Artifactory username and password to Renovate bot.</p> config.js<pre><code>module.exports = {\n  hostRules: [\n    {\n      hostType: 'maven',\n      matchHost: 'https://artifactory.yourcompany.com/',\n      username: process.env.ARTIFACTORY_USERNAME,\n      password: process.env.ARTIFACTORY_PASSWORD,\n    },\n  ],\n};\n</code></pre> <p>You can overwrite the repositories to use for version lookup through configuration.</p> <pre><code>module.exports = {\n  packageRules: [\n    {\n      matchDatasources: ['maven'],\n      registryUrls: ['https://repo-a.tld/repo', 'https://repo-b.tld/repo'],\n    },\n  ],\n};\n</code></pre>"},{"location":"java/#google-artifact-registry","title":"Google Artifact Registry","text":"<p>There are multiple ways to configure Renovate to access Artifact Registry.</p>"},{"location":"java/#using-application-default-credentials-workload-identity-self-hosted-only","title":"Using Application Default Credentials / Workload Identity (Self-Hosted only)","text":"<p>Configure ADC or Workload Identity as normal and don't provide a username, password or token. Renovate will automatically retrieve the credentials using the <code>google-auth-library</code>.</p>"},{"location":"java/#using-long-lived-service-account-credentials","title":"Using long-lived service account credentials","text":"<p>To access the Google Artifact Registry, use the JSON service account with <code>Basic</code> authentication, and use the:</p> <ul> <li><code>_json_key_base64</code> as username</li> <li>full Google Cloud Platform service account JSON as password</li> </ul> <p>To avoid JSON-in-JSON wrapping, which can cause problems, encode the JSON service account beforehand.</p> <ol> <li>Download your JSON service account and store it on your machine. Make sure that the service account has <code>read</code> (and only <code>read</code>) permissions to your artifacts</li> <li>Base64 encode the service account credentials by running <code>cat service-account.json | base64</code></li> <li>Add the encoded service account to your configuration file</li> <li> <p>If you want to add it to your self-hosted configuration file:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-maven.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"password\": \"&lt;base64 service account&gt;\"\n    }\n  ]\n}\n</code></pre> </li> <li> <p>If you want to add it to your repository Renovate configuration file, encrypt it and then add it:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-maven.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"encrypted\": {\n        \"password\": \"&lt;encrypted base64 service account&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> </li> <li> <p>Add the following to the <code>packageRules</code> in your repository Renovate configuration file:</p> </li> </ol> <pre><code>{\n  \"matchManagers\": [\"maven\", \"gradle\"],\n  \"registryUrls\": [\n    \"https://europe-maven.pkg.dev/&lt;my-gcp-project&gt;/&lt;my-repository&gt;\"\n  ]\n}\n</code></pre>"},{"location":"javascript/","title":"JavaScript","text":"<p>Renovate supports upgrading JavaScript dependencies specified in <code>package.json</code> files.</p> <p><code>npm</code>, <code>yarn</code>, <code>pnpm</code> and <code>bun</code> are all supported.</p>"},{"location":"known-limitations/","title":"Known limitations","text":"<p>Learn about the limitations of Renovate bot.</p>"},{"location":"known-limitations/#introduction","title":"Introduction","text":"<p>Renovate, like any computer program has limitations. Sometimes these are functionality limitations - perhaps something is impossible or too complex to do, or we simply haven't implemented it yet. At other times it may be a \"performance\" limitation, because jobs neither start nor complete instantly, even if the user may start with that expectation.</p> <p>This document tries to list out the most commonly seen limitations and describe whether they're permanent and if there's any plans to improving the situation.</p>"},{"location":"known-limitations/#timeschedule-based-limitations","title":"Time/schedule based limitations","text":"<p>When a user configures a schedule in their repo config, they may think that this schedule \"controls\" when Renovate runs. In actuality, Renovate may be running frequently, but skipping updates to the repo if the configured schedule is not met. Additionally, the Renovate admin may have put the bot on its own schedule, or the job queue may be too long, so Renovate doesn't even get a chance to run on your repository during a certain scheduled time window.</p> <p>For scheduled action to take place, both these need to happen:</p> <ul> <li>The bot needs to run against your repository</li> <li>The current time needs to fall within your repository's configured schedule</li> </ul>"},{"location":"known-limitations/#the-mend-renovate-app-and-scheduled-jobs","title":"The Mend Renovate app and scheduled jobs","text":"<p>The Mend Renovate App checks each active repository roughly every three hours, if no activity has been seen before then (merged PRs, etc).</p> <p>For this reason, you should set your schedule window to at least three or four hours. This makes it likely that Renovate bot checks your repository at least once during the schedule.</p>"},{"location":"known-limitations/#automerge-limitations","title":"Automerge limitations","text":"<ul> <li>Renovate automerges at most one branch/PR per run</li> <li>If an automerge happened, the repository run will be restarted at most once. The second run can also potentially automerge, so it may appear as like two automerges in one run.</li> <li>Renovate will only automerge a branch when it is up-to-date with the target branch</li> <li>Renovate may not be able to automerge as many branches as you expect, especially if your base branch is receiving regular commits at the same time</li> </ul> <p>The limitation to only merge one branch per run is because Renovate's dependency and branch state is based on what was present in the base branch at the start of the run. If a branch is merged into the base branch during Renovate's run - including by other users - it means that remaining Renovate branches may have Git conflicts. It also means that Renovate's knowledge about dependencies in the base branch is now invalid and other branches may need changing as a result of the merge.</p> <p>The limitation to only automerge branches which are up-to-date is a decision due to this example:</p> <ul> <li>Two dependencies are in use: <code>alice@1.0.0</code> and <code>bob@1.0.0</code></li> <li>PRs exist for <code>alice@2.0.0</code> and <code>bob@2.0.0</code> and both pass tests</li> <li>The PR for <code>alice@2.0.0</code> is automerged</li> <li>The PR for <code>bob@2.0.0</code> remains open, does not have conflicts, and has all tests passing</li> <li>But <code>alice@2.0.0</code> and <code>bob@2.0.0</code> are incompatible so merging the PR without rebasing and retesting it first would result in a broken base branch</li> </ul>"},{"location":"language-constraints-and-upgrading/","title":"Language constraints and upgrading","text":""},{"location":"language-constraints-and-upgrading/#package-releases-have-language-constraints","title":"Package releases have language constraints","text":"<p>Many ecosystems have the concept where each release of a package has its own language \"constraint\". For example, a npm package may support Node.js 18 and 20 in its <code>v1</code> releases and Node.js 20 and 22 from <code>v2.0.0</code> onwards.</p> <p>In an ideal scenario:</p> <ul> <li>Package files allow a project to show its supported language constraints, and</li> <li>Package registries allow packages to show the supported language constraints per release</li> </ul>"},{"location":"language-constraints-and-upgrading/#restricting-upgrades-to-compatible-releases","title":"Restricting upgrades to compatible releases","text":"<p>By default Renovate does not apply language constraints to upgrades. This means Renovate will propose \"any\" stable upgrade. Renovate will not check if the language version you're using actually supports that upgrade. In certain ecosystems, changes to language constraints are made with a major release, and are documented in the release notes. So Renovate's default behavior may be okay in those ecosystems. For other ecosystems Renovate's default behavior may seem wrong.</p> <p>As a Renovate user, you can opt into strict compatibility filtering by setting <code>constraintsFiltering=strict</code>. Before you set <code>constraintsFiltering=strict</code>, you should:</p> <ul> <li>understand the limitations of this setting</li> <li>understand why <code>constraintsFiltering=strict</code> is not the default behavior</li> </ul> <p>Please keep reading to learn more.</p>"},{"location":"language-constraints-and-upgrading/#language-constraint-updating","title":"Language constraint updating","text":"<p>The first challenge is that Renovate may not yet support the ability to update your language constraints in an automated manner, and even when it does, users may not understand how many updates are depending on it.</p> <p>For example: a Node.js project has set its <code>engines</code> field to <code>\"node\": \"^18.0.0 || ^20.0.0\"</code>.</p> <p>Should Renovate skip Node.js <code>v21</code> because it is a non-LTS release? When Node.js <code>v22</code> releases, should Renovate add it to your <code>engines</code>, or wait until <code>v22</code> becomes the LTS version? When Node.js <code>v18</code> is EOL, should Renovate drop it from the <code>engines</code> field?</p> <p>Renovate can not guess what users want. Users have strong and different opinions on what Renovate should do for each example listed above.</p> <p>Also, even if Renovate guesses right or adds advanced capabilities to allow this to be configurable: users might still wait on any of these \"major\" upgrades for months. If a project waits to create or merge the update to drop Node.js <code>v18</code> from <code>engines</code>, then they can not upgrade to any new versions of library dependencies. Those library dependencies may have dropped support for Node.js <code>v18</code> already.</p>"},{"location":"language-constraints-and-upgrading/#strict-filtering-limitations","title":"Strict filtering limitations","text":"<p>Let's go back to the Node.js project which has its <code>engines</code> field set to <code>\"node\": \"^18.0.0 || ^20.0.0\"</code>.</p> <p>Now also consider a library which sets its <code>engines</code> field to <code>\"node\": \"^18.12.0 || ^20.9.0\"</code> because the library only supports \"LTS releases\" of Node.js. Strictly speaking, this library is not compatible with the project above, because the project has wider requirements for their Node versions. This means Renovate holds back any upgrades for it. Should Renovate somehow \"think\" and assume that this narrower <code>engines</code> support is actually OK? What if the project already used a current version of this library \"in a way that's not officially supported\"?</p> <p>A second problem is that if:</p> <ul> <li>Renovate can not update the language constraints, or</li> <li>a user ignores or does not see the language upgrade</li> </ul> <p>Then the user may not know that many dependencies are out of date, because Renovate is not creating PRs. For example: a project may have 10 dependencies, and 8 of those have updates. But all 8 dependencies need the project to update its language constraints first. The project administrator thinks they are up to date, because Renovate is not creating PRs, but 80% of their dependencies are outdated.</p> <p>In short, users who set <code>constraintsFiltering=strict</code> often do not understand how strict that setting is and how many releases it will filter out.</p>"},{"location":"language-constraints-and-upgrading/#transitive-constraint-limitations","title":"Transitive constraint limitations","text":"<p>Often a library sets language constraints (like the <code>engines</code> examples above), and then depend on libraries with narrower constraints, like <code>\"node\": \"^20.0.0\"</code>. In cases like these, Renovate \"trusts\" the declaration of the library and may create a update, even with strict constraints filtering.</p> <p>For some package managers, like <code>npm</code>, this incompatibility will not be detected or warned about (even during lock file generation), but this may not be a problem for your application. Other package managers, like Poetry, may detect and warn about incompatible language constraints during lock file generation, which Renovate reports as an \"Artifacts update error\".</p>"},{"location":"language-constraints-and-upgrading/#applying-constraints-through-config","title":"Applying constraints through config","text":"<p>You can set language constraints in the Renovate config. For example:</p> Renovate config with Node.js constraints<pre><code>{\n  \"constraints\": {\n    \"node\": \"^18.0.0 || &gt;=20.0.0\"\n  }\n}\n</code></pre> <p>You may need to set constraints in the Renovate config when:</p> <ul> <li>The package manager of the project does not support constraints declarations, or</li> <li>The project has not declared any constraints, or</li> <li>You want Renovate to use different constraints to what's declared in the project</li> </ul> <p>Renovate will not create \"update\" PRs to update any of these versions once they become outdated, so you must update those by hand. For this reason, setting constraints manually in the Renovate config is undesirable. We prefer to fix problems in Renovate itself, instead of you setting constraints.</p>"},{"location":"language-constraints-and-upgrading/#future-work","title":"Future Work","text":"<p>Please start, or join, a GitHub Discussion if you are interested in this topic. Subtopics include:</p> <ul> <li>Improving language constraints update automation in package files</li> <li>Improving versioning calculations of \"subset\" (is range A a subset of range B)</li> </ul>"},{"location":"logo-brand-guidelines/","title":"Logo and brand guidelines","text":"<p>This page explains how you may use the Renovate name, logo and branding.</p>"},{"location":"logo-brand-guidelines/#do-not-pretend-to-be-the-real-renovate-app","title":"Do not pretend to be the real Renovate app","text":"<p>Avoid using our name, logo, or branding in a way that causes people to think you are the real Renovate app on a public platform. For example: do not call your self-hosted version something like @realrenovatebot on GitHub.</p>"},{"location":"logo-brand-guidelines/#do-not-pretend-to-be-a-renovate-developer","title":"Do not pretend to be a Renovate developer","text":"<p>Avoid using our name, logo, or branding in a way that causes people to think you are a developer of Renovate.</p>"},{"location":"logo-brand-guidelines/#allowed-uses-of-the-renovate-name","title":"Allowed uses of the Renovate name","text":"<p>You are allowed to use the Renovate name:</p> <ul> <li>to refer to the official Renovate app</li> <li>as a nickname/shorthand, in contexts where it is clear you are referring to your self-hosted version</li> </ul>"},{"location":"logo-brand-guidelines/#allowed-uses-of-the-renovate-logo","title":"Allowed uses of the Renovate logo","text":"<p>You are allowed to use our logo as:</p> <ul> <li>an icon in your repository readme, that says you are using Renovate</li> <li>part of a badge in your repository readme, that says you are using Renovate</li> <li>an avatar image for your self-hosted version of Renovate, but give your bot a different name</li> </ul>"},{"location":"logo-brand-guidelines/#allowed-uses-of-the-renovate-branding","title":"Allowed uses of the Renovate branding","text":"<p>Do not use our banner images.</p>"},{"location":"logo-brand-guidelines/#we-keep-the-rights-to-our-logo-name-and-branding","title":"We keep the rights to our logo, name, and branding","text":"<p>You may only use our logo, name and branding as described in this guideline. We keep the rights to our logo, name and branding.</p>"},{"location":"merge-confidence/","title":"Merge Confidence","text":"<p>Look at the Merge Confidence badges before merging to:</p> <ul> <li>Prevent updates which break in production</li> <li>See at a glance if you should update</li> </ul> <p>Merge Confidence finds and flags undeclared breaking releases. It analyzes test and release adoption data from the Mend Renovate App users.</p> <p></p>"},{"location":"merge-confidence/#pull-request-badges","title":"Pull request badges","text":"<p>Merge Confidence adds the following badges to your pull requests:</p> <ul> <li>Age: The age of the package</li> <li>Adoption: The percentage of this package's users (within Renovate) which are using this release</li> <li>Passing: The percentage of updates which have passing tests for this package</li> <li>Confidence: The confidence level for this update</li> </ul>"},{"location":"merge-confidence/#supported-platforms","title":"Supported platforms","text":"<p>Merge Confidence badges for pull requests are available on any supported platform or Renovate distribution, including Mend Remediate.</p>"},{"location":"merge-confidence/#supported-languages","title":"Supported languages","text":"<p>Renovate will show Merge Confidence badges for these languages:</p> Language Datasource Golang <code>go</code> JavaScript <code>npm</code> Java <code>maven</code> Python <code>pypi</code> .NET <code>nuget</code> PHP <code>packagist</code> Ruby <code>rubygems</code> <p>We plan to support more languages soon.</p>"},{"location":"merge-confidence/#enabling-and-disabling","title":"Enabling and disabling","text":"<p>If you use the Mend Renovate App then the badges are enabled automatically.</p> <p>If you're self-hosting Renovate, you can enable the badges by adding the <code>mergeConfidence:all-badges</code> preset to the <code>extends</code> array in your Renovate config:</p> <pre><code>{\n  \"extends\": [\"mergeConfidence:all-badges\"]\n}\n</code></pre> <p>Note</p> <p>The <code>mergeConfidence:age-confidence-badges</code> preset can be used to only show the Age and Confidence badges.</p> <p>If you want to disable the badges in the Mend Renovate App, add the <code>mergeConfidence:all-badges</code> preset to the <code>ignorePresets</code> array in your config:</p> <pre><code>{\n  \"ignorePresets\": [\"mergeConfidence:all-badges\"]\n}\n</code></pre>"},{"location":"merge-confidence/#confidence-levels-and-their-meaning","title":"Confidence levels and their meaning","text":"<p>Merge Confidence uses the following confidence levels:</p> <ul> <li>Low: We think the update contains breaking changes. Often this is expected because it's a <code>major</code> version update, but updates can have unknown breaking changes</li> <li>Neutral: We don't have enough data about the update, or we can't decide if the update should be Low or High confidence</li> <li>High: We rank updates as High confidence when the combination of <code>Age</code>, <code>Adoption</code> and <code>Passing</code> tests means there's a very low chance of breaking changes</li> <li>Very High: We only use this for updates which are months old and have either high <code>Adoption</code> or have very high test <code>Passing</code> scores</li> </ul>"},{"location":"merge-confidence/#how-it-works","title":"How it works","text":"<p>The Mend Renovate App created millions of pull requests on <code>github.com</code> to help developers update their dependencies since 2017. We bundle and analyze metrics such as package <code>Age</code>, package <code>Adoption</code>, and <code>Passing</code> tests. This way we can find packages that have undeclared breaking changes.</p>"},{"location":"merge-confidence/#algorithm","title":"Algorithm","text":"<p>The algorithm that decides on the values is private and is not something we plan to share. Similar to a search engine's algorithm, we plan to adjust and improve it over time, for example by using historical data to set a baseline confidence level for packages.</p>"},{"location":"merge-confidence/#data","title":"Data","text":"<p>We plan to expose much more of the data via a companion website, such as number of users of a package and popular repositories which already updated to the version in question.</p>"},{"location":"merge-confidence/#explanations","title":"Explanations","text":""},{"location":"merge-confidence/#package-ranking","title":"Package ranking","text":"<p>npm packages less than three days old can be unpublished, which can result in a service impact if you have updated to a package that gets unpublished. This is why npm packages can only get the High Confidence badge when they are at least three days old.</p>"},{"location":"merge-confidence/#percentage-values-weighting","title":"Percentage values weighting","text":"<p>The percentages for <code>Adoption</code> and <code>Passing</code> are weighted towards Organizations, private repositories, and projects with high test reliability. This means those values aren't raw percentages.</p>"},{"location":"merge-confidence/#questions-and-feedback","title":"Questions and feedback","text":"<p>You are invited to start a discussion if you have anything you'd like to discuss.</p>"},{"location":"node/","title":"Node.js Versions","text":"<p>Renovate can upgrade the Node.js runtime used by your project. This way you're using the latest bug fixes, performance improvements, security mitigations, etc.</p>"},{"location":"node/#lts-codenames","title":"LTS codenames","text":"<p>Renovate understands codenames for Node.js LTS releases and will offer upgrades for them (e.g. from <code>fermium</code> to <code>gallium</code>) as long as the <code>node</code> versioning scheme is being used.</p>"},{"location":"node/#file-support","title":"File Support","text":"<p>Renovate can manage the Node.js version in the following files:</p> <ul> <li>The <code>engines</code> field in <code>package.json</code></li> <li>The <code>volta</code> field in <code>package.json</code></li> <li>The <code>.nvmrc</code> file for the Node Version Manager</li> <li>The <code>.node-version</code> file for the nodenv environment manager</li> <li>The <code>.tool-versions</code> file for the asdf version manager</li> <li>The <code>.mise.toml</code> file for the mise version manager</li> <li>The <code>node_js</code> field in <code>.travis.yml</code></li> </ul>"},{"location":"node/#configuring-which-version-of-npm-renovate-uses","title":"Configuring which version of npm Renovate uses","text":"<p>When <code>binarySource=docker</code> or <code>binarySource=install</code>, such as in the Mend Renovate App, Renovate will choose and install an <code>npm</code> version dynamically.</p> <p>To control which version or constraint is installed, you should use the <code>engines.npm</code> property in your <code>package.json</code> file. Renovate bot will then use that version constraint for npm when it creates a pull request.</p> <p>For example, if you want to use at least npm <code>8.1.0</code> and also allow newer versions of npm in the <code>8.x</code> range, you would put this in your <code>package.json</code> file:</p> package.json<pre><code>{\n  \"engines\": {\n    \"npm\": \"^8.1.0\"\n  }\n}\n</code></pre> <p>Alternatively, the npm version can also be configured via the <code>constraints</code> option.</p>"},{"location":"noise-reduction/","title":"Noise Reduction","text":"<p>Generally, the first reaction people have to automated dependency updates like Renovate is \"oh great/feel the power of automation\". The next reaction a few days or weeks later is often \"this is getting overwhelming\". Indeed, if you leave Renovate on its default settings of raising a PR every single time any dependency receives any update.. you will get a lot of PRs and related notifications. This document will give you some ideas of how to reduce the amount of \"noise\" in your repository and the Pros/Cons of each approach.</p> <p>Of course, please keep in mind that people's definitions of \"noise\" may differ. For some people, it's noisy only if they get a notification or email from GitHub. For others, too many commits in their base branch may be \"noise\". In other words, your mileage may vary. If you have any ideas on this topic, please contact the author by starting a new discussion on the Renovate repository.</p>"},{"location":"noise-reduction/#package-grouping","title":"Package Grouping","text":"<p>To reduce noise, you can reduce the number of updates in total, and a good way to do that is via intelligent grouping of related packages.</p> <p>As an example, our default <code>\":app\"</code> and <code>\":library\"</code> presets include the rule <code>\"group:monorepos\"</code>, which means that \"sibling\" packages from known monorepos will always be grouped into the same branch/PR by renovate. For example, all <code>@angular/*</code> packages that are updated at the same time will be raised in a \"Renovate angular monorepo packages\" PR. And every package in the React monorepo will be grouped together in a React monorepo PR too.</p> <p>You may wish to take this further, for example you might want to group together all packages related to <code>eslint</code>, even if they come from separate repositories/authors. In that case you might create a config like this:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\"\n    }\n  ]\n}\n</code></pre> <p>By setting <code>matchPackageNames</code> to <code>/eslint/</code>, it means that any package with eslint anywhere in its name will be grouped into a <code>renovate/eslint</code> branch and related PR.</p>"},{"location":"noise-reduction/#be-smart-about-grouping-dependencies","title":"Be smart about grouping dependencies","text":"<p>Grouping dependencies may help you, but can also cause problems. Sometimes you're better off getting a single PR per dependency!</p> <p>Grouping dependencies versus single PRs:</p> <ul> <li>Grouping dependencies increases the chance that the branch has an error (\"break\" your build)</li> <li>When you upgrade multiple dependencies in one PR, it takes longer to find out which package broke the build</li> <li>If a group PR \"breaks\", you'll have to wait upgrading your other dependencies until all updates in the PR pass</li> <li>You will have less flexibility when one (or more) dependencies in the group have a major upgrade, but the other dependencies are good to go</li> </ul>"},{"location":"noise-reduction/#scheduling-renovate","title":"Scheduling Renovate","text":"<p>For a high level overview of scheduling when Renovate bot runs, read the key concepts, scheduling docs.</p> <p>On its own, the Renovate CLI tool runs once and then exits. Hence, it only runs as often as its administrator sets it to (e.g. via <code>cron</code>).</p> <p>For the Mend Renovate App, it currently runs continuously using a job queue that gets refreshed hourly, or when you make relevant commits to your repository. You can expect to get PRs at any time of the day, e.g. soon after versions are published to npm.</p> <p>Receiving PRs at any hour can increase the feeling of being \"overwhelmed\" by updates and possibly interrupt your flow during working hours, so many Renovate users also consider reducing Renovate's schedule to be outside their normal working hours, for example weeknights and weekends. This is achievable by configuring <code>schedule</code> in your Renovate config and optionally <code>timezone</code> (Renovate's default time zone is UTC, so you may find it easier to write schedules if you override <code>timezone</code> to your local one).</p> <p>Another example of adjusting schedules to fit with your workflow might be if your company performs releases every Monday. In that case, you might schedule Renovate to run every Tuesday after midnight to pick up new dependency updates that you can test over the following week before the next release.</p> <p>Caution: You need to make sure you leave yourself and Renovate enough time in a week to actually get all your updating and merging done. There are multiple reasons why Renovate may need to \"recreate\" PRs after you merge another:</p> <ol> <li>Conflict with <code>package.json</code> (sometimes)</li> <li>Conflict with lock files (often)</li> <li>If you have configured Renovate or GitHub that PRs must always be kept up-to-date with the base branch</li> </ol> <p>Any of the above reasons can lead to a Renovate branch being considered \"stale\" and then Renovate needs to rebase it off the base branch before you can test and merge again, and Renovate won't do this until it's back in schedule.</p>"},{"location":"noise-reduction/#selective-scheduling","title":"Selective scheduling","text":"<p>Don't think that you need to apply blanket rules to scheduling. Remember that Renovate's configuration is highly flexible so you can configure <code>automerge</code> anywhere from globally (entire repo) right down to a package/upgrade type level. You could even configure a nonsensical rule like: \"patch updates of <code>jquery</code> are for Mondays only\".</p> <p>Remember our example of grouping all <code>eslint</code> packages? If you think about it, updates to <code>eslint</code> rules don't exactly need to be applied in real time! You don't want to get too far behind, so how about we update <code>eslint</code> packages only once a month?</p> Update ESLint packages once a month<pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on first day of each month\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* * 1 * *\"]\n    }\n  ]\n}\n</code></pre> <p>Or perhaps at least weekly:</p> Update ESLint packages weekly<pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on Monday mornings(before 4 AM)\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* 0-3 * * 1\"]\n    }\n  ]\n}\n</code></pre> <p>If you're wondering what is supported and not, under the hood, the schedule is parsed using @breejs/later using the <code>later.parse.text(scheduleString)</code> API. Read the parser documentation at breejs.github.io/later/parsers.html#text. Renovate does not support scheduled minutes or \"at an exact time\" granularity. Granularity must be at least one hour.</p>"},{"location":"noise-reduction/#automerging","title":"Automerging","text":"<p>Automerging is a Renovate feature that can save you a lot of time/noise directly, while also benefiting grouping and scheduling. In short: it means that Renovate can merge PRs or even branches itself if they pass your tests.</p> <p>We recommend that you enable automerge for any type of dependency update where you would select Merge anyway. We all know that there are some types of updates that we (nearly) always verify manually before merging, and plenty of others that we don't bother looking at unless tests fail. Every time you select Merge on a Renovate PR without manually testing it, you should consider if you can enable automerge and save yourself the time in future.</p> <p>Automerge works particularly well for <code>devDependencies</code> and for production <code>dependencies</code> that have great test coverage.</p> <p>For example, if you have <code>jest</code> or <code>mocha</code> as a dependency, and it has an upgrade with passing tests: automerge them! If you have a linter like <code>eslint</code> or <code>tslint</code> and its update passes: automerge them! If you have an API with 100% test coverage and <code>express</code> is updated: automerge it!</p>"},{"location":"noise-reduction/#branch-automerging","title":"Branch automerging","text":"<p>Those of you familiar with GitHub might note that even if you automerge PRs, you are still going to get notifications (noise) anyway - one when the PR is created and another when it is merged. For this reason we recommend you consider setting <code>automergeType=branch</code> which will mean:</p> <ul> <li>Renovate first creates a branch and no PR</li> <li>If tests pass, Renovate pushes a commit directly to the base branch without PR</li> <li>If tests fail, Renovate raises a PR for you to review</li> </ul> <p>The result is that passing updates are essentially \"silent\" - the only sign of them are the commits to your base branch.</p>"},{"location":"noise-reduction/#automerging-and-scheduling","title":"Automerging and scheduling","text":"<p>Automerging is particularly beneficial if you have configured a schedule, because Renovate on its own may be able to automerge the majority of your updates. And this is especially so if your repository needs rebasing, e.g. because you use lock files. e.g. let's say you have dependencies <code>abc</code> and <code>xyz</code> with upgrades, and you use a <code>yarn.lock</code> file.</p> <ul> <li>At the start of the schedule, <code>Renovate</code> will create branches for <code>abc</code> and <code>xyz</code> upgrades, including <code>yarn.lock</code> updates</li> <li>After <code>abc</code> passes tests, <code>Renovate</code> will automerge it to your base branch</li> <li>The <code>xyz</code> branch probably now has <code>yarn.lock</code> conflicts</li> <li>Renovate will immediately check all other branches and rebase them</li> <li>The change to <code>xyz</code> branch will trigger another round of CI tests</li> <li>After the updated <code>xyz</code> branch passes, Renovate will automerge it too</li> </ul> <p>This is a lot better than you waking up to two PRs and then having to deal with conflicts yourself after you merge the first one.</p> <p>Remember our running <code>eslint</code> example? Let's automerge it if all the linting updates pass:</p> Automerge ESLint packages<pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on Monday mornings(before 4 AM)\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* 0-3 * * 1\"],\n      \"automerge\": true,\n      \"automergeType\": \"branch\"\n    }\n  ]\n}\n</code></pre> <p>Have you come up with a rule that would help others? How about a PR to our presets? For example the above rule could be named <code>\":automergeEslintWeekly\"</code> in <code>schedule.ts</code>.</p>"},{"location":"noise-reduction/#lock-file-considerations","title":"Lock file considerations","text":"<p>Using lock files greatly increases the chance that merging one PR will result in a second PR becoming conflicted with the base branch. The table below highlights different noise reduction strategies and their effect on pull request and potential lock file conflicts:</p> Action Effect on pull requests Chance of lock file conflicts Group dependencies together Decreases separate PRs Decreases Automerge dependencies Decreases concurrent PRs Decreases Decrease scheduled time for Renovate Increases concurrent PRs Increases"},{"location":"noise-reduction/#the-future-of-noise-reduction","title":"The Future of Noise Reduction","text":"<p>First of all, if you ever have any ideas about how to make Renovate less noisy, please raise or comment on issues in the main repository. Our philosophy is:</p> <ol> <li>Nearly everyone should use Renovate-like dependency update automation</li> <li>Over time, you should \"see\" Renovate less and less</li> </ol> <p>One of our hopes with preset configs is that a set of \"sensible\" configs can be maintained by the community that combine grouping, scheduling and automerging to reduce the amount of noise in repositories with little downside or increased risk. Such lists could be maintained and used somewhat like Adblock lists - kept up to date by maintainers but for the majority of users they are simply trusted/automatic/invisible.</p>"},{"location":"nuget/","title":"NuGet","text":"<p>Renovate can upgrade dependencies in these files:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> </ul>"},{"location":"nuget/#version-support","title":"Version Support","text":"<p>Renovate only works with SDK-style <code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files. By default, this includes:</p> <ul> <li>.NET Core 1.0 and above</li> <li>.NET Standard class libraries</li> <li><code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files that use the SDK-style syntax</li> </ul> <p>To convert your .NET Framework <code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files into an SDK-style project, follow the steps in this guide.</p>"},{"location":"nuget/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any files with a <code>.csproj</code>, <code>.fsproj</code>, or <code>.vbproj</code> extension</li> <li>Existing dependencies are extracted from <code>&lt;PackageReference&gt;</code> and <code>&lt;PackageVersion&gt;</code> tags</li> <li>Renovate looks up the latest version on nuget.org (or an alternative feed if configured) to see if any upgrades are available</li> <li>If the source package includes a GitHub URL as its source, and has either:</li> <li>a \"changelog\" file, or</li> <li>uses GitHub releases</li> </ol> <p>then release notes for each version are embedded in the generated PR</p> <p>If your project file references a <code>packages.config</code> file, no dependencies will be extracted. Find out here how to migrate from <code>packages.config</code> to <code>PackageReference</code>.</p>"},{"location":"nuget/#alternate-feeds","title":"Alternate feeds","text":"<p>By default Renovate performs all lookups on <code>https://api.nuget.org/v3/index.json</code>, but you can set alternative NuGet feeds. You can set alternative feeds:</p> <ul> <li>in a <code>NuGet.config</code> file within your repository (Renovate will not search outside the repository), or</li> <li>in a Renovate configuration options file like <code>renovate.json</code></li> </ul> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"nuget\"],\n      \"registryUrls\": [\n        \"https://api.nuget.org/v3/index.json\",\n        \"https://example1.com/nuget/\",\n        \"https://example2.com/nuget/v3/index.json\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>In the example above we've set three NuGet feeds. The package resolving process uses the <code>merge</code> strategy to handle the three feeds. All feeds are checked for dependency updates, and duplicate updates are merged into a single dependency update.</p> <p>Warning</p> <p>If your project has lockfile(s), for example a <code>package.lock.json</code> file, then you must set alternate feed settings in the <code>NuGet.config</code> file only. <code>registryUrls</code> set in other files are not passed to the NuGet commands.</p> <p>Note</p> <p>Some alternative feeds (e.g. Artifactory) do not implement the full set of required NuGet resources for the V3 API. If the <code>PackageBaseAddress</code> resource does not exist, Renovate falls back to using the <code>projectUrl</code> from the dependency's catalog entry as the <code>sourceUrl</code> for the dependency, affecting changelog detection.</p>"},{"location":"nuget/#protocol-versions","title":"Protocol versions","text":"<p>NuGet supports two protocol versions, <code>v2</code> and <code>v3</code>. The NuGet client and server must use the same version. When Renovate acts as the client, it can use the <code>v2</code> and <code>v3</code> protocols.</p> <p>By default, Renovate uses the <code>v2</code> protocol. If the configured feed URL ends with <code>index.json</code>, Renovate uses the <code>v3</code> protocol. So Renovate behaves like the official NuGet client.</p>"},{"location":"nuget/#v3-feed-url-not-ending-with-indexjson","title":"v3 feed URL not ending with index.json","text":"<p>If a <code>v3</code> feed URL does not end with <code>index.json</code>, you must specify the version explicitly.</p> <ul> <li>If the feed is defined in a <code>NuGet.config</code> file set the <code>protocolVersion</code> attribute to <code>3</code>:</li> </ul> <pre><code>&lt;packageSources&gt;\n   &lt;clear /&gt;\n   &lt;add key=\"myV3feed\" value=\"http://myV3feed\" protocolVersion=\"3\" /&gt;\n&lt;/packageSources&gt;\n</code></pre> <ul> <li>If the feed is defined via Renovate configuration append <code>#protocolVersion=3</code> to the registry URL:</li> </ul> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"nuget\"],\n      \"registryUrls\": [\"https://example1.com/nuget/#protocolVersion=3\"]\n    }\n  ]\n}\n</code></pre> <p>You may need this workaround when you use the JFrog Artifactory.</p>"},{"location":"nuget/#authenticated-feeds","title":"Authenticated feeds","text":"<p>Credentials for authenticated/private feeds can be given via host rules in the configuration options (file or command line parameter).</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"nuget\",\n      \"matchHost\": \"http://example1.com/nuget\",\n      \"username\": \"root\",\n      \"password\": \"p4$$w0rd\"\n    }\n  ]\n}\n</code></pre> <p>If you use Azure DevOps:</p> <ul> <li>set <code>matchHost</code> to <code>pkgs.dev.azure.com</code></li> <li>set the username, so Renovate can build the project when it creates the PR</li> </ul> <p>Note</p> <p>Only Basic HTTP authentication (via username and password) is supported. For Azure DevOps: use a PAT with <code>read</code> permissions on <code>Packaging</code>. The username of the PAT must match the username of the user of the PAT. The generated <code>nuget.config</code> forces the basic authentication, which cannot be overridden externally!</p>"},{"location":"nuget/#ignoring-package-files-when-using-presets","title":"Ignoring package files when using presets","text":"<p>Because <code>nuget</code> manager has a dedicated <code>ignorePaths</code> entry in the <code>:ignoreModulesAndTests</code> preset, if you're using any presets that extend it (like <code>config:recommended</code>), you need to put your <code>ignorePaths</code> inside the <code>nuget</code> section for it to be merged. For example:</p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"config:recommended\"],\n  \"nuget\": {\n    \"ignorePaths\": [\"IgnoreThisPackage/**\"]\n  }\n}\n</code></pre> <p>Otherwise, all <code>nuget.ignorePaths</code> values in <code>:ignoreModulesAndTests</code> will override values you put inside <code>ignorePaths</code> at the top-level config.</p>"},{"location":"nuget/#future-work","title":"Future work","text":"<p>We welcome contributions or feature requests to support more patterns or use cases.</p>"},{"location":"opentelemetry/","title":"OpenTelemetry and Renovate","text":"<p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p> <p>Renovate partially supports OpenTelemetry, the emerging monitoring standard.</p> <p>OpenTelemetry has three types of observability data:</p> <ul> <li>traces</li> <li>metrics</li> <li>logs</li> </ul>"},{"location":"opentelemetry/#limitations","title":"Limitations","text":"<p>While OTLP support traces, metrics, and logs, Renovate only supports traces. This means Renovate does not support other observability data like: stats on caching, error events, number of found updates, and so on.</p> <p>Renovate uses <code>@opentelemetry/exporter-trace-otlp-http</code> under the hood. This means that Renovate sends traces via OTLP/HTTP in JSON-encoded protobuf format only.</p>"},{"location":"opentelemetry/#usage","title":"Usage","text":"<p>To activate the instrumentation, you must set the <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> environment variable. This variable controls the endpoint for the telemetry data. Once this endpoint is set, you can use all environment variables listed in the OpenTelemetry specification. You can also set the following environment variables:</p> <ul> <li><code>OTEL_SERVICE_NAME</code>: to control the service name that will be emitted in traces, defaults to <code>renovate</code></li> <li><code>OTEL_SERVICE_NAMESPACE</code>: to control the service namespace that will be emitted in traces, defaults to <code>renovatebot.com</code></li> <li><code>OTEL_SERVICE_VERSION</code>: to control the service version that will be emitted in traces, defaults to using the release version of Renovate</li> </ul> <p>The following resource detectors are used:</p> <ul> <li><code>EnvDetector</code> from @opentelemetry/resources to allow users to add the custom attributes</li> <li><code>GithubDetector</code> from @opentelemetry/resource-detector-github for the Github Action</li> <li><code>AWSDetector</code> from @opentelemetry/resource-detector-aws Users hosting on AWS</li> <li><code>GcpDetector</code> from @opentelemetry/resource-detector-gcp Users hosting on GCP</li> <li><code>AzureDetector</code> from @opentelemetry/resource-detector-azure Users hosting on Azure</li> </ul>"},{"location":"opentelemetry/#debugging","title":"Debugging","text":"<p>To help you debug, you can print the telemetry to the console. Use the environment variable <code>RENOVATE_TRACING_CONSOLE_EXPORTER</code>.</p>"},{"location":"opentelemetry/#examples","title":"Examples","text":"<p>An example with a local OpenTelemetry setup can be found on the OpenTelemetry examples page.</p>"},{"location":"php/","title":"Automated Dependency Updates for PHP Composer Dependencies","text":"<p>Renovate can upgrade dependencies in PHP's <code>composer.json</code> and <code>composer.lock</code> files.</p>"},{"location":"php/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>composer.json</code> files</li> <li>Existing dependencies are extracted from the relevant sections of the JSON</li> <li>Renovate resolves the dependency on Packagist (or elsewhere if configured), and filter for SemVer versions</li> <li>A PR is created with <code>composer.json</code> and <code>composer.lock</code> updated in the same commit</li> <li>If the source repository has either a \"changelog\" file or uses GitHub releases, then Release Notes for each version will be embedded in the generated PR</li> </ol>"},{"location":"php/#enabling","title":"Enabling","text":"<p>Either install the Renovate App on GitHub, or check out Renovate OSS for self-hosted.</p>"},{"location":"php/#private-packages","title":"Private packages","text":"<p>If you are using a privately hosted Composer package you can pass the credentials via the <code>hostRules</code> configuration.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"some.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"username\": \"&lt;your-username&gt;\",\n      \"password\": \"&lt;your-password&gt;\"\n    },\n    {\n      \"matchHost\": \"bearer-auth.for.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"token\": \"abcdef0123456789\"\n    }\n  ]\n}\n</code></pre> <p>This host rule is best added to the bot's <code>config.js</code> config so that it is not visible to users of the repository. If you are using the Mend Renovate App then you can encrypt it with Renovate's public key instead, so that only Renovate can decrypt it.</p> <p>Go to https://app.renovatebot.com/encrypt, paste in the secret string you wish to encrypt, select Encrypt, then copy the encrypted result. You may encrypt your <code>password</code> only, but you can encrypt your <code>username</code> as well.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"some.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"encrypted\": {\n        \"username\": \"&lt;your-encrypted-username&gt;\",\n        \"password\": \"&lt;your-encrypted-password&gt;\"\n      }\n    },\n    {\n      \"matchHost\": \"bearer-auth.for.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"encrypted\": {\n        \"token\": \"&lt;your-encrypted-token&gt;\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"php/#update-all-dependencies","title":"Update all dependencies","text":"<p>By default, Renovate will invoke <code>composer update</code> with the <code>--with-dependencies</code> flag. Add <code>composerWithAll</code> to your <code>postUpdateOptions</code> array to use the <code>--with-all-dependencies</code> flag instead.</p>"},{"location":"presets-abandonments/","title":"Abandonment Presets","text":""},{"location":"presets-abandonments/#abandonmentsrecommended","title":"abandonments:recommended","text":"<p>Recommended configuration for abandoned packages, treating packages without a release for 1 year as abandoned, while taking into account community-sourced overrides.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"abandonmentThreshold\": \"1 year\"\n    },\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@types/*\"\n      ],\n      \"abandonmentThreshold\": null\n    },\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"lodash\"\n      ],\n      \"abandonmentThreshold\": \"6 years\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-config/","title":"Full Config Presets","text":""},{"location":"presets-config/#configbest-practices","title":"config:best-practices","text":"<p>Preset with best practices from the Renovate maintainers. Recommended for advanced users, who want to follow our best practices.</p> <pre><code>{\n  \"extends\": [\n    \"config:recommended\",\n    \"docker:pinDigests\",\n    \"helpers:pinGitHubActionDigests\",\n    \":configMigration\",\n    \":pinDevDependencies\",\n    \"abandonments:recommended\"\n  ]\n}\n</code></pre>"},{"location":"presets-config/#configjs-app","title":"config:js-app","text":"<p>Default configuration for webapps.</p> <pre><code>{\n  \"extends\": [\n    \"config:recommended\",\n    \":pinAllExceptPeerDependencies\"\n  ]\n}\n</code></pre>"},{"location":"presets-config/#configjs-lib","title":"config:js-lib","text":"<p>Default configuration for libraries.</p> <pre><code>{\n  \"extends\": [\n    \"config:recommended\",\n    \":pinOnlyDevDependencies\"\n  ]\n}\n</code></pre>"},{"location":"presets-config/#configrecommended","title":"config:recommended","text":"<p>Recommended configuration for most users. It does not matter what programming language you use.</p> <pre><code>{\n  \"extends\": [\n    \":dependencyDashboard\",\n    \":semanticPrefixFixDepsChoreOthers\",\n    \":ignoreModulesAndTests\",\n    \"group:monorepos\",\n    \"group:recommended\",\n    \"mergeConfidence:age-confidence-badges\",\n    \"replacements:all\",\n    \"workarounds:all\"\n  ]\n}\n</code></pre>"},{"location":"presets-config/#configsemverallmonthly","title":"config:semverAllMonthly","text":"<p>Preserve SemVer ranges and update everything together once a month.</p> <pre><code>{\n  \"extends\": [\n    \":preserveSemverRanges\",\n    \"group:all\",\n    \"schedule:monthly\",\n    \":maintainLockFilesMonthly\"\n  ],\n  \"lockFileMaintenance\": {\n    \"commitMessageAction\": \"Update\",\n    \"extends\": [\n      \"group:all\"\n    ]\n  },\n  \"separateMajorMinor\": false\n}\n</code></pre>"},{"location":"presets-config/#configsemverallweekly","title":"config:semverAllWeekly","text":"<p>Preserve SemVer ranges and update everything together once a week.</p> <pre><code>{\n  \"extends\": [\n    \":preserveSemverRanges\",\n    \"group:all\",\n    \"schedule:weekly\",\n    \":maintainLockFilesWeekly\"\n  ],\n  \"lockFileMaintenance\": {\n    \"commitMessageAction\": \"Update\",\n    \"extends\": [\n      \"group:all\"\n    ]\n  },\n  \"separateMajorMinor\": false\n}\n</code></pre>"},{"location":"presets-customManagers/","title":"CustomManager Presets","text":""},{"location":"presets-customManagers/#custommanagersazurepipelinesversions","title":"customManagers:azurePipelinesVersions","text":"<p>Update <code>_VERSION</code> environment variables in Azure Pipelines files.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/(^|/).azuredevops/.+\\\\.ya?ml$/\",\n        \"/azure.*pipelines?.*\\\\.ya?ml$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (?:lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s+[A-Za-z0-9_]+?_VERSION\\\\s*:\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersbiomeversions","title":"customManagers:biomeVersions","text":"<p>Update <code>$schema</code> version in <code>biome.json</code> configuration files.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"datasourceTemplate\": \"npm\",\n      \"depNameTemplate\": \"@biomejs/biome\",\n      \"fileFormat\": \"json\",\n      \"managerFilePatterns\": [\n        \"/(^|/)biome.jsonc?$/\"\n      ],\n      \"matchStrings\": [\n        \"{\\\"currentValue\\\": $split($.\\\"$schema\\\",(\\\"/\\\"))[-2]}\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersbitbucketpipelinesversions","title":"customManagers:bitbucketPipelinesVersions","text":"<p>Update <code>_VERSION</code> variables in Bitbucket Pipelines</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/(^|/)bitbucket-pipelines\\\\.ya?ml$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s+.*\\\\s+[A-Za-z0-9_]+?_VERSION[ =:]\\\\s?[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersdockerfileversions","title":"customManagers:dockerfileVersions","text":"<p>Update <code>_VERSION</code> variables in Dockerfiles.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/(^|/|\\\\.)([Dd]ocker|[Cc]ontainer)file$/\",\n        \"/(^|/)([Dd]ocker|[Cc]ontainer)file[^/]*$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s(?:ENV|ARG)\\\\s+[A-Za-z0-9_]+?_VERSION[ =][\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersgithubactionsversions","title":"customManagers:githubActionsVersions","text":"<p>Update <code>_VERSION</code> environment variables in GitHub Action files.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/(^|/)(workflow-templates|\\\\.(?:github|gitea|forgejo)/(?:workflows|actions))/.+\\\\.ya?ml$/\",\n        \"/(^|/)action\\\\.ya?ml$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (?:lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s+[A-Za-z0-9_]+?_VERSION\\\\s*:\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersgitlabpipelineversions","title":"customManagers:gitlabPipelineVersions","text":"<p>Update <code>_VERSION</code> environment variables in GitLab pipeline file.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/\\\\.gitlab-ci\\\\.ya?ml$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (?:packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s+[A-Za-z0-9_]+?_VERSION\\\\s*:\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagershelmchartyamlappversions","title":"customManagers:helmChartYamlAppVersions","text":"<p>Update <code>appVersion</code> value in Helm chart <code>Chart.yaml</code>.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"datasourceTemplate\": \"docker\",\n      \"managerFilePatterns\": [\n        \"/(^|/)Chart\\\\.yaml$/\"\n      ],\n      \"matchStrings\": [\n        \"#\\\\s*renovate: image=(?&lt;depName&gt;.*?)\\\\s+appVersion:\\\\s*[\\\"']?(?&lt;currentValue&gt;[\\\\w+\\\\.\\\\-]*)\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersmakefileversions","title":"customManagers:makefileVersions","text":"<p>Update <code>_VERSION</code> variables in Makefiles.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/(^|/)Makefile$/\",\n        \"/(^|/)makefile$/\",\n        \"/(^|/)GNUMakefile$/\",\n        \"/\\\\.mk$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (?:packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s+[A-Za-z0-9_]+?_VERSION\\\\s*:*\\\\??=\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagersmavenpropertyversions","title":"customManagers:mavenPropertyVersions","text":"<p>Update <code>*.version</code> properties in <code>pom.xml</code> files.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"datasourceTemplate\": \"{{#if datasource}}{{{datasource}}}{{else}}maven{{/if}}\",\n      \"managerFilePatterns\": [\n        \"/(^|/)pom\\\\.xml$/\"\n      ],\n      \"matchStrings\": [\n        \"&lt;!--\\\\s?renovate:( datasource=(?&lt;datasource&gt;[a-zA-Z0-9-._]+?))? depName=(?&lt;depName&gt;[^\\\\s]+?)(?: packageName=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: extractVersion=(?&lt;extractVersion&gt;[^\\\\s]+?))?\\\\s+--&gt;\\\\s+&lt;.+\\\\.version&gt;(?&lt;currentValue&gt;.+)&lt;\\\\/.+\\\\.version&gt;\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{/if}}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-customManagers/#custommanagerstfvarsversions","title":"customManagers:tfvarsVersions","text":"<p>Update <code>*_version</code> variables in <code>.tfvars</code> files.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"/.+\\\\.tfvars$/\"\n      ],\n      \"matchStrings\": [\n        \"#\\\\s*renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?(?: extractVersion=(?&lt;extractVersion&gt;.*?))?\\\\s.*?_version\\\\s*=\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{/if}}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/","title":"Default Presets","text":""},{"location":"presets-default/#approvemajorupdates","title":":approveMajorUpdates","text":"<p>Require Dependency Dashboard approval for <code>major</code> updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"dependencyDashboardApproval\": true,\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#assignandreviewarg0","title":":assignAndReview(<code>&lt;arg0&gt;</code>)","text":"<p>Set <code>arg0</code> as assignee and reviewer of PRs.</p> <pre><code>{\n  \"extends\": [\n    \":assignee(arg0)\",\n    \":reviewer(arg0)\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#assigneearg0","title":":assignee(<code>&lt;arg0&gt;</code>)","text":"<p>Assign PRs to <code>arg0</code>.</p> <pre><code>{\n  \"assignees\": [\n    \"arg0\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#automergeall","title":":automergeAll","text":"<p>Automerge all upgrades (including <code>major</code>) if they pass tests.</p> <pre><code>{\n  \"automerge\": true\n}\n</code></pre>"},{"location":"presets-default/#automergebranch","title":":automergeBranch","text":"<p>If automerging, push the new commit directly to the base branch (no PR).</p> <pre><code>{\n  \"automergeType\": \"branch\"\n}\n</code></pre>"},{"location":"presets-default/#automergedigest","title":":automergeDigest","text":"<p>Automerge <code>digest</code> upgrades if they pass tests.</p> <pre><code>{\n  \"digest\": {\n    \"automerge\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#automergedisabled","title":":automergeDisabled","text":"<p>Disable automerging feature - wait for humans to merge all PRs.</p> <pre><code>{\n  \"automerge\": false\n}\n</code></pre>"},{"location":"presets-default/#automergelinters","title":":automergeLinters","text":"<p>Update lint packages automatically if tests pass.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"automerge\": true,\n      \"extends\": [\n        \"packages:linters\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#automergemajor","title":":automergeMajor","text":"<p>Automerge all upgrades (including <code>major</code>) if they pass tests.</p> <pre><code>{\n  \"automerge\": true\n}\n</code></pre>"},{"location":"presets-default/#automergeminor","title":":automergeMinor","text":"<p>Automerge <code>patch</code> and <code>minor</code> upgrades if they pass tests.</p> <pre><code>{\n  \"lockFileMaintenance\": {\n    \"automerge\": true\n  },\n  \"minor\": {\n    \"automerge\": true\n  },\n  \"patch\": {\n    \"automerge\": true\n  },\n  \"pin\": {\n    \"automerge\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#automergepatch","title":":automergePatch","text":"<p>Automerge <code>patch</code> upgrades if they pass tests.</p> <pre><code>{\n  \"lockFileMaintenance\": {\n    \"automerge\": true\n  },\n  \"patch\": {\n    \"automerge\": true\n  },\n  \"pin\": {\n    \"automerge\": true\n  },\n  \"separateMinorPatch\": true\n}\n</code></pre>"},{"location":"presets-default/#automergepr","title":":automergePr","text":"<p>Raise a PR first before any automerging.</p> <pre><code>{\n  \"automergeType\": \"pr\"\n}\n</code></pre>"},{"location":"presets-default/#automergerequireallstatuschecks","title":":automergeRequireAllStatusChecks","text":"<p>Require all status checks to pass before any automerging.</p> <pre><code>{\n  \"ignoreTests\": false\n}\n</code></pre>"},{"location":"presets-default/#automergestablenonmajor","title":":automergeStableNonMajor","text":"<p>Automerge non-major upgrades for semver stable packages if they pass tests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"automerge\": true,\n      \"matchCurrentVersion\": \"!/^0/\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#automergetesters","title":":automergeTesters","text":"<p>Update testing packages automatically if tests pass.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"automerge\": true,\n      \"extends\": [\n        \"packages:test\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#automergetypes","title":":automergeTypes","text":"<p>Update <code>@types/*</code> packages automatically if tests pass.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"automerge\": true,\n      \"matchPackageNames\": [\n        \"@types/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#combinepatchminorreleases","title":":combinePatchMinorReleases","text":"<p>Do not separate <code>patch</code> and <code>minor</code> upgrades into separate PRs for the same dependency.</p> <pre><code>{\n  \"separateMinorPatch\": false\n}\n</code></pre>"},{"location":"presets-default/#configmigration","title":":configMigration","text":"<p>Enable Renovate configuration migration PRs when needed.</p> <pre><code>{\n  \"configMigration\": true\n}\n</code></pre>"},{"location":"presets-default/#dependencydashboard","title":":dependencyDashboard","text":"<p>Enable Renovate Dependency Dashboard creation.</p> <pre><code>{\n  \"dependencyDashboard\": true\n}\n</code></pre>"},{"location":"presets-default/#dependencydashboardapproval","title":":dependencyDashboardApproval","text":"<p>Enable Renovate Dependency Dashboard approval workflow.</p> <pre><code>{\n  \"dependencyDashboardApproval\": true\n}\n</code></pre>"},{"location":"presets-default/#disabledependencydashboard","title":":disableDependencyDashboard","text":"<p>Disable Renovate Dependency Dashboard creation.</p> <pre><code>{\n  \"dependencyDashboard\": false\n}\n</code></pre>"},{"location":"presets-default/#disabledevdependencies","title":":disableDevDependencies","text":"<p>Do not update development dependencies.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchDepTypes\": [\n        \"devDependencies\",\n        \"dev-dependencies\",\n        \"dev\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#disabledigestupdates","title":":disableDigestUpdates","text":"<p>Disable <code>digest</code> and Git hash updates.</p> <pre><code>{\n  \"digest\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"presets-default/#disabledomainarg0","title":":disableDomain(<code>&lt;arg0&gt;</code>)","text":"<p>Disable requests to a particular domain.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"enabled\": false,\n      \"matchHost\": \"arg0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#disablehostarg0","title":":disableHost(<code>&lt;arg0&gt;</code>)","text":"<p>Disable requests to a particular host.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"enabled\": false,\n      \"matchHost\": \"https://arg0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#disablemajorupdates","title":":disableMajorUpdates","text":"<p>Disable <code>major</code> updates.</p> <pre><code>{\n  \"major\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"presets-default/#disablepeerdependencies","title":":disablePeerDependencies","text":"<p>Do not update <code>peerDependencies</code> versions/ranges.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchDepTypes\": [\n        \"peerDependencies\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#disableprcontrols","title":":disablePrControls","text":"<p>Remove the checkbox controls from PRs.</p> <pre><code>{\n  \"prBodyTemplate\": \"{{{header}}}{{{table}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{footer}}}\"\n}\n</code></pre>"},{"location":"presets-default/#disableratelimiting","title":":disableRateLimiting","text":"<p>Remove hourly and concurrent rate limits.</p> <pre><code>{\n  \"prConcurrentLimit\": 0,\n  \"prHourlyLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#disablerenovate","title":":disableRenovate","text":"<p>Disable Renovate.</p> <pre><code>{\n  \"enabled\": false\n}\n</code></pre>"},{"location":"presets-default/#disablevulnerabilityalerts","title":":disableVulnerabilityAlerts","text":"<p>Disable vulnerability alerts completely.</p> <pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"presets-default/#docker","title":":docker","text":"<p>Keep Dockerfile <code>FROM</code> sources updated.</p> <pre><code>{\n  \"docker-compose\": {\n    \"enabled\": true\n  },\n  \"dockerfile\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#donotpinpackagearg0","title":":doNotPinPackage(<code>&lt;arg0&gt;</code>)","text":"<p>Disable version pinning for <code>arg0</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"arg0\"\n      ],\n      \"rangeStrategy\": \"replace\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#enableprecommit","title":":enablePreCommit","text":"<p>Enable the pre-commit manager.</p> <pre><code>{\n  \"pre-commit\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#enablerenovate","title":":enableRenovate","text":"<p>Enable Renovate.</p> <pre><code>{\n  \"enabled\": true\n}\n</code></pre>"},{"location":"presets-default/#enablevulnerabilityalerts","title":":enableVulnerabilityAlerts","text":"<p>Raise PR when vulnerability alerts are detected.</p> <pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#enablevulnerabilityalertswithadditionallabelarg0","title":":enableVulnerabilityAlertsWithAdditionalLabel(<code>&lt;arg0&gt;</code>)","text":"<p>Raise PR when vulnerability alerts are detected with label <code>arg0</code>, in addition to any existing list of PR labels.</p> <pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"addLabels\": [\n      \"arg0\"\n    ],\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#enablevulnerabilityalertswithlabelarg0","title":":enableVulnerabilityAlertsWithLabel(<code>&lt;arg0&gt;</code>)","text":"<p>Raise PR when vulnerability alerts are detected with label <code>arg0</code>, replacing any existing list of PR labels.</p> <pre><code>{\n  \"vulnerabilityAlerts\": {\n    \"enabled\": true,\n    \"labels\": [\n      \"arg0\"\n    ]\n  }\n}\n</code></pre>"},{"location":"presets-default/#followtagarg0-arg1","title":":followTag(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>For package <code>arg0</code>, strictly follow release tag <code>arg1</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"followTag\": \"arg1\",\n      \"matchPackageNames\": [\n        \"arg0\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#githubcomtokenarg0","title":":githubComToken(<code>&lt;arg0&gt;</code>)","text":"<p>Use provided token for <code>github.com</code> lookups. Do not configure this if you are already running on <code>github.com</code>.</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"encrypted\": {\n        \"token\": \"arg0\"\n      },\n      \"matchHost\": \"github.com\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#gitsignoff","title":":gitSignOff","text":"<p>Append <code>Signed-off-by:</code> to signoff Git commits.</p> <pre><code>{\n  \"commitBody\": \"Signed-off-by: {{{gitAuthor}}}\"\n}\n</code></pre>"},{"location":"presets-default/#gomod","title":":gomod","text":"<p>Enable Go modules support.</p> <pre><code>{\n  \"gomod\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#grouparg0-arg1","title":":group(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Group <code>arg1</code> packages into same branch/PR.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"arg0\"\n      ],\n      \"groupName\": \"arg1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#ignoremodulesandtests","title":":ignoreModulesAndTests","text":"<p>Ignore <code>node_modules</code>, <code>bower_components</code>, <code>vendor</code> and various test/tests (except for nuget) directories.</p> <pre><code>{\n  \"ignorePaths\": [\n    \"**/node_modules/**\",\n    \"**/bower_components/**\",\n    \"**/vendor/**\",\n    \"**/examples/**\",\n    \"**/__tests__/**\",\n    \"**/test/**\",\n    \"**/tests/**\",\n    \"**/__fixtures__/**\"\n  ],\n  \"nuget\": {\n    \"ignorePaths\": [\n      \"**/node_modules/**\",\n      \"**/bower_components/**\",\n      \"**/vendor/**\",\n      \"**/examples/**\",\n      \"**/__fixtures__/**\"\n    ]\n  }\n}\n</code></pre>"},{"location":"presets-default/#ignoreunstable","title":":ignoreUnstable","text":"<p>Upgrade to unstable versions only if the existing version is unstable.</p> <pre><code>{\n  \"ignoreUnstable\": true\n}\n</code></pre>"},{"location":"presets-default/#includenodemodules","title":":includeNodeModules","text":"<p>Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.</p> <pre><code>{\n  \"ignorePaths\": []\n}\n</code></pre>"},{"location":"presets-default/#labelarg0","title":":label(<code>&lt;arg0&gt;</code>)","text":"<p>Apply label <code>arg0</code> to PRs.</p> <pre><code>{\n  \"labels\": [\n    \"arg0\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#labelsarg0-arg1","title":":labels(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Apply labels <code>arg0</code> and <code>arg1</code> to PRs.</p> <pre><code>{\n  \"labels\": [\n    \"arg0\",\n    \"arg1\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesdisabled","title":":maintainLockFilesDisabled","text":"<p>Update existing lock files only when <code>package.json</code> is modified.</p> <pre><code>{\n  \"lockFileMaintenance\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesmonthly","title":":maintainLockFilesMonthly","text":"<p>Run lock file maintenance (updates) on the first day of each month.</p> <pre><code>{\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"extends\": [\n      \"schedule:monthly\"\n    ]\n  }\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesweekly","title":":maintainLockFilesWeekly","text":"<p>Run lock file maintenance (updates) early Monday mornings.</p> <pre><code>{\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"extends\": [\n      \"schedule:weekly\"\n    ]\n  }\n}\n</code></pre>"},{"location":"presets-default/#meteor","title":":meteor","text":"<p>Keep Meteor Npm.depends packages updated.</p> <pre><code>{\n  \"meteor\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#nounscheduledupdates","title":":noUnscheduledUpdates","text":"<p>Only update branches when scheduled.</p> <pre><code>{\n  \"updateNotScheduled\": false\n}\n</code></pre>"},{"location":"presets-default/#npm","title":":npm","text":"<p>Keep <code>package.json</code> npm dependencies updated.</p> <pre><code>{\n  \"npm\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-default/#pathsemanticcommittypearg0-arg1","title":":pathSemanticCommitType(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Use semanticCommitType <code>arg1</code> for all package files matching path <code>arg0</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\n        \"arg0\"\n      ],\n      \"semanticCommitType\": \"arg1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#pinallexceptpeerdependencies","title":":pinAllExceptPeerDependencies","text":"<p>Pin all dependency versions except <code>peerDependencies</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"rangeStrategy\": \"pin\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"engines\",\n        \"peerDependencies\"\n      ],\n      \"rangeStrategy\": \"auto\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#pindependencies","title":":pinDependencies","text":"<p>Pin dependency versions where <code>depType=dependencies</code>. Usually applies only to non-dev dependencies in <code>package.json</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\n        \"dependencies\"\n      ],\n      \"rangeStrategy\": \"pin\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#pindevdependencies","title":":pinDevDependencies","text":"<p>Pin dependency versions for development dependencies.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\n        \"devDependencies\",\n        \"dev-dependencies\",\n        \"dev\"\n      ],\n      \"rangeStrategy\": \"pin\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#pindigestsdisabled","title":":pinDigestsDisabled","text":"<p>Disable pinning of Docker dependency digests.</p> <pre><code>{\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"presets-default/#pinonlydevdependencies","title":":pinOnlyDevDependencies","text":"<p>Pin dependency versions for development dependencies and retain SemVer ranges for others.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"rangeStrategy\": \"replace\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"devDependencies\",\n        \"dev-dependencies\",\n        \"dev\"\n      ],\n      \"rangeStrategy\": \"pin\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"peerDependencies\"\n      ],\n      \"rangeStrategy\": \"widen\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#pinskipci","title":":pinSkipCi","text":"<p>Add <code>[skip ci]</code> to commit message body whenever pinning.</p> <pre><code>{\n  \"pin\": {\n    \"commitBody\": \"[skip ci]\"\n  }\n}\n</code></pre>"},{"location":"presets-default/#pinversions","title":":pinVersions","text":"<p>Use version pinning (maintain a single version only and not SemVer ranges).</p> <pre><code>{\n  \"rangeStrategy\": \"pin\"\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimit10","title":":prConcurrentLimit10","text":"<p>Limit to maximum 10 open PRs at any time.</p> <pre><code>{\n  \"prConcurrentLimit\": 10\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimit20","title":":prConcurrentLimit20","text":"<p>Limit to maximum 20 open PRs at any time.</p> <pre><code>{\n  \"prConcurrentLimit\": 20\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimitnone","title":":prConcurrentLimitNone","text":"<p>Remove limit for open PRs at any time.</p> <pre><code>{\n  \"prConcurrentLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#preservesemverranges","title":":preserveSemverRanges","text":"<p>Preserve (but continue to upgrade) any existing SemVer ranges.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"rangeStrategy\": \"replace\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit1","title":":prHourlyLimit1","text":"<p>Rate limit PR creation to a maximum of one per hour.</p> <pre><code>{\n  \"prHourlyLimit\": 1\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit2","title":":prHourlyLimit2","text":"<p>Rate limit PR creation to a maximum of two per hour.</p> <pre><code>{\n  \"prHourlyLimit\": 2\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit4","title":":prHourlyLimit4","text":"<p>Rate limit PR creation to a maximum of four per hour.</p> <pre><code>{\n  \"prHourlyLimit\": 4\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimitnone","title":":prHourlyLimitNone","text":"<p>Removes rate limit for PR creation per hour.</p> <pre><code>{\n  \"prHourlyLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#primmediately","title":":prImmediately","text":"<p>Raise PRs immediately (after branch is created).</p> <pre><code>{\n  \"prCreation\": \"immediate\"\n}\n</code></pre>"},{"location":"presets-default/#prnotpending","title":":prNotPending","text":"<p>Wait for branch tests to pass or fail before creating the PR.</p> <pre><code>{\n  \"prCreation\": \"not-pending\"\n}\n</code></pre>"},{"location":"presets-default/#rebasestaleprs","title":":rebaseStalePrs","text":"<p>Rebase existing PRs any time the base branch has been updated.</p> <pre><code>{\n  \"rebaseWhen\": \"behind-base-branch\"\n}\n</code></pre>"},{"location":"presets-default/#renovateprefix","title":":renovatePrefix","text":"<p>Add the <code>renovate/</code> prefix to all branch names.</p> <pre><code>{\n  \"branchPrefix\": \"renovate/\"\n}\n</code></pre>"},{"location":"presets-default/#respectlatest","title":":respectLatest","text":"<p>Upgrade versions up to the \"latest\" tag in the npm registry.</p> <pre><code>{\n  \"respectLatest\": true\n}\n</code></pre>"},{"location":"presets-default/#reviewerarg0","title":":reviewer(<code>&lt;arg0&gt;</code>)","text":"<p>Add <code>arg0</code> as reviewer for PRs.</p> <pre><code>{\n  \"reviewers\": [\n    \"arg0\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#semanticcommits","title":":semanticCommits","text":"<p>Use semantic prefixes for commit messages and PR titles.</p> <pre><code>{\n  \"semanticCommits\": \"enabled\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitscopearg0","title":":semanticCommitScope(<code>&lt;arg0&gt;</code>)","text":"<p>Use semantic commit scope <code>arg0</code> for all commits and PR titles.</p> <pre><code>{\n  \"semanticCommitScope\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitscopedisabled","title":":semanticCommitScopeDisabled","text":"<p>Disable semantic commit scope for all commits and PR titles.</p> <pre><code>{\n  \"semanticCommitScope\": null\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitsdisabled","title":":semanticCommitsDisabled","text":"<p>Disable semantic prefixes for commit messages and PR titles.</p> <pre><code>{\n  \"semanticCommits\": \"disabled\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommittypearg0","title":":semanticCommitType(<code>&lt;arg0&gt;</code>)","text":"<p>Use <code>arg0</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n  \"semanticCommitType\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommittypeallarg0","title":":semanticCommitTypeAll(<code>&lt;arg0&gt;</code>)","text":"<p>If Renovate detects semantic commits, it will use semantic commit type <code>arg0</code> for all commits.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\n        \"**/*\"\n      ],\n      \"semanticCommitType\": \"arg0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixchore","title":":semanticPrefixChore","text":"<p>Use <code>chore</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n  \"extends\": [\n    \":semanticCommitType(chore)\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixfix","title":":semanticPrefixFix","text":"<p>Use <code>fix</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n  \"extends\": [\n    \":semanticCommitType(fix)\"\n  ]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixfixdepschoreothers","title":":semanticPrefixFixDepsChoreOthers","text":"<p>Use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others if semantic commits are in use.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"semanticCommitType\": \"chore\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"dependencies\",\n        \"require\"\n      ],\n      \"semanticCommitType\": \"fix\"\n    },\n    {\n      \"matchDatasources\": [\n        \"maven\"\n      ],\n      \"matchDepTypes\": [\n        \"compile\",\n        \"provided\",\n        \"runtime\",\n        \"system\",\n        \"import\",\n        \"parent\"\n      ],\n      \"semanticCommitType\": \"fix\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"project.dependencies\",\n        \"project.optional-dependencies\"\n      ],\n      \"matchManagers\": [\n        \"pep621\"\n      ],\n      \"semanticCommitType\": \"fix\"\n    },\n    {\n      \"matchDepTypes\": [\n        \"dependencies\",\n        \"extras\"\n      ],\n      \"matchManagers\": [\n        \"poetry\"\n      ],\n      \"semanticCommitType\": \"fix\"\n    },\n    {\n      \"matchJsonata\": [\n        \"isLockfileUpdate = true\"\n      ],\n      \"semanticCommitType\": \"chore\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-default/#separatemajorreleases","title":":separateMajorReleases","text":"<p>Separate <code>major</code> versions of dependencies into individual branches/PRs.</p> <pre><code>{\n  \"separateMajorMinor\": true\n}\n</code></pre>"},{"location":"presets-default/#separatemultiplemajorreleases","title":":separateMultipleMajorReleases","text":"<p>Separate each <code>major</code> version of dependencies into individual branches/PRs.</p> <pre><code>{\n  \"separateMajorMinor\": true,\n  \"separateMultipleMajor\": true\n}\n</code></pre>"},{"location":"presets-default/#separatemultipleminorreleases","title":":separateMultipleMinorReleases","text":"<p>Separate each <code>minor</code> version of dependencies into individual branches/PRs.</p> <pre><code>{\n  \"separateMultipleMinor\": true\n}\n</code></pre>"},{"location":"presets-default/#separatepatchreleases","title":":separatePatchReleases","text":"<p>Separate <code>patch</code> and <code>minor</code> releases of dependencies into separate PRs.</p> <pre><code>{\n  \"separateMinorPatch\": true\n}\n</code></pre>"},{"location":"presets-default/#skipartifactsupdate","title":":skipArtifactsUpdate","text":"<p>Skips artifact updates.</p> <pre><code>{\n  \"skipArtifactsUpdate\": true\n}\n</code></pre>"},{"location":"presets-default/#skipstatuschecks","title":":skipStatusChecks","text":"<p>Skip status checks and automerge right away.</p> <pre><code>{\n  \"ignoreTests\": true\n}\n</code></pre>"},{"location":"presets-default/#timezonearg0","title":":timezone(<code>&lt;arg0&gt;</code>)","text":"<p>Evaluate schedules according to timezone <code>arg0</code>.</p> <pre><code>{\n  \"timezone\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#updatenotscheduled","title":":updateNotScheduled","text":"<p>Keep existing branches updated even when not scheduled.</p> <pre><code>{\n  \"updateNotScheduled\": true\n}\n</code></pre>"},{"location":"presets-default/#widenpeerdependencies","title":":widenPeerDependencies","text":"<p>Always widen <code>peerDependencies</code> SemVer ranges when updating, instead of replacing.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\n        \"peerDependencies\"\n      ],\n      \"rangeStrategy\": \"widen\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-docker/","title":"Docker Presets","text":""},{"location":"presets-docker/#dockerdisable","title":"docker:disable","text":"<p>Disable Docker updates.</p> <pre><code>{\n  \"circleci\": {\n    \"enabled\": false\n  },\n  \"docker-compose\": {\n    \"enabled\": false\n  },\n  \"dockerfile\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"presets-docker/#dockerdisablemajor","title":"docker:disableMajor","text":"<p>Disable Docker <code>major</code> updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-docker/#dockerenablemajor","title":"docker:enableMajor","text":"<p>Enable Docker <code>major</code> updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": true,\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-docker/#dockerpindigests","title":"docker:pinDigests","text":"<p>Pin Docker digests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"pinDigests\": true\n    },\n    {\n      \"matchManagers\": [\n        \"argocd\",\n        \"devcontainer\",\n        \"helmv3\",\n        \"pyenv\"\n      ],\n      \"pinDigests\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-global/","title":"Global Presets","text":""},{"location":"presets-global/#globalsafeenv","title":"global:safeEnv","text":"<p>Hopefully safe environment variables to allow users to configure.</p> <pre><code>{\n  \"allowedEnv\": [\n    \"GO*\",\n    \"GRADLE_OPTS\",\n    \"RUSTC_BOOTSTRAP\"\n  ]\n}\n</code></pre>"},{"location":"presets-group/","title":"Group Presets","text":""},{"location":"presets-group/#groupall","title":"group:all","text":"<p>Group all updates together.</p> <pre><code>{\n  \"groupName\": \"all dependencies\",\n  \"groupSlug\": \"all\",\n  \"lockFileMaintenance\": {\n    \"enabled\": false\n  },\n  \"packageRules\": [\n    {\n      \"groupName\": \"all dependencies\",\n      \"groupSlug\": \"all\",\n      \"matchPackageNames\": [\n        \"*\"\n      ]\n    }\n  ],\n  \"separateMajorMinor\": false\n}\n</code></pre>"},{"location":"presets-group/#groupallapollographql","title":"group:allApollographql","text":"<p>Group all packages published by Apollo GraphQL together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:apollographql\"\n      ],\n      \"groupName\": \"Apollo GraphQL packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupalldigest","title":"group:allDigest","text":"<p>Group all <code>digest</code> updates together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"all digest updates\",\n      \"groupSlug\": \"all-digest\",\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"matchUpdateTypes\": [\n        \"digest\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupallnonmajor","title":"group:allNonMajor","text":"<p>Group all <code>minor</code> and <code>patch</code> updates together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"all non-major dependencies\",\n      \"groupSlug\": \"all-minor-patch\",\n      \"matchPackageNames\": [\n        \"*\"\n      ],\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapiplatform","title":"group:apiPlatform","text":"<p>Group PHP API Platform packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"api-platform packages\",\n      \"groupSlug\": \"api-platform\",\n      \"matchDatasources\": [\n        \"packagist\"\n      ],\n      \"matchPackageNames\": [\n        \"api-platform/*\",\n        \"!api-platform/admin-meta\",\n        \"!api-platform/admin-pack\",\n        \"!api-platform/api-pack\",\n        \"!api-platform/api-platform\",\n        \"!api-platform/parameter-validator\",\n        \"!api-platform/postman-collection-generator\",\n        \"!api-platform/schema-generator\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupatlaskit","title":"group:atlaskit","text":"<p>Group all Atlassian <code>@atlaskit</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:atlaskit\"\n      ],\n      \"groupName\": \"Atlassian Atlaskit packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcodemirror","title":"group:codemirror","text":"<p>Group CodeMirror packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"CodeMirror\",\n      \"matchPackageNames\": [\n        \"@codemirror/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdefinitelytyped","title":"group:definitelyTyped","text":"<p>Group all <code>@types</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"definitelyTyped\",\n      \"matchPackageNames\": [\n        \"@types/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnetcore","title":"group:dotNetCore","text":"<p>.NET Core Docker containers.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \".NET Core Docker containers\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"mcr.microsoft.com/dotnet/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdrupal-core","title":"group:drupal-core","text":"<p>Group Drupal core updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Drupal core\",\n      \"matchPackageNames\": [\n        \"drupal/core\",\n        \"drupal/core-*\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupflyway","title":"group:flyway","text":"<p>Group Java Flyway packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"flyway\",\n      \"matchPackageNames\": [\n        \"org.flywaydb:*\",\n        \"org.flywaydb.flyway:*\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfortawesome","title":"group:fortawesome","text":"<p>Group all packages by Font Awesome together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Font Awesome\",\n      \"matchPackageNames\": [\n        \"@fortawesome/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfusionjs","title":"group:fusionjs","text":"<p>Group Fusion.js packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Fusion.js packages\",\n      \"matchPackageNames\": [\n        \"fusion-cli\",\n        \"fusion-core\",\n        \"fusion-test-utils\",\n        \"fusion-tokens\",\n        \"fusion-plugin-**\",\n        \"fusion-react**\",\n        \"fusion-apollo**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgithubartifactactions","title":"group:githubArtifactActions","text":"<p>Group <code>download-artifact</code> and <code>upload-artifact</code> major updates together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"GitHub Artifact Actions\",\n      \"matchManagers\": [\n        \"github-actions\"\n      ],\n      \"matchPackageNames\": [\n        \"actions/download-artifact\",\n        \"actions/upload-artifact\"\n      ],\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupglimmer","title":"group:glimmer","text":"<p>Group Glimmer.js packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Glimmer.js packages\",\n      \"groupSlug\": \"glimmer\",\n      \"matchPackageNames\": [\n        \"@glimmer/component\",\n        \"@glimmer/tracking\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgoogleapis","title":"group:googleapis","text":"<p>Group <code>googleapis</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:googleapis\"\n      ],\n      \"groupName\": \"googleapis packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgoopenapi","title":"group:goOpenapi","text":"<p>Group <code>go-openapi</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"go-openapi packages\",\n      \"groupSlug\": \"go-openapi\",\n      \"matchDatasources\": [\n        \"go\"\n      ],\n      \"matchPackageNames\": [\n        \"github.com/go-openapi/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgradle","title":"group:gradle","text":"<p>Group anything that looks like Gradle together so that it's updated together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"commitMessageTopic\": \"Gradle\",\n      \"matchDatasources\": [\n        \"docker\",\n        \"gradle-version\"\n      ],\n      \"matchPackageNames\": [\n        \"/(?:^|/)gradle$/\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatecommons","title":"group:hibernateCommons","text":"<p>Group Java Hibernate Commons packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"hibernate commons\",\n      \"matchPackageNames\": [\n        \"org.hibernate.common:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatecore","title":"group:hibernateCore","text":"<p>Group Java Hibernate Core packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"hibernate core\",\n      \"matchPackageNames\": [\n        \"org.hibernate:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernateogm","title":"group:hibernateOgm","text":"<p>Group Java Hibernate OGM packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"hibernate ogm\",\n      \"matchPackageNames\": [\n        \"org.hibernate.ogm:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatevalidator","title":"group:hibernateValidator","text":"<p>Group Java Hibernate Validator packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"hibernate validator\",\n      \"matchPackageNames\": [\n        \"org.hibernate.validator:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupilluminate","title":"group:illuminate","text":"<p>Group PHP Illuminate packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"illuminate packages\",\n      \"groupSlug\": \"illuminate\",\n      \"matchPackageNames\": [\n        \"illuminate/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjekyllecosystem","title":"group:jekyllEcosystem","text":"<p>Group Jekyll and related Ruby packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"jekyll ecosystem packages\",\n      \"matchSourceUrls\": [\n        \"https://github.com/jekyll/**\",\n        \"https://github.com/github/pages-gem**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjestplustsjest","title":"group:jestPlusTSJest","text":"<p>Add <code>ts-jest</code> <code>major</code> update to Jest monorepo.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"jest monorepo\",\n      \"matchSourceUrls\": [\n        \"https://github.com/kulshekhar/ts-jest\"\n      ],\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjestplustypes","title":"group:jestPlusTypes","text":"<p>Add <code>@types/jest</code> update to Jest monorepo.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"jest monorepo\",\n      \"matchPackageNames\": [\n        \"@types/jest\"\n      ],\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjstest","title":"group:jsTest","text":"<p>Group JS test packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:jsTest\"\n      ],\n      \"groupName\": \"JS test packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjstestnonmajor","title":"group:jsTestNonMajor","text":"<p>Group non-major JS test package updates together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:jsTest\"\n      ],\n      \"groupName\": \"JS test packages\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjsunittest","title":"group:jsUnitTest","text":"<p>Group JavaScript unit test packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:jsUnitTest\"\n      ],\n      \"groupName\": \"JS unit test packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjsunittestnonmajor","title":"group:jsUnitTestNonMajor","text":"<p>Group JavaScipt unit test packages together for non-major updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:jsUnitTest\"\n      ],\n      \"groupName\": \"JS unit test packages\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjwtframework","title":"group:jwtFramework","text":"<p>Group JWT Framework packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"JWT Framework packages\",\n      \"matchDatasources\": [\n        \"packagist\"\n      ],\n      \"matchPackageNames\": [\n        \"web-token/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkubernetes","title":"group:kubernetes","text":"<p>Group Kubernetes packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"kubernetes packages\",\n      \"groupSlug\": \"kubernetes-go\",\n      \"matchDatasources\": [\n        \"go\"\n      ],\n      \"matchPackageNames\": [\n        \"k8s.io/api**\",\n        \"k8s.io/apiextensions-apiserver**\",\n        \"k8s.io/apimachinery**\",\n        \"k8s.io/apiserver**\",\n        \"k8s.io/cli-runtime**\",\n        \"k8s.io/client-go**\",\n        \"k8s.io/cloud-provider**\",\n        \"k8s.io/cluster-bootstrap**\",\n        \"k8s.io/code-generator**\",\n        \"k8s.io/component-base**\",\n        \"k8s.io/component-helpers**\",\n        \"k8s.io/controller-manager**\",\n        \"k8s.io/cri-api**\",\n        \"k8s.io/csi-translation-lib**\",\n        \"k8s.io/kube-aggregator**\",\n        \"k8s.io/kube-controller-manager**\",\n        \"k8s.io/kube-proxy**\",\n        \"k8s.io/kube-scheduler**\",\n        \"k8s.io/kubectl**\",\n        \"k8s.io/kubelet**\",\n        \"k8s.io/legacy-cloud-providers**\",\n        \"k8s.io/metrics**\",\n        \"k8s.io/mount-utils**\",\n        \"k8s.io/pod-security-admission**\",\n        \"k8s.io/sample-apiserver**\",\n        \"k8s.io/sample-cli-plugin**\",\n        \"k8s.io/sample-controller**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplinters","title":"group:linters","text":"<p>Group various lint packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:linters\"\n      ],\n      \"groupName\": \"linters\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmicrometer","title":"group:micrometer","text":"<p>Group Micrometer packages together, e.g. 'io.micrometer:micrometer-core'.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"micrometer\",\n      \"matchPackageNames\": [\n        \"io.micrometer:micrometer-**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnodejs","title":"group:nodeJs","text":"<p>Group anything that looks like Node.js together so that it's updated together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"commitMessageTopic\": \"Node.js\",\n      \"matchDatasources\": [\n        \"docker\",\n        \"node-version\"\n      ],\n      \"matchPackageNames\": [\n        \"/(?:^|/)node$/\",\n        \"!calico/node\",\n        \"!docker.io/calico/node\",\n        \"!ghcr.io/devcontainers/features/node\",\n        \"!kindest/node\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupphpstan","title":"group:phpstan","text":"<p>Group PHPStan packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"PHPStan packages\",\n      \"matchDatasources\": [\n        \"packagist\"\n      ],\n      \"matchPackageNames\": [\n        \"phpstan/phpstan\",\n        \"//phpstan-/\",\n        \"//larastan/\",\n        \"phpstan/extension-installer\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppolymer","title":"group:polymer","text":"<p>Group all <code>@polymer</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"polymer packages\",\n      \"matchPackageNames\": [\n        \"@polymer/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppostcss","title":"group:postcss","text":"<p>Group PostCSS packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:postcss\"\n      ],\n      \"groupName\": \"postcss packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppulumi","title":"group:pulumi","text":"<p>Group Pulumi packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Group Pulumi Node.JS packages together.\",\n      \"groupName\": \"Pulumi\",\n      \"groupSlug\": \"pulumi-node\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@pulumi/**\"\n      ]\n    },\n    {\n      \"description\": \"Group Pulumi Python packages together.\",\n      \"groupName\": \"Pulumi\",\n      \"groupSlug\": \"pulumi-python\",\n      \"matchDatasources\": [\n        \"pypi\"\n      ],\n      \"matchPackageNames\": [\n        \"pulumi-**\"\n      ]\n    },\n    {\n      \"description\": \"Group Pulumi Go packages together.\",\n      \"groupName\": \"Pulumi\",\n      \"groupSlug\": \"pulumi-go\",\n      \"matchDatasources\": [\n        \"go\"\n      ],\n      \"matchPackageNames\": [\n        \"github.com/pulumi/**\"\n      ]\n    },\n    {\n      \"description\": \"Group Pulumi Java packages together.\",\n      \"groupName\": \"Pulumi\",\n      \"groupSlug\": \"pulumi-java\",\n      \"matchDatasources\": [\n        \"maven\"\n      ],\n      \"matchPackageNames\": [\n        \"com.pulumi**\"\n      ]\n    },\n    {\n      \"description\": \"Group Pulumi .NET packages together.\",\n      \"groupName\": \"Pulumi\",\n      \"groupSlug\": \"pulumi-dotnet\",\n      \"matchDatasources\": [\n        \"nuget\"\n      ],\n      \"matchPackageNames\": [\n        \"Pulumi**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppuppeteer","title":"group:puppeteer","text":"<p>Group Puppeteer packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Puppeteer\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"puppeteer\",\n        \"puppeteer-core\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact","title":"group:react","text":"<p>Group React and corresponding <code>@types</code> packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"react monorepo\",\n      \"matchPackageNames\": [\n        \"@types/react\",\n        \"@types/react-dom\",\n        \"@types/react-is\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprecommended","title":"group:recommended","text":"<p>Use curated list of recommended non-monorepo package groupings.</p> <pre><code>{\n  \"extends\": [\n    \"group:nodeJs\",\n    \"group:allApollographql\",\n    \"group:apiPlatform\",\n    \"group:codemirror\",\n    \"group:flyway\",\n    \"group:fortawesome\",\n    \"group:fusionjs\",\n    \"group:githubArtifactActions\",\n    \"group:glimmer\",\n    \"group:goOpenapi\",\n    \"group:gradle\",\n    \"group:hibernateCore\",\n    \"group:hibernateValidator\",\n    \"group:hibernateOgm\",\n    \"group:hibernateCommons\",\n    \"group:illuminate\",\n    \"group:jekyllEcosystem\",\n    \"group:jestPlusTSJest\",\n    \"group:jestPlusTypes\",\n    \"group:jwtFramework\",\n    \"group:kubernetes\",\n    \"group:micrometer\",\n    \"group:phpstan\",\n    \"group:polymer\",\n    \"group:puppeteer\",\n    \"group:react\",\n    \"group:remark\",\n    \"group:resilience4j\",\n    \"group:rubyOnRails\",\n    \"group:rubyOmniauth\",\n    \"group:socketio\",\n    \"group:springAmqp\",\n    \"group:springAndroid\",\n    \"group:springBatch\",\n    \"group:springBoot\",\n    \"group:springCloud\",\n    \"group:springCore\",\n    \"group:springData\",\n    \"group:springHateoas\",\n    \"group:springIntegration\",\n    \"group:springKafka\",\n    \"group:springLdap\",\n    \"group:springMobile\",\n    \"group:springOsgi\",\n    \"group:springRestDocs\",\n    \"group:springRoo\",\n    \"group:springScala\",\n    \"group:springSecurity\",\n    \"group:springSession\",\n    \"group:springShell\",\n    \"group:springSocial\",\n    \"group:springStatemachine\",\n    \"group:springWebflow\",\n    \"group:springWs\",\n    \"group:symfony\"\n  ],\n  \"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-group/#groupremark","title":"group:remark","text":"<p>Group remark packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"remark\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchSourceUrls\": [\n        \"https://github.com/remarkjs/**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupresilience4j","title":"group:resilience4j","text":"<p>Group Java Resilience4j packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"resilience4j\",\n      \"matchPackageNames\": [\n        \"io.github.resilience4j:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprubyomniauth","title":"group:rubyOmniauth","text":"<p>Group OmniAuth packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"omniauth packages\",\n      \"matchDatasources\": [\n        \"rubygems\"\n      ],\n      \"matchPackageNames\": [\n        \"omniauth**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprubyonrails","title":"group:rubyOnRails","text":"<p>Group Ruby on Rails packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"Ruby on Rails packages\",\n      \"matchDatasources\": [\n        \"rubygems\"\n      ],\n      \"matchPackageNames\": [\n        \"actioncable\",\n        \"actionmailbox\",\n        \"actionmailer\",\n        \"actionpack\",\n        \"actiontext\",\n        \"actionview\",\n        \"activejob\",\n        \"activemodel\",\n        \"activerecord\",\n        \"activestorage\",\n        \"activesupport\",\n        \"railties\",\n        \"rails\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsocketio","title":"group:socketio","text":"<p>Group socket.io packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"socket.io packages\",\n      \"matchPackageNames\": [\n        \"socket.io**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringamqp","title":"group:springAmqp","text":"<p>Group Java Spring AMQP packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring amqp\",\n      \"matchPackageNames\": [\n        \"org.springframework.amqp:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringandroid","title":"group:springAndroid","text":"<p>Group Java Spring Android packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring android\",\n      \"matchPackageNames\": [\n        \"org.springframework.android:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringbatch","title":"group:springBatch","text":"<p>Group Java Spring Batch packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring batch\",\n      \"matchPackageNames\": [\n        \"org.springframework.batch:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringboot","title":"group:springBoot","text":"<p>Group Java Spring Boot packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring boot\",\n      \"matchDepNames\": [\n        \"org.springframework.boot\"\n      ]\n    },\n    {\n      \"groupName\": \"spring boot\",\n      \"matchPackageNames\": [\n        \"org.springframework.boot:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringcloud","title":"group:springCloud","text":"<p>Group Java Spring Cloud packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring cloud\",\n      \"matchPackageNames\": [\n        \"org.springframework.cloud:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringcore","title":"group:springCore","text":"<p>Group Java Spring Core packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring core\",\n      \"matchPackageNames\": [\n        \"org.springframework:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringdata","title":"group:springData","text":"<p>Group Java Spring Data packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring data\",\n      \"matchPackageNames\": [\n        \"org.springframework.data:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringhateoas","title":"group:springHateoas","text":"<p>Group Java Spring HATEOAS packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring hateoas\",\n      \"matchPackageNames\": [\n        \"org.springframework.hateoas:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringintegration","title":"group:springIntegration","text":"<p>Group Java Spring Integration packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring integration\",\n      \"matchPackageNames\": [\n        \"org.springframework.integration:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringkafka","title":"group:springKafka","text":"<p>Group Java Spring Kafka packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring kafka\",\n      \"matchPackageNames\": [\n        \"org.springframework.kafka:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringldap","title":"group:springLdap","text":"<p>Group Java Spring LDAP packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring ldap\",\n      \"matchPackageNames\": [\n        \"org.springframework.ldap:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringmobile","title":"group:springMobile","text":"<p>Group Java Spring Mobile packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring mobile\",\n      \"matchPackageNames\": [\n        \"org.springframework.mobile:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringosgi","title":"group:springOsgi","text":"<p>Group Java Spring OSGi packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring osgi\",\n      \"matchPackageNames\": [\n        \"org.springframework.osgi:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringrestdocs","title":"group:springRestDocs","text":"<p>Group Java Spring REST Docs packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring restdocs\",\n      \"matchPackageNames\": [\n        \"org.springframework.restdocs:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringroo","title":"group:springRoo","text":"<p>Group Java Spring Roo packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring roo\",\n      \"matchPackageNames\": [\n        \"org.springframework.roo:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringscala","title":"group:springScala","text":"<p>Group Java Spring Scala packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring scala\",\n      \"matchPackageNames\": [\n        \"org.springframework.scala:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsecurity","title":"group:springSecurity","text":"<p>Group Java Spring Security packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring security\",\n      \"matchPackageNames\": [\n        \"org.springframework.security:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsession","title":"group:springSession","text":"<p>Group Java Spring Session packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring session\",\n      \"matchPackageNames\": [\n        \"org.springframework.session:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringshell","title":"group:springShell","text":"<p>Group Java Spring Shell packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring shell\",\n      \"matchPackageNames\": [\n        \"org.springframework.shell:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsocial","title":"group:springSocial","text":"<p>Group Java Spring Social packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring social\",\n      \"matchPackageNames\": [\n        \"org.springframework.social:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringstatemachine","title":"group:springStatemachine","text":"<p>Group Java Spring Statemachine packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring statemachine\",\n      \"matchPackageNames\": [\n        \"org.springframework.statemachine:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringwebflow","title":"group:springWebflow","text":"<p>Group Java Spring WebFlow packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring webflow\",\n      \"matchPackageNames\": [\n        \"org.springframework.webflow:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringws","title":"group:springWs","text":"<p>Group Java Spring WS packages.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"spring ws\",\n      \"matchPackageNames\": [\n        \"org.springframework.ws:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsymfony","title":"group:symfony","text":"<p>Group PHP Symfony packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"groupName\": \"symfony packages\",\n      \"groupSlug\": \"symfony\",\n      \"matchDatasources\": [\n        \"packagist\"\n      ],\n      \"matchPackageNames\": [\n        \"symfony/*\",\n        \"!symfony/*contracts\",\n        \"!symfony/*pack\",\n        \"!symfony/flex\",\n        \"!symfony/maker-bundle\",\n        \"!symfony/monolog-bundle\",\n        \"!symfony/panther\",\n        \"!symfony/polyfill*\",\n        \"!symfony/proxy-manager-bridge\",\n        \"!symfony/security-guard\",\n        \"!symfony/stimulus-bundle\",\n        \"!symfony/templating\",\n        \"!symfony/thanks\",\n        \"!symfony/ux*\",\n        \"!symfony/webpack-encore-bundle\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptest","title":"group:test","text":"<p>Group all test packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:test\"\n      ],\n      \"groupName\": \"test packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptestnonmajor","title":"group:testNonMajor","text":"<p>Group all non-major test package updates together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:test\"\n      ],\n      \"groupName\": \"test packages\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupunittest","title":"group:unitTest","text":"<p>Group all unit test packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:unitTest\"\n      ],\n      \"groupName\": \"unit test packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupunittestnonmajor","title":"group:unitTestNonMajor","text":"<p>Group all unit test packages together for non-major updates.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:unitTest\"\n      ],\n      \"groupName\": \"unit test packages\",\n      \"matchUpdateTypes\": [\n        \"minor\",\n        \"patch\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvite","title":"group:vite","text":"<p>Group all Vite related packages together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"packages:vite\"\n      ],\n      \"groupName\": \"Vite packages\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaccountsmonorepo","title":"group:accountsMonorepo","text":"<p>Group packages from accounts monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:accounts\"\n      ],\n      \"groupName\": \"accounts monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupacotmonorepo","title":"group:acotMonorepo","text":"<p>Group packages from acot monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:acot\"\n      ],\n      \"groupName\": \"acot monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupag-gridmonorepo","title":"group:ag-gridMonorepo","text":"<p>Group packages from ag-grid monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ag-grid\"\n      ],\n      \"groupName\": \"ag-grid monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupalgolia-instantsearchmonorepo","title":"group:algolia-instantsearchMonorepo","text":"<p>Group packages from algolia-instantsearch monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:algolia-instantsearch\"\n      ],\n      \"groupName\": \"algolia-instantsearch monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupalgolia-react-instantsearchmonorepo","title":"group:algolia-react-instantsearchMonorepo","text":"<p>Group packages from algolia-react-instantsearch monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:algolia-react-instantsearch\"\n      ],\n      \"groupName\": \"algolia-react-instantsearch monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupalgoliasearch-autocompletemonorepo","title":"group:algoliasearch-autocompleteMonorepo","text":"<p>Group packages from algoliasearch-autocomplete monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:algoliasearch-autocomplete\"\n      ],\n      \"groupName\": \"algoliasearch-autocomplete monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupalgoliasearch-client-javascriptmonorepo","title":"group:algoliasearch-client-javascriptMonorepo","text":"<p>Group packages from algoliasearch-client-javascript monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:algoliasearch-client-javascript\"\n      ],\n      \"groupName\": \"algoliasearch-client-javascript monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupanalogmonorepo","title":"group:analogMonorepo","text":"<p>Group packages from analog monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:analog\"\n      ],\n      \"groupName\": \"analog monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangularmonorepo","title":"group:angularMonorepo","text":"<p>Group packages from angular monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angular\"\n      ],\n      \"groupName\": \"angular monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangular-climonorepo","title":"group:angular-cliMonorepo","text":"<p>Group packages from angular-cli monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angular-cli\"\n      ],\n      \"groupName\": \"angular-cli monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangular-eslintmonorepo","title":"group:angular-eslintMonorepo","text":"<p>Group packages from angular-eslint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angular-eslint\"\n      ],\n      \"groupName\": \"angular-eslint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangularfiremonorepo","title":"group:angularfireMonorepo","text":"<p>Group packages from angularfire monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angularfire\"\n      ],\n      \"groupName\": \"angularfire monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangularjsmonorepo","title":"group:angularjsMonorepo","text":"<p>Group packages from angularjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angularjs\"\n      ],\n      \"groupName\": \"angularjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapache-lucenemonorepo","title":"group:apache-luceneMonorepo","text":"<p>Group packages from apache-lucene monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:apache-lucene\"\n      ],\n      \"groupName\": \"apache-lucene monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapollo-servermonorepo","title":"group:apollo-serverMonorepo","text":"<p>Group packages from apollo-server monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:apollo-server\"\n      ],\n      \"groupName\": \"apollo-server monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapolloclientmonorepo","title":"group:apolloclientMonorepo","text":"<p>Group packages from apolloclient monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:apolloclient\"\n      ],\n      \"groupName\": \"apolloclient monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapplicationinsights-dotnetmonorepo","title":"group:applicationinsights-dotnetMonorepo","text":"<p>Group packages from applicationinsights-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:applicationinsights-dotnet\"\n      ],\n      \"groupName\": \"applicationinsights-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusbackground-jobsmonorepo","title":"group:arcus.background-jobsMonorepo","text":"<p>Group packages from arcus.background-jobs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.background-jobs\"\n      ],\n      \"groupName\": \"arcus.background-jobs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusevent-gridmonorepo","title":"group:arcus.event-gridMonorepo","text":"<p>Group packages from arcus.event-grid monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.event-grid\"\n      ],\n      \"groupName\": \"arcus.event-grid monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusmessagingmonorepo","title":"group:arcus.messagingMonorepo","text":"<p>Group packages from arcus.messaging monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.messaging\"\n      ],\n      \"groupName\": \"arcus.messaging monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusobservabilitymonorepo","title":"group:arcus.observabilityMonorepo","text":"<p>Group packages from arcus.observability monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.observability\"\n      ],\n      \"groupName\": \"arcus.observability monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcussecuritymonorepo","title":"group:arcus.securityMonorepo","text":"<p>Group packages from arcus.security monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.security\"\n      ],\n      \"groupName\": \"arcus.security monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparcuswebapimonorepo","title":"group:arcus.webapiMonorepo","text":"<p>Group packages from arcus.webapi monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arcus.webapi\"\n      ],\n      \"groupName\": \"arcus.webapi monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouparrow-ktmonorepo","title":"group:arrow-ktMonorepo","text":"<p>Group packages from arrow-kt monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:arrow-kt\"\n      ],\n      \"groupName\": \"arrow-kt monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspiremonorepo","title":"group:aspireMonorepo","text":"<p>Group packages from aspire monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspire\"\n      ],\n      \"groupName\": \"aspire monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-aspnetwebstackmonorepo","title":"group:aspnet aspnetwebstackMonorepo","text":"<p>Group packages from aspnet aspnetwebstack monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspnet aspnetwebstack\"\n      ],\n      \"groupName\": \"aspnet aspnetwebstack monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-extensionsmonorepo","title":"group:aspnet extensionsMonorepo","text":"<p>Group packages from aspnet extensions monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspnet extensions\"\n      ],\n      \"groupName\": \"aspnet extensions monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-api-versioningmonorepo","title":"group:aspnet-api-versioningMonorepo","text":"<p>Group packages from aspnet-api-versioning monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspnet-api-versioning\"\n      ],\n      \"groupName\": \"aspnet-api-versioning monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-health-checksmonorepo","title":"group:aspnet-health-checksMonorepo","text":"<p>Group packages from aspnet-health-checks monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspnet-health-checks\"\n      ],\n      \"groupName\": \"aspnet-health-checks monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-security-oauth-providersmonorepo","title":"group:aspnet-security-oauth-providersMonorepo","text":"<p>Group packages from aspnet-security-oauth-providers monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aspnet-security-oauth-providers\"\n      ],\n      \"groupName\": \"aspnet-security-oauth-providers monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupastromonorepo","title":"group:astroMonorepo","text":"<p>Group packages from astro monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:astro\"\n      ],\n      \"groupName\": \"astro monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupautomonorepo","title":"group:autoMonorepo","text":"<p>Group packages from auto monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:auto\"\n      ],\n      \"groupName\": \"auto monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupautofixturemonorepo","title":"group:autofixtureMonorepo","text":"<p>Group packages from autofixture monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:autofixture\"\n      ],\n      \"groupName\": \"autofixture monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupautomapper-dotnetmonorepo","title":"group:automapper-dotnetMonorepo","text":"<p>Group packages from automapper-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:automapper-dotnet\"\n      ],\n      \"groupName\": \"automapper-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupavaloniamonorepo","title":"group:avaloniaMonorepo","text":"<p>Group packages from avalonia monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:avalonia\"\n      ],\n      \"groupName\": \"avalonia monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-cdkmonorepo","title":"group:aws-cdkMonorepo","text":"<p>Group packages from aws-cdk monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-cdk\"\n      ],\n      \"groupName\": \"aws-cdk monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-lambda-dotnetmonorepo","title":"group:aws-lambda-dotnetMonorepo","text":"<p>Group packages from aws-lambda-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-lambda-dotnet\"\n      ],\n      \"groupName\": \"aws-lambda-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-lambda-powertools-typescriptmonorepo","title":"group:aws-lambda-powertools-typescriptMonorepo","text":"<p>Group packages from aws-lambda-powertools-typescript monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-lambda-powertools-typescript\"\n      ],\n      \"groupName\": \"aws-lambda-powertools-typescript monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-client-mockmonorepo","title":"group:aws-sdk-client-mockMonorepo","text":"<p>Group packages from aws-sdk-client-mock monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-client-mock\"\n      ],\n      \"groupName\": \"aws-sdk-client-mock monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-gomonorepo","title":"group:aws-sdk-goMonorepo","text":"<p>Group packages from aws-sdk-go monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-go\"\n      ],\n      \"groupName\": \"aws-sdk-go monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-go-v2monorepo","title":"group:aws-sdk-go-v2Monorepo","text":"<p>Group packages from aws-sdk-go-v2 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-go-v2\"\n      ],\n      \"groupName\": \"aws-sdk-go-v2 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-js-v3monorepo","title":"group:aws-sdk-js-v3Monorepo","text":"<p>Group packages from aws-sdk-js-v3 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-js-v3\"\n      ],\n      \"groupName\": \"aws-sdk-js-v3 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-netmonorepo","title":"group:aws-sdk-netMonorepo","text":"<p>Group packages from aws-sdk-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-net\"\n      ],\n      \"groupName\": \"aws-sdk-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-rustmonorepo","title":"group:aws-sdk-rustMonorepo","text":"<p>Group packages from aws-sdk-rust monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-sdk-rust\"\n      ],\n      \"groupName\": \"aws-sdk-rust monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupawsappsyncmonorepo","title":"group:awsappsyncMonorepo","text":"<p>Group packages from awsappsync monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:awsappsync\"\n      ],\n      \"groupName\": \"awsappsync monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaxummonorepo","title":"group:axumMonorepo","text":"<p>Group packages from axum monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:axum\"\n      ],\n      \"groupName\": \"axum monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-functions-dotnet-workermonorepo","title":"group:azure-functions-dotnet-workerMonorepo","text":"<p>Group packages from azure-functions-dotnet-worker monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-functions-dotnet-worker\"\n      ],\n      \"groupName\": \"azure-functions-dotnet-worker monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-libraries-for-netmonorepo","title":"group:azure azure-libraries-for-netMonorepo","text":"<p>Group packages from azure azure-libraries-for-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure azure-libraries-for-net\"\n      ],\n      \"groupName\": \"azure azure-libraries-for-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-sdk-for-netmonorepo","title":"group:azure azure-sdk-for-netMonorepo","text":"<p>Group packages from azure azure-sdk-for-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure azure-sdk-for-net\"\n      ],\n      \"groupName\": \"azure azure-sdk-for-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-storage-netmonorepo","title":"group:azure azure-storage-netMonorepo","text":"<p>Group packages from azure azure-storage-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure azure-storage-net\"\n      ],\n      \"groupName\": \"azure azure-storage-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-androidmonorepo","title":"group:azure-ad-microsoft-authentication-library-for-androidMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-android monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-android\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-android monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-dotnetmonorepo","title":"group:azure-ad-microsoft-authentication-library-for-dotnetMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-dotnet\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-gomonorepo","title":"group:azure-ad-microsoft-authentication-library-for-goMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-go monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-go\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-go monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-javamonorepo","title":"group:azure-ad-microsoft-authentication-library-for-javaMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-java monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-java\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-java monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-jsmonorepo","title":"group:azure-ad-microsoft-authentication-library-for-jsMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-js\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-objcmonorepo","title":"group:azure-ad-microsoft-authentication-library-for-objcMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-objc monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-objc\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-objc monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-ad-microsoft-authentication-library-for-pythonmonorepo","title":"group:azure-ad-microsoft-authentication-library-for-pythonMonorepo","text":"<p>Group packages from azure-ad-microsoft-authentication-library-for-python monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-ad-microsoft-authentication-library-for-python\"\n      ],\n      \"groupName\": \"azure-ad-microsoft-authentication-library-for-python monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-androidmonorepo","title":"group:azure-sdk-for-androidMonorepo","text":"<p>Group packages from azure-sdk-for-android monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-android\"\n      ],\n      \"groupName\": \"azure-sdk-for-android monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-cmonorepo","title":"group:azure-sdk-for-cMonorepo","text":"<p>Group packages from azure-sdk-for-c monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-c\"\n      ],\n      \"groupName\": \"azure-sdk-for-c monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-cppmonorepo","title":"group:azure-sdk-for-cppMonorepo","text":"<p>Group packages from azure-sdk-for-cpp monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-cpp\"\n      ],\n      \"groupName\": \"azure-sdk-for-cpp monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-gomonorepo","title":"group:azure-sdk-for-goMonorepo","text":"<p>Group packages from azure-sdk-for-go monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-go\"\n      ],\n      \"groupName\": \"azure-sdk-for-go monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-iosmonorepo","title":"group:azure-sdk-for-iosMonorepo","text":"<p>Group packages from azure-sdk-for-ios monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-ios\"\n      ],\n      \"groupName\": \"azure-sdk-for-ios monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-javamonorepo","title":"group:azure-sdk-for-javaMonorepo","text":"<p>Group packages from azure-sdk-for-java monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-java\"\n      ],\n      \"groupName\": \"azure-sdk-for-java monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-jsmonorepo","title":"group:azure-sdk-for-jsMonorepo","text":"<p>Group packages from azure-sdk-for-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-js\"\n      ],\n      \"groupName\": \"azure-sdk-for-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-pythonmonorepo","title":"group:azure-sdk-for-pythonMonorepo","text":"<p>Group packages from azure-sdk-for-python monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-python\"\n      ],\n      \"groupName\": \"azure-sdk-for-python monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-sdk-for-rustmonorepo","title":"group:azure-sdk-for-rustMonorepo","text":"<p>Group packages from azure-sdk-for-rust monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:azure-sdk-for-rust\"\n      ],\n      \"groupName\": \"azure-sdk-for-rust monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbabelmonorepo","title":"group:babelMonorepo","text":"<p>Group packages from babel monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:babel\"\n      ],\n      \"groupName\": \"babel monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbackstagemonorepo","title":"group:backstageMonorepo","text":"<p>Group packages from backstage monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:backstage\"\n      ],\n      \"groupName\": \"backstage monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbasetmonorepo","title":"group:basetMonorepo","text":"<p>Group packages from baset monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:baset\"\n      ],\n      \"groupName\": \"baset monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbravemonorepo","title":"group:braveMonorepo","text":"<p>Group packages from brave monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:brave\"\n      ],\n      \"groupName\": \"brave monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbugsnag-jsmonorepo","title":"group:bugsnag-jsMonorepo","text":"<p>Group packages from bugsnag-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:bugsnag-js\"\n      ],\n      \"groupName\": \"bugsnag-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcakemonorepo","title":"group:cakeMonorepo","text":"<p>Group packages from cake monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:cake\"\n      ],\n      \"groupName\": \"cake monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcake-issuesmonorepo","title":"group:cake-issuesMonorepo","text":"<p>Group packages from cake-issues monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:cake-issues\"\n      ],\n      \"groupName\": \"cake-issues monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcapacitormonorepo","title":"group:capacitorMonorepo","text":"<p>Group packages from capacitor monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:capacitor\"\n      ],\n      \"groupName\": \"capacitor monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcedarmonorepo","title":"group:cedarMonorepo","text":"<p>Group packages from cedar monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:cedar\"\n      ],\n      \"groupName\": \"cedar monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupchakra-uimonorepo","title":"group:chakra-uiMonorepo","text":"<p>Group packages from chakra-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:chakra-ui\"\n      ],\n      \"groupName\": \"chakra-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupchromelymonorepo","title":"group:chromelyMonorepo","text":"<p>Group packages from chromely monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:chromely\"\n      ],\n      \"groupName\": \"chromely monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcitation-jsmonorepo","title":"group:citation-jsMonorepo","text":"<p>Group packages from citation-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:citation-js\"\n      ],\n      \"groupName\": \"citation-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupckeditormonorepo","title":"group:ckeditorMonorepo","text":"<p>Group packages from ckeditor monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ckeditor\"\n      ],\n      \"groupName\": \"ckeditor monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupclaritymonorepo","title":"group:clarityMonorepo","text":"<p>Group packages from clarity monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:clarity\"\n      ],\n      \"groupName\": \"clarity monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupclearscriptmonorepo","title":"group:clearscriptMonorepo","text":"<p>Group packages from clearscript monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:clearscript\"\n      ],\n      \"groupName\": \"clearscript monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcommitlintmonorepo","title":"group:commitlintMonorepo","text":"<p>Group packages from commitlint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:commitlint\"\n      ],\n      \"groupName\": \"commitlint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcontentful-rich-textmonorepo","title":"group:contentful-rich-textMonorepo","text":"<p>Group packages from contentful-rich-text monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:contentful-rich-text\"\n      ],\n      \"groupName\": \"contentful-rich-text monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupcspellmonorepo","title":"group:cspellMonorepo","text":"<p>Group packages from cspell monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:cspell\"\n      ],\n      \"groupName\": \"cspell monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatadog-browser-sdkmonorepo","title":"group:datadog-browser-sdkMonorepo","text":"<p>Group packages from datadog-browser-sdk monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datadog-browser-sdk\"\n      ],\n      \"groupName\": \"datadog-browser-sdk monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-netmonorepo","title":"group:datatables-netMonorepo","text":"<p>Group packages from datatables-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net\"\n      ],\n      \"groupName\": \"datatables-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-autofillmonorepo","title":"group:datatables-net-autofillMonorepo","text":"<p>Group packages from datatables-net-autofill monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-autofill\"\n      ],\n      \"groupName\": \"datatables-net-autofill monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-buttonsmonorepo","title":"group:datatables-net-buttonsMonorepo","text":"<p>Group packages from datatables-net-buttons monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-buttons\"\n      ],\n      \"groupName\": \"datatables-net-buttons monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-colreordermonorepo","title":"group:datatables-net-colreorderMonorepo","text":"<p>Group packages from datatables-net-colreorder monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-colreorder\"\n      ],\n      \"groupName\": \"datatables-net-colreorder monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-fixedcolumnsmonorepo","title":"group:datatables-net-fixedcolumnsMonorepo","text":"<p>Group packages from datatables-net-fixedcolumns monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-fixedcolumns\"\n      ],\n      \"groupName\": \"datatables-net-fixedcolumns monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-fixedheadermonorepo","title":"group:datatables-net-fixedheaderMonorepo","text":"<p>Group packages from datatables-net-fixedheader monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-fixedheader\"\n      ],\n      \"groupName\": \"datatables-net-fixedheader monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-keytablemonorepo","title":"group:datatables-net-keytableMonorepo","text":"<p>Group packages from datatables-net-keytable monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-keytable\"\n      ],\n      \"groupName\": \"datatables-net-keytable monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-responsivemonorepo","title":"group:datatables-net-responsiveMonorepo","text":"<p>Group packages from datatables-net-responsive monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-responsive\"\n      ],\n      \"groupName\": \"datatables-net-responsive monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-rowgroupmonorepo","title":"group:datatables-net-rowgroupMonorepo","text":"<p>Group packages from datatables-net-rowgroup monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-rowgroup\"\n      ],\n      \"groupName\": \"datatables-net-rowgroup monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-rowreordermonorepo","title":"group:datatables-net-rowreorderMonorepo","text":"<p>Group packages from datatables-net-rowreorder monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-rowreorder\"\n      ],\n      \"groupName\": \"datatables-net-rowreorder monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-scrollermonorepo","title":"group:datatables-net-scrollerMonorepo","text":"<p>Group packages from datatables-net-scroller monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-scroller\"\n      ],\n      \"groupName\": \"datatables-net-scroller monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-searchbuildermonorepo","title":"group:datatables-net-searchbuilderMonorepo","text":"<p>Group packages from datatables-net-searchbuilder monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-searchbuilder\"\n      ],\n      \"groupName\": \"datatables-net-searchbuilder monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-searchpanesmonorepo","title":"group:datatables-net-searchpanesMonorepo","text":"<p>Group packages from datatables-net-searchpanes monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-searchpanes\"\n      ],\n      \"groupName\": \"datatables-net-searchpanes monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-selectmonorepo","title":"group:datatables-net-selectMonorepo","text":"<p>Group packages from datatables-net-select monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-select\"\n      ],\n      \"groupName\": \"datatables-net-select monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdatatables-net-staterestoremonorepo","title":"group:datatables-net-staterestoreMonorepo","text":"<p>Group packages from datatables-net-staterestore monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:datatables-net-staterestore\"\n      ],\n      \"groupName\": \"datatables-net-staterestore monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdate-iomonorepo","title":"group:date-ioMonorepo","text":"<p>Group packages from date-io monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:date-io\"\n      ],\n      \"groupName\": \"date-io monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdeck-glmonorepo","title":"group:deck-glMonorepo","text":"<p>Group packages from deck-gl monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:deck-gl\"\n      ],\n      \"groupName\": \"deck-gl monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdenomonorepo","title":"group:denoMonorepo","text":"<p>Group packages from deno monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:deno\"\n      ],\n      \"groupName\": \"deno monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdevextreme-reactivemonorepo","title":"group:devextreme-reactiveMonorepo","text":"<p>Group packages from devextreme-reactive monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:devextreme-reactive\"\n      ],\n      \"groupName\": \"devextreme-reactive monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdnd-kitmonorepo","title":"group:dnd-kitMonorepo","text":"<p>Group packages from dnd-kit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dnd-kit\"\n      ],\n      \"groupName\": \"dnd-kit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdocusaurusmonorepo","title":"group:docusaurusMonorepo","text":"<p>Group packages from docusaurus monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:docusaurus\"\n      ],\n      \"groupName\": \"docusaurus monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdot-swashbucklemonorepo","title":"group:dot-swashbuckleMonorepo","text":"<p>Group packages from dot-swashbuckle monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dot-swashbuckle\"\n      ],\n      \"groupName\": \"dot-swashbuckle monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnetmonorepo","title":"group:dotnetMonorepo","text":"<p>Group packages from dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dotnet\"\n      ],\n      \"groupName\": \"dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-azure-ad-identitymodel-extensionsmonorepo","title":"group:dotnet-azure-ad-identitymodel-extensionsMonorepo","text":"<p>Group packages from dotnet-azure-ad-identitymodel-extensions monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dotnet-azure-ad-identitymodel-extensions\"\n      ],\n      \"groupName\": \"dotnet-azure-ad-identitymodel-extensions monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-azure-ad-microsoft-identity-webmonorepo","title":"group:dotnet-azure-ad-microsoft-identity-webMonorepo","text":"<p>Group packages from dotnet-azure-ad-microsoft-identity-web monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dotnet-azure-ad-microsoft-identity-web\"\n      ],\n      \"groupName\": \"dotnet-azure-ad-microsoft-identity-web monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-wcfmonorepo","title":"group:dotnet-wcfMonorepo","text":"<p>Group packages from dotnet-wcf monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dotnet-wcf\"\n      ],\n      \"groupName\": \"dotnet-wcf monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnetcore-capmonorepo","title":"group:dotnetcore-capMonorepo","text":"<p>Group packages from dotnetcore-cap monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dotnetcore-cap\"\n      ],\n      \"groupName\": \"dotnetcore-cap monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupdropwizardmonorepo","title":"group:dropwizardMonorepo","text":"<p>Group packages from dropwizard monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:dropwizard\"\n      ],\n      \"groupName\": \"dropwizard monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupduende-identityservermonorepo","title":"group:duende-identityserverMonorepo","text":"<p>Group packages from duende-identityserver monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:duende-identityserver\"\n      ],\n      \"groupName\": \"duende-identityserver monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupelastic-apm-agent-rum-jsmonorepo","title":"group:elastic-apm-agent-rum-jsMonorepo","text":"<p>Group packages from elastic-apm-agent-rum-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:elastic-apm-agent-rum-js\"\n      ],\n      \"groupName\": \"elastic-apm-agent-rum-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupelastic-ecs-dotnetmonorepo","title":"group:elastic-ecs-dotnetMonorepo","text":"<p>Group packages from elastic-ecs-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:elastic-ecs-dotnet\"\n      ],\n      \"groupName\": \"elastic-ecs-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupelectron-forgemonorepo","title":"group:electron-forgeMonorepo","text":"<p>Group packages from electron-forge monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:electron-forge\"\n      ],\n      \"groupName\": \"electron-forge monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupember-decoratorsmonorepo","title":"group:ember-decoratorsMonorepo","text":"<p>Group packages from ember-decorators monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ember-decorators\"\n      ],\n      \"groupName\": \"ember-decorators monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupembla-carouselmonorepo","title":"group:embla-carouselMonorepo","text":"<p>Group packages from embla-carousel monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:embla-carousel\"\n      ],\n      \"groupName\": \"embla-carousel monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupemojibasemonorepo","title":"group:emojibaseMonorepo","text":"<p>Group packages from emojibase monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:emojibase\"\n      ],\n      \"groupName\": \"emojibase monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupemotionmonorepo","title":"group:emotionMonorepo","text":"<p>Group packages from emotion monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:emotion\"\n      ],\n      \"groupName\": \"emotion monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupenumeratummonorepo","title":"group:enumeratumMonorepo","text":"<p>Group packages from enumeratum monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:enumeratum\"\n      ],\n      \"groupName\": \"enumeratum monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupenvelopmonorepo","title":"group:envelopMonorepo","text":"<p>Group packages from envelop monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:envelop\"\n      ],\n      \"groupName\": \"envelop monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupeslintmonorepo","title":"group:eslintMonorepo","text":"<p>Group packages from eslint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:eslint\"\n      ],\n      \"groupName\": \"eslint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupeslint-config-globexmonorepo","title":"group:eslint-config-globexMonorepo","text":"<p>Group packages from eslint-config-globex monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:eslint-config-globex\"\n      ],\n      \"groupName\": \"eslint-config-globex monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupeslint-stylisticmonorepo","title":"group:eslint-stylisticMonorepo","text":"<p>Group packages from eslint-stylistic monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:eslint-stylistic\"\n      ],\n      \"groupName\": \"eslint-stylistic monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupexpomonorepo","title":"group:expoMonorepo","text":"<p>Group packages from expo monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:expo\"\n      ],\n      \"groupName\": \"expo monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfabric-chaincode-nodemonorepo","title":"group:fabric-chaincode-nodeMonorepo","text":"<p>Group packages from fabric-chaincode-node monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fabric-chaincode-node\"\n      ],\n      \"groupName\": \"fabric-chaincode-node monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfabric8-kubernetes-clientmonorepo","title":"group:fabric8-kubernetes-clientMonorepo","text":"<p>Group packages from fabric8-kubernetes-client monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fabric8-kubernetes-client\"\n      ],\n      \"groupName\": \"fabric8-kubernetes-client monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfaro-web-sdkmonorepo","title":"group:faro-web-sdkMonorepo","text":"<p>Group packages from faro-web-sdk monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:faro-web-sdk\"\n      ],\n      \"groupName\": \"faro-web-sdk monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfastendpointsmonorepo","title":"group:fastendpointsMonorepo","text":"<p>Group packages from fastendpoints monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fastendpoints\"\n      ],\n      \"groupName\": \"fastendpoints monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfeathersmonorepo","title":"group:feathersMonorepo","text":"<p>Group packages from feathers monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:feathers\"\n      ],\n      \"groupName\": \"feathers monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfeaturemanagement-dotnetmonorepo","title":"group:featuremanagement-dotnetMonorepo","text":"<p>Group packages from featuremanagement-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:featuremanagement-dotnet\"\n      ],\n      \"groupName\": \"featuremanagement-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfeignmonorepo","title":"group:feignMonorepo","text":"<p>Group packages from feign monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:feign\"\n      ],\n      \"groupName\": \"feign monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfelamonorepo","title":"group:felaMonorepo","text":"<p>Group packages from fela monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fela\"\n      ],\n      \"groupName\": \"fela monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfimbullintermonorepo","title":"group:fimbullinterMonorepo","text":"<p>Group packages from fimbullinter monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fimbullinter\"\n      ],\n      \"groupName\": \"fimbullinter monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupflippermonorepo","title":"group:flipperMonorepo","text":"<p>Group packages from flipper monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:flipper\"\n      ],\n      \"groupName\": \"flipper monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupflopflipmonorepo","title":"group:flopflipMonorepo","text":"<p>Group packages from flopflip monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:flopflip\"\n      ],\n      \"groupName\": \"flopflip monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfontsourcemonorepo","title":"group:fontsourceMonorepo","text":"<p>Group packages from fontsource monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fontsource\"\n      ],\n      \"groupName\": \"fontsource monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupformatjsmonorepo","title":"group:formatjsMonorepo","text":"<p>Group packages from formatjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:formatjs\"\n      ],\n      \"groupName\": \"formatjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupframework7monorepo","title":"group:framework7Monorepo","text":"<p>Group packages from framework7 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:framework7\"\n      ],\n      \"groupName\": \"framework7 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfunogrammonorepo","title":"group:funogramMonorepo","text":"<p>Group packages from funogram monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:funogram\"\n      ],\n      \"groupName\": \"funogram monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfusioncachemonorepo","title":"group:fusioncacheMonorepo","text":"<p>Group packages from fusioncache monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fusioncache\"\n      ],\n      \"groupName\": \"fusioncache monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgatsbymonorepo","title":"group:gatsbyMonorepo","text":"<p>Group packages from gatsby monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:gatsby\"\n      ],\n      \"groupName\": \"gatsby monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgitbeakermonorepo","title":"group:gitbeakerMonorepo","text":"<p>Group packages from gitbeaker monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:gitbeaker\"\n      ],\n      \"groupName\": \"gitbeaker monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgithub-workflows-ktmonorepo","title":"group:github-workflows-ktMonorepo","text":"<p>Group packages from github-workflows-kt monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:github-workflows-kt\"\n      ],\n      \"groupName\": \"github-workflows-kt monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgo-cloudmonorepo","title":"group:go-cloudMonorepo","text":"<p>Group packages from go-cloud monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:go-cloud\"\n      ],\n      \"groupName\": \"go-cloud monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgomockmonorepo","title":"group:gomockMonorepo","text":"<p>Group packages from gomock monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:gomock\"\n      ],\n      \"groupName\": \"gomock monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgoogle-api-dotnet-clientmonorepo","title":"group:google-api-dotnet-clientMonorepo","text":"<p>Group packages from google-api-dotnet-client monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:google-api-dotnet-client\"\n      ],\n      \"groupName\": \"google-api-dotnet-client monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgrafanamonorepo","title":"group:grafanaMonorepo","text":"<p>Group packages from grafana monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:grafana\"\n      ],\n      \"groupName\": \"grafana monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphiqlmonorepo","title":"group:graphiqlMonorepo","text":"<p>Group packages from graphiql monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphiql\"\n      ],\n      \"groupName\": \"graphiql monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-hive-gatewaymonorepo","title":"group:graphql-hive-gatewayMonorepo","text":"<p>Group packages from graphql-hive-gateway monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphql-hive-gateway\"\n      ],\n      \"groupName\": \"graphql-hive-gateway monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-meshmonorepo","title":"group:graphql-meshMonorepo","text":"<p>Group packages from graphql-mesh monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphql-mesh\"\n      ],\n      \"groupName\": \"graphql-mesh monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-modulesmonorepo","title":"group:graphql-modulesMonorepo","text":"<p>Group packages from graphql-modules monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphql-modules\"\n      ],\n      \"groupName\": \"graphql-modules monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-toolsmonorepo","title":"group:graphql-toolsMonorepo","text":"<p>Group packages from graphql-tools monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphql-tools\"\n      ],\n      \"groupName\": \"graphql-tools monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-yogamonorepo","title":"group:graphql-yogaMonorepo","text":"<p>Group packages from graphql-yoga monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphql-yoga\"\n      ],\n      \"groupName\": \"graphql-yoga monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphqlcodegeneratormonorepo","title":"group:graphqlcodegeneratorMonorepo","text":"<p>Group packages from graphqlcodegenerator monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:graphqlcodegenerator\"\n      ],\n      \"groupName\": \"graphqlcodegenerator monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgreenmailmonorepo","title":"group:greenmailMonorepo","text":"<p>Group packages from greenmail monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:greenmail\"\n      ],\n      \"groupName\": \"greenmail monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgroovymonorepo","title":"group:groovyMonorepo","text":"<p>Group packages from groovy monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:groovy\"\n      ],\n      \"groupName\": \"groovy monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgrpc-dotnetmonorepo","title":"group:grpc-dotnetMonorepo","text":"<p>Group packages from grpc-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:grpc-dotnet\"\n      ],\n      \"groupName\": \"grpc-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgrpc-javamonorepo","title":"group:grpc-javaMonorepo","text":"<p>Group packages from grpc-java monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:grpc-java\"\n      ],\n      \"groupName\": \"grpc-java monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupgstreamer-rustmonorepo","title":"group:gstreamer-rustMonorepo","text":"<p>Group packages from gstreamer-rust monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:gstreamer-rust\"\n      ],\n      \"groupName\": \"gstreamer-rust monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupguavamonorepo","title":"group:guavaMonorepo","text":"<p>Group packages from guava monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:guava\"\n      ],\n      \"groupName\": \"guava monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphappy-dommonorepo","title":"group:happy-domMonorepo","text":"<p>Group packages from happy-dom monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:happy-dom\"\n      ],\n      \"groupName\": \"happy-dom monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphangfiremonorepo","title":"group:HangfireMonorepo","text":"<p>Group packages from Hangfire monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:Hangfire\"\n      ],\n      \"groupName\": \"Hangfire monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernate-modelsmonorepo","title":"group:hibernate-modelsMonorepo","text":"<p>Group packages from hibernate-models monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hibernate-models\"\n      ],\n      \"groupName\": \"hibernate-models monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernate-ormmonorepo","title":"group:hibernate-ormMonorepo","text":"<p>Group packages from hibernate-orm monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hibernate-orm\"\n      ],\n      \"groupName\": \"hibernate-orm monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernate-searchmonorepo","title":"group:hibernate-searchMonorepo","text":"<p>Group packages from hibernate-search monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hibernate-search\"\n      ],\n      \"groupName\": \"hibernate-search monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernate-toolsmonorepo","title":"group:hibernate-toolsMonorepo","text":"<p>Group packages from hibernate-tools monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hibernate-tools\"\n      ],\n      \"groupName\": \"hibernate-tools monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphickory-dnsmonorepo","title":"group:hickory-dnsMonorepo","text":"<p>Group packages from hickory-dns monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hickory-dns\"\n      ],\n      \"groupName\": \"hickory-dns monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphtml-eslintmonorepo","title":"group:html-eslintMonorepo","text":"<p>Group packages from html-eslint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:html-eslint\"\n      ],\n      \"groupName\": \"html-eslint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphumanizermonorepo","title":"group:humanizerMonorepo","text":"<p>Group packages from humanizer monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:humanizer\"\n      ],\n      \"groupName\": \"humanizer monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupimmichmonorepo","title":"group:immichMonorepo","text":"<p>Group packages from immich monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:immich\"\n      ],\n      \"groupName\": \"immich monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupinfrastructure-uimonorepo","title":"group:infrastructure-uiMonorepo","text":"<p>Group packages from infrastructure-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:infrastructure-ui\"\n      ],\n      \"groupName\": \"infrastructure-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupionic-nativemonorepo","title":"group:ionic-nativeMonorepo","text":"<p>Group packages from ionic-native monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ionic-native\"\n      ],\n      \"groupName\": \"ionic-native monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupistanbuljsmonorepo","title":"group:istanbuljsMonorepo","text":"<p>Group packages from istanbuljs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:istanbuljs\"\n      ],\n      \"groupName\": \"istanbuljs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupistiomonorepo","title":"group:istioMonorepo","text":"<p>Group packages from istio monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:istio\"\n      ],\n      \"groupName\": \"istio monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjacksonmonorepo","title":"group:jacksonMonorepo","text":"<p>Group packages from jackson monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jackson\"\n      ],\n      \"groupName\": \"jackson monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjasminemonorepo","title":"group:jasmineMonorepo","text":"<p>Group packages from jasmine monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jasmine\"\n      ],\n      \"groupName\": \"jasmine monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjavafxmonorepo","title":"group:javafxMonorepo","text":"<p>Group packages from javafx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:javafx\"\n      ],\n      \"groupName\": \"javafx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjavahamcrestmonorepo","title":"group:javahamcrestMonorepo","text":"<p>Group packages from javahamcrest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:javahamcrest\"\n      ],\n      \"groupName\": \"javahamcrest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjavascriptengineswitchermonorepo","title":"group:javascriptengineswitcherMonorepo","text":"<p>Group packages from javascriptengineswitcher monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:javascriptengineswitcher\"\n      ],\n      \"groupName\": \"javascriptengineswitcher monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjaxb-rimonorepo","title":"group:jaxb-riMonorepo","text":"<p>Group packages from jaxb-ri monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jaxb-ri\"\n      ],\n      \"groupName\": \"jaxb-ri monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjerseymonorepo","title":"group:jerseyMonorepo","text":"<p>Group packages from jersey monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jersey\"\n      ],\n      \"groupName\": \"jersey monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjestmonorepo","title":"group:jestMonorepo","text":"<p>Group packages from jest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jest\"\n      ],\n      \"groupName\": \"jest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjettymonorepo","title":"group:jettyMonorepo","text":"<p>Group packages from jetty monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jetty\"\n      ],\n      \"groupName\": \"jetty monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjnamonorepo","title":"group:jnaMonorepo","text":"<p>Group packages from jna monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jna\"\n      ],\n      \"groupName\": \"jna monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjson-smart-v2monorepo","title":"group:json-smart-v2Monorepo","text":"<p>Group packages from json-smart-v2 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:json-smart-v2\"\n      ],\n      \"groupName\": \"json-smart-v2 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjsplumbmonorepo","title":"group:jsplumbMonorepo","text":"<p>Group packages from jsplumb monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:jsplumb\"\n      ],\n      \"groupName\": \"jsplumb monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupjunit-frameworkmonorepo","title":"group:junit-frameworkMonorepo","text":"<p>Group packages from junit-framework monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:junit-framework\"\n      ],\n      \"groupName\": \"junit-framework monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkernelmemorymonorepo","title":"group:kernelmemoryMonorepo","text":"<p>Group packages from kernelmemory monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:kernelmemory\"\n      ],\n      \"groupName\": \"kernelmemory monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkiotamonorepo","title":"group:kiotaMonorepo","text":"<p>Group packages from kiota monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:kiota\"\n      ],\n      \"groupName\": \"kiota monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkotlinmonorepo","title":"group:kotlinMonorepo","text":"<p>Group packages from kotlin monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:kotlin\"\n      ],\n      \"groupName\": \"kotlin monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkotlinx-coroutinesmonorepo","title":"group:kotlinx-coroutinesMonorepo","text":"<p>Group packages from kotlinx-coroutines monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:kotlinx-coroutines\"\n      ],\n      \"groupName\": \"kotlinx-coroutines monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkrokimonorepo","title":"group:krokiMonorepo","text":"<p>Group packages from kroki monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:kroki\"\n      ],\n      \"groupName\": \"kroki monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupkspmonorepo","title":"group:kspMonorepo","text":"<p>Group packages from ksp monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ksp\"\n      ],\n      \"groupName\": \"ksp monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupktormonorepo","title":"group:ktorMonorepo","text":"<p>Group packages from ktor monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ktor\"\n      ],\n      \"groupName\": \"ktor monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplamarmonorepo","title":"group:lamarMonorepo","text":"<p>Group packages from lamar monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lamar\"\n      ],\n      \"groupName\": \"lamar monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplangchain4jmonorepo","title":"group:langchain4jMonorepo","text":"<p>Group packages from langchain4j monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:langchain4j\"\n      ],\n      \"groupName\": \"langchain4j monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplernamonorepo","title":"group:lernaMonorepo","text":"<p>Group packages from lerna monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lerna\"\n      ],\n      \"groupName\": \"lerna monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplerna-litemonorepo","title":"group:lerna-liteMonorepo","text":"<p>Group packages from lerna-lite monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lerna-lite\"\n      ],\n      \"groupName\": \"lerna-lite monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplexicalmonorepo","title":"group:lexicalMonorepo","text":"<p>Group packages from lexical monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lexical\"\n      ],\n      \"groupName\": \"lexical monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplinguijsmonorepo","title":"group:linguijsMonorepo","text":"<p>Group packages from linguijs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:linguijs\"\n      ],\n      \"groupName\": \"linguijs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplinkifyjsmonorepo","title":"group:linkifyjsMonorepo","text":"<p>Group packages from linkifyjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:linkifyjs\"\n      ],\n      \"groupName\": \"linkifyjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplog4j2monorepo","title":"group:log4j2Monorepo","text":"<p>Group packages from log4j2 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:log4j2\"\n      ],\n      \"groupName\": \"log4j2 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplogbackmonorepo","title":"group:logbackMonorepo","text":"<p>Group packages from logback monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:logback\"\n      ],\n      \"groupName\": \"logback monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouploopbackmonorepo","title":"group:loopbackMonorepo","text":"<p>Group packages from loopback monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:loopback\"\n      ],\n      \"groupName\": \"loopback monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplrnwebcomponentsmonorepo","title":"group:lrnwebcomponentsMonorepo","text":"<p>Group packages from lrnwebcomponents monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lrnwebcomponents\"\n      ],\n      \"groupName\": \"lrnwebcomponents monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplucidemonorepo","title":"group:lucideMonorepo","text":"<p>Group packages from lucide monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lucide\"\n      ],\n      \"groupName\": \"lucide monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmailingmonorepo","title":"group:mailingMonorepo","text":"<p>Group packages from mailing monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mailing\"\n      ],\n      \"groupName\": \"mailing monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmantinemonorepo","title":"group:mantineMonorepo","text":"<p>Group packages from mantine monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mantine\"\n      ],\n      \"groupName\": \"mantine monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmapstructmonorepo","title":"group:mapstructMonorepo","text":"<p>Group packages from mapstruct monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mapstruct\"\n      ],\n      \"groupName\": \"mapstruct monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmartenmonorepo","title":"group:martenMonorepo","text":"<p>Group packages from marten monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:marten\"\n      ],\n      \"groupName\": \"marten monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmasstransitmonorepo","title":"group:masstransitMonorepo","text":"<p>Group packages from masstransit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:masstransit\"\n      ],\n      \"groupName\": \"masstransit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmaterial-components-webmonorepo","title":"group:material-components-webMonorepo","text":"<p>Group packages from material-components-web monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:material-components-web\"\n      ],\n      \"groupName\": \"material-components-web monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmaterial-uimonorepo","title":"group:material-uiMonorepo","text":"<p>Group packages from material-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:material-ui\"\n      ],\n      \"groupName\": \"material-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmdc-reactmonorepo","title":"group:mdc-reactMonorepo","text":"<p>Group packages from mdc-react monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mdc-react\"\n      ],\n      \"groupName\": \"mdc-react monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmdxmonorepo","title":"group:mdxMonorepo","text":"<p>Group packages from mdx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mdx\"\n      ],\n      \"groupName\": \"mdx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmiddy-jsmonorepo","title":"group:middy-jsMonorepo","text":"<p>Group packages from middy-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:middy-js\"\n      ],\n      \"groupName\": \"middy-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmikro-ormmonorepo","title":"group:mikro-ormMonorepo","text":"<p>Group packages from mikro-orm monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mikro-orm\"\n      ],\n      \"groupName\": \"mikro-orm monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupml-dotnetmonorepo","title":"group:ml-dotnetMonorepo","text":"<p>Group packages from ml-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ml-dotnet\"\n      ],\n      \"groupName\": \"ml-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmockitomonorepo","title":"group:mockitoMonorepo","text":"<p>Group packages from mockito monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mockito\"\n      ],\n      \"groupName\": \"mockito monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmongo-csharp-drivermonorepo","title":"group:mongo-csharp-driverMonorepo","text":"<p>Group packages from mongo-csharp-driver monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mongo-csharp-driver\"\n      ],\n      \"groupName\": \"mongo-csharp-driver monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmongo-java-drivermonorepo","title":"group:mongo-java-driverMonorepo","text":"<p>Group packages from mongo-java-driver monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mongo-java-driver\"\n      ],\n      \"groupName\": \"mongo-java-driver monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmstestmonorepo","title":"group:mstestMonorepo","text":"<p>Group packages from mstest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mstest\"\n      ],\n      \"groupName\": \"mstest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmutation-testing-elementsmonorepo","title":"group:mutation-testing-elementsMonorepo","text":"<p>Group packages from mutation-testing-elements monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:mutation-testing-elements\"\n      ],\n      \"groupName\": \"mutation-testing-elements monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnestmonorepo","title":"group:nestMonorepo","text":"<p>Group packages from nest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nest\"\n      ],\n      \"groupName\": \"nest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnest-graphqlmonorepo","title":"group:nest-graphqlMonorepo","text":"<p>Group packages from nest-graphql monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nest-graphql\"\n      ],\n      \"groupName\": \"nest-graphql monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnettymonorepo","title":"group:nettyMonorepo","text":"<p>Group packages from netty monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:netty\"\n      ],\n      \"groupName\": \"netty monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupneutrinomonorepo","title":"group:neutrinoMonorepo","text":"<p>Group packages from neutrino monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:neutrino\"\n      ],\n      \"groupName\": \"neutrino monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnexpectmonorepo","title":"group:nexpectMonorepo","text":"<p>Group packages from nexpect monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nexpect\"\n      ],\n      \"groupName\": \"nexpect monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnextjsmonorepo","title":"group:nextjsMonorepo","text":"<p>Group packages from nextjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nextjs\"\n      ],\n      \"groupName\": \"nextjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnextramonorepo","title":"group:nextraMonorepo","text":"<p>Group packages from nextra monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nextra\"\n      ],\n      \"groupName\": \"nextra monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupngx-cookie-servicemonorepo","title":"group:ngx-cookie-serviceMonorepo","text":"<p>Group packages from ngx-cookie-service monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ngx-cookie-service\"\n      ],\n      \"groupName\": \"ngx-cookie-service monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupngx-formlymonorepo","title":"group:ngx-formlyMonorepo","text":"<p>Group packages from ngx-formly monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ngx-formly\"\n      ],\n      \"groupName\": \"ngx-formly monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupngxs-storemonorepo","title":"group:ngxs-storeMonorepo","text":"<p>Group packages from ngxs-store monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ngxs-store\"\n      ],\n      \"groupName\": \"ngxs-store monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnivomonorepo","title":"group:nivoMonorepo","text":"<p>Group packages from nivo monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nivo\"\n      ],\n      \"groupName\": \"nivo monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnjson-schemamonorepo","title":"group:njson-schemaMonorepo","text":"<p>Group packages from njson-schema monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:njson-schema\"\n      ],\n      \"groupName\": \"njson-schema monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnswagmonorepo","title":"group:nswagMonorepo","text":"<p>Group packages from nswag monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nswag\"\n      ],\n      \"groupName\": \"nswag monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnugetmonorepo","title":"group:nugetMonorepo","text":"<p>Group packages from nuget monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nuget\"\n      ],\n      \"groupName\": \"nuget monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnuke-buildmonorepo","title":"group:nuke-buildMonorepo","text":"<p>Group packages from nuke-build monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nuke-build\"\n      ],\n      \"groupName\": \"nuke-build monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnuxtjsmonorepo","title":"group:nuxtjsMonorepo","text":"<p>Group packages from nuxtjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nuxtjs\"\n      ],\n      \"groupName\": \"nuxtjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupokhttpmonorepo","title":"group:okhttpMonorepo","text":"<p>Group packages from okhttp monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:okhttp\"\n      ],\n      \"groupName\": \"okhttp monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopenapi-dotnetmonorepo","title":"group:openapi-dotnetMonorepo","text":"<p>Group packages from openapi-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:openapi-dotnet\"\n      ],\n      \"groupName\": \"openapi-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopencostmonorepo","title":"group:opencostMonorepo","text":"<p>Group packages from opencost monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opencost\"\n      ],\n      \"groupName\": \"opencost monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopeniddictmonorepo","title":"group:openiddictMonorepo","text":"<p>Group packages from openiddict monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:openiddict\"\n      ],\n      \"groupName\": \"openiddict monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-dotnetmonorepo","title":"group:opentelemetry-dotnetMonorepo","text":"<p>Group packages from opentelemetry-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-dotnet\"\n      ],\n      \"groupName\": \"opentelemetry-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-dotnet-contribmonorepo","title":"group:opentelemetry-dotnet-contribMonorepo","text":"<p>Group packages from opentelemetry-dotnet-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-dotnet-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-dotnet-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-erlangmonorepo","title":"group:opentelemetry-erlangMonorepo","text":"<p>Group packages from opentelemetry-erlang monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-erlang\"\n      ],\n      \"groupName\": \"opentelemetry-erlang monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-erlang-contribmonorepo","title":"group:opentelemetry-erlang-contribMonorepo","text":"<p>Group packages from opentelemetry-erlang-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-erlang-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-erlang-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-gomonorepo","title":"group:opentelemetry-goMonorepo","text":"<p>Group packages from opentelemetry-go monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-go\"\n      ],\n      \"groupName\": \"opentelemetry-go monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-go-contribmonorepo","title":"group:opentelemetry-go-contribMonorepo","text":"<p>Group packages from opentelemetry-go-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-go-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-go-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-javamonorepo","title":"group:opentelemetry-javaMonorepo","text":"<p>Group packages from opentelemetry-java monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-java\"\n      ],\n      \"groupName\": \"opentelemetry-java monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-java-contribmonorepo","title":"group:opentelemetry-java-contribMonorepo","text":"<p>Group packages from opentelemetry-java-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-java-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-java-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-jsmonorepo","title":"group:opentelemetry-jsMonorepo","text":"<p>Group packages from opentelemetry-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-js\"\n      ],\n      \"groupName\": \"opentelemetry-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-js-contribmonorepo","title":"group:opentelemetry-js-contribMonorepo","text":"<p>Group packages from opentelemetry-js-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-js-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-js-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-pythonmonorepo","title":"group:opentelemetry-pythonMonorepo","text":"<p>Group packages from opentelemetry-python monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-python\"\n      ],\n      \"groupName\": \"opentelemetry-python monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-python-contribmonorepo","title":"group:opentelemetry-python-contribMonorepo","text":"<p>Group packages from opentelemetry-python-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-python-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-python-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-rustmonorepo","title":"group:opentelemetry-rustMonorepo","text":"<p>Group packages from opentelemetry-rust monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-rust\"\n      ],\n      \"groupName\": \"opentelemetry-rust monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-rust-contribmonorepo","title":"group:opentelemetry-rust-contribMonorepo","text":"<p>Group packages from opentelemetry-rust-contrib monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:opentelemetry-rust-contrib\"\n      ],\n      \"groupName\": \"opentelemetry-rust-contrib monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouporleansmonorepo","title":"group:orleansMonorepo","text":"<p>Group packages from orleans monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:orleans\"\n      ],\n      \"groupName\": \"orleans monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupoxlintmonorepo","title":"group:oxlintMonorepo","text":"<p>Group packages from oxlint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:oxlint\"\n      ],\n      \"groupName\": \"oxlint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppanda-cssmonorepo","title":"group:panda-cssMonorepo","text":"<p>Group packages from panda-css monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:panda-css\"\n      ],\n      \"groupName\": \"panda-css monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupparcelmonorepo","title":"group:parcelMonorepo","text":"<p>Group packages from parcel monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:parcel\"\n      ],\n      \"groupName\": \"parcel monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppayloadcmsmonorepo","title":"group:payloadcmsMonorepo","text":"<p>Group packages from payloadcms monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:payloadcms\"\n      ],\n      \"groupName\": \"payloadcms monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppdfmemonorepo","title":"group:pdfmeMonorepo","text":"<p>Group packages from pdfme monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pdfme\"\n      ],\n      \"groupName\": \"pdfme monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppercy-climonorepo","title":"group:percy-cliMonorepo","text":"<p>Group packages from percy-cli monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:percy-cli\"\n      ],\n      \"groupName\": \"percy-cli monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppicassojsmonorepo","title":"group:picassojsMonorepo","text":"<p>Group packages from picassojs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:picassojs\"\n      ],\n      \"groupName\": \"picassojs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppixijsmonorepo","title":"group:pixijsMonorepo","text":"<p>Group packages from pixijs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pixijs\"\n      ],\n      \"groupName\": \"pixijs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupplaywrightmonorepo","title":"group:playwrightMonorepo","text":"<p>Group packages from playwright monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:playwright\"\n      ],\n      \"groupName\": \"playwright monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupplaywright-dotnetmonorepo","title":"group:playwright-dotnetMonorepo","text":"<p>Group packages from playwright-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:playwright-dotnet\"\n      ],\n      \"groupName\": \"playwright-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppnpcoremonorepo","title":"group:pnpcoreMonorepo","text":"<p>Group packages from pnpcore monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pnpcore\"\n      ],\n      \"groupName\": \"pnpcore monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppnpjsmonorepo","title":"group:pnpjsMonorepo","text":"<p>Group packages from pnpjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pnpjs\"\n      ],\n      \"groupName\": \"pnpjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppollymonorepo","title":"group:pollyMonorepo","text":"<p>Group packages from polly monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:polly\"\n      ],\n      \"groupName\": \"polly monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppollyjsmonorepo","title":"group:pollyjsMonorepo","text":"<p>Group packages from pollyjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pollyjs\"\n      ],\n      \"groupName\": \"pollyjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppothosmonorepo","title":"group:pothosMonorepo","text":"<p>Group packages from pothos monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pothos\"\n      ],\n      \"groupName\": \"pothos monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppouchdbmonorepo","title":"group:pouchdbMonorepo","text":"<p>Group packages from pouchdb monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:pouchdb\"\n      ],\n      \"groupName\": \"pouchdb monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppowermockmonorepo","title":"group:powermockMonorepo","text":"<p>Group packages from powermock monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:powermock\"\n      ],\n      \"groupName\": \"powermock monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupprismamonorepo","title":"group:prismaMonorepo","text":"<p>Group packages from prisma monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:prisma\"\n      ],\n      \"groupName\": \"prisma monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupprometheus-netmonorepo","title":"group:prometheus-netMonorepo","text":"<p>Group packages from prometheus-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:prometheus-net\"\n      ],\n      \"groupName\": \"prometheus-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouppromstermonorepo","title":"group:promsterMonorepo","text":"<p>Group packages from promster monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:promster\"\n      ],\n      \"groupName\": \"promster monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupprotobufmonorepo","title":"group:protobufMonorepo","text":"<p>Group packages from protobuf monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:protobuf\"\n      ],\n      \"groupName\": \"protobuf monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupquartznetmonorepo","title":"group:quartznetMonorepo","text":"<p>Group packages from quartznet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:quartznet\"\n      ],\n      \"groupName\": \"quartznet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupradix-ui-primitivesmonorepo","title":"group:radix-ui-primitivesMonorepo","text":"<p>Group packages from radix-ui-primitives monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:radix-ui-primitives\"\n      ],\n      \"groupName\": \"radix-ui-primitives monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreach-uimonorepo","title":"group:reach-uiMonorepo","text":"<p>Group packages from reach-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:reach-ui\"\n      ],\n      \"groupName\": \"reach-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreactmonorepo","title":"group:reactMonorepo","text":"<p>Group packages from react monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react\"\n      ],\n      \"groupName\": \"react monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-adminmonorepo","title":"group:react-adminMonorepo","text":"<p>Group packages from react-admin monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-admin\"\n      ],\n      \"groupName\": \"react-admin monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-apollomonorepo","title":"group:react-apolloMonorepo","text":"<p>Group packages from react-apollo monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-apollo\"\n      ],\n      \"groupName\": \"react-apollo monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-dndmonorepo","title":"group:react-dndMonorepo","text":"<p>Group packages from react-dnd monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-dnd\"\n      ],\n      \"groupName\": \"react-dnd monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-navigationmonorepo","title":"group:react-navigationMonorepo","text":"<p>Group packages from react-navigation monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-navigation\"\n      ],\n      \"groupName\": \"react-navigation monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-pagemonorepo","title":"group:react-pageMonorepo","text":"<p>Group packages from react-page monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-page\"\n      ],\n      \"groupName\": \"react-page monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-railsmonorepo","title":"group:react-railsMonorepo","text":"<p>Group packages from react-rails monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-rails\"\n      ],\n      \"groupName\": \"react-rails monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-routermonorepo","title":"group:react-routerMonorepo","text":"<p>Group packages from react-router monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-router\"\n      ],\n      \"groupName\": \"react-router monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-spectrummonorepo","title":"group:react-spectrumMonorepo","text":"<p>Group packages from react-spectrum monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-spectrum\"\n      ],\n      \"groupName\": \"react-spectrum monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-springmonorepo","title":"group:react-springMonorepo","text":"<p>Group packages from react-spring monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:react-spring\"\n      ],\n      \"groupName\": \"react-spring monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreactivestack-cookiesmonorepo","title":"group:reactivestack-cookiesMonorepo","text":"<p>Group packages from reactivestack-cookies monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:reactivestack-cookies\"\n      ],\n      \"groupName\": \"reactivestack-cookies monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreakitmonorepo","title":"group:reakitMonorepo","text":"<p>Group packages from reakit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:reakit\"\n      ],\n      \"groupName\": \"reakit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupredwoodmonorepo","title":"group:redwoodMonorepo","text":"<p>Group packages from redwood monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:redwood\"\n      ],\n      \"groupName\": \"redwood monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprefitmonorepo","title":"group:refitMonorepo","text":"<p>Group packages from refit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:refit\"\n      ],\n      \"groupName\": \"refit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupreg-suitmonorepo","title":"group:reg-suitMonorepo","text":"<p>Group packages from reg-suit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:reg-suit\"\n      ],\n      \"groupName\": \"reg-suit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupremarkmonorepo","title":"group:remarkMonorepo","text":"<p>Group packages from remark monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:remark\"\n      ],\n      \"groupName\": \"remark monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupremixmonorepo","title":"group:remixMonorepo","text":"<p>Group packages from remix monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:remix\"\n      ],\n      \"groupName\": \"remix monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupretrofitmonorepo","title":"group:retrofitMonorepo","text":"<p>Group packages from retrofit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:retrofit\"\n      ],\n      \"groupName\": \"retrofit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprivermonorepo","title":"group:riverMonorepo","text":"<p>Group packages from river monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:river\"\n      ],\n      \"groupName\": \"river monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprjsfmonorepo","title":"group:rjsfMonorepo","text":"<p>Group packages from rjsf monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:rjsf\"\n      ],\n      \"groupName\": \"rjsf monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprouter5monorepo","title":"group:router5Monorepo","text":"<p>Group packages from router5 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:router5\"\n      ],\n      \"groupName\": \"router5 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprspackmonorepo","title":"group:rspackMonorepo","text":"<p>Group packages from rspack monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:rspack\"\n      ],\n      \"groupName\": \"rspack monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupruby-on-railsmonorepo","title":"group:ruby-on-railsMonorepo","text":"<p>Group packages from ruby-on-rails monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ruby-on-rails\"\n      ],\n      \"groupName\": \"ruby-on-rails monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprust-analyzermonorepo","title":"group:rust-analyzerMonorepo","text":"<p>Group packages from rust-analyzer monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:rust-analyzer\"\n      ],\n      \"groupName\": \"rust-analyzer monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprust-futuresmonorepo","title":"group:rust-futuresMonorepo","text":"<p>Group packages from rust-futures monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:rust-futures\"\n      ],\n      \"groupName\": \"rust-futures monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprust-wasm-bindgenmonorepo","title":"group:rust-wasm-bindgenMonorepo","text":"<p>Group packages from rust-wasm-bindgen monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:rust-wasm-bindgen\"\n      ],\n      \"groupName\": \"rust-wasm-bindgen monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsanitymonorepo","title":"group:sanityMonorepo","text":"<p>Group packages from sanity monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sanity\"\n      ],\n      \"groupName\": \"sanity monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupserilog-uimonorepo","title":"group:serilog-uiMonorepo","text":"<p>Group packages from serilog-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:serilog-ui\"\n      ],\n      \"groupName\": \"serilog-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupscaffdogmonorepo","title":"group:scaffdogMonorepo","text":"<p>Group packages from scaffdog monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:scaffdog\"\n      ],\n      \"groupName\": \"scaffdog monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupscalarmonorepo","title":"group:scalarMonorepo","text":"<p>Group packages from scalar monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:scalar\"\n      ],\n      \"groupName\": \"scalar monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsea-ormmonorepo","title":"group:sea-ormMonorepo","text":"<p>Group packages from sea-orm monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sea-orm\"\n      ],\n      \"groupName\": \"sea-orm monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsecretlintmonorepo","title":"group:secretlintMonorepo","text":"<p>Group packages from secretlint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:secretlint\"\n      ],\n      \"groupName\": \"secretlint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsendgrid-nodejsmonorepo","title":"group:sendgrid-nodejsMonorepo","text":"<p>Group packages from sendgrid-nodejs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sendgrid-nodejs\"\n      ],\n      \"groupName\": \"sendgrid-nodejs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-dotnetmonorepo","title":"group:sentry-dotnetMonorepo","text":"<p>Group packages from sentry-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sentry-dotnet\"\n      ],\n      \"groupName\": \"sentry-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-javascriptmonorepo","title":"group:sentry-javascriptMonorepo","text":"<p>Group packages from sentry-javascript monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sentry-javascript\"\n      ],\n      \"groupName\": \"sentry-javascript monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-rubymonorepo","title":"group:sentry-rubyMonorepo","text":"<p>Group packages from sentry-ruby monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sentry-ruby\"\n      ],\n      \"groupName\": \"sentry-ruby monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-rustmonorepo","title":"group:sentry-rustMonorepo","text":"<p>Group packages from sentry-rust monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sentry-rust\"\n      ],\n      \"groupName\": \"sentry-rust monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupserdemonorepo","title":"group:serdeMonorepo","text":"<p>Group packages from serde monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:serde\"\n      ],\n      \"groupName\": \"serde monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupserenity-jsmonorepo","title":"group:serenity-jsMonorepo","text":"<p>Group packages from serenity-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:serenity-js\"\n      ],\n      \"groupName\": \"serenity-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupservicestackmonorepo","title":"group:servicestackMonorepo","text":"<p>Group packages from servicestack monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:servicestack\"\n      ],\n      \"groupName\": \"servicestack monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupshedlockmonorepo","title":"group:shedlockMonorepo","text":"<p>Group packages from shedlock monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:shedlock\"\n      ],\n      \"groupName\": \"shedlock monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupshikimonorepo","title":"group:shikiMonorepo","text":"<p>Group packages from shiki monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:shiki\"\n      ],\n      \"groupName\": \"shiki monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupshopify-app-bridgemonorepo","title":"group:shopify-app-bridgeMonorepo","text":"<p>Group packages from shopify-app-bridge monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:shopify-app-bridge\"\n      ],\n      \"groupName\": \"shopify-app-bridge monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsitecore-jssmonorepo","title":"group:sitecore-jssMonorepo","text":"<p>Group packages from sitecore-jss monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:sitecore-jss\"\n      ],\n      \"groupName\": \"sitecore-jss monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupskiasharpmonorepo","title":"group:skiasharpMonorepo","text":"<p>Group packages from skiasharp monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:skiasharp\"\n      ],\n      \"groupName\": \"skiasharp monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupslack-netmonorepo","title":"group:slack-netMonorepo","text":"<p>Group packages from slack-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:slack-net\"\n      ],\n      \"groupName\": \"slack-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupslf4jmonorepo","title":"group:slf4jMonorepo","text":"<p>Group packages from slf4j monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:slf4j\"\n      ],\n      \"groupName\": \"slf4j monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupslim-message-busmonorepo","title":"group:slim-message-busMonorepo","text":"<p>Group packages from slim-message-bus monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:slim-message-bus\"\n      ],\n      \"groupName\": \"slim-message-bus monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspectre-consolemonorepo","title":"group:spectre-consoleMonorepo","text":"<p>Group packages from spectre-console monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:spectre-console\"\n      ],\n      \"groupName\": \"spectre-console monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspringfoxmonorepo","title":"group:springfoxMonorepo","text":"<p>Group packages from springfox monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:springfox\"\n      ],\n      \"groupName\": \"springfox monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstack-exchange-redis-extensionsmonorepo","title":"group:stack-exchange-redis-extensionsMonorepo","text":"<p>Group packages from stack-exchange-redis-extensions monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:stack-exchange-redis-extensions\"\n      ],\n      \"groupName\": \"stack-exchange-redis-extensions monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstatsig-js-clientmonorepo","title":"group:statsig-js-clientMonorepo","text":"<p>Group packages from statsig-js-client monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:statsig-js-client\"\n      ],\n      \"groupName\": \"statsig-js-client monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsteeltoemonorepo","title":"group:steeltoeMonorepo","text":"<p>Group packages from steeltoe monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:steeltoe\"\n      ],\n      \"groupName\": \"steeltoe monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstorybookmonorepo","title":"group:storybookMonorepo","text":"<p>Group packages from storybook monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:storybook\"\n      ],\n      \"groupName\": \"storybook monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstorybook-react-nativemonorepo","title":"group:storybook-react-nativeMonorepo","text":"<p>Group packages from storybook-react-native monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:storybook-react-native\"\n      ],\n      \"groupName\": \"storybook-react-native monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstrapimonorepo","title":"group:strapiMonorepo","text":"<p>Group packages from strapi monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:strapi\"\n      ],\n      \"groupName\": \"strapi monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstrummonorepo","title":"group:strumMonorepo","text":"<p>Group packages from strum monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:strum\"\n      ],\n      \"groupName\": \"strum monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstryker-jsmonorepo","title":"group:stryker-jsMonorepo","text":"<p>Group packages from stryker-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:stryker-js\"\n      ],\n      \"groupName\": \"stryker-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupstylex-swcmonorepo","title":"group:stylex-swcMonorepo","text":"<p>Group packages from stylex-swc monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:stylex-swc\"\n      ],\n      \"groupName\": \"stylex-swc monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsurveyjsmonorepo","title":"group:surveyjsMonorepo","text":"<p>Group packages from surveyjs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:surveyjs\"\n      ],\n      \"groupName\": \"surveyjs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupswashbuckle-aspnetcoremonorepo","title":"group:swashbuckle-aspnetcoreMonorepo","text":"<p>Group packages from swashbuckle-aspnetcore monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:swashbuckle-aspnetcore\"\n      ],\n      \"groupName\": \"swashbuckle-aspnetcore monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsystemioabstractionsmonorepo","title":"group:system.io.abstractionsMonorepo","text":"<p>Group packages from system.io.abstractions monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:system.io.abstractions\"\n      ],\n      \"groupName\": \"system.io.abstractions monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptailwindcssmonorepo","title":"group:tailwindcssMonorepo","text":"<p>Group packages from tailwindcss monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tailwindcss\"\n      ],\n      \"groupName\": \"tailwindcss monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptaiga-uimonorepo","title":"group:taiga-uiMonorepo","text":"<p>Group packages from taiga-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:taiga-ui\"\n      ],\n      \"groupName\": \"taiga-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptamaguimonorepo","title":"group:tamaguiMonorepo","text":"<p>Group packages from tamagui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tamagui\"\n      ],\n      \"groupName\": \"tamagui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-formmonorepo","title":"group:tanstack-formMonorepo","text":"<p>Group packages from tanstack-form monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tanstack-form\"\n      ],\n      \"groupName\": \"tanstack-form monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-querymonorepo","title":"group:tanstack-queryMonorepo","text":"<p>Group packages from tanstack-query monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tanstack-query\"\n      ],\n      \"groupName\": \"tanstack-query monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-routermonorepo","title":"group:tanstack-routerMonorepo","text":"<p>Group packages from tanstack-router monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tanstack-router\"\n      ],\n      \"groupName\": \"tanstack-router monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-tablemonorepo","title":"group:tanstack-tableMonorepo","text":"<p>Group packages from tanstack-table monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tanstack-table\"\n      ],\n      \"groupName\": \"tanstack-table monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-virtualmonorepo","title":"group:tanstack-virtualMonorepo","text":"<p>Group packages from tanstack-virtual monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tanstack-virtual\"\n      ],\n      \"groupName\": \"tanstack-virtual monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptaurimonorepo","title":"group:tauriMonorepo","text":"<p>Group packages from tauri monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tauri\"\n      ],\n      \"groupName\": \"tauri monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptelus-tdsmonorepo","title":"group:telus-tdsMonorepo","text":"<p>Group packages from telus-tds monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:telus-tds\"\n      ],\n      \"groupName\": \"telus-tds monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptelus-tds-coremonorepo","title":"group:telus-tds-coreMonorepo","text":"<p>Group packages from telus-tds-core monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:telus-tds-core\"\n      ],\n      \"groupName\": \"telus-tds-core monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptemporalio-tsmonorepo","title":"group:temporalio-tsMonorepo","text":"<p>Group packages from temporalio-ts monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:temporalio-ts\"\n      ],\n      \"groupName\": \"temporalio-ts monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupterraformmonorepo","title":"group:terraformMonorepo","text":"<p>Group packages from terraform monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:terraform\"\n      ],\n      \"groupName\": \"terraform monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptestcontainers-dotnetmonorepo","title":"group:testcontainers-dotnetMonorepo","text":"<p>Group packages from testcontainers-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:testcontainers-dotnet\"\n      ],\n      \"groupName\": \"testcontainers-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptestcontainers-gomonorepo","title":"group:testcontainers-goMonorepo","text":"<p>Group packages from testcontainers-go monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:testcontainers-go\"\n      ],\n      \"groupName\": \"testcontainers-go monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptestcontainers-javamonorepo","title":"group:testcontainers-javaMonorepo","text":"<p>Group packages from testcontainers-java monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:testcontainers-java\"\n      ],\n      \"groupName\": \"testcontainers-java monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptestcontainers-nodemonorepo","title":"group:testcontainers-nodeMonorepo","text":"<p>Group packages from testcontainers-node monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:testcontainers-node\"\n      ],\n      \"groupName\": \"testcontainers-node monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptheme-uimonorepo","title":"group:theme-uiMonorepo","text":"<p>Group packages from theme-ui monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:theme-ui\"\n      ],\n      \"groupName\": \"theme-ui monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptikamonorepo","title":"group:tikaMonorepo","text":"<p>Group packages from tika monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tika\"\n      ],\n      \"groupName\": \"tika monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptimvirmonorepo","title":"group:timvirMonorepo","text":"<p>Group packages from timvir monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:timvir\"\n      ],\n      \"groupName\": \"timvir monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptiptapmonorepo","title":"group:tiptapMonorepo","text":"<p>Group packages from tiptap monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tiptap\"\n      ],\n      \"groupName\": \"tiptap monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptokio-prostmonorepo","title":"group:tokio-prostMonorepo","text":"<p>Group packages from tokio-prost monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tokio-prost\"\n      ],\n      \"groupName\": \"tokio-prost monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptokio-tracingmonorepo","title":"group:tokio-tracingMonorepo","text":"<p>Group packages from tokio-tracing monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tokio-tracing\"\n      ],\n      \"groupName\": \"tokio-tracing monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptonicmonorepo","title":"group:tonicMonorepo","text":"<p>Group packages from tonic monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tonic\"\n      ],\n      \"groupName\": \"tonic monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptreatmonorepo","title":"group:treatMonorepo","text":"<p>Group packages from treat monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:treat\"\n      ],\n      \"groupName\": \"treat monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptrpcmonorepo","title":"group:trpcMonorepo","text":"<p>Group packages from trpc monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:trpc\"\n      ],\n      \"groupName\": \"trpc monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptrust-dnsmonorepo","title":"group:trust-dnsMonorepo","text":"<p>Group packages from trust-dns monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:trust-dns\"\n      ],\n      \"groupName\": \"trust-dns monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptsoamonorepo","title":"group:tsoaMonorepo","text":"<p>Group packages from tsoa monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:tsoa\"\n      ],\n      \"groupName\": \"tsoa monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupturbomonorepo","title":"group:turboMonorepo","text":"<p>Group packages from turbo monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:turbo\"\n      ],\n      \"groupName\": \"turbo monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupturfmonorepo","title":"group:turfMonorepo","text":"<p>Group packages from turf monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:turf\"\n      ],\n      \"groupName\": \"turf monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptyped-signalrmonorepo","title":"group:typed-signalrMonorepo","text":"<p>Group packages from typed-signalr monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:typed-signalr\"\n      ],\n      \"groupName\": \"typed-signalr monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptypefacesmonorepo","title":"group:typefacesMonorepo","text":"<p>Group packages from typefaces monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:typefaces\"\n      ],\n      \"groupName\": \"typefaces monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptypescript-eslintmonorepo","title":"group:typescript-eslintMonorepo","text":"<p>Group packages from typescript-eslint monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:typescript-eslint\"\n      ],\n      \"groupName\": \"typescript-eslint monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptypography-jsmonorepo","title":"group:typography-jsMonorepo","text":"<p>Group packages from typography-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:typography-js\"\n      ],\n      \"groupName\": \"typography-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupui5-webcomponentsmonorepo","title":"group:ui5-webcomponentsMonorepo","text":"<p>Group packages from ui5-webcomponents monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ui5-webcomponents\"\n      ],\n      \"groupName\": \"ui5-webcomponents monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupunheadmonorepo","title":"group:unheadMonorepo","text":"<p>Group packages from unhead monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:unhead\"\n      ],\n      \"groupName\": \"unhead monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupunocssmonorepo","title":"group:unocssMonorepo","text":"<p>Group packages from unocss monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:unocss\"\n      ],\n      \"groupName\": \"unocss monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupuppymonorepo","title":"group:uppyMonorepo","text":"<p>Group packages from uppy monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:uppy\"\n      ],\n      \"groupName\": \"uppy monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouputoipamonorepo","title":"group:utoipaMonorepo","text":"<p>Group packages from utoipa monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:utoipa\"\n      ],\n      \"groupName\": \"utoipa monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvaadin-hillamonorepo","title":"group:vaadin-hillaMonorepo","text":"<p>Group packages from vaadin-hilla monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vaadin-hilla\"\n      ],\n      \"groupName\": \"vaadin-hilla monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvaadinwebcomponentsmonorepo","title":"group:vaadinWebComponentsMonorepo","text":"<p>Group packages from vaadinWebComponents monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vaadinWebComponents\"\n      ],\n      \"groupName\": \"vaadinWebComponents monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvanilla-extractmonorepo","title":"group:vanilla-extractMonorepo","text":"<p>Group packages from vanilla-extract monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vanilla-extract\"\n      ],\n      \"groupName\": \"vanilla-extract monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvisxmonorepo","title":"group:visxMonorepo","text":"<p>Group packages from visx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:visx\"\n      ],\n      \"groupName\": \"visx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvitestmonorepo","title":"group:vitestMonorepo","text":"<p>Group packages from vitest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vitest\"\n      ],\n      \"groupName\": \"vitest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvstestmonorepo","title":"group:vstestMonorepo","text":"<p>Group packages from vstest monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vstest\"\n      ],\n      \"groupName\": \"vstest monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvuemonorepo","title":"group:vueMonorepo","text":"<p>Group packages from vue monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vue\"\n      ],\n      \"groupName\": \"vue monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvue-climonorepo","title":"group:vue-cliMonorepo","text":"<p>Group packages from vue-cli monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vue-cli\"\n      ],\n      \"groupName\": \"vue-cli monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvuepressmonorepo","title":"group:vuepressMonorepo","text":"<p>Group packages from vuepress monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vuepress\"\n      ],\n      \"groupName\": \"vuepress monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupvueusemonorepo","title":"group:vueuseMonorepo","text":"<p>Group packages from vueuse monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:vueuse\"\n      ],\n      \"groupName\": \"vueuse monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupweaselmonorepo","title":"group:weaselMonorepo","text":"<p>Group packages from weasel monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:weasel\"\n      ],\n      \"groupName\": \"weasel monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupweb3-reactmonorepo","title":"group:web3-reactMonorepo","text":"<p>Group packages from web3-react monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:web3-react\"\n      ],\n      \"groupName\": \"web3-react monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupwebdriveriomonorepo","title":"group:webdriverioMonorepo","text":"<p>Group packages from webdriverio monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:webdriverio\"\n      ],\n      \"groupName\": \"webdriverio monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupwolverinemonorepo","title":"group:wolverineMonorepo","text":"<p>Group packages from wolverine monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:wolverine\"\n      ],\n      \"groupName\": \"wolverine monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupworkboxmonorepo","title":"group:workboxMonorepo","text":"<p>Group packages from workbox monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:workbox\"\n      ],\n      \"groupName\": \"workbox monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupwyw-in-jsmonorepo","title":"group:wyw-in-jsMonorepo","text":"<p>Group packages from wyw-in-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:wyw-in-js\"\n      ],\n      \"groupName\": \"wyw-in-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupxstatemonorepo","title":"group:xstateMonorepo","text":"<p>Group packages from xstate monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:xstate\"\n      ],\n      \"groupName\": \"xstate monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupxtermmonorepo","title":"group:xtermMonorepo","text":"<p>Group packages from xterm monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:xterm\"\n      ],\n      \"groupName\": \"xterm monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupxunit-dotnetmonorepo","title":"group:xunit-dotnetMonorepo","text":"<p>Group packages from xunit-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:xunit-dotnet\"\n      ],\n      \"groupName\": \"xunit-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupyarnmonorepo","title":"group:yarnMonorepo","text":"<p>Group packages from yarn monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:yarn\"\n      ],\n      \"groupName\": \"yarn monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupzag-jsmonorepo","title":"group:zag-jsMonorepo","text":"<p>Group packages from zag-js monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:zag-js\"\n      ],\n      \"groupName\": \"zag-js monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupzxing-netmonorepo","title":"group:zxing-netMonorepo","text":"<p>Group packages from zxing-net monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:zxing-net\"\n      ],\n      \"groupName\": \"zxing-net monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphapijsmonorepo","title":"group:hapijsMonorepo","text":"<p>Group packages from hapijs monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hapijs\"\n      ],\n      \"groupName\": \"hapijs monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouplodashmonorepo","title":"group:lodashMonorepo","text":"<p>Group packages from lodash monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:lodash\"\n      ],\n      \"groupName\": \"lodash monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupngrxmonorepo","title":"group:ngrxMonorepo","text":"<p>Group packages from ngrx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:ngrx\"\n      ],\n      \"groupName\": \"ngrx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupnxmonorepo","title":"group:nxMonorepo","text":"<p>Group packages from nx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:nx\"\n      ],\n      \"groupName\": \"nx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupoctokitmonorepo","title":"group:octokitMonorepo","text":"<p>Group packages from octokit monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:octokit\"\n      ],\n      \"groupName\": \"octokit monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupphp-enqueuemonorepo","title":"group:php-enqueueMonorepo","text":"<p>Group packages from php-enqueue monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:php-enqueue\"\n      ],\n      \"groupName\": \"php-enqueue monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsemantic-releasemonorepo","title":"group:semantic-releaseMonorepo","text":"<p>Group packages from semantic-release monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:semantic-release\"\n      ],\n      \"groupName\": \"semantic-release monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupswcmonorepo","title":"group:swcMonorepo","text":"<p>Group packages from swc monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:swc\"\n      ],\n      \"groupName\": \"swc monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptwigmonorepo","title":"group:twigMonorepo","text":"<p>Group packages from twig monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:twig\"\n      ],\n      \"groupName\": \"twig monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupangularmaterialmonorepo","title":"group:angularmaterialMonorepo","text":"<p>Group packages from angularmaterial monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:angularmaterial\"\n      ],\n      \"groupName\": \"angularmaterial monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapache-camelmonorepo","title":"group:apache-camelMonorepo","text":"<p>Group packages from apache-camel monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:apache-camel\"\n      ],\n      \"groupName\": \"apache-camel monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupapache-poimonorepo","title":"group:apache-poiMonorepo","text":"<p>Group packages from apache-poi monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:apache-poi\"\n      ],\n      \"groupName\": \"apache-poi monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-java-sdkmonorepo","title":"group:aws-java-sdkMonorepo","text":"<p>Group packages from aws-java-sdk monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-java-sdk\"\n      ],\n      \"groupName\": \"aws-java-sdk monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-java-sdk-v2monorepo","title":"group:aws-java-sdk-v2Monorepo","text":"<p>Group packages from aws-java-sdk-v2 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:aws-java-sdk-v2\"\n      ],\n      \"groupName\": \"aws-java-sdk-v2 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupaxis2monorepo","title":"group:axis2Monorepo","text":"<p>Group packages from axis2 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:axis2\"\n      ],\n      \"groupName\": \"axis2 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupbabel6monorepo","title":"group:babel6Monorepo","text":"<p>Group packages from babel6 monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:babel6\"\n      ],\n      \"groupName\": \"babel6 monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupembroidermonorepo","title":"group:embroiderMonorepo","text":"<p>Group packages from embroider monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:embroider\"\n      ],\n      \"groupName\": \"embroider monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupforgemonorepo","title":"group:forgeMonorepo","text":"<p>Group packages from forge monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:forge\"\n      ],\n      \"groupName\": \"forge monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupfullcalendarmonorepo","title":"group:fullcalendarMonorepo","text":"<p>Group packages from fullcalendar monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:fullcalendar\"\n      ],\n      \"groupName\": \"fullcalendar monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouphotchocolatemonorepo","title":"group:hotchocolateMonorepo","text":"<p>Group packages from hotchocolate monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:hotchocolate\"\n      ],\n      \"groupName\": \"hotchocolate monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouporacle-databasemonorepo","title":"group:oracle-databaseMonorepo","text":"<p>Group packages from oracle-database monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:oracle-database\"\n      ],\n      \"groupName\": \"oracle-database monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupprometheus-simpleclientmonorepo","title":"group:prometheus-simpleclientMonorepo","text":"<p>Group packages from prometheus-simpleclient monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:prometheus-simpleclient\"\n      ],\n      \"groupName\": \"prometheus-simpleclient monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouprusshmonorepo","title":"group:russhMonorepo","text":"<p>Group packages from russh monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:russh\"\n      ],\n      \"groupName\": \"russh monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspfxmonorepo","title":"group:spfxMonorepo","text":"<p>Group packages from spfx monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:spfx\"\n      ],\n      \"groupName\": \"spfx monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupspockmonorepo","title":"group:spockMonorepo","text":"<p>Group packages from spock monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:spock\"\n      ],\n      \"groupName\": \"spock monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupsyncfusion-dotnetmonorepo","title":"group:syncfusion-dotnetMonorepo","text":"<p>Group packages from syncfusion-dotnet monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:syncfusion-dotnet\"\n      ],\n      \"groupName\": \"syncfusion-dotnet monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#grouptesting-librarymonorepo","title":"group:testing-libraryMonorepo","text":"<p>Group packages from testing-library monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:testing-library\"\n      ],\n      \"groupName\": \"testing-library monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupwordpressmonorepo","title":"group:wordpressMonorepo","text":"<p>Group packages from wordpress monorepo together.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"monorepo:wordpress\"\n      ],\n      \"groupName\": \"wordpress monorepo\",\n      \"matchUpdateTypes\": [\n        \"digest\",\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-group/#groupmonorepos","title":"group:monorepos","text":"<p>Group known monorepo packages together.</p> <pre><code>{\n  \"extends\": [\n    \"group:accountsMonorepo\",\n    \"group:acotMonorepo\",\n    \"group:ag-gridMonorepo\",\n    \"group:algolia-instantsearchMonorepo\",\n    \"group:algolia-react-instantsearchMonorepo\",\n    \"group:algoliasearch-autocompleteMonorepo\",\n    \"group:algoliasearch-client-javascriptMonorepo\",\n    \"group:analogMonorepo\",\n    \"group:angularMonorepo\",\n    \"group:angular-cliMonorepo\",\n    \"group:angular-eslintMonorepo\",\n    \"group:angularfireMonorepo\",\n    \"group:angularjsMonorepo\",\n    \"group:apache-luceneMonorepo\",\n    \"group:apollo-serverMonorepo\",\n    \"group:apolloclientMonorepo\",\n    \"group:applicationinsights-dotnetMonorepo\",\n    \"group:arcus.background-jobsMonorepo\",\n    \"group:arcus.event-gridMonorepo\",\n    \"group:arcus.messagingMonorepo\",\n    \"group:arcus.observabilityMonorepo\",\n    \"group:arcus.securityMonorepo\",\n    \"group:arcus.webapiMonorepo\",\n    \"group:arrow-ktMonorepo\",\n    \"group:aspireMonorepo\",\n    \"group:aspnet aspnetwebstackMonorepo\",\n    \"group:aspnet extensionsMonorepo\",\n    \"group:aspnet-api-versioningMonorepo\",\n    \"group:aspnet-health-checksMonorepo\",\n    \"group:aspnet-security-oauth-providersMonorepo\",\n    \"group:astroMonorepo\",\n    \"group:autoMonorepo\",\n    \"group:autofixtureMonorepo\",\n    \"group:automapper-dotnetMonorepo\",\n    \"group:avaloniaMonorepo\",\n    \"group:aws-cdkMonorepo\",\n    \"group:aws-lambda-dotnetMonorepo\",\n    \"group:aws-lambda-powertools-typescriptMonorepo\",\n    \"group:aws-sdk-client-mockMonorepo\",\n    \"group:aws-sdk-goMonorepo\",\n    \"group:aws-sdk-go-v2Monorepo\",\n    \"group:aws-sdk-js-v3Monorepo\",\n    \"group:aws-sdk-netMonorepo\",\n    \"group:aws-sdk-rustMonorepo\",\n    \"group:awsappsyncMonorepo\",\n    \"group:axumMonorepo\",\n    \"group:azure-functions-dotnet-workerMonorepo\",\n    \"group:azure azure-libraries-for-netMonorepo\",\n    \"group:azure azure-sdk-for-netMonorepo\",\n    \"group:azure azure-storage-netMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-androidMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-dotnetMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-goMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-javaMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-jsMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-objcMonorepo\",\n    \"group:azure-ad-microsoft-authentication-library-for-pythonMonorepo\",\n    \"group:azure-sdk-for-androidMonorepo\",\n    \"group:azure-sdk-for-cMonorepo\",\n    \"group:azure-sdk-for-cppMonorepo\",\n    \"group:azure-sdk-for-goMonorepo\",\n    \"group:azure-sdk-for-iosMonorepo\",\n    \"group:azure-sdk-for-javaMonorepo\",\n    \"group:azure-sdk-for-jsMonorepo\",\n    \"group:azure-sdk-for-pythonMonorepo\",\n    \"group:azure-sdk-for-rustMonorepo\",\n    \"group:babelMonorepo\",\n    \"group:backstageMonorepo\",\n    \"group:basetMonorepo\",\n    \"group:braveMonorepo\",\n    \"group:bugsnag-jsMonorepo\",\n    \"group:cakeMonorepo\",\n    \"group:cake-issuesMonorepo\",\n    \"group:capacitorMonorepo\",\n    \"group:cedarMonorepo\",\n    \"group:chakra-uiMonorepo\",\n    \"group:chromelyMonorepo\",\n    \"group:citation-jsMonorepo\",\n    \"group:ckeditorMonorepo\",\n    \"group:clarityMonorepo\",\n    \"group:clearscriptMonorepo\",\n    \"group:commitlintMonorepo\",\n    \"group:contentful-rich-textMonorepo\",\n    \"group:cspellMonorepo\",\n    \"group:datadog-browser-sdkMonorepo\",\n    \"group:datatables-netMonorepo\",\n    \"group:datatables-net-autofillMonorepo\",\n    \"group:datatables-net-buttonsMonorepo\",\n    \"group:datatables-net-colreorderMonorepo\",\n    \"group:datatables-net-fixedcolumnsMonorepo\",\n    \"group:datatables-net-fixedheaderMonorepo\",\n    \"group:datatables-net-keytableMonorepo\",\n    \"group:datatables-net-responsiveMonorepo\",\n    \"group:datatables-net-rowgroupMonorepo\",\n    \"group:datatables-net-rowreorderMonorepo\",\n    \"group:datatables-net-scrollerMonorepo\",\n    \"group:datatables-net-searchbuilderMonorepo\",\n    \"group:datatables-net-searchpanesMonorepo\",\n    \"group:datatables-net-selectMonorepo\",\n    \"group:datatables-net-staterestoreMonorepo\",\n    \"group:date-ioMonorepo\",\n    \"group:deck-glMonorepo\",\n    \"group:denoMonorepo\",\n    \"group:devextreme-reactiveMonorepo\",\n    \"group:dnd-kitMonorepo\",\n    \"group:docusaurusMonorepo\",\n    \"group:dot-swashbuckleMonorepo\",\n    \"group:dotnetMonorepo\",\n    \"group:dotnet-azure-ad-identitymodel-extensionsMonorepo\",\n    \"group:dotnet-azure-ad-microsoft-identity-webMonorepo\",\n    \"group:dotnet-wcfMonorepo\",\n    \"group:dotnetcore-capMonorepo\",\n    \"group:dropwizardMonorepo\",\n    \"group:duende-identityserverMonorepo\",\n    \"group:elastic-apm-agent-rum-jsMonorepo\",\n    \"group:elastic-ecs-dotnetMonorepo\",\n    \"group:electron-forgeMonorepo\",\n    \"group:ember-decoratorsMonorepo\",\n    \"group:embla-carouselMonorepo\",\n    \"group:emojibaseMonorepo\",\n    \"group:emotionMonorepo\",\n    \"group:enumeratumMonorepo\",\n    \"group:envelopMonorepo\",\n    \"group:eslintMonorepo\",\n    \"group:eslint-config-globexMonorepo\",\n    \"group:eslint-stylisticMonorepo\",\n    \"group:expoMonorepo\",\n    \"group:fabric-chaincode-nodeMonorepo\",\n    \"group:fabric8-kubernetes-clientMonorepo\",\n    \"group:faro-web-sdkMonorepo\",\n    \"group:fastendpointsMonorepo\",\n    \"group:feathersMonorepo\",\n    \"group:featuremanagement-dotnetMonorepo\",\n    \"group:feignMonorepo\",\n    \"group:felaMonorepo\",\n    \"group:fimbullinterMonorepo\",\n    \"group:flipperMonorepo\",\n    \"group:flopflipMonorepo\",\n    \"group:fontsourceMonorepo\",\n    \"group:formatjsMonorepo\",\n    \"group:framework7Monorepo\",\n    \"group:funogramMonorepo\",\n    \"group:fusioncacheMonorepo\",\n    \"group:gatsbyMonorepo\",\n    \"group:gitbeakerMonorepo\",\n    \"group:github-workflows-ktMonorepo\",\n    \"group:go-cloudMonorepo\",\n    \"group:gomockMonorepo\",\n    \"group:google-api-dotnet-clientMonorepo\",\n    \"group:grafanaMonorepo\",\n    \"group:graphiqlMonorepo\",\n    \"group:graphql-hive-gatewayMonorepo\",\n    \"group:graphql-meshMonorepo\",\n    \"group:graphql-modulesMonorepo\",\n    \"group:graphql-toolsMonorepo\",\n    \"group:graphql-yogaMonorepo\",\n    \"group:graphqlcodegeneratorMonorepo\",\n    \"group:greenmailMonorepo\",\n    \"group:groovyMonorepo\",\n    \"group:grpc-dotnetMonorepo\",\n    \"group:grpc-javaMonorepo\",\n    \"group:gstreamer-rustMonorepo\",\n    \"group:guavaMonorepo\",\n    \"group:happy-domMonorepo\",\n    \"group:HangfireMonorepo\",\n    \"group:hibernate-modelsMonorepo\",\n    \"group:hibernate-ormMonorepo\",\n    \"group:hibernate-searchMonorepo\",\n    \"group:hibernate-toolsMonorepo\",\n    \"group:hickory-dnsMonorepo\",\n    \"group:html-eslintMonorepo\",\n    \"group:humanizerMonorepo\",\n    \"group:immichMonorepo\",\n    \"group:infrastructure-uiMonorepo\",\n    \"group:ionic-nativeMonorepo\",\n    \"group:istanbuljsMonorepo\",\n    \"group:istioMonorepo\",\n    \"group:jacksonMonorepo\",\n    \"group:jasmineMonorepo\",\n    \"group:javafxMonorepo\",\n    \"group:javahamcrestMonorepo\",\n    \"group:javascriptengineswitcherMonorepo\",\n    \"group:jaxb-riMonorepo\",\n    \"group:jerseyMonorepo\",\n    \"group:jestMonorepo\",\n    \"group:jettyMonorepo\",\n    \"group:jnaMonorepo\",\n    \"group:json-smart-v2Monorepo\",\n    \"group:jsplumbMonorepo\",\n    \"group:junit-frameworkMonorepo\",\n    \"group:kernelmemoryMonorepo\",\n    \"group:kiotaMonorepo\",\n    \"group:kotlinMonorepo\",\n    \"group:kotlinx-coroutinesMonorepo\",\n    \"group:krokiMonorepo\",\n    \"group:kspMonorepo\",\n    \"group:ktorMonorepo\",\n    \"group:lamarMonorepo\",\n    \"group:langchain4jMonorepo\",\n    \"group:lernaMonorepo\",\n    \"group:lerna-liteMonorepo\",\n    \"group:lexicalMonorepo\",\n    \"group:linguijsMonorepo\",\n    \"group:linkifyjsMonorepo\",\n    \"group:log4j2Monorepo\",\n    \"group:logbackMonorepo\",\n    \"group:loopbackMonorepo\",\n    \"group:lrnwebcomponentsMonorepo\",\n    \"group:lucideMonorepo\",\n    \"group:mailingMonorepo\",\n    \"group:mantineMonorepo\",\n    \"group:mapstructMonorepo\",\n    \"group:martenMonorepo\",\n    \"group:masstransitMonorepo\",\n    \"group:material-components-webMonorepo\",\n    \"group:material-uiMonorepo\",\n    \"group:mdc-reactMonorepo\",\n    \"group:mdxMonorepo\",\n    \"group:middy-jsMonorepo\",\n    \"group:mikro-ormMonorepo\",\n    \"group:ml-dotnetMonorepo\",\n    \"group:mockitoMonorepo\",\n    \"group:mongo-csharp-driverMonorepo\",\n    \"group:mongo-java-driverMonorepo\",\n    \"group:mstestMonorepo\",\n    \"group:mutation-testing-elementsMonorepo\",\n    \"group:nestMonorepo\",\n    \"group:nest-graphqlMonorepo\",\n    \"group:nettyMonorepo\",\n    \"group:neutrinoMonorepo\",\n    \"group:nexpectMonorepo\",\n    \"group:nextjsMonorepo\",\n    \"group:nextraMonorepo\",\n    \"group:ngx-cookie-serviceMonorepo\",\n    \"group:ngx-formlyMonorepo\",\n    \"group:ngxs-storeMonorepo\",\n    \"group:nivoMonorepo\",\n    \"group:njson-schemaMonorepo\",\n    \"group:nswagMonorepo\",\n    \"group:nugetMonorepo\",\n    \"group:nuke-buildMonorepo\",\n    \"group:nuxtjsMonorepo\",\n    \"group:okhttpMonorepo\",\n    \"group:openapi-dotnetMonorepo\",\n    \"group:opencostMonorepo\",\n    \"group:openiddictMonorepo\",\n    \"group:opentelemetry-dotnetMonorepo\",\n    \"group:opentelemetry-dotnet-contribMonorepo\",\n    \"group:opentelemetry-erlangMonorepo\",\n    \"group:opentelemetry-erlang-contribMonorepo\",\n    \"group:opentelemetry-goMonorepo\",\n    \"group:opentelemetry-go-contribMonorepo\",\n    \"group:opentelemetry-javaMonorepo\",\n    \"group:opentelemetry-java-contribMonorepo\",\n    \"group:opentelemetry-jsMonorepo\",\n    \"group:opentelemetry-js-contribMonorepo\",\n    \"group:opentelemetry-pythonMonorepo\",\n    \"group:opentelemetry-python-contribMonorepo\",\n    \"group:opentelemetry-rustMonorepo\",\n    \"group:opentelemetry-rust-contribMonorepo\",\n    \"group:orleansMonorepo\",\n    \"group:oxlintMonorepo\",\n    \"group:panda-cssMonorepo\",\n    \"group:parcelMonorepo\",\n    \"group:payloadcmsMonorepo\",\n    \"group:pdfmeMonorepo\",\n    \"group:percy-cliMonorepo\",\n    \"group:picassojsMonorepo\",\n    \"group:pixijsMonorepo\",\n    \"group:playwrightMonorepo\",\n    \"group:playwright-dotnetMonorepo\",\n    \"group:pnpcoreMonorepo\",\n    \"group:pnpjsMonorepo\",\n    \"group:pollyMonorepo\",\n    \"group:pollyjsMonorepo\",\n    \"group:pothosMonorepo\",\n    \"group:pouchdbMonorepo\",\n    \"group:powermockMonorepo\",\n    \"group:prismaMonorepo\",\n    \"group:prometheus-netMonorepo\",\n    \"group:promsterMonorepo\",\n    \"group:protobufMonorepo\",\n    \"group:quartznetMonorepo\",\n    \"group:radix-ui-primitivesMonorepo\",\n    \"group:reach-uiMonorepo\",\n    \"group:reactMonorepo\",\n    \"group:react-adminMonorepo\",\n    \"group:react-apolloMonorepo\",\n    \"group:react-dndMonorepo\",\n    \"group:react-navigationMonorepo\",\n    \"group:react-pageMonorepo\",\n    \"group:react-railsMonorepo\",\n    \"group:react-routerMonorepo\",\n    \"group:react-spectrumMonorepo\",\n    \"group:react-springMonorepo\",\n    \"group:reactivestack-cookiesMonorepo\",\n    \"group:reakitMonorepo\",\n    \"group:redwoodMonorepo\",\n    \"group:refitMonorepo\",\n    \"group:reg-suitMonorepo\",\n    \"group:remarkMonorepo\",\n    \"group:remixMonorepo\",\n    \"group:retrofitMonorepo\",\n    \"group:riverMonorepo\",\n    \"group:rjsfMonorepo\",\n    \"group:router5Monorepo\",\n    \"group:rspackMonorepo\",\n    \"group:ruby-on-railsMonorepo\",\n    \"group:rust-analyzerMonorepo\",\n    \"group:rust-futuresMonorepo\",\n    \"group:rust-wasm-bindgenMonorepo\",\n    \"group:sanityMonorepo\",\n    \"group:serilog-uiMonorepo\",\n    \"group:scaffdogMonorepo\",\n    \"group:scalarMonorepo\",\n    \"group:sea-ormMonorepo\",\n    \"group:secretlintMonorepo\",\n    \"group:sendgrid-nodejsMonorepo\",\n    \"group:sentry-dotnetMonorepo\",\n    \"group:sentry-javascriptMonorepo\",\n    \"group:sentry-rubyMonorepo\",\n    \"group:sentry-rustMonorepo\",\n    \"group:serdeMonorepo\",\n    \"group:serenity-jsMonorepo\",\n    \"group:servicestackMonorepo\",\n    \"group:shedlockMonorepo\",\n    \"group:shikiMonorepo\",\n    \"group:shopify-app-bridgeMonorepo\",\n    \"group:sitecore-jssMonorepo\",\n    \"group:skiasharpMonorepo\",\n    \"group:slack-netMonorepo\",\n    \"group:slf4jMonorepo\",\n    \"group:slim-message-busMonorepo\",\n    \"group:spectre-consoleMonorepo\",\n    \"group:springfoxMonorepo\",\n    \"group:stack-exchange-redis-extensionsMonorepo\",\n    \"group:statsig-js-clientMonorepo\",\n    \"group:steeltoeMonorepo\",\n    \"group:storybookMonorepo\",\n    \"group:storybook-react-nativeMonorepo\",\n    \"group:strapiMonorepo\",\n    \"group:strumMonorepo\",\n    \"group:stryker-jsMonorepo\",\n    \"group:stylex-swcMonorepo\",\n    \"group:surveyjsMonorepo\",\n    \"group:swashbuckle-aspnetcoreMonorepo\",\n    \"group:system.io.abstractionsMonorepo\",\n    \"group:tailwindcssMonorepo\",\n    \"group:taiga-uiMonorepo\",\n    \"group:tamaguiMonorepo\",\n    \"group:tanstack-formMonorepo\",\n    \"group:tanstack-queryMonorepo\",\n    \"group:tanstack-routerMonorepo\",\n    \"group:tanstack-tableMonorepo\",\n    \"group:tanstack-virtualMonorepo\",\n    \"group:tauriMonorepo\",\n    \"group:telus-tdsMonorepo\",\n    \"group:telus-tds-coreMonorepo\",\n    \"group:temporalio-tsMonorepo\",\n    \"group:terraformMonorepo\",\n    \"group:testcontainers-dotnetMonorepo\",\n    \"group:testcontainers-goMonorepo\",\n    \"group:testcontainers-javaMonorepo\",\n    \"group:testcontainers-nodeMonorepo\",\n    \"group:theme-uiMonorepo\",\n    \"group:tikaMonorepo\",\n    \"group:timvirMonorepo\",\n    \"group:tiptapMonorepo\",\n    \"group:tokio-prostMonorepo\",\n    \"group:tokio-tracingMonorepo\",\n    \"group:tonicMonorepo\",\n    \"group:treatMonorepo\",\n    \"group:trpcMonorepo\",\n    \"group:trust-dnsMonorepo\",\n    \"group:tsoaMonorepo\",\n    \"group:turboMonorepo\",\n    \"group:turfMonorepo\",\n    \"group:typed-signalrMonorepo\",\n    \"group:typefacesMonorepo\",\n    \"group:typescript-eslintMonorepo\",\n    \"group:typography-jsMonorepo\",\n    \"group:ui5-webcomponentsMonorepo\",\n    \"group:unheadMonorepo\",\n    \"group:unocssMonorepo\",\n    \"group:uppyMonorepo\",\n    \"group:utoipaMonorepo\",\n    \"group:vaadin-hillaMonorepo\",\n    \"group:vaadinWebComponentsMonorepo\",\n    \"group:vanilla-extractMonorepo\",\n    \"group:visxMonorepo\",\n    \"group:vitestMonorepo\",\n    \"group:vstestMonorepo\",\n    \"group:vueMonorepo\",\n    \"group:vue-cliMonorepo\",\n    \"group:vuepressMonorepo\",\n    \"group:vueuseMonorepo\",\n    \"group:weaselMonorepo\",\n    \"group:web3-reactMonorepo\",\n    \"group:webdriverioMonorepo\",\n    \"group:wolverineMonorepo\",\n    \"group:workboxMonorepo\",\n    \"group:wyw-in-jsMonorepo\",\n    \"group:xstateMonorepo\",\n    \"group:xtermMonorepo\",\n    \"group:xunit-dotnetMonorepo\",\n    \"group:yarnMonorepo\",\n    \"group:zag-jsMonorepo\",\n    \"group:zxing-netMonorepo\",\n    \"group:hapijsMonorepo\",\n    \"group:lodashMonorepo\",\n    \"group:ngrxMonorepo\",\n    \"group:nxMonorepo\",\n    \"group:octokitMonorepo\",\n    \"group:php-enqueueMonorepo\",\n    \"group:semantic-releaseMonorepo\",\n    \"group:swcMonorepo\",\n    \"group:twigMonorepo\",\n    \"group:angularmaterialMonorepo\",\n    \"group:apache-camelMonorepo\",\n    \"group:apache-poiMonorepo\",\n    \"group:aws-java-sdkMonorepo\",\n    \"group:aws-java-sdk-v2Monorepo\",\n    \"group:axis2Monorepo\",\n    \"group:babel6Monorepo\",\n    \"group:embroiderMonorepo\",\n    \"group:forgeMonorepo\",\n    \"group:fullcalendarMonorepo\",\n    \"group:hotchocolateMonorepo\",\n    \"group:oracle-databaseMonorepo\",\n    \"group:prometheus-simpleclientMonorepo\",\n    \"group:russhMonorepo\",\n    \"group:spfxMonorepo\",\n    \"group:spockMonorepo\",\n    \"group:syncfusion-dotnetMonorepo\",\n    \"group:testing-libraryMonorepo\",\n    \"group:wordpressMonorepo\"\n  ],\n  \"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-helpers/","title":"Helper Presets","text":""},{"location":"presets-helpers/#helpersdisabletypesnodemajor","title":"helpers:disableTypesNodeMajor","text":"<p>Disable <code>major</code> updates to <code>@types/node</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchPackageNames\": [\n        \"@types/node\"\n      ],\n      \"matchUpdateTypes\": [\n        \"major\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-helpers/#helpersfollowtypescriptnext","title":"helpers:followTypescriptNext","text":"<p>Keep <code>typescript</code> version in sync with the <code>next</code> tag.</p> <pre><code>{\n  \"extends\": [\n    \":followTag(typescript, next)\"\n  ]\n}\n</code></pre>"},{"location":"presets-helpers/#helpersfollowtypescriptrc","title":"helpers:followTypescriptRc","text":"<p>Keep <code>typescript</code> version in sync with the <code>rc</code> tag.</p> <pre><code>{\n  \"extends\": [\n    \":followTag(typescript, rc)\"\n  ]\n}\n</code></pre>"},{"location":"presets-helpers/#helperspingithubactiondigests","title":"helpers:pinGitHubActionDigests","text":"<p>Pin <code>github-action</code> digests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\n        \"action\"\n      ],\n      \"pinDigests\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-helpers/#helperspingithubactiondigeststosemver","title":"helpers:pinGitHubActionDigestsToSemver","text":"<p>Convert pinned GitHub Action digests to SemVer.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\n        \"helpers:pinGitHubActionDigests\"\n      ],\n      \"extractVersion\": \"^(?&lt;version&gt;v?\\\\d+\\\\.\\\\d+\\\\.\\\\d+)$\",\n      \"versioning\": \"regex:^v?(?&lt;major&gt;\\\\d+)(\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+))?$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-mergeConfidence/","title":"MergeConfidence Presets","text":""},{"location":"presets-mergeConfidence/#mergeconfidenceall-badges","title":"mergeConfidence:all-badges","text":"<p>Show all Merge Confidence badges for pull requests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"go\",\n        \"maven\",\n        \"npm\",\n        \"nuget\",\n        \"packagist\",\n        \"pypi\",\n        \"rubygems\"\n      ],\n      \"matchUpdateTypes\": [\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ],\n      \"prBodyColumns\": [\n        \"Package\",\n        \"Change\",\n        \"Age\",\n        \"Adoption\",\n        \"Passing\",\n        \"Confidence\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-mergeConfidence/#mergeconfidenceage-confidence-badges","title":"mergeConfidence:age-confidence-badges","text":"<p>Show only the Age and Confidence Merge Confidence badges for pull requests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"go\",\n        \"maven\",\n        \"npm\",\n        \"nuget\",\n        \"packagist\",\n        \"pypi\",\n        \"rubygems\"\n      ],\n      \"matchUpdateTypes\": [\n        \"patch\",\n        \"minor\",\n        \"major\"\n      ],\n      \"prBodyColumns\": [\n        \"Package\",\n        \"Change\",\n        \"Age\",\n        \"Confidence\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/","title":"Monorepo Presets","text":""},{"location":"presets-monorepo/#monorepoaccounts","title":"monorepo:accounts","text":"<p>accounts monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/accounts-js/accounts\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoacot","title":"monorepo:acot","text":"<p>acot monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/acot-a11y/acot\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoag-grid","title":"monorepo:ag-grid","text":"<p>ag-grid monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ag-grid/ag-grid\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgolia-instantsearch","title":"monorepo:algolia-instantsearch","text":"<p>algolia-instantsearch monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/algolia/instantsearch\",\n    \"https://github.com/algolia/instantsearch.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgolia-react-instantsearch","title":"monorepo:algolia-react-instantsearch","text":"<p>algolia-react-instantsearch monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/algolia/react-instantsearch\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgoliasearch-autocomplete","title":"monorepo:algoliasearch-autocomplete","text":"<p>algoliasearch-autocomplete monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/algolia/autocomplete\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgoliasearch-client-javascript","title":"monorepo:algoliasearch-client-javascript","text":"<p>algoliasearch-client-javascript monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/algolia/algoliasearch-client-javascript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoanalog","title":"monorepo:analog","text":"<p>analog monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/analogjs/analog\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular","title":"monorepo:angular","text":"<p>angular monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/angular/angular\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular-cli","title":"monorepo:angular-cli","text":"<p>angular-cli monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/angular/angular-cli\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular-eslint","title":"monorepo:angular-eslint","text":"<p>angular-eslint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/angular-eslint/angular-eslint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularfire","title":"monorepo:angularfire","text":"<p>angularfire monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/angular/angularfire\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularjs","title":"monorepo:angularjs","text":"<p>angularjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/angular/angular.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapache-lucene","title":"monorepo:apache-lucene","text":"<p>apache-lucene monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://gitbox.apache.org/repos/asf?p=lucene.git\",\n    \"https://github.com/apache/lucene\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapollo-server","title":"monorepo:apollo-server","text":"<p>apollo-server monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apollographql/apollo-server\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapolloclient","title":"monorepo:apolloclient","text":"<p>apolloclient monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apollographql/apollo-client\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapplicationinsights-dotnet","title":"monorepo:applicationinsights-dotnet","text":"<p>applicationinsights-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Microsoft/ApplicationInsights-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusbackground-jobs","title":"monorepo:arcus.background-jobs","text":"<p>arcus.background-jobs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.backgroundjobs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusevent-grid","title":"monorepo:arcus.event-grid","text":"<p>arcus.event-grid monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.eventgrid\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusmessaging","title":"monorepo:arcus.messaging","text":"<p>arcus.messaging monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.messaging\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusobservability","title":"monorepo:arcus.observability","text":"<p>arcus.observability monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.observability\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcussecurity","title":"monorepo:arcus.security","text":"<p>arcus.security monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.security\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcuswebapi","title":"monorepo:arcus.webapi","text":"<p>arcus.webapi monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arcus-azure/arcus.webapi\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarrow-kt","title":"monorepo:arrow-kt","text":"<p>arrow-kt monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/arrow-kt/arrow\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspire","title":"monorepo:aspire","text":"<p>aspire monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnet/aspire\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-aspnetwebstack","title":"monorepo:aspnet aspnetwebstack","text":"<p>aspnet aspnetwebstack monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aspnet/AspNetWebStack\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-extensions","title":"monorepo:aspnet extensions","text":"<p>aspnet extensions monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aspnet/Extensions\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-api-versioning","title":"monorepo:aspnet-api-versioning","text":"<p>aspnet-api-versioning monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Microsoft/aspnet-api-versioning\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-health-checks","title":"monorepo:aspnet-health-checks","text":"<p>aspnet-health-checks monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/xabaril/AspNetCore.Diagnostics.HealthChecks\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-security-oauth-providers","title":"monorepo:aspnet-security-oauth-providers","text":"<p>aspnet-security-oauth-providers monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoastro","title":"monorepo:astro","text":"<p>astro monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/withastro/astro\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoauto","title":"monorepo:auto","text":"<p>auto monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/intuit/auto\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoautofixture","title":"monorepo:autofixture","text":"<p>autofixture monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AutoFixture/AutoFixture\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoautomapper-dotnet","title":"monorepo:automapper-dotnet","text":"<p>automapper-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AutoMapper/AutoMapper\",\n    \"https://github.com/AutoMapper/AutoMapper.Extensions.Microsoft.DependencyInjection\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoavalonia","title":"monorepo:avalonia","text":"<p>avalonia monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AvaloniaUI/Avalonia\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-cdk","title":"monorepo:aws-cdk","text":"<p>aws-cdk monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-cdk\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-lambda-dotnet","title":"monorepo:aws-lambda-dotnet","text":"<p>aws-lambda-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-lambda-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-lambda-powertools-typescript","title":"monorepo:aws-lambda-powertools-typescript","text":"<p>aws-lambda-powertools-typescript monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/awslabs/aws-lambda-powertools-typescript\",\n    \"https://github.com/aws-powertools/powertools-lambda-typescript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-client-mock","title":"monorepo:aws-sdk-client-mock","text":"<p>aws-sdk-client-mock monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/m-radzikowski/aws-sdk-client-mock\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-go","title":"monorepo:aws-sdk-go","text":"<p>aws-sdk-go monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-sdk-go\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-go-v2","title":"monorepo:aws-sdk-go-v2","text":"<p>aws-sdk-go-v2 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-sdk-go-v2\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-js-v3","title":"monorepo:aws-sdk-js-v3","text":"<p>aws-sdk-js-v3 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-sdk-js-v3\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-net","title":"monorepo:aws-sdk-net","text":"<p>aws-sdk-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/aws/aws-sdk-net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-rust","title":"monorepo:aws-sdk-rust","text":"<p>aws-sdk-rust monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/smithy-lang/smithy-rs\",\n    \"https://github.com/awslabs/smithy-rs\",\n    \"https://github.com/awslabs/aws-sdk-rust\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoawsappsync","title":"monorepo:awsappsync","text":"<p>awsappsync monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/awslabs/aws-mobile-appsync-sdk-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaxum","title":"monorepo:axum","text":"<p>axum monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tokio-rs/axum\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-functions-dotnet-worker","title":"monorepo:azure-functions-dotnet-worker","text":"<p>azure-functions-dotnet-worker monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-functions-dotnet-worker\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-libraries-for-net","title":"monorepo:azure azure-libraries-for-net","text":"<p>azure azure-libraries-for-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-libraries-for-net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-sdk-for-net","title":"monorepo:azure azure-sdk-for-net","text":"<p>azure azure-sdk-for-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-storage-net","title":"monorepo:azure azure-storage-net","text":"<p>azure azure-storage-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-storage-net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-android","title":"monorepo:azure-ad-microsoft-authentication-library-for-android","text":"<p>azure-ad-microsoft-authentication-library-for-android monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-android\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-dotnet","title":"monorepo:azure-ad-microsoft-authentication-library-for-dotnet","text":"<p>azure-ad-microsoft-authentication-library-for-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-go","title":"monorepo:azure-ad-microsoft-authentication-library-for-go","text":"<p>azure-ad-microsoft-authentication-library-for-go monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-go\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-java","title":"monorepo:azure-ad-microsoft-authentication-library-for-java","text":"<p>azure-ad-microsoft-authentication-library-for-java monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-java\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-js","title":"monorepo:azure-ad-microsoft-authentication-library-for-js","text":"<p>azure-ad-microsoft-authentication-library-for-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-objc","title":"monorepo:azure-ad-microsoft-authentication-library-for-objc","text":"<p>azure-ad-microsoft-authentication-library-for-objc monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-objc\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-ad-microsoft-authentication-library-for-python","title":"monorepo:azure-ad-microsoft-authentication-library-for-python","text":"<p>azure-ad-microsoft-authentication-library-for-python monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-authentication-library-for-python\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-android","title":"monorepo:azure-sdk-for-android","text":"<p>azure-sdk-for-android monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-android\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-c","title":"monorepo:azure-sdk-for-c","text":"<p>azure-sdk-for-c monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-c\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-cpp","title":"monorepo:azure-sdk-for-cpp","text":"<p>azure-sdk-for-cpp monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-cpp\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-go","title":"monorepo:azure-sdk-for-go","text":"<p>azure-sdk-for-go monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-go\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-ios","title":"monorepo:azure-sdk-for-ios","text":"<p>azure-sdk-for-ios monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-ios\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-java","title":"monorepo:azure-sdk-for-java","text":"<p>azure-sdk-for-java monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-java\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-js","title":"monorepo:azure-sdk-for-js","text":"<p>azure-sdk-for-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-python","title":"monorepo:azure-sdk-for-python","text":"<p>azure-sdk-for-python monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-python\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-sdk-for-rust","title":"monorepo:azure-sdk-for-rust","text":"<p>azure-sdk-for-rust monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Azure/azure-sdk-for-rust\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobabel","title":"monorepo:babel","text":"<p>babel monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/babel/babel\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobackstage","title":"monorepo:backstage","text":"<p>backstage monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/backstage/backstage\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobaset","title":"monorepo:baset","text":"<p>baset monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/igmat/baset\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobrave","title":"monorepo:brave","text":"<p>brave monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/openzipkin/brave\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobugsnag-js","title":"monorepo:bugsnag-js","text":"<p>bugsnag-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/bugsnag/bugsnag-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocake","title":"monorepo:cake","text":"<p>cake monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/cake-build/cake\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocake-issues","title":"monorepo:cake-issues","text":"<p>cake-issues monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/cake-contrib/Cake.Issues\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocapacitor","title":"monorepo:capacitor","text":"<p>capacitor monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ionic-team/capacitor\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocedar","title":"monorepo:cedar","text":"<p>cedar monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/cedarjs/cedar/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepochakra-ui","title":"monorepo:chakra-ui","text":"<p>chakra-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/chakra-ui/chakra-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepochromely","title":"monorepo:chromely","text":"<p>chromely monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/chromelyapps/Chromely\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocitation-js","title":"monorepo:citation-js","text":"<p>citation-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/citation-js/citation-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepockeditor","title":"monorepo:ckeditor","text":"<p>ckeditor monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ckeditor/ckeditor5\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoclarity","title":"monorepo:clarity","text":"<p>clarity monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@cds//\",\n    \"/^@clr//\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoclearscript","title":"monorepo:clearscript","text":"<p>clearscript monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/ClearScript\",\n    \"https://github.com/Microsoft/ClearScript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocommitlint","title":"monorepo:commitlint","text":"<p>commitlint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/conventional-changelog/commitlint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocontentful-rich-text","title":"monorepo:contentful-rich-text","text":"<p>contentful-rich-text monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/contentful/rich-text\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocspell","title":"monorepo:cspell","text":"<p>cspell monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/streetsidesoftware/cspell\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatadog-browser-sdk","title":"monorepo:datadog-browser-sdk","text":"<p>datadog-browser-sdk monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataDog/browser-sdk\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net","title":"monorepo:datatables-net","text":"<p>datatables-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-autofill","title":"monorepo:datatables-net-autofill","text":"<p>datatables-net-autofill monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-AutoFill-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-buttons","title":"monorepo:datatables-net-buttons","text":"<p>datatables-net-buttons monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-Buttons\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-Buttons-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-colreorder","title":"monorepo:datatables-net-colreorder","text":"<p>datatables-net-colreorder monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-ColReorder-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-fixedcolumns","title":"monorepo:datatables-net-fixedcolumns","text":"<p>datatables-net-fixedcolumns monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedColumns-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-fixedheader","title":"monorepo:datatables-net-fixedheader","text":"<p>datatables-net-fixedheader monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-FixedHeader-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-keytable","title":"monorepo:datatables-net-keytable","text":"<p>datatables-net-keytable monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-KeyTable-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-responsive","title":"monorepo:datatables-net-responsive","text":"<p>datatables-net-responsive monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-Responsive\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-Responsive-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-rowgroup","title":"monorepo:datatables-net-rowgroup","text":"<p>datatables-net-rowgroup monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-RowGroup-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-rowreorder","title":"monorepo:datatables-net-rowreorder","text":"<p>datatables-net-rowreorder monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-RowReorder-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-scroller","title":"monorepo:datatables-net-scroller","text":"<p>datatables-net-scroller monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-Scroller\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-Scroller-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-searchbuilder","title":"monorepo:datatables-net-searchbuilder","text":"<p>datatables-net-searchbuilder monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchBuilder-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-searchpanes","title":"monorepo:datatables-net-searchpanes","text":"<p>datatables-net-searchpanes monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-SearchPanes-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-select","title":"monorepo:datatables-net-select","text":"<p>datatables-net-select monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-Select\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-Select-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatatables-net-staterestore","title":"monorepo:datatables-net-staterestore","text":"<p>datatables-net-staterestore monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-Bootstrap\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-Bootstrap4\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-Bootstrap5\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-Bulma\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-DataTables\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-Foundation\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-SemanticUI\",\n    \"https://github.com/DataTables/Dist-DataTables-StateRestore-jQueryUI\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodate-io","title":"monorepo:date-io","text":"<p>date-io monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dmtrKovalenko/date-io\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodeck-gl","title":"monorepo:deck-gl","text":"<p>deck-gl monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/visgl/deck.gl\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodeno","title":"monorepo:deno","text":"<p>deno monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/denoland/deno\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodevextreme-reactive","title":"monorepo:devextreme-reactive","text":"<p>devextreme-reactive monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DevExpress/devextreme-reactive\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodnd-kit","title":"monorepo:dnd-kit","text":"<p>dnd-kit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/clauderic/dnd-kit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodocusaurus","title":"monorepo:docusaurus","text":"<p>docusaurus monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/facebook/docusaurus\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodot-swashbuckle","title":"monorepo:dot-swashbuckle","text":"<p>dot-swashbuckle monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Havunen/DotSwashbuckle\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet","title":"monorepo:dotnet","text":"<p>dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnet/aspnetcore\",\n    \"https://github.com/dotnet/dotnet\",\n    \"https://github.com/dotnet/efcore\",\n    \"https://github.com/dotnet/extensions\",\n    \"https://github.com/dotnet/fsharp\",\n    \"https://github.com/dotnet/maui\",\n    \"https://github.com/dotnet/msbuild\",\n    \"https://github.com/dotnet/roslyn\",\n    \"https://github.com/dotnet/runtime\",\n    \"https://github.com/dotnet/scaffolding\",\n    \"https://github.com/dotnet/sdk\",\n    \"https://github.com/dotnet/windowsdesktop\",\n    \"https://github.com/dotnet/winforms\",\n    \"https://github.com/dotnet/wpf\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-azure-ad-identitymodel-extensions","title":"monorepo:dotnet-azure-ad-identitymodel-extensions","text":"<p>dotnet-azure-ad-identitymodel-extensions monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-azure-ad-microsoft-identity-web","title":"monorepo:dotnet-azure-ad-microsoft-identity-web","text":"<p>dotnet-azure-ad-microsoft-identity-web monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/AzureAD/microsoft-identity-web\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-wcf","title":"monorepo:dotnet-wcf","text":"<p>dotnet-wcf monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnet/wcf\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnetcore-cap","title":"monorepo:dotnetcore-cap","text":"<p>dotnetcore-cap monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnetcore/CAP\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodropwizard","title":"monorepo:dropwizard","text":"<p>dropwizard monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dropwizard/dropwizard\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoduende-identityserver","title":"monorepo:duende-identityserver","text":"<p>duende-identityserver monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/DuendeSoftware/IdentityServer\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoelastic-apm-agent-rum-js","title":"monorepo:elastic-apm-agent-rum-js","text":"<p>elastic-apm-agent-rum-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/elastic/apm-agent-rum-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoelastic-ecs-dotnet","title":"monorepo:elastic-ecs-dotnet","text":"<p>elastic-ecs-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/elastic/ecs-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoelectron-forge","title":"monorepo:electron-forge","text":"<p>electron-forge monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/electron-userland/electron-forge\",\n    \"https://github.com/electron/forge\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoember-decorators","title":"monorepo:ember-decorators","text":"<p>ember-decorators monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ember-decorators/ember-decorators\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoembla-carousel","title":"monorepo:embla-carousel","text":"<p>embla-carousel monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/davidjerleke/embla-carousel\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoemojibase","title":"monorepo:emojibase","text":"<p>emojibase monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/milesj/emojibase\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoemotion","title":"monorepo:emotion","text":"<p>emotion monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/emotion-js/emotion\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoenumeratum","title":"monorepo:enumeratum","text":"<p>enumeratum monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lloydmeta/enumeratum\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoenvelop","title":"monorepo:envelop","text":"<p>envelop monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/n1ru4l/envelop\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoeslint","title":"monorepo:eslint","text":"<p>eslint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/eslint/eslint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoeslint-config-globex","title":"monorepo:eslint-config-globex","text":"<p>eslint-config-globex monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/GlobexDesignsInc/eslint-config-globex\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoeslint-stylistic","title":"monorepo:eslint-stylistic","text":"<p>eslint-stylistic monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/eslint-stylistic/eslint-stylistic\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoexpo","title":"monorepo:expo","text":"<p>expo monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/expo/expo\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofabric-chaincode-node","title":"monorepo:fabric-chaincode-node","text":"<p>fabric-chaincode-node monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hyperledger/fabric-chaincode-node\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofabric8-kubernetes-client","title":"monorepo:fabric8-kubernetes-client","text":"<p>fabric8-kubernetes-client monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/fabric8io/kubernetes-client\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofaro-web-sdk","title":"monorepo:faro-web-sdk","text":"<p>faro-web-sdk monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/grafana/faro-web-sdk\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofastendpoints","title":"monorepo:fastendpoints","text":"<p>fastendpoints monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/FastEndpoints/FastEndpoints\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofeathers","title":"monorepo:feathers","text":"<p>feathers monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/feathersjs/feathers\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofeaturemanagement-dotnet","title":"monorepo:featuremanagement-dotnet","text":"<p>featuremanagement-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/FeatureManagement-Dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofeign","title":"monorepo:feign","text":"<p>feign monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/OpenFeign/feign\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofela","title":"monorepo:fela","text":"<p>fela monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/robinweser/fela\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofimbullinter","title":"monorepo:fimbullinter","text":"<p>fimbullinter monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/fimbullinter/wotan\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoflipper","title":"monorepo:flipper","text":"<p>flipper monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/flippercloud/flipper\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoflopflip","title":"monorepo:flopflip","text":"<p>flopflip monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tdeekens/flopflip\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofontsource","title":"monorepo:fontsource","text":"<p>fontsource monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/fontsource/fontsource\",\n    \"https://github.com/fontsource/font-files\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoformatjs","title":"monorepo:formatjs","text":"<p>formatjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/formatjs/formatjs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoframework7","title":"monorepo:framework7","text":"<p>framework7 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/framework7io/framework7\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofunogram","title":"monorepo:funogram","text":"<p>funogram monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Dolfik1/Funogram\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofusioncache","title":"monorepo:fusioncache","text":"<p>fusioncache monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ZiggyCreatures/FusionCache\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogatsby","title":"monorepo:gatsby","text":"<p>gatsby monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/gatsbyjs/gatsby\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogitbeaker","title":"monorepo:gitbeaker","text":"<p>gitbeaker monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/jdalrymple/gitbeaker\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogithub-workflows-kt","title":"monorepo:github-workflows-kt","text":"<p>github-workflows-kt monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/typesafegithub/github-workflows-kt\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogo-cloud","title":"monorepo:go-cloud","text":"<p>go-cloud monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/google/go-cloud\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogomock","title":"monorepo:gomock","text":"<p>gomock monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/uber-go/mock\",\n    \"https://github.com/uber/mock\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogoogle-api-dotnet-client","title":"monorepo:google-api-dotnet-client","text":"<p>google-api-dotnet-client monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/googleapis/google-api-dotnet-client\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepografana","title":"monorepo:grafana","text":"<p>grafana monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/grafana/grafana\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographiql","title":"monorepo:graphiql","text":"<p>graphiql monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/graphql/graphiql\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-hive-gateway","title":"monorepo:graphql-hive-gateway","text":"<p>graphql-hive-gateway monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/graphql-hive/gateway\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-mesh","title":"monorepo:graphql-mesh","text":"<p>graphql-mesh monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Urigo/graphql-mesh\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-modules","title":"monorepo:graphql-modules","text":"<p>graphql-modules monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Urigo/graphql-modules\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-tools","title":"monorepo:graphql-tools","text":"<p>graphql-tools monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ardatan/graphql-tools\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-yoga","title":"monorepo:graphql-yoga","text":"<p>graphql-yoga monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotansimha/graphql-yoga\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographqlcodegenerator","title":"monorepo:graphqlcodegenerator","text":"<p>graphqlcodegenerator monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotansimha/graphql-code-generator-community\",\n    \"https://github.com/dotansimha/graphql-code-generator\",\n    \"https://github.com/dotansimha/graphql-codegen\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogreenmail","title":"monorepo:greenmail","text":"<p>greenmail monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/greenmail-mail-test/greenmail\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogroovy","title":"monorepo:groovy","text":"<p>groovy monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apache/groovy\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogrpc-dotnet","title":"monorepo:grpc-dotnet","text":"<p>grpc-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/grpc/grpc-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogrpc-java","title":"monorepo:grpc-java","text":"<p>grpc-java monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/grpc/grpc-java\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogstreamer-rust","title":"monorepo:gstreamer-rust","text":"<p>gstreamer-rust monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://gitlab.freedesktop.org/gstreamer/gstreamer-rs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoguava","title":"monorepo:guava","text":"<p>guava monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/google/guava\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohappy-dom","title":"monorepo:happy-dom","text":"<p>happy-dom monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/capricorn86/happy-dom\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohangfire","title":"monorepo:Hangfire","text":"<p>Hangfire monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/HangfireIO/Hangfire\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohibernate-models","title":"monorepo:hibernate-models","text":"<p>hibernate-models monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hibernate/hibernate-models\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohibernate-orm","title":"monorepo:hibernate-orm","text":"<p>hibernate-orm monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hibernate/hibernate-orm\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohibernate-search","title":"monorepo:hibernate-search","text":"<p>hibernate-search monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hibernate/hibernate-search\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohibernate-tools","title":"monorepo:hibernate-tools","text":"<p>hibernate-tools monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hibernate/hibernate-tools\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohickory-dns","title":"monorepo:hickory-dns","text":"<p>hickory-dns monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hickory-dns/hickory-dns\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohtml-eslint","title":"monorepo:html-eslint","text":"<p>html-eslint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/yeonjuan/html-eslint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohumanizer","title":"monorepo:humanizer","text":"<p>humanizer monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Humanizr/Humanizer\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoimmich","title":"monorepo:immich","text":"<p>immich monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/immich-app/immich\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoinfrastructure-ui","title":"monorepo:infrastructure-ui","text":"<p>infrastructure-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/instructure/instructure-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoionic-native","title":"monorepo:ionic-native","text":"<p>ionic-native monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ionic-team/ionic-native\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoistanbuljs","title":"monorepo:istanbuljs","text":"<p>istanbuljs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/istanbuljs/istanbuljs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoistio","title":"monorepo:istio","text":"<p>istio monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/istio/istio\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojackson","title":"monorepo:jackson","text":"<p>jackson monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/FasterXML/jackson\",\n    \"https://github.com/FasterXML/jackson-annotations\",\n    \"https://github.com/FasterXML/jackson-core\",\n    \"https://github.com/FasterXML/jackson-databind\",\n    \"https://github.com/FasterXML/jackson-dataformats-binary\",\n    \"https://github.com/FasterXML/jackson-dataformats-text\",\n    \"https://github.com/FasterXML/jackson-jaxrs-providers\",\n    \"https://github.com/FasterXML/jackson-module-kotlin\",\n    \"https://github.com/FasterXML/jackson-module-scala\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojasmine","title":"monorepo:jasmine","text":"<p>jasmine monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/jasmine/jasmine\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojavafx","title":"monorepo:javafx","text":"<p>javafx monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/openjdk/jfx\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojavahamcrest","title":"monorepo:javahamcrest","text":"<p>javahamcrest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hamcrest/JavaHamcrest\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojavascriptengineswitcher","title":"monorepo:javascriptengineswitcher","text":"<p>javascriptengineswitcher monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Taritsyn/JavaScriptEngineSwitcher\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojaxb-ri","title":"monorepo:jaxb-ri","text":"<p>jaxb-ri monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/eclipse-ee4j/jaxb-ri\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojersey","title":"monorepo:jersey","text":"<p>jersey monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/eclipse-ee4j/jersey\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojest","title":"monorepo:jest","text":"<p>jest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/facebook/jest\",\n    \"https://github.com/jestjs/jest\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojetty","title":"monorepo:jetty","text":"<p>jetty monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/jetty/jetty.project\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojna","title":"monorepo:jna","text":"<p>jna monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/java-native-access/jna\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojson-smart-v2","title":"monorepo:json-smart-v2","text":"<p>json-smart-v2 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/netplex/json-smart-v2\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojsplumb","title":"monorepo:jsplumb","text":"<p>jsplumb monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/jsplumb/jsplumb\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojunit-framework","title":"monorepo:junit-framework","text":"<p>junit-framework monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/junit-team/junit5\",\n    \"https://github.com/junit-team/junit-framework\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokernelmemory","title":"monorepo:kernelmemory","text":"<p>kernelmemory monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/kernel-memory\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokiota","title":"monorepo:kiota","text":"<p>kiota monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/kiota\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokotlin","title":"monorepo:kotlin","text":"<p>kotlin monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/JetBrains/kotlin\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokotlinx-coroutines","title":"monorepo:kotlinx-coroutines","text":"<p>kotlinx-coroutines monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Kotlin/kotlinx.coroutines\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokroki","title":"monorepo:kroki","text":"<p>kroki monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/yuzutech/kroki\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoksp","title":"monorepo:ksp","text":"<p>ksp monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/google/ksp\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoktor","title":"monorepo:ktor","text":"<p>ktor monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ktorio/ktor\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolamar","title":"monorepo:lamar","text":"<p>lamar monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/JasperFx/lamar\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolangchain4j","title":"monorepo:langchain4j","text":"<p>langchain4j monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/langchain4j/langchain4j\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolerna","title":"monorepo:lerna","text":"<p>lerna monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lerna/lerna\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolerna-lite","title":"monorepo:lerna-lite","text":"<p>lerna-lite monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lerna-lite/lerna-lite\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolexical","title":"monorepo:lexical","text":"<p>lexical monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/facebook/lexical\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolinguijs","title":"monorepo:linguijs","text":"<p>linguijs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lingui/js-lingui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolinkifyjs","title":"monorepo:linkifyjs","text":"<p>linkifyjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nfrasser/linkifyjs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolog4j2","title":"monorepo:log4j2","text":"<p>log4j2 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apache/logging-log4j2\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepologback","title":"monorepo:logback","text":"<p>logback monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/qos-ch/logback\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoloopback","title":"monorepo:loopback","text":"<p>loopback monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/strongloop/loopback-next\",\n    \"https://github.com/loopbackio/loopback-next\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolrnwebcomponents","title":"monorepo:lrnwebcomponents","text":"<p>lrnwebcomponents monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/elmsln/lrnwebcomponents\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolucide","title":"monorepo:lucide","text":"<p>lucide monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lucide-icons/lucide\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomailing","title":"monorepo:mailing","text":"<p>mailing monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/sofn-xyz/mailing\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomantine","title":"monorepo:mantine","text":"<p>mantine monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mantinedev/mantine\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomapstruct","title":"monorepo:mapstruct","text":"<p>mapstruct monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mapstruct/mapstruct\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomarten","title":"monorepo:marten","text":"<p>marten monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/JasperFx/marten\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomasstransit","title":"monorepo:masstransit","text":"<p>masstransit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/MassTransit/MassTransit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomaterial-components-web","title":"monorepo:material-components-web","text":"<p>material-components-web monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/material-components/material-components-web\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomaterial-ui","title":"monorepo:material-ui","text":"<p>material-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mui-org/material-ui\",\n    \"https://github.com/mui/material-ui\",\n    \"https://github.com/mui/mui-x\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomdc-react","title":"monorepo:mdc-react","text":"<p>mdc-react monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/material-components/material-components-web-react\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomdx","title":"monorepo:mdx","text":"<p>mdx monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mdx-js/mdx\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomiddy-js","title":"monorepo:middy-js","text":"<p>middy-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/middyjs/middy\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomikro-orm","title":"monorepo:mikro-orm","text":"<p>mikro-orm monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mikro-orm/mikro-orm\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoml-dotnet","title":"monorepo:ml-dotnet","text":"<p>ml-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnet/machinelearning\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomockito","title":"monorepo:mockito","text":"<p>mockito monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mockito/mockito\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomongo-csharp-driver","title":"monorepo:mongo-csharp-driver","text":"<p>mongo-csharp-driver monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mongodb/mongo-csharp-driver\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomongo-java-driver","title":"monorepo:mongo-java-driver","text":"<p>mongo-java-driver monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mongodb/mongo-java-driver\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomstest","title":"monorepo:mstest","text":"<p>mstest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/testfx\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomutation-testing-elements","title":"monorepo:mutation-testing-elements","text":"<p>mutation-testing-elements monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/stryker-mutator/mutation-testing-elements\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponest","title":"monorepo:nest","text":"<p>nest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nestjs/config\",\n    \"https://github.com/nestjs/nest\",\n    \"https://github.com/nestjs/nest-cli\",\n    \"https://github.com/nestjs/passport\",\n    \"https://github.com/nestjs/schematics\",\n    \"https://github.com/nestjs/terminus\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponest-graphql","title":"monorepo:nest-graphql","text":"<p>nest-graphql monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nestjs/graphql\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponetty","title":"monorepo:netty","text":"<p>netty monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/netty/netty\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponeutrino","title":"monorepo:neutrino","text":"<p>neutrino monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/neutrinojs/neutrino\",\n    \"https://github.com/mozilla-neutrino/neutrino-dev\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponexpect","title":"monorepo:nexpect","text":"<p>nexpect monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/fluffynuts/NExpect\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponextjs","title":"monorepo:nextjs","text":"<p>nextjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/zeit/next.js\",\n    \"https://github.com/vercel/next.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponextra","title":"monorepo:nextra","text":"<p>nextra monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/shuding/nextra\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongx-cookie-service","title":"monorepo:ngx-cookie-service","text":"<p>ngx-cookie-service monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/stevermeister/ngx-cookie-service\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongx-formly","title":"monorepo:ngx-formly","text":"<p>ngx-formly monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ngx-formly/ngx-formly\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongxs-store","title":"monorepo:ngxs-store","text":"<p>ngxs-store monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ngxs/store\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponivo","title":"monorepo:nivo","text":"<p>nivo monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/plouc/nivo\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponjson-schema","title":"monorepo:njson-schema","text":"<p>njson-schema monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/RicoSuter/NJsonSchema\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponswag","title":"monorepo:nswag","text":"<p>nswag monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/RicoSuter/NSwag\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponuget","title":"monorepo:nuget","text":"<p>nuget monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/NuGet/NuGet.Client\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponuke-build","title":"monorepo:nuke-build","text":"<p>nuke-build monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nuke-build/nuke\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponuxtjs","title":"monorepo:nuxtjs","text":"<p>nuxtjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nuxt/nuxt.js\",\n    \"https://github.com/nuxt/nuxt\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepookhttp","title":"monorepo:okhttp","text":"<p>okhttp monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/square/okhttp\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopenapi-dotnet","title":"monorepo:openapi-dotnet","text":"<p>openapi-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/OpenAPI.NET\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopencost","title":"monorepo:opencost","text":"<p>opencost monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/opencost/opencost\",\n    \"https://github.com/opencost/opencost-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopeniddict","title":"monorepo:openiddict","text":"<p>openiddict monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/openiddict/openiddict-core\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-dotnet","title":"monorepo:opentelemetry-dotnet","text":"<p>opentelemetry-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-dotnet-contrib","title":"monorepo:opentelemetry-dotnet-contrib","text":"<p>opentelemetry-dotnet-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-dotnet-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-erlang","title":"monorepo:opentelemetry-erlang","text":"<p>opentelemetry-erlang monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-erlang\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-erlang-contrib","title":"monorepo:opentelemetry-erlang-contrib","text":"<p>opentelemetry-erlang-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-erlang-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-go","title":"monorepo:opentelemetry-go","text":"<p>opentelemetry-go monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-go\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-go-contrib","title":"monorepo:opentelemetry-go-contrib","text":"<p>opentelemetry-go-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-go-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-java","title":"monorepo:opentelemetry-java","text":"<p>opentelemetry-java monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-java\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-java-contrib","title":"monorepo:opentelemetry-java-contrib","text":"<p>opentelemetry-java-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-java-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-js","title":"monorepo:opentelemetry-js","text":"<p>opentelemetry-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-js-contrib","title":"monorepo:opentelemetry-js-contrib","text":"<p>opentelemetry-js-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-js-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-python","title":"monorepo:opentelemetry-python","text":"<p>opentelemetry-python monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-python\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-python-contrib","title":"monorepo:opentelemetry-python-contrib","text":"<p>opentelemetry-python-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-python-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-rust","title":"monorepo:opentelemetry-rust","text":"<p>opentelemetry-rust monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-rust\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-rust-contrib","title":"monorepo:opentelemetry-rust-contrib","text":"<p>opentelemetry-rust-contrib monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/open-telemetry/opentelemetry-rust-contrib\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoorleans","title":"monorepo:orleans","text":"<p>orleans monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/dotnet/orleans\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepooxlint","title":"monorepo:oxlint","text":"<p>oxlint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/oxc-project/oxc\",\n    \"https://github.com/oxc-project/eslint-plugin-oxlint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopanda-css","title":"monorepo:panda-css","text":"<p>panda-css monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/chakra-ui/panda\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoparcel","title":"monorepo:parcel","text":"<p>parcel monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/parcel-bundler/parcel\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopayloadcms","title":"monorepo:payloadcms","text":"<p>payloadcms monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/payloadcms/payload\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopdfme","title":"monorepo:pdfme","text":"<p>pdfme monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pdfme/pdfme\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopercy-cli","title":"monorepo:percy-cli","text":"<p>percy-cli monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/percy/cli\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopicassojs","title":"monorepo:picassojs","text":"<p>picassojs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/qlik-oss/picasso.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopixijs","title":"monorepo:pixijs","text":"<p>pixijs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pixijs/pixi.js\",\n    \"https://github.com/pixijs/pixijs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoplaywright","title":"monorepo:playwright","text":"<p>playwright monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/playwright\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoplaywright-dotnet","title":"monorepo:playwright-dotnet","text":"<p>playwright-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/playwright-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopnpcore","title":"monorepo:pnpcore","text":"<p>pnpcore monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pnp/pnpcore\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopnpjs","title":"monorepo:pnpjs","text":"<p>pnpjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pnp/pnpjs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopolly","title":"monorepo:polly","text":"<p>polly monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/App-vNext/Polly\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopollyjs","title":"monorepo:pollyjs","text":"<p>pollyjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Netflix/pollyjs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopothos","title":"monorepo:pothos","text":"<p>pothos monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hayes/pothos\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopouchdb","title":"monorepo:pouchdb","text":"<p>pouchdb monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pouchdb/pouchdb\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopowermock","title":"monorepo:powermock","text":"<p>powermock monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/powermock/powermock\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoprisma","title":"monorepo:prisma","text":"<p>prisma monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/prisma/prisma\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoprometheus-net","title":"monorepo:prometheus-net","text":"<p>prometheus-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/prometheus-net/prometheus-net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopromster","title":"monorepo:promster","text":"<p>promster monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tdeekens/promster\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoprotobuf","title":"monorepo:protobuf","text":"<p>protobuf monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/protocolbuffers/protobuf\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoquartznet","title":"monorepo:quartznet","text":"<p>quartznet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/quartznet/quartznet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporadix-ui-primitives","title":"monorepo:radix-ui-primitives","text":"<p>radix-ui-primitives monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/radix-ui/primitives\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeach-ui","title":"monorepo:reach-ui","text":"<p>reach-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reach/reach-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact","title":"monorepo:react","text":"<p>react monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/facebook/react\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-admin","title":"monorepo:react-admin","text":"<p>react-admin monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/marmelab/react-admin\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-apollo","title":"monorepo:react-apollo","text":"<p>react-apollo monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apollographql/react-apollo\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-dnd","title":"monorepo:react-dnd","text":"<p>react-dnd monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/react-dnd/react-dnd\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-navigation","title":"monorepo:react-navigation","text":"<p>react-navigation monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/react-navigation/react-navigation\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-page","title":"monorepo:react-page","text":"<p>react-page monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/react-page/react-page\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-rails","title":"monorepo:react-rails","text":"<p>react-rails monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reactjs/react-rails\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-router","title":"monorepo:react-router","text":"<p>react-router monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ReactTraining/react-router\",\n    \"https://github.com/remix-run/react-router\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-spectrum","title":"monorepo:react-spectrum","text":"<p>react-spectrum monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/adobe/react-spectrum\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-spring","title":"monorepo:react-spring","text":"<p>react-spring monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/pmndrs/react-spring\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeactivestack-cookies","title":"monorepo:reactivestack-cookies","text":"<p>reactivestack-cookies monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reactivestack/cookies\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeakit","title":"monorepo:reakit","text":"<p>reakit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reakit/reakit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporedwood","title":"monorepo:redwood","text":"<p>redwood monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/redwoodjs/redwood\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporefit","title":"monorepo:refit","text":"<p>refit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reactiveui/refit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeg-suit","title":"monorepo:reg-suit","text":"<p>reg-suit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/reg-viz/reg-suit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporemark","title":"monorepo:remark","text":"<p>remark monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/remarkjs/remark\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporemix","title":"monorepo:remix","text":"<p>remix monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/remix-run/remix\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporetrofit","title":"monorepo:retrofit","text":"<p>retrofit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/square/retrofit\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporiver","title":"monorepo:river","text":"<p>river monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/riverqueue/river\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporjsf","title":"monorepo:rjsf","text":"<p>rjsf monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/rjsf-team/react-jsonschema-form\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporouter5","title":"monorepo:router5","text":"<p>router5 monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/router5/router5\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporspack","title":"monorepo:rspack","text":"<p>rspack monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/web-infra-dev/rspack\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporuby-on-rails","title":"monorepo:ruby-on-rails","text":"<p>ruby-on-rails monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/rails/rails\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporust-analyzer","title":"monorepo:rust-analyzer","text":"<p>rust-analyzer monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/rust-lang/rust-analyzer\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporust-futures","title":"monorepo:rust-futures","text":"<p>rust-futures monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/rust-lang/futures-rs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporust-wasm-bindgen","title":"monorepo:rust-wasm-bindgen","text":"<p>rust-wasm-bindgen monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/wasm-bindgen/wasm-bindgen\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposanity","title":"monorepo:sanity","text":"<p>sanity monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/sanity-io/sanity\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposerilog-ui","title":"monorepo:serilog-ui","text":"<p>serilog-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/serilog-contrib/serilog-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposcaffdog","title":"monorepo:scaffdog","text":"<p>scaffdog monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/scaffdog/scaffdog\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposcalar","title":"monorepo:scalar","text":"<p>scalar monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/scalar/scalar\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposea-orm","title":"monorepo:sea-orm","text":"<p>sea-orm monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/SeaQL/sea-orm\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposecretlint","title":"monorepo:secretlint","text":"<p>secretlint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/secretlint/secretlint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposendgrid-nodejs","title":"monorepo:sendgrid-nodejs","text":"<p>sendgrid-nodejs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/sendgrid/sendgrid-nodejs\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-dotnet","title":"monorepo:sentry-dotnet","text":"<p>sentry-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/getsentry/sentry-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-javascript","title":"monorepo:sentry-javascript","text":"<p>sentry-javascript monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/getsentry/sentry-javascript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-ruby","title":"monorepo:sentry-ruby","text":"<p>sentry-ruby monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/getsentry/sentry-ruby\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-rust","title":"monorepo:sentry-rust","text":"<p>sentry-rust monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/getsentry/sentry-rust\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposerde","title":"monorepo:serde","text":"<p>serde monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/serde-rs/serde\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposerenity-js","title":"monorepo:serenity-js","text":"<p>serenity-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/serenity-js/serenity-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposervicestack","title":"monorepo:servicestack","text":"<p>servicestack monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ServiceStack/ServiceStack\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposhedlock","title":"monorepo:shedlock","text":"<p>shedlock monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lukas-krecan/ShedLock\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposhiki","title":"monorepo:shiki","text":"<p>shiki monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/shikijs/shiki\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposhopify-app-bridge","title":"monorepo:shopify-app-bridge","text":"<p>shopify-app-bridge monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Shopify/app-bridge\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepositecore-jss","title":"monorepo:sitecore-jss","text":"<p>sitecore-jss monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Sitecore/jss\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposkiasharp","title":"monorepo:skiasharp","text":"<p>skiasharp monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/mono/SkiaSharp\",\n    \"https://go.microsoft.com/fwlink/?linkid=868515\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposlack-net","title":"monorepo:slack-net","text":"<p>slack-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/soxtoby/SlackNet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposlf4j","title":"monorepo:slf4j","text":"<p>slf4j monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/qos-ch/slf4j\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposlim-message-bus","title":"monorepo:slim-message-bus","text":"<p>slim-message-bus monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/zarusz/SlimMessageBus\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospectre-console","title":"monorepo:spectre-console","text":"<p>spectre-console monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/spectreconsole/spectre.console\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospringfox","title":"monorepo:springfox","text":"<p>springfox monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/springfox/springfox\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostack-exchange-redis-extensions","title":"monorepo:stack-exchange-redis-extensions","text":"<p>stack-exchange-redis-extensions monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/imperugo/StackExchange.Redis.Extensions\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostatsig-js-client","title":"monorepo:statsig-js-client","text":"<p>statsig-js-client monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/statsig-io/js-client-monorepo\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposteeltoe","title":"monorepo:steeltoe","text":"<p>steeltoe monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/SteeltoeOSS/steeltoe\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostorybook","title":"monorepo:storybook","text":"<p>storybook monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/storybookjs/storybook\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostorybook-react-native","title":"monorepo:storybook-react-native","text":"<p>storybook-react-native monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/storybookjs/react-native\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostrapi","title":"monorepo:strapi","text":"<p>strapi monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/strapi/strapi\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostrum","title":"monorepo:strum","text":"<p>strum monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Peternator7/strum\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostryker-js","title":"monorepo:stryker-js","text":"<p>stryker-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/stryker-mutator/stryker-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostylex-swc","title":"monorepo:stylex-swc","text":"<p>stylex-swc monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Dwlad90/stylex-swc-plugin\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposurveyjs","title":"monorepo:surveyjs","text":"<p>surveyjs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/surveyjs/surveyjs\",\n    \"https://github.com/surveyjs/survey-library\",\n    \"https://github.com/surveyjs/survey-creator\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposwashbuckle-aspnetcore","title":"monorepo:swashbuckle-aspnetcore","text":"<p>swashbuckle-aspnetcore monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposystemioabstractions","title":"monorepo:system.io.abstractions","text":"<p>system.io.abstractions monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/System-IO-Abstractions/System.IO.Abstractions/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotailwindcss","title":"monorepo:tailwindcss","text":"<p>tailwindcss monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tailwindlabs/tailwindcss\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotaiga-ui","title":"monorepo:taiga-ui","text":"<p>taiga-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/taiga-family/taiga-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotamagui","title":"monorepo:tamagui","text":"<p>tamagui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tamagui/tamagui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-form","title":"monorepo:tanstack-form","text":"<p>tanstack-form monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/TanStack/form\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-query","title":"monorepo:tanstack-query","text":"<p>tanstack-query monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/TanStack/query\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-router","title":"monorepo:tanstack-router","text":"<p>tanstack-router monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/TanStack/router\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-table","title":"monorepo:tanstack-table","text":"<p>tanstack-table monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/TanStack/table\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-virtual","title":"monorepo:tanstack-virtual","text":"<p>tanstack-virtual monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/TanStack/virtual\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotauri","title":"monorepo:tauri","text":"<p>tauri monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tauri-apps/tauri\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotelus-tds","title":"monorepo:telus-tds","text":"<p>telus-tds monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/telusdigital/tds\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotelus-tds-core","title":"monorepo:telus-tds-core","text":"<p>telus-tds-core monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/telus/tds-core\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotemporalio-ts","title":"monorepo:temporalio-ts","text":"<p>temporalio-ts monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/temporalio/sdk-typescript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoterraform","title":"monorepo:terraform","text":"<p>terraform monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hashicorp/terraform\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotestcontainers-dotnet","title":"monorepo:testcontainers-dotnet","text":"<p>testcontainers-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/testcontainers/testcontainers-dotnet\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotestcontainers-go","title":"monorepo:testcontainers-go","text":"<p>testcontainers-go monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/testcontainers/testcontainers-go\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotestcontainers-java","title":"monorepo:testcontainers-java","text":"<p>testcontainers-java monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/testcontainers/testcontainers-java\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotestcontainers-node","title":"monorepo:testcontainers-node","text":"<p>testcontainers-node monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/testcontainers/testcontainers-node\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotheme-ui","title":"monorepo:theme-ui","text":"<p>theme-ui monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/system-ui/theme-ui\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotika","title":"monorepo:tika","text":"<p>tika monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apache/tika\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotimvir","title":"monorepo:timvir","text":"<p>timvir monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/timvir/timvir\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotiptap","title":"monorepo:tiptap","text":"<p>tiptap monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ueberdosis/tiptap\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotokio-prost","title":"monorepo:tokio-prost","text":"<p>tokio-prost monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tokio-rs/prost\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotokio-tracing","title":"monorepo:tokio-tracing","text":"<p>tokio-tracing monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/tokio-rs/tracing\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotonic","title":"monorepo:tonic","text":"<p>tonic monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hyperium/tonic\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotreat","title":"monorepo:treat","text":"<p>treat monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/seek-oss/treat\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotrpc","title":"monorepo:trpc","text":"<p>trpc monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/trpc/trpc\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotrust-dns","title":"monorepo:trust-dns","text":"<p>trust-dns monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/bluejekyll/trust-dns\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotsoa","title":"monorepo:tsoa","text":"<p>tsoa monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lukeautry/tsoa\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoturbo","title":"monorepo:turbo","text":"<p>turbo monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vercel/turbo\",\n    \"https://github.com/vercel/turborepo\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoturf","title":"monorepo:turf","text":"<p>turf monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Turfjs/turf\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotyped-signalr","title":"monorepo:typed-signalr","text":"<p>typed-signalr monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nenoNaninu/TypedSignalR.Client.TypeScript\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypefaces","title":"monorepo:typefaces","text":"<p>typefaces monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/KyleAMathews/typefaces\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypescript-eslint","title":"monorepo:typescript-eslint","text":"<p>typescript-eslint monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/typescript-eslint/typescript-eslint\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypography-js","title":"monorepo:typography-js","text":"<p>typography-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/KyleAMathews/typography.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoui5-webcomponents","title":"monorepo:ui5-webcomponents","text":"<p>ui5-webcomponents monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/SAP/ui5-webcomponents\",\n    \"https://github.com/SAP/ui5-webcomponents-react\",\n    \"https://github.com/SAP/ui5-webcomponents-ngx\",\n    \"https://github.com/UI5/webcomponents\",\n    \"https://github.com/UI5/webcomponents-react\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepounhead","title":"monorepo:unhead","text":"<p>unhead monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/unjs/unhead\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepounocss","title":"monorepo:unocss","text":"<p>unocss monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/unocss/unocss\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepouppy","title":"monorepo:uppy","text":"<p>uppy monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/transloadit/uppy\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoutoipa","title":"monorepo:utoipa","text":"<p>utoipa monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/juhaku/utoipa\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovaadin-hilla","title":"monorepo:vaadin-hilla","text":"<p>vaadin-hilla monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vaadin/hilla\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovaadinwebcomponents","title":"monorepo:vaadinWebComponents","text":"<p>vaadinWebComponents monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vaadin/web-components\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovanilla-extract","title":"monorepo:vanilla-extract","text":"<p>vanilla-extract monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vanilla-extract-css/vanilla-extract\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovisx","title":"monorepo:visx","text":"<p>visx monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/airbnb/visx\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovitest","title":"monorepo:vitest","text":"<p>vitest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vitest-dev/vitest\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovstest","title":"monorepo:vstest","text":"<p>vstest monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/microsoft/vstest\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovue","title":"monorepo:vue","text":"<p>vue monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vuejs/vue\",\n    \"https://github.com/vuejs/core\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovue-cli","title":"monorepo:vue-cli","text":"<p>vue-cli monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vuejs/vue-cli\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovuepress","title":"monorepo:vuepress","text":"<p>vuepress monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vuejs/vuepress\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovueuse","title":"monorepo:vueuse","text":"<p>vueuse monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/vueuse/vueuse\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoweasel","title":"monorepo:weasel","text":"<p>weasel monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/JasperFx/weasel\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoweb3-react","title":"monorepo:web3-react","text":"<p>web3-react monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Uniswap/web3-react\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowebdriverio","title":"monorepo:webdriverio","text":"<p>webdriverio monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/webdriverio/webdriverio\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowolverine","title":"monorepo:wolverine","text":"<p>wolverine monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/jasperfx/wolverine\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoworkbox","title":"monorepo:workbox","text":"<p>workbox monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/googlechrome/workbox\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowyw-in-js","title":"monorepo:wyw-in-js","text":"<p>wyw-in-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/Anber/wyw-in-js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoxstate","title":"monorepo:xstate","text":"<p>xstate monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/statelyai/xstate\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoxterm","title":"monorepo:xterm","text":"<p>xterm monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/xtermjs/xterm.js\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoxunit-dotnet","title":"monorepo:xunit-dotnet","text":"<p>xunit-dotnet monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/xunit/assert.xunit\",\n    \"https://github.com/xunit/visualstudio.xunit\",\n    \"https://github.com/xunit/xunit\",\n    \"https://github.com/xunit/xunit.analyzers\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoyarn","title":"monorepo:yarn","text":"<p>yarn monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/yarnpkg/berry\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepozag-js","title":"monorepo:zag-js","text":"<p>zag-js monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/chakra-ui/zag\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepozxing-net","title":"monorepo:zxing-net","text":"<p>zxing-net monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/micjahn/ZXing.Net\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohapijs","title":"monorepo:hapijs","text":"<p>hapijs monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/hapijs/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolodash","title":"monorepo:lodash","text":"<p>lodash monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/lodash/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongrx","title":"monorepo:ngrx","text":"<p>ngrx monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/ngrx/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponx","title":"monorepo:nx","text":"<p>nx monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/nrwl/nx**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepooctokit","title":"monorepo:octokit","text":"<p>octokit monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/octokit/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepophp-enqueue","title":"monorepo:php-enqueue","text":"<p>php-enqueue monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/php-enqueue/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposemantic-release","title":"monorepo:semantic-release","text":"<p>semantic-release monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/semantic-release/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposwc","title":"monorepo:swc","text":"<p>swc monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/swc-project/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotwig","title":"monorepo:twig","text":"<p>twig monorepo</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/twigphp/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularmaterial","title":"monorepo:angularmaterial","text":"<p>angularmaterial monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@angular/material/\",\n    \"/^@angular/cdk/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapache-camel","title":"monorepo:apache-camel","text":"<p>apache-camel monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^org.apache.camel:/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapache-poi","title":"monorepo:apache-poi","text":"<p>apache-poi monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^org.apache.poi:/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-java-sdk","title":"monorepo:aws-java-sdk","text":"<p>aws-java-sdk monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^com.amazonaws:aws-java-sdk-/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-java-sdk-v2","title":"monorepo:aws-java-sdk-v2","text":"<p>aws-java-sdk-v2 monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^software.amazon.awssdk:/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaxis2","title":"monorepo:axis2","text":"<p>axis2 monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^org.apache.axis2:/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobabel6","title":"monorepo:babel6","text":"<p>babel6 monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^babel6$/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoembroider","title":"monorepo:embroider","text":"<p>embroider monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@embroider//\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoforge","title":"monorepo:forge","text":"<p>forge monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@forge//\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofullcalendar","title":"monorepo:fullcalendar","text":"<p>fullcalendar monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@fullcalendar//\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohotchocolate","title":"monorepo:hotchocolate","text":"<p>hotchocolate monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^HotChocolate\\\\./\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepooracle-database","title":"monorepo:oracle-database","text":"<p>oracle-database monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^com.oracle.database.jdbc:/\",\n    \"/^com.oracle.database.nls:/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoprometheus-simpleclient","title":"monorepo:prometheus-simpleclient","text":"<p>prometheus-simpleclient monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^io.prometheus:simpleclient/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporussh","title":"monorepo:russh","text":"<p>russh monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^russh$/\",\n    \"/^russh-keys$/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospfx","title":"monorepo:spfx","text":"<p>spfx monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@microsoft/sp-/\",\n    \"/^@microsoft/eslint-.+-spfx$/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospock","title":"monorepo:spock","text":"<p>spock monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^org\\\\.spockframework:spock-/\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposyncfusion-dotnet","title":"monorepo:syncfusion-dotnet","text":"<p>syncfusion-dotnet monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^Syncfusion\\\\./\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotesting-library","title":"monorepo:testing-library","text":"<p>testing-library monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@testing-library//\"\n  ]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowordpress","title":"monorepo:wordpress","text":"<p>wordpress monorepo</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"/^@wordpress/\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/","title":"Package Presets","text":""},{"location":"presets-packages/#packagesangularjs","title":"packages:angularJs","text":"<p>All AngularJS packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"angular\",\n    \"angular-animate\",\n    \"angular-scroll\",\n    \"angular-sanitize\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesapollographql","title":"packages:apollographql","text":"<p>All packages published by Apollo GraphQL.</p> <pre><code>{\n  \"matchSourceUrls\": [\n    \"https://github.com/apollographql/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesatlaskit","title":"packages:atlaskit","text":"<p>All @atlaskit packages published by Atlassian.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"@atlaskit/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesembertemplatelint","title":"packages:emberTemplateLint","text":"<p>All ember-template-lint packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"ember-template-lint**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packageseslint","title":"packages:eslint","text":"<p>All ESLint packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"@types/eslint\",\n    \"babel-eslint\",\n    \"@babel/eslint-parser\",\n    \"@eslint/**\",\n    \"@eslint-community/**\",\n    \"@stylistic/eslint-plugin**\",\n    \"@types/eslint__**\",\n    \"@typescript-eslint/**\",\n    \"typescript-eslint\",\n    \"eslint**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesgatsby","title":"packages:gatsby","text":"<p>All packages published by Gatsby.</p> <pre><code>{\n  \"extends\": [\n    \"monorepo:gatsby\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesgoogleapis","title":"packages:googleapis","text":"<p>All <code>googleapis</code> packages.</p> <pre><code>{\n  \"matchDatasources\": [\n    \"npm\"\n  ],\n  \"matchPackageNames\": [\n    \"@google-cloud/**\",\n    \"google-auth-library\",\n    \"googleapis\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesjstest","title":"packages:jsTest","text":"<p>JavaScript test packages.</p> <pre><code>{\n  \"extends\": [\n    \"packages:jsUnitTest\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesjsunittest","title":"packages:jsUnitTest","text":"<p>Unit test packages for JavaScript.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"@types/chai\",\n    \"@types/ember-mocha\",\n    \"@types/ember-qunit\",\n    \"@types/enzyme\",\n    \"@types/istanbul\",\n    \"@types/jest\",\n    \"@types/mocha\",\n    \"@types/mock-fs\",\n    \"@types/proxyquire\",\n    \"@types/sinon\",\n    \"@types/supertest\",\n    \"coveralls\",\n    \"ember-exam\",\n    \"ember-mocha\",\n    \"ember-qunit\",\n    \"enzyme\",\n    \"istanbul\",\n    \"mock-fs\",\n    \"nock\",\n    \"nyc\",\n    \"proxyquire\",\n    \"supertest\",\n    \"ts-auto-mock\",\n    \"ts-jest\",\n    \"vitest\",\n    \"@jest/**\",\n    \"@testing-library/**\",\n    \"@types/testing-library__**\",\n    \"@vitest/**\",\n    \"chai**\",\n    \"jest**\",\n    \"mocha**\",\n    \"qunit**\",\n    \"should**\",\n    \"sinon**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packageslinters","title":"packages:linters","text":"<p>All lint-related packages.</p> <pre><code>{\n  \"extends\": [\n    \"packages:emberTemplateLint\",\n    \"packages:eslint\",\n    \"packages:phpLinters\",\n    \"packages:stylelint\",\n    \"packages:tslint\"\n  ],\n  \"matchPackageNames\": [\n    \"prettier\",\n    \"remark-lint\",\n    \"standard\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesmapbox","title":"packages:mapbox","text":"<p>All Mapbox-related packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"leaflet**\",\n    \"mapbox**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesphplinters","title":"packages:phpLinters","text":"<p>All PHP lint-related packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"friendsofphp/php-cs-fixer\",\n    \"squizlabs/php_codesniffer\",\n    \"symplify/easy-coding-standard\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesphpunittest","title":"packages:phpUnitTest","text":"<p>Unit test packages for PHP.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"behat/behat\",\n    \"brianium/paratest\",\n    \"facile-it/paraunit\",\n    \"mockery/mockery\",\n    \"phpspec/prophecy\",\n    \"phpspec/prophecy-phpunit\",\n    \"phpspec/phpspec\",\n    \"phpunit/phpunit\",\n    \"pestphp/**\",\n    \"php-mock/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagespostcss","title":"packages:postcss","text":"<p>All PostCSS packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"postcss\",\n    \"postcss-**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesreact","title":"packages:react","text":"<p>All React packages.</p> <pre><code>{\n  \"matchDatasources\": [\n    \"npm\"\n  ],\n  \"matchPackageNames\": [\n    \"@types/react**\",\n    \"react**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesstylelint","title":"packages:stylelint","text":"<p>All Stylelint packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"stylelint**\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagestest","title":"packages:test","text":"<p>Test packages.</p> <pre><code>{\n  \"extends\": [\n    \"packages:unitTest\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagestslint","title":"packages:tslint","text":"<p>All TSLint packages.</p> <pre><code>{\n  \"matchPackageNames\": [\n    \"codelyzer\",\n    \"/\\\\btslint\\\\b/\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesunittest","title":"packages:unitTest","text":"<p>All unit test packages.</p> <pre><code>{\n  \"extends\": [\n    \"packages:jsUnitTest\",\n    \"packages:phpUnitTest\"\n  ]\n}\n</code></pre>"},{"location":"presets-packages/#packagesvite","title":"packages:vite","text":"<p>All Vite related packages</p> <pre><code>{\n  \"matchDatasources\": [\n    \"npm\"\n  ],\n  \"matchPackageNames\": [\n    \"vite\",\n    \"**vite-plugin**\",\n    \"@vitejs/**\"\n  ]\n}\n</code></pre>"},{"location":"presets-preview/","title":"Preview Presets","text":""},{"location":"presets-preview/#previewbuildkite","title":"preview:buildkite","text":"<p>Enable Buildkite functionality.</p> <pre><code>{\n  \"buildkite\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-preview/#previewdockercompose","title":"preview:dockerCompose","text":"<p>Enable Docker Compose image updating.</p> <pre><code>{\n  \"docker-compose\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"presets-preview/#previewdockerversions","title":"preview:dockerVersions","text":"<p>Upgrade Docker tags to newer versions.</p> <pre><code>{\n  \"docker-compose\": {\n    \"major\": {\n      \"enabled\": true\n    },\n    \"minor\": {\n      \"enabled\": true\n    }\n  },\n  \"dockerfile\": {\n    \"major\": {\n      \"enabled\": true\n    },\n    \"minor\": {\n      \"enabled\": true\n    }\n  }\n}\n</code></pre>"},{"location":"presets-replacements/","title":"Replacement Presets","text":""},{"location":"presets-replacements/#replacementsall","title":"replacements:all","text":"<p>Apply crowd-sourced package replacement rules.</p> <pre><code>{\n  \"extends\": [\n    \"replacements:airbnb-prop-types-to-prop-types-tools\",\n    \"replacements:apollo-server-to-scoped\",\n    \"replacements:babel-eslint-to-eslint-parser\",\n    \"replacements:containerbase\",\n    \"replacements:cpx-to-maintenance-fork\",\n    \"replacements:cucumber-to-scoped\",\n    \"replacements:docker-compose\",\n    \"replacements:eslint-config-standard-with-typescript-to-eslint-config-love\",\n    \"replacements:eslint-plugin-eslint-comments-to-maintained-fork\",\n    \"replacements:eslint-plugin-node-to-maintained-fork\",\n    \"replacements:eslint-plugin-vitest-to-scoped\",\n    \"replacements:fakerjs-to-scoped\",\n    \"replacements:fastify-to-scoped\",\n    \"replacements:framer-motion-to-motion\",\n    \"replacements:google-github-action-release-please-to-googleapis\",\n    \"replacements:hapi-to-scoped\",\n    \"replacements:jade-to-pug\",\n    \"replacements:joi-to-scoped\",\n    \"replacements:joi-to-unscoped\",\n    \"replacements:k8s-registry-move\",\n    \"replacements:material-ui-to-mui\",\n    \"replacements:mem-rename\",\n    \"replacements:messageFormat-to-scoped\",\n    \"replacements:middie-to-scoped\",\n    \"replacements:now-to-vercel\",\n    \"replacements:npm-run-all-to-maintenance-fork\",\n    \"replacements:opencost-registry-move\",\n    \"replacements:parcel-css-to-lightningcss\",\n    \"replacements:passport-saml\",\n    \"replacements:react-query-devtools-to-scoped\",\n    \"replacements:react-query-to-scoped\",\n    \"replacements:react-scripts-ts-to-react-scripts\",\n    \"replacements:read-pkg-up-rename\",\n    \"replacements:redux-devtools-extension-to-scope\",\n    \"replacements:renovate-pep440-to-renovatebot-pep440\",\n    \"replacements:rollup-babel-to-scoped\",\n    \"replacements:rollup-json-to-scoped\",\n    \"replacements:rollup-node-resolve-to-scoped\",\n    \"replacements:rollup-terser-to-scoped\",\n    \"replacements:rome-to-biome\",\n    \"replacements:semantic-release-replace-plugin-to-unscoped\",\n    \"replacements:spectre-cli-to-spectre-console-cli\",\n    \"replacements:standard-version-to-commit-and-tag\",\n    \"replacements:typeorm-seeding-to-scoped\",\n    \"replacements:vso-task-lib-to-azure-pipelines-task-lib\",\n    \"replacements:vsts-task-lib-to-azure-pipelines-task-lib\",\n    \"replacements:xmldom-to-scoped\",\n    \"replacements:zap\"\n  ],\n  \"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsairbnb-prop-types-to-prop-types-tools","title":"replacements:airbnb-prop-types-to-prop-types-tools","text":"<p><code>airbnb-prop-types</code> was given to a new maintainer and renamed to <code>prop-types-tools</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"^2\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"airbnb-prop-types\"\n      ],\n      \"replacementName\": \"prop-types-tools\",\n      \"replacementVersion\": \"2.17.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsapollo-server-to-scoped","title":"replacements:apollo-server-to-scoped","text":"<p><code>apollo-server</code> packages became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=3.10.3\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-server\",\n        \"apollo-server-core\",\n        \"apollo-server-express\"\n      ],\n      \"replacementName\": \"@apollo/server\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.3.1\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-server-errors\"\n      ],\n      \"replacementName\": \"@apollo/server\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.6.3\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-server-types\",\n        \"apollo-server-plugin-base\"\n      ],\n      \"replacementName\": \"@apollo/server\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.7.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-datasource-rest\"\n      ],\n      \"replacementName\": \"@apollo/datasource-rest\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.7.1\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-server-plugin-response-cache\"\n      ],\n      \"replacementName\": \"@apollo/server-plugin-response-cache\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.5.1\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-server-plugin-operation-registry\"\n      ],\n      \"replacementName\": \"@apollo/server-plugin-operation-registry\",\n      \"replacementVersion\": \"3.5.6\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.3.3\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"apollo-reporting-protobuf\"\n      ],\n      \"replacementName\": \"@apollo/usage-reporting-protobuf\",\n      \"replacementVersion\": \"4.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsbabel-eslint-to-eslint-parser","title":"replacements:babel-eslint-to-eslint-parser","text":"<p><code>babel-eslint</code> was renamed under the <code>@babel</code> scope.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=7.11.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"babel-eslint\"\n      ],\n      \"replacementName\": \"@babel/eslint-parser\",\n      \"replacementVersion\": \"7.11.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsclang-format-to-maintenance-fork","title":"replacements:clang-format-to-maintenance-fork","text":"<p>Maintenance fork of <code>clang-format</code></p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"clang-format\"\n      ],\n      \"replacementName\": \"clang-format-node\",\n      \"replacementVersion\": \"2.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementscontainerbase","title":"replacements:containerbase","text":"<p>Replace containerbase dependencies.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Replace `containerbase/(buildpack|base)` and `renovate/buildpack` with `ghcr.io/containerbase/base`.\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:docker\\\\.io/)?containerbase/(?:buildpack|base)$/\",\n        \"/^ghcr\\\\.io/containerbase/buildpack$/\",\n        \"/^(?:docker\\\\.io/)?renovate/buildpack$/\"\n      ],\n      \"replacementName\": \"ghcr.io/containerbase/base\"\n    },\n    {\n      \"description\": \"Replace `containerbase/node` and `renovate/node` with `ghcr.io/containerbase/node`.\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:docker\\\\.io/)?(?:containerbase|renovate)/node$/\"\n      ],\n      \"replacementName\": \"ghcr.io/containerbase/node\"\n    },\n    {\n      \"description\": \"Replace `containerbase/sidecar` and `renovate/sidecar` with `ghcr.io/containerbase/sidecar`.\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:docker\\\\.io/)?(?:containerbase|renovate)/sidecar$/\"\n      ],\n      \"replacementName\": \"ghcr.io/containerbase/sidecar\"\n    },\n    {\n      \"description\": \"Replace `renovatebot/internal-tools` with `containerbase/internal-tools`.\",\n      \"matchDatasources\": [\n        \"github-tags\"\n      ],\n      \"matchPackageNames\": [\n        \"renovatebot/internal-tools\"\n      ],\n      \"replacementName\": \"containerbase/internal-tools\"\n    },\n    {\n      \"description\": \"Replace `renovate` `slim` docker tag with `latest`.\",\n      \"matchCurrentValue\": \"/^slim$/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"ghcr.io/renovatebot/renovate\",\n        \"/^(?:docker\\\\.io/)?renovate/renovate$/\"\n      ],\n      \"replacementVersion\": \"latest\"\n    },\n    {\n      \"description\": \"Remove `renovate` `-slim` docker tag suffix.\",\n      \"extractVersion\": \"^(?&lt;version&gt;.+)-slim$\",\n      \"matchCurrentValue\": \"/-slim$/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"ghcr.io/renovatebot/renovate\",\n        \"/^(?:docker\\\\.io/)?renovate/renovate$/\"\n      ],\n      \"versioning\": \"semver\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementscpx-to-maintenance-fork","title":"replacements:cpx-to-maintenance-fork","text":"<p>Maintenance fork of <code>cpx</code></p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"cpx\"\n      ],\n      \"replacementName\": \"cpx2\",\n      \"replacementVersion\": \"2.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementscucumber-to-scoped","title":"replacements:cucumber-to-scoped","text":"<p><code>cucumber</code> became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"cucumber\"\n      ],\n      \"replacementName\": \"@cucumber/cucumber\",\n      \"replacementVersion\": \"7.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsdocker-compose","title":"replacements:docker-compose","text":"<p>Compose is now part of the official Docker image.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"docker/compose\"\n      ],\n      \"matchCurrentValue\": \"/^((debian|alpine)-)?1\\\\.29\\\\.2$/\",\n      \"replacementName\": \"docker\",\n      \"replacementVersion\": \"23.0.0-cli\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementseslint-plugin-eslint-comments-to-maintained-fork","title":"replacements:eslint-plugin-eslint-comments-to-maintained-fork","text":"<p>Replace <code>eslint-plugin-eslint-comments</code> with a maintained fork: <code>@eslint-community/eslint-plugin-eslint-comments</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"eslint-plugin-eslint-comments\"\n      ],\n      \"matchCurrentVersion\": \"^3.2.0\",\n      \"replacementName\": \"@eslint-community/eslint-plugin-eslint-comments\",\n      \"replacementVersion\": \"3.2.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementseslint-config-standard-with-typescript-to-eslint-config-love","title":"replacements:eslint-config-standard-with-typescript-to-eslint-config-love","text":"<p><code>eslint-config-standard-with-typescript</code> was renamed to <code>eslint-config-love</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"^43.0.1\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"eslint-config-standard-with-typescript\"\n      ],\n      \"replacementName\": \"eslint-config-love\",\n      \"replacementVersion\": \"43.1.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementseslint-plugin-node-to-maintained-fork","title":"replacements:eslint-plugin-node-to-maintained-fork","text":"<p>Replace stale <code>eslint-plugin-node</code> with a maintained fork: <code>eslint-plugin-n</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"^11.1.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"eslint-plugin-node\"\n      ],\n      \"replacementName\": \"eslint-plugin-n\",\n      \"replacementVersion\": \"14.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementseslint-plugin-vitest-to-scoped","title":"replacements:eslint-plugin-vitest-to-scoped","text":"<p><code>eslint-plugin-vitest</code> became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=0.5.4\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"eslint-plugin-vitest\"\n      ],\n      \"replacementName\": \"@vitest/eslint-plugin\",\n      \"replacementVersion\": \"1.0.1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsfakerjs-to-scoped","title":"replacements:fakerjs-to-scoped","text":"<p><code>fakerjs</code> packages became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"faker\"\n      ],\n      \"replacementName\": \"@faker-js/faker\",\n      \"replacementVersion\": \"5.5.3\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"faker\"\n      ],\n      \"replacementName\": \"@faker-js/faker\",\n      \"replacementVersion\": \"4.1.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.0.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"faker\"\n      ],\n      \"replacementName\": \"@faker-js/faker\",\n      \"replacementVersion\": \"3.1.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"faker\"\n      ],\n      \"replacementName\": \"@faker-js/faker\",\n      \"replacementVersion\": \"2.1.5\"\n    },\n    {\n      \"matchCurrentVersion\": \"&lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"faker\"\n      ],\n      \"replacementName\": \"@faker-js/faker\",\n      \"replacementVersion\": \"1.1.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsfastify-to-scoped","title":"replacements:fastify-to-scoped","text":"<p><code>fastify</code> packages became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=3.3.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-accepts-serializer\"\n      ],\n      \"replacementName\": \"@fastify/accepts-serializer\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-accepts\"\n      ],\n      \"replacementName\": \"@fastify/accepts\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-auth\"\n      ],\n      \"replacementName\": \"@fastify/auth\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.13.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-autoload\"\n      ],\n      \"replacementName\": \"@fastify/autoload\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.3.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-awilix\"\n      ],\n      \"replacementName\": \"@fastify/awilix\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-basic-auth\"\n      ],\n      \"replacementName\": \"@fastify/basic-auth\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-bearer-auth\"\n      ],\n      \"replacementName\": \"@fastify/bearer-auth\",\n      \"replacementVersion\": \"7.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-caching\"\n      ],\n      \"replacementName\": \"@fastify/caching\",\n      \"replacementVersion\": \"7.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-circuit-breaker\"\n      ],\n      \"replacementName\": \"@fastify/circuit-breaker\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.1.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-compress\"\n      ],\n      \"replacementName\": \"@fastify/compress\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=5.7.0 &lt;6.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-cookie\"\n      ],\n      \"replacementName\": \"@fastify/cookie\",\n      \"replacementVersion\": \"6.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=6.1.0 &lt;7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-cors\"\n      ],\n      \"replacementName\": \"@fastify/cors\",\n      \"replacementVersion\": \"7.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-diagnostics-channel\"\n      ],\n      \"replacementName\": \"@fastify/diagnostics-channel\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-elasticsearch\"\n      ],\n      \"replacementName\": \"@fastify/elasticsearch\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-env\"\n      ],\n      \"replacementName\": \"@fastify/env\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-error\"\n      ],\n      \"replacementName\": \"@fastify/error\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-etag\"\n      ],\n      \"replacementName\": \"@fastify/etag\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-express\"\n      ],\n      \"replacementName\": \"@fastify/express\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.1.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-flash\"\n      ],\n      \"replacementName\": \"@fastify/flash\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=5.3.0 &lt;6.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-formbody\"\n      ],\n      \"replacementName\": \"@fastify/formbody\",\n      \"replacementVersion\": \"6.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-funky\"\n      ],\n      \"replacementName\": \"@fastify/funky\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=7.1.0 &lt;8.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-helmet\"\n      ],\n      \"replacementName\": \"@fastify/helmet\",\n      \"replacementVersion\": \"8.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-hotwire\"\n      ],\n      \"replacementName\": \"@fastify/hotwire\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-http-proxy\"\n      ],\n      \"replacementName\": \"@fastify/http-proxy\",\n      \"replacementVersion\": \"7.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.2.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-jwt\"\n      ],\n      \"replacementName\": \"@fastify/jwt\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-kafka\"\n      ],\n      \"replacementName\": \"@fastify/kafka\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-leveldb\"\n      ],\n      \"replacementName\": \"@fastify/leveldb\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.2.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-mongodb\"\n      ],\n      \"replacementName\": \"@fastify/mongodb\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=5.4.0 &lt;6.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-multipart\"\n      ],\n      \"replacementName\": \"@fastify/multipart\",\n      \"replacementVersion\": \"6.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-mysql\"\n      ],\n      \"replacementName\": \"@fastify/mysql\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=7.3.0 &lt;8.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-nextjs\"\n      ],\n      \"replacementName\": \"@fastify/nextjs\",\n      \"replacementVersion\": \"8.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.6.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-oauth2\"\n      ],\n      \"replacementName\": \"@fastify/oauth2\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.5.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-passport\"\n      ],\n      \"replacementName\": \"@fastify/passport\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.7.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-postgres\"\n      ],\n      \"replacementName\": \"@fastify/postgres\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=5.9.0 &lt;6.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-rate-limit\"\n      ],\n      \"replacementName\": \"@fastify/rate-limit\",\n      \"replacementVersion\": \"6.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.4.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-redis\"\n      ],\n      \"replacementName\": \"@fastify/redis\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=6.7.0 &lt;7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-reply-from\"\n      ],\n      \"replacementName\": \"@fastify/reply-from\",\n      \"replacementVersion\": \"7.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-request-context\"\n      ],\n      \"replacementName\": \"@fastify/request-context\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-response-validation\"\n      ],\n      \"replacementName\": \"@fastify/response-validation\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.1.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-routes-stats\"\n      ],\n      \"replacementName\": \"@fastify/routes-stats\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-routes\"\n      ],\n      \"replacementName\": \"@fastify/routes\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-schedule\"\n      ],\n      \"replacementName\": \"@fastify/schedule\",\n      \"replacementVersion\": \"2.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-secure-session\"\n      ],\n      \"replacementName\": \"@fastify/secure-session\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-sensible\"\n      ],\n      \"replacementName\": \"@fastify/sensible\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-soap-client\"\n      ],\n      \"replacementName\": \"@fastify/soap-client\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.7.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-static\"\n      ],\n      \"replacementName\": \"@fastify/static\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=5.2.0 &lt;6.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-swagger\"\n      ],\n      \"replacementName\": \"@fastify/swagger\",\n      \"replacementVersion\": \"6.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=3.1.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-url-data\"\n      ],\n      \"replacementName\": \"@fastify/url-data\",\n      \"replacementVersion\": \"4.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.3.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-websocket\"\n      ],\n      \"replacementName\": \"@fastify/websocket\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.1.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"fastify-zipkin\"\n      ],\n      \"replacementName\": \"@fastify/zipkin\",\n      \"replacementVersion\": \"3.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsframer-motion-to-motion","title":"replacements:framer-motion-to-motion","text":"<p><code>framer-motion</code> and Motion One have merged under the package name <code>motion</code>, though <code>framer-motion</code> is still being published. <code>motion</code> is now the recommended name.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=11.11.12\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"framer-motion\"\n      ],\n      \"replacementName\": \"motion\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsgoogle-github-action-release-please-to-googleapis","title":"replacements:google-github-action-release-please-to-googleapis","text":"<p><code>google-github-action/release-please</code> was renamed to <code>googleapis/release-please</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"github-tags\"\n      ],\n      \"matchPackageNames\": [\n        \"google-github-actions/release-please-action\"\n      ],\n      \"replacementName\": \"googleapis/release-please-action\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementshapi-to-scoped","title":"replacements:hapi-to-scoped","text":"<p><code>hapi</code> became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=18.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"hapi\"\n      ],\n      \"replacementName\": \"@hapi/hapi\",\n      \"replacementVersion\": \"18.2.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjade-to-pug","title":"replacements:jade-to-pug","text":"<p>Jade was renamed to Pug.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"jade\"\n      ],\n      \"replacementName\": \"pug\",\n      \"replacementVersion\": \"2.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjoi-to-scoped","title":"replacements:joi-to-scoped","text":"<p><code>joi</code> became scoped under the <code>hapi</code> organization.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=14.0.0 &lt;14.4.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"joi\"\n      ],\n      \"replacementName\": \"@hapi/joi\",\n      \"replacementVersion\": \"14.4.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjoi-to-unscoped","title":"replacements:joi-to-unscoped","text":"<p><code>joi</code> was moved out of the <code>hapi</code> organization.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=17.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@hapi/joi\"\n      ],\n      \"replacementName\": \"joi\",\n      \"replacementVersion\": \"17.1.1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsk8s-registry-move","title":"replacements:k8s-registry-move","text":"<p>The Kubernetes container registry has changed from <code>k8s.gcr.io</code> to <code>registry.k8s.io</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^k8s\\\\.gcr\\\\.io/.+$/\"\n      ],\n      \"replacementNameTemplate\": \"{{{replace 'k8s\\\\.gcr\\\\.io/' 'registry.k8s.io/' packageName}}}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmem-rename","title":"replacements:mem-rename","text":"<p><code>mem</code> was renamed to <code>memoize</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"^10.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"mem\"\n      ],\n      \"replacementName\": \"memoize\",\n      \"replacementVersion\": \"10.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmiddie-to-scoped","title":"replacements:middie-to-scoped","text":"<p><code>middie</code> became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=7.1.0 &lt;8.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"middie\"\n      ],\n      \"replacementName\": \"@fastify/middie\",\n      \"replacementVersion\": \"8.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsnow-to-vercel","title":"replacements:now-to-vercel","text":"<p><code>now</code> was renamed to <code>vercel</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=21.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"now\"\n      ],\n      \"replacementName\": \"vercel\",\n      \"replacementVersion\": \"21.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsnpm-run-all-to-maintenance-fork","title":"replacements:npm-run-all-to-maintenance-fork","text":"<p>Maintenance fork of <code>npm-run-all</code></p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"npm-run-all\"\n      ],\n      \"replacementName\": \"npm-run-all2\",\n      \"replacementVersion\": \"5.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsopencost-registry-move","title":"replacements:opencost-registry-move","text":"<p>Replace OpenCost registry from quay.io to ghcr.io.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Replace `quay.io/kubecost1/kubecost-cost-model` with `ghcr.io/opencost/opencost`.\",\n      \"matchCurrentVersion\": \"1.108.0\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"quay.io/kubecost1/kubecost-cost-model\"\n      ],\n      \"replacementName\": \"ghcr.io/opencost/opencost\",\n      \"replacementVersion\": \"1.109.0\"\n    },\n    {\n      \"description\": \"Replace `quay.io/kubecost1/opencost-ui` with `ghcr.io/opencost/opencost-ui`.\",\n      \"matchCurrentVersion\": \"1.108.0\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"quay.io/kubecost1/opencost-ui\"\n      ],\n      \"replacementName\": \"ghcr.io/opencost/opencost-ui\",\n      \"replacementVersion\": \"1.109.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsparcel-css-to-lightningcss","title":"replacements:parcel-css-to-lightningcss","text":"<p><code>@parcel/css</code> was renamed to <code>lightningcss</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@parcel/css\"\n      ],\n      \"replacementName\": \"lightningcss\",\n      \"replacementVersion\": \"1.14.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementspassport-saml","title":"replacements:passport-saml","text":"<p><code>passport-saml</code> was renamed to <code>@node-saml/passport-saml</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"passport-saml\"\n      ],\n      \"replacementName\": \"@node-saml/passport-saml\",\n      \"replacementVersion\": \"4.0.4\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-query-devtools-to-scoped","title":"replacements:react-query-devtools-to-scoped","text":"<p><code>react-query/devtools</code> became scoped under the <code>tanstack</code> organization.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"react-query/devtools\"\n      ],\n      \"replacementName\": \"@tanstack/react-query-devtools\",\n      \"replacementVersion\": \"4.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-query-to-scoped","title":"replacements:react-query-to-scoped","text":"<p><code>react-query</code> became scoped under the <code>tanstack</code> organization.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=3.0.0 &lt;4.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"react-query\"\n      ],\n      \"replacementName\": \"@tanstack/react-query\",\n      \"replacementVersion\": \"4.0.5\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-scripts-ts-to-react-scripts","title":"replacements:react-scripts-ts-to-react-scripts","text":"<p><code>react-scripts</code> supports TypeScript since version <code>2.1.0</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"react-scripts-ts\"\n      ],\n      \"replacementName\": \"react-scripts\",\n      \"replacementVersion\": \"2.1.8\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsread-pkg-up-rename","title":"replacements:read-pkg-up-rename","text":"<p><code>read-pkg-up</code> was renamed to <code>read-package-up</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"read-pkg-up\"\n      ],\n      \"replacementName\": \"read-package-up\",\n      \"replacementVersion\": \"11.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsredux-devtools-extension-to-scope","title":"replacements:redux-devtools-extension-to-scope","text":"<p>The <code>redux-devtools-extension</code> package was renamed to <code>@redux-devtools/extension</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"redux-devtools-extension\"\n      ],\n      \"replacementName\": \"@redux-devtools/extension\",\n      \"replacementVersion\": \"3.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrenovate-pep440-to-renovatebot-pep440","title":"replacements:renovate-pep440-to-renovatebot-pep440","text":"<p>The <code>@renovate/pep440</code> package was renamed to <code>@renovatebot/pep440</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@renovate/pep440\"\n      ],\n      \"replacementName\": \"@renovatebot/pep440\",\n      \"replacementVersion\": \"1.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrollup-babel-to-scoped","title":"replacements:rollup-babel-to-scoped","text":"<p>The babel plugin for rollup became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"rollup-plugin-babel\"\n      ],\n      \"replacementName\": \"@rollup/plugin-babel\",\n      \"replacementVersion\": \"5.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrollup-json-to-scoped","title":"replacements:rollup-json-to-scoped","text":"<p>The json plugin for rollup became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"rollup-plugin-json\"\n      ],\n      \"replacementName\": \"@rollup/plugin-json\",\n      \"replacementVersion\": \"4.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrollup-node-resolve-to-scoped","title":"replacements:rollup-node-resolve-to-scoped","text":"<p>The node-resolve plugin for rollup became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"rollup-plugin-node-resolve\"\n      ],\n      \"replacementName\": \"@rollup/plugin-node-resolve\",\n      \"replacementVersion\": \"6.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrollup-terser-to-scoped","title":"replacements:rollup-terser-to-scoped","text":"<p>The terser plugin for rollup became scoped.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=7.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"rollup-plugin-terser\"\n      ],\n      \"replacementName\": \"@rollup/plugin-terser\",\n      \"replacementVersion\": \"0.1.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrome-to-biome","title":"replacements:rome-to-biome","text":"<p>The Rome repository is archived, and Biome is the community replacement. Read the Biome announcement for migration instructions.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"rome\"\n      ],\n      \"replacementName\": \"@biomejs/biome\",\n      \"replacementVersion\": \"1.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementssemantic-release-replace-plugin-to-unscoped","title":"replacements:semantic-release-replace-plugin-to-unscoped","text":"<p><code>semantic-release-replace-plugin</code> was moved out of the <code>google</code> organization.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@google/semantic-release-replace-plugin\"\n      ],\n      \"replacementName\": \"semantic-release-replace-plugin\",\n      \"replacementVersion\": \"1.2.1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsspectre-cli-to-spectre-console-cli","title":"replacements:spectre-cli-to-spectre-console-cli","text":"<p>The <code>Spectre.Cli</code> package was renamed to <code>Spectre.Console.Cli</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"nuget\"\n      ],\n      \"matchPackageNames\": [\n        \"Spectre.Cli\"\n      ],\n      \"replacementName\": \"Spectre.Console.Cli\",\n      \"replacementVersion\": \"0.45.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsstandard-version-to-commit-and-tag","title":"replacements:standard-version-to-commit-and-tag","text":"<p><code>standard-version</code> is now maintained as <code>commit-and-tag-version</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"^9.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"standard-version\"\n      ],\n      \"replacementName\": \"commit-and-tag-version\",\n      \"replacementVersion\": \"9.5.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementstypeorm-seeding-to-scoped","title":"replacements:typeorm-seeding-to-scoped","text":"<p><code>typeorm-seeding</code> is now maintained as scoped package.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"1.6.1\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"typeorm-seeding\"\n      ],\n      \"replacementName\": \"@jorgebodega/typeorm-seeding\",\n      \"replacementVersion\": \"2.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsvso-task-lib-to-azure-pipelines-task-lib","title":"replacements:vso-task-lib-to-azure-pipelines-task-lib","text":"<p>The <code>vso-task-lib</code> package is now published as <code>azure-pipelines-task-lib</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"vso-task-lib\"\n      ],\n      \"replacementName\": \"azure-pipelines-task-lib\",\n      \"replacementVersion\": \"3.4.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsvsts-task-lib-to-azure-pipelines-task-lib","title":"replacements:vsts-task-lib-to-azure-pipelines-task-lib","text":"<p>The <code>vsts-task-lib</code> package is now published as <code>azure-pipelines-task-lib</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"vsts-task-lib\"\n      ],\n      \"replacementName\": \"azure-pipelines-task-lib\",\n      \"replacementVersion\": \"3.4.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsxmldom-to-scoped","title":"replacements:xmldom-to-scoped","text":"<p>The <code>xmldom</code> package is now published as <code>@xmldom/xmldom</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"xmldom\",\n        \"xmldom-alpha\"\n      ],\n      \"replacementName\": \"@xmldom/xmldom\",\n      \"replacementVersion\": \"0.7.5\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementszap","title":"replacements:zap","text":"<p>Replace ZAP dependencies.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"The `zap-stable` image has moved to the `zaproxy` organization.\",\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;2.14.0\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:docker\\\\.io/)?owasp/zap2docker-stable$/\",\n        \"/^(?:docker\\\\.io/)?softwaresecurityproject/zap-stable$/\"\n      ],\n      \"replacementName\": \"zaproxy/zap-stable\",\n      \"replacementVersion\": \"2.14.0\"\n    },\n    {\n      \"description\": \"The `zap-bare` image has moved to the `zaproxy` organization.\",\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;2.14.0\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:docker\\\\.io/)?owasp/zap2docker-bare$/\",\n        \"/^(?:docker\\\\.io/)?softwaresecurityproject/zap-bare$/\"\n      ],\n      \"replacementName\": \"zaproxy/zap-bare\",\n      \"replacementVersion\": \"2.14.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmessageformat-to-scoped","title":"replacements:messageFormat-to-scoped","text":"<p>The <code>messageformat</code> monorepo package naming scheme changed from <code>messageFormat-{{package}}</code> to <code>@messageformat/{{package}}</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"messageformat-cli\"\n      ],\n      \"replacementName\": \"@messageformat/cli\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=2.0.0 &lt;3.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"messageformat\"\n      ],\n      \"replacementName\": \"@messageformat/core\",\n      \"replacementVersion\": \"3.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"messageformat-convert\"\n      ],\n      \"replacementName\": \"@messageformat/convert\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"react-message-context\"\n      ],\n      \"replacementName\": \"@messageformat/react\",\n      \"replacementVersion\": \"1.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"messageformat-parser\"\n      ],\n      \"replacementName\": \"@messageformat/parser\",\n      \"replacementVersion\": \"5.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmaterial-ui-to-mui","title":"replacements:material-ui-to-mui","text":"<p>The <code>material-ui</code> monorepo org was renamed from <code>@material-ui</code> to <code>@mui</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/codemod\"\n      ],\n      \"replacementName\": \"@mui/codemod\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/core\"\n      ],\n      \"replacementName\": \"@mui/material\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/icons\"\n      ],\n      \"replacementName\": \"@mui/icons-material\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/lab\"\n      ],\n      \"replacementName\": \"@mui/lab\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/private-theming\"\n      ],\n      \"replacementName\": \"@mui/private-theming\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/styled-engine\"\n      ],\n      \"replacementName\": \"@mui/styled-engine\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/styled-engine-sc\"\n      ],\n      \"replacementName\": \"@mui/styled-engine-sc\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/styles\"\n      ],\n      \"replacementName\": \"@mui/styles\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/system\"\n      ],\n      \"replacementName\": \"@mui/system\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/types\"\n      ],\n      \"replacementName\": \"@mui/types\",\n      \"replacementVersion\": \"5.0.0\"\n    },\n    {\n      \"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n      \"matchDatasources\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@material-ui/unstyled\"\n      ],\n      \"replacementName\": \"@mui/core\",\n      \"replacementVersion\": \"5.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/","title":"Schedule Presets","text":""},{"location":"presets-schedule/#scheduleautomergedaily","title":"schedule:automergeDaily","text":"<p>Schedule automerge daily before 4 AM.</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* 0-3 * * *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeearlymondays","title":"schedule:automergeEarlyMondays","text":"<p>Schedule automerge on Monday mornings (before 4 AM).</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* 0-3 * * 1\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergemonthly","title":"schedule:automergeMonthly","text":"<p>Schedule automerge for the first day of each month, before 4 AM.</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* 0-3 1 * *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergenonofficehours","title":"schedule:automergeNonOfficeHours","text":"<p>Schedule automerge during typical non-office hours on weekdays (i.e., 10 PM - 5 AM) and anytime on weekends.</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* 0-4,22-23 * * 1-5\",\n    \"* * * * 0,6\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeofficehours","title":"schedule:automergeOfficeHours","text":"<p>Schedule automerge during typical office hours on weekdays (i.e., 8 AM - 6 PM).</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* 8-17 * * 1-5\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergequarterly","title":"schedule:automergeQuarterly","text":"<p>Schedule automerge on the first day of each quarter (i.e., January, April, July, October).</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* * 1 */3 *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekdays","title":"schedule:automergeWeekdays","text":"<p>Schedule automerge anytime on weekdays.</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* * * * 1-5\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekends","title":"schedule:automergeWeekends","text":"<p>Schedule automerge anytime on weekends.</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* * * * 0,6\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekly","title":"schedule:automergeWeekly","text":"<p>Schedule automerge weekly.</p> <pre><code>{\n  \"extends\": [\n    \"schedule:automergeEarlyMondays\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeyearly","title":"schedule:automergeYearly","text":"<p>Schedule automerge once a year on the first day of January (not recommended).</p> <pre><code>{\n  \"automergeSchedule\": [\n    \"* * 1 */12 *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduledaily","title":"schedule:daily","text":"<p>Schedule daily before 4 AM.</p> <pre><code>{\n  \"schedule\": [\n    \"* 0-3 * * *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleearlymondays","title":"schedule:earlyMondays","text":"<p>Weekly schedule on early Monday mornings (before 4 AM).</p> <pre><code>{\n  \"schedule\": [\n    \"* 0-3 * * 1\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulemonthly","title":"schedule:monthly","text":"<p>Schedule once a month on the first day of the month before 4 AM.</p> <pre><code>{\n  \"schedule\": [\n    \"* 0-3 1 * *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulenonofficehours","title":"schedule:nonOfficeHours","text":"<p>Schedule during typical non-office hours on weekdays (i.e., 10 PM - 5 AM) and anytime on weekends.</p> <pre><code>{\n  \"schedule\": [\n    \"* 0-4,22-23 * * 1-5\",\n    \"* * * * 0,6\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleofficehours","title":"schedule:officeHours","text":"<p>Schedule during typical office hours on weekdays (i.e., 8 AM - 6 PM).</p> <pre><code>{\n  \"schedule\": [\n    \"* 8-17 * * 1-5\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulequarterly","title":"schedule:quarterly","text":"<p>Schedule on the first day of each quarter (i.e., January, April, July, October).</p> <pre><code>{\n  \"schedule\": [\n    \"* * 1 */3 *\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekdays","title":"schedule:weekdays","text":"<p>Schedule for weekdays.</p> <pre><code>{\n  \"schedule\": [\n    \"* * * * 1-5\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekends","title":"schedule:weekends","text":"<p>Schedule for weekends.</p> <pre><code>{\n  \"schedule\": [\n    \"* * * * 0,6\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekly","title":"schedule:weekly","text":"<p>Schedule weekly.</p> <pre><code>{\n  \"extends\": [\n    \"schedule:earlyMondays\"\n  ]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleyearly","title":"schedule:yearly","text":"<p>Schedule once a year on the first day of January (not recommended).</p> <pre><code>{\n  \"schedule\": [\n    \"* * 1 */12 *\"\n  ]\n}\n</code></pre>"},{"location":"presets-security/","title":"Security Presets","text":""},{"location":"presets-security/#securityopenssf-scorecard","title":"security:openssf-scorecard","text":"<p>Show OpenSSF badge on pull requests.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchSourceUrls\": [\n        \"https://github.com/**\"\n      ],\n      \"prBodyDefinitions\": {\n        \"OpenSSF\": \"[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/{{sourceRepo}}/badge)](https://securityscorecards.dev/viewer/?uri=github.com/{{sourceRepo}})\"\n      },\n      \"prBodyColumns\": [\n        \"Package\",\n        \"Type\",\n        \"Update\",\n        \"Change\",\n        \"Pending\",\n        \"OpenSSF\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-security/#securityonly-security-updates","title":"security:only-security-updates","text":"<p>Only update dependencies if vulnerabilities have been detected.</p> <pre><code>{\n  \"extends\": [\n    \"config:recommended\"\n  ],\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchPackageNames\": [\n        \"*\"\n      ]\n    }\n  ],\n  \"vulnerabilityAlerts\": {\n    \"enabled\": true\n  },\n  \"osvVulnerabilityAlerts\": true\n}\n</code></pre>"},{"location":"presets-security/#securityminimumreleaseagenpm","title":"security:minimumReleaseAgeNpm","text":"<p>Wait until the npm package is three days old before raising the update, this prevents npm unpublishing a package you already upgraded to.</p> <pre><code>{\n  \"npm\": {\n    \"minimumReleaseAge\": \"3 days\"\n  }\n}\n</code></pre>"},{"location":"presets-workarounds/","title":"Workaround Presets","text":""},{"location":"presets-workarounds/#workaroundsall","title":"workarounds:all","text":"<p>Apply crowd-sourced workarounds for known problems with packages.</p> <pre><code>{\n  \"extends\": [\n    \"workarounds:mavenCommonsAncientVersion\",\n    \"workarounds:ignoreSpringCloudNumeric\",\n    \"workarounds:ignoreWeb3jCoreWithOldReleaseTimestamp\",\n    \"workarounds:ignoreHttp4sDigestMilestones\",\n    \"workarounds:typesNodeVersioning\",\n    \"workarounds:nodeDockerVersioning\",\n    \"workarounds:doNotUpgradeFromAlpineStableToEdge\",\n    \"workarounds:supportRedHatImageVersion\",\n    \"workarounds:javaLTSVersions\",\n    \"workarounds:disableEclipseLifecycleMapping\",\n    \"workarounds:disableGradleReplacements\",\n    \"workarounds:disableMavenParentRoot\",\n    \"workarounds:containerbase\",\n    \"workarounds:bitnamiDockerImageVersioning\",\n    \"workarounds:k3sKubernetesVersioning\",\n    \"workarounds:rke2KubernetesVersioning\",\n    \"workarounds:libericaJdkDockerVersioning\",\n    \"workarounds:ubuntuDockerVersioning\"\n  ],\n  \"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsbitnamidockerimageversioning","title":"workarounds:bitnamiDockerImageVersioning","text":"<p>Use custom regex versioning for bitnami images</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCurrentValue\": \"/^(?&lt;major&gt;\\\\d+)(?:\\\\.(?&lt;minor&gt;\\\\d+)(?:\\\\.(?&lt;patch&gt;\\\\d+))?)?-(?&lt;compatibility&gt;.+)-(?&lt;build&gt;\\\\d+)(?:-r(?&lt;revision&gt;\\\\d+))?$/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"bitnami/**\",\n        \"docker.io/bitnami/**\",\n        \"gcr.io/bitnami-containers/**\"\n      ],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)(?:\\\\.(?&lt;minor&gt;\\\\d+)(?:\\\\.(?&lt;patch&gt;\\\\d+))?)?(:?-(?&lt;compatibility&gt;.+)-(?&lt;build&gt;\\\\d+)(?:-r(?&lt;revision&gt;\\\\d+))?)?$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundscontainerbase","title":"workarounds:containerbase","text":"<p>Add some containerbase overrides.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Use node versioning for `(containerbase|renovate)/node` images\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/^(?:(?:docker|ghcr)\\\\.io/)?(?:containerbase|renovate)/node$/\"\n      ],\n      \"versioning\": \"node\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdisableeclipselifecyclemapping","title":"workarounds:disableEclipseLifecycleMapping","text":"<p>Disable Eclipse m2e lifecycle-mapping placeholder package.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchDatasources\": [\n        \"maven\"\n      ],\n      \"matchPackageNames\": [\n        \"org.eclipse.m2e:lifecycle-mapping\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdisablegradlereplacements","title":"workarounds:disableGradleReplacements","text":"<p>Disable package replacement updates for gradle dependencies.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchManagers\": [\n        \"gradle\"\n      ],\n      \"matchUpdateTypes\": [\n        \"replacement\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdisablemavenparentroot","title":"workarounds:disableMavenParentRoot","text":"<p>Avoid version fetching for Maven packages detected as project root.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"enabled\": false,\n      \"matchDepTypes\": [\n        \"parent-root\"\n      ],\n      \"matchManagers\": [\n        \"maven\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdonotupgradefromalpinestabletoedge","title":"workarounds:doNotUpgradeFromAlpineStableToEdge","text":"<p>Do not upgrade from Alpine stable to edge.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"&lt;20000000\",\n      \"matchCurrentVersion\": \"!/^\\\\d{8}$/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchDepNames\": [\n        \"alpine\"\n      ]\n    },\n    {\n      \"allowedVersions\": \"&lt;20000000\",\n      \"matchCurrentVersion\": \"!/^\\\\d{8}$/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"alpine\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignorehttp4sdigestmilestones","title":"workarounds:ignoreHttp4sDigestMilestones","text":"<p>Ignore <code>http4s</code> digest-based <code>1.x</code> milestones.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"!/^1\\\\.0-\\\\d+-[a-fA-F0-9]{7}$/\",\n      \"matchManagers\": [\n        \"sbt\"\n      ],\n      \"matchPackageNames\": [\n        \"org.http4s:**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignorespringcloudnumeric","title":"workarounds:ignoreSpringCloudNumeric","text":"<p>Ignore spring cloud <code>1.x</code> releases.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"/^[A-Z]/\",\n      \"matchDatasources\": [\n        \"maven\"\n      ],\n      \"matchPackageNames\": [\n        \"org.springframework.cloud:spring-cloud-starter-parent\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignoreweb3jcorewitholdreleasetimestamp","title":"workarounds:ignoreWeb3jCoreWithOldReleaseTimestamp","text":"<p>Ignore <code>web3j</code> <code>5.0.0</code> release.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"!/^5\\\\.0\\\\.0/\",\n      \"matchDatasources\": [\n        \"maven\"\n      ],\n      \"matchPackageNames\": [\n        \"org.web3j:core\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsjavaltsversions","title":"workarounds:javaLTSVersions","text":"<p>Limit Java runtime versions to LTS releases.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"/^(?:8|11|17|21|25)(?:\\\\.|-|$)/\",\n      \"description\": \"Limit Java runtime versions to LTS releases. To receive all major releases add `workarounds:javaLTSVersions` to the `ignorePresets` array.\",\n      \"matchDatasources\": [\n        \"docker\",\n        \"java-version\"\n      ],\n      \"matchPackageNames\": [\n        \"eclipse-temurin\",\n        \"amazoncorretto\",\n        \"adoptopenjdk\",\n        \"openjdk\",\n        \"java\",\n        \"java-jre\",\n        \"sapmachine\",\n        \"/^azul/zulu-openjdk/\",\n        \"/^bellsoft/liberica-openj(dk|re)-/\",\n        \"/^cimg/openjdk/\"\n      ],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;(\\\\d\\\\.?)+)(LTS)?)?(-(?&lt;compatibility&gt;.*))?$\"\n    },\n    {\n      \"allowedVersions\": \"/^(?:8|11|17|21|25)(?:\\\\.|-|$)/\",\n      \"description\": \"Limit Java runtime versions to LTS releases. To receive all major releases add `workarounds:javaLTSVersions` to the `ignorePresets` array.\",\n      \"matchDatasources\": [\n        \"docker\",\n        \"java-version\"\n      ],\n      \"matchDepNames\": [\n        \"eclipse-temurin\",\n        \"amazoncorretto\",\n        \"adoptopenjdk\",\n        \"openjdk\",\n        \"java\",\n        \"java-jre\",\n        \"sapmachine\"\n      ],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;(\\\\d\\\\.?)+)(LTS)?)?(-(?&lt;compatibility&gt;.*))?$\"\n    },\n    {\n      \"allowedVersions\": \"/^(?:jdk|jdk-all|jre)-(?:8|11|17|21|25)(?:\\\\.|-|$)/\",\n      \"description\": \"Limit Java runtime versions to LTS releases. To receive all major releases add `workarounds:javaLTSVersions` to the `ignorePresets` array.\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"bellsoft/liberica-runtime-container\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsk3skubernetesversioning","title":"workarounds:k3sKubernetesVersioning","text":"<p>Use custom regex versioning for k3s-io/k3s</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"github-releases\"\n      ],\n      \"matchPackageNames\": [\n        \"k3s-io/k3s\"\n      ],\n      \"versioning\": \"regex:^v(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?:-(?&lt;prerelease&gt;[a-z]+\\\\d+))?(?&lt;compatibility&gt;\\\\+k3s)(?&lt;build&gt;\\\\d+)$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundslibericajdkdockerversioning","title":"workarounds:libericaJdkDockerVersioning","text":"<p>Use custom regex versioning for bellsoft/liberica-runtime-container</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Liberica JDK Lite version optimized for the Cloud\",\n      \"matchCurrentValue\": \"/^jdk-[^a][^l]{2}/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"bellsoft/liberica-runtime-container\"\n      ],\n      \"versioning\": \"regex:^jdk-(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;(\\\\d\\\\.?)+))?(-(?&lt;compatibility&gt;.*))?$\"\n    },\n    {\n      \"description\": \"Liberica JDK that can be used to create a custom runtime with a help of jlink tool\",\n      \"matchCurrentValue\": \"/^jdk-all/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"bellsoft/liberica-runtime-container\"\n      ],\n      \"versioning\": \"regex:^jdk-all-(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;(\\\\d\\\\.?)+))?(-(?&lt;compatibility&gt;.*))?$\"\n    },\n    {\n      \"description\": \"Liberica JRE (only the runtime without the rest of JDK tools) for running Java applications\",\n      \"matchCurrentValue\": \"/^jre-/\",\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"bellsoft/liberica-runtime-container\"\n      ],\n      \"versioning\": \"regex:^jre-(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;(\\\\d\\\\.?)+))?(-(?&lt;compatibility&gt;.*))?$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsmavencommonsancientversion","title":"workarounds:mavenCommonsAncientVersion","text":"<p>Fix some problems with very old Maven commons versions.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"allowedVersions\": \"!/^200\\\\d{5}(\\\\.\\\\d+)?/\",\n      \"matchDatasources\": [\n        \"maven\",\n        \"sbt-package\"\n      ],\n      \"matchPackageNames\": [\n        \"commons-**\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsnodedockerversioning","title":"workarounds:nodeDockerVersioning","text":"<p>Use node versioning for <code>node</code> docker images.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"/(?:^|/)node$/\",\n        \"!calico/node\",\n        \"!docker.io/calico/node\",\n        \"!ghcr.io/devcontainers/features/node\",\n        \"!kindest/node\"\n      ],\n      \"versionCompatibility\": \"^(?&lt;version&gt;[^-]+)(?&lt;compatibility&gt;-.*)?$\",\n      \"versioning\": \"node\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsrke2kubernetesversioning","title":"workarounds:rke2KubernetesVersioning","text":"<p>Use custom regex versioning for rancher/rke2</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"github-releases\"\n      ],\n      \"matchPackageNames\": [\n        \"rancher/rke2\"\n      ],\n      \"versioning\": \"regex:^v(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?:-(?&lt;prerelease&gt;[a-z]+\\\\d+))?(?&lt;compatibility&gt;\\\\+rke2r)(?&lt;build&gt;\\\\d+)$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundssupportredhatimageversion","title":"workarounds:supportRedHatImageVersion","text":"<p>Use specific versioning for Red Hat-maintained container images.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchPackageNames\": [\n        \"registry.access.redhat.com/rhel\",\n        \"registry.access.redhat.com/rhel-atomic\",\n        \"registry.access.redhat.com/rhel-init\",\n        \"registry.access.redhat.com/rhel-minimal\",\n        \"registry.access.redhat.com/rhceph/**\",\n        \"registry.access.redhat.com/rhgs3/**\",\n        \"registry.access.redhat.com/rhel7**\",\n        \"registry.access.redhat.com/rhel8/**\",\n        \"registry.access.redhat.com/rhel9/**\",\n        \"registry.access.redhat.com/rhscl/**\",\n        \"registry.access.redhat.com/ubi*{,/}**\",\n        \"redhat/**\"\n      ],\n      \"versioning\": \"redhat\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundstypesnodeversioning","title":"workarounds:typesNodeVersioning","text":"<p>Use node versioning for <code>@types/node</code>.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\n        \"npm\"\n      ],\n      \"matchPackageNames\": [\n        \"@types/node\"\n      ],\n      \"versioning\": \"node\"\n    }\n  ]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsubuntudockerversioning","title":"workarounds:ubuntuDockerVersioning","text":"<p>Use ubuntu versioning for <code>ubuntu</code> docker images.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\n        \"docker\"\n      ],\n      \"matchDepNames\": [\n        \"ubuntu\"\n      ],\n      \"versioning\": \"ubuntu\"\n    }\n  ]\n}\n</code></pre>"},{"location":"python/","title":"Python package manager support","text":"<p>Renovate supports several Python package managers, including <code>pip</code>, <code>pipenv</code>, <code>poetry</code>, etc. See all supported managers.</p>"},{"location":"python/#versioning-support","title":"Versioning support","text":"<p>We've written a JavaScript version of the PEP440 specification so we can use it in Renovate bot. You can find this project in our <code>renovatebot/pep440</code> repository.</p> <p>Our PEP440 implementation supports pinned versions and ranges. Legacy versions with the <code>===</code> prefix are ignored.</p>"},{"location":"python/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches through each repository for package files</li> <li>Existing dependencies are extracted from the package files</li> <li>Renovate searches for the latest version on PyPI to decide if there are upgrades</li> <li>If the source package includes a GitHub URL as its source, and has a \"changelog\" file or uses GitHub releases, a Release Note will be embedded in the generated PR</li> </ol>"},{"location":"python/#package-name-matching","title":"Package name matching","text":"<p>Your <code>matchPackageName</code> or <code>matchPackagePattern</code> rules will be matching against normalized names. So if you have specified package <code>some.package</code> or <code>ANOTHER_DEP</code> in your package files (<code>requirements.txt</code>, <code>pyproject.toml</code>), they will be treated as <code>some-package</code> and <code>another-dep</code> respectively. Not only they will be case insensitive but will replace any amount <code>._-</code> to a single <code>-</code>. Consult Python packaging documentation for the specification.</p>"},{"location":"python/#alternate-registries","title":"Alternate registries","text":"<p>By default Renovate checks for upgrades on the <code>pypi.org</code> registry.</p> <p>If you want, you can set alternative index URLs. There are three ways to do this:</p> <ul> <li>index-url in <code>requirements.txt</code></li> <li>sources in <code>Pipfile</code></li> <li>sources in <code>pyproject.toml</code></li> <li>set URL in Renovate configuration</li> </ul>"},{"location":"python/#index-url-in-requirementstxt","title":"index-url in <code>requirements.txt</code>","text":"Setting index URL in first line of requirements.txt<pre><code>--index-url http://example.com/private-pypi/\nsome-package==0.3.1\nsome-other-package==1.0.0\n</code></pre>"},{"location":"python/#sources-in-pipfile","title":"Sources in <code>Pipfile</code>","text":"<p>Renovate finds and uses any custom sources in your <code>Pipfile</code>.</p>"},{"location":"python/#sources-in-pyprojecttoml","title":"Sources in <code>pyproject.toml</code>","text":"<p>Renovate detects any custom-configured sources in <code>pyproject.toml</code> and uses them.</p>"},{"location":"python/#specify-url-in-configuration","title":"Specify URL in configuration","text":"<p>Create a <code>packageRules</code> entry with <code>matchDatasources=pypi</code> and a <code>registryUrls</code> array. Fill the array with alternate index URL(s).</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"pypi\"],\n      \"registryUrls\": [\"http://example.com/private-pypi/\"]\n    }\n  ]\n}\n</code></pre> <p>Tip</p> <p>If a <code>requirements.txt</code> file has an index-url then Renovate follows that link, instead of following any link set in the <code>registryUrls</code> array. To override the URL found in <code>requirements.txt</code>, you must create a custom <code>packageRules</code> setting. This is because <code>packageRules</code> are applied after package file extraction.</p>"},{"location":"python/#disabling-python-support","title":"Disabling Python support","text":"Disabling all managers in the Python category<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchCategories\": [\"python\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>Alternatively, you can use <code>enabledManagers</code> to tell Renovate what package managers it can use.</p> Only use Renovate's npm package manager<pre><code>{\n  \"enabledManagers\": [\"npm\"]\n}\n</code></pre>"},{"location":"reading-list/","title":"Reading list","text":"<p>Renovate's documentation has a lot of pages. To ease you into using Renovate we created reading lists. The reading lists contain the essential information for each type of user.</p> <p>How much you should read depends on how much you want to customize Renovate's behavior.</p>"},{"location":"reading-list/#how-to-use-this-page","title":"How to use this page","text":"<p>We created reading lists for these types of users:</p> <ul> <li>Beginners</li> <li>Intermediate</li> <li>Advanced</li> </ul> <p>Start with the \"Beginners\" reading list. If you're self-hosting or need to update private packages, complete the relevant reading lists for those.</p>"},{"location":"reading-list/#i-dont-know-where-to-start","title":"I don't know where to start","text":"<p>If you're new to Renovate, you should:</p> <ul> <li>Use the Mend Renovate App, or let someone else host Renovate for you</li> <li>Stick with the <code>config:recommended</code> preset</li> <li>Use the Dependency Dashboard (<code>config:recommended</code> enables it automatically)</li> <li>Read the pages in the \"Beginners\" list</li> <li>Only create custom Renovate configuration when really needed</li> </ul>"},{"location":"reading-list/#beginners","title":"Beginners","text":"<p>Start by reading:</p> <ul> <li>Installing &amp; Onboarding</li> <li>Key concepts, Dependency Dashboard</li> <li>Use Cases</li> <li>Running Renovate</li> <li>Troubleshooting</li> <li>Known limitations</li> </ul>"},{"location":"reading-list/#intermediate","title":"Intermediate","text":"<p>First, complete the \"Beginners\" reading list. Read this list after experiencing Renovate's default behavior, once you really want/need to make changes to Renovate's behavior.</p> <ul> <li>Upgrade best practices</li> <li>Key concepts, presets</li> <li>Key concepts, Renovate scheduling</li> <li>Key concepts, automerge</li> <li>Key concepts, pull requests</li> <li>Noise Reduction</li> </ul> <p>Skim the repository configuration options to learn about the kind of customizations you can make to Renovate. Feel free to read up on anything that looks interesting to you.</p>"},{"location":"reading-list/#advanced","title":"Advanced","text":"<p>First, complete the \"Beginners\" and the \"Intermediate\" reading list. Then read:</p> <ul> <li>Define your own custom manager with <code>customManagers</code> (previously <code>regexManagers</code>)</li> <li>Define your own custom datasources with <code>customDatasources</code></li> <li>Shareable config presets</li> </ul>"},{"location":"reading-list/#self-hosting-renovate","title":"Self-hosting Renovate","text":"<p>If you're going to self-host Renovate then read:</p> <ul> <li>Running Renovate</li> <li>Self-hosting examples</li> <li>Skim the self hosted configuration options</li> </ul>"},{"location":"reading-list/#private-packages","title":"Private packages","text":"<p>If you want Renovate to update private packages then read:</p> <ul> <li>Private package support</li> </ul>"},{"location":"ruby/","title":"Automated dependency updates for Ruby Bundler dependencies","text":"<p>Renovate supports upgrading dependencies in Bundler's Gemfiles and associated <code>Gemfile.lock</code> files.</p>"},{"location":"ruby/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any Gemfiles</li> <li>Existing dependencies are extracted from the Gemfiles</li> <li>Renovate resolves the dependency on Rubygems.org (or elsewhere if configured), and checks for newer versions</li> <li>A PR is created which updates the <code>Gemfile</code> and <code>Gemfile.lock</code> in a single commit</li> </ol>"},{"location":"ruby/#warnings","title":"Warnings","text":"<p>When using <code>\"rangeStrategy\": \"update-lockfile\"</code>, all gems listed in the <code>Gemfile</code> will be updated, even if they do not have a version specified.</p> <p>When using other <code>rangeStrategy</code> options, Renovate doesn't update dependencies without a version constraint. Example: <code>gem 'some-gem', '~&gt; 1.2.3'</code> will update <code>some-gem</code> if a new version matching the constraint is available, but <code>gem 'some-gem'</code> won't. If you always want to have the latest available version, consider specifying <code>gem 'some-gem', '&gt; 0'</code>.</p>"},{"location":"ruby/#enabling","title":"Enabling","text":"<p>You can install the Renovate App on GitHub. Or you can check out Renovate OSS to self-host Renovate.</p>"},{"location":"rust/","title":"Automated Dependency Updates for Rust crates","text":"<p>Renovate supports upgrading dependencies in <code>Cargo.toml</code> files and associated <code>Cargo.lock</code> checksums.</p>"},{"location":"rust/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any <code>Cargo.toml</code> files</li> <li>Renovate extracts existing dependencies from <code>[dependencies]</code>, <code>[dev-dependencies]</code>, <code>[build-dependencies]</code> and <code>[workspace.dependencies]</code></li> <li>Renovate looks up Cargo configuration to find index URLs for private registries</li> <li>Renovate resolves the dependency's version using the crates.io API or by cloning the index URL</li> <li>If Renovate finds an update, Renovate will use <code>cargo update</code> to update both <code>Cargo.toml</code> and <code>Cargo.lock</code></li> </ol>"},{"location":"rust/#enabling-rust-modules-updating","title":"Enabling Rust Modules Updating","text":"<p>Renovate updates Rust crates by default.</p>"},{"location":"rust/#cargo-configuration-and-private-registry-discovery","title":"Cargo configuration and private registry discovery","text":"<p>Renovate can find private registry URLs in these Cargo configuration files:</p> <ul> <li><code>.cargo/config.toml</code></li> <li><code>.cargo/config</code> (legacy)</li> </ul> <p>Renovate can also find private registry URLs via a <code>CARGO_REGISTRIES_&lt;name&gt;_INDEX</code> environment variable. Read the Rust environment variables docs to learn more.</p>"},{"location":"rust/#private-crate-registries-and-private-git-dependencies","title":"Private crate registries and private Git dependencies","text":"<p>You as user can set authentication for private crates by adding a <code>hostRules</code> configuration to your <code>renovate.json</code> file.</p> <p>All token <code>hostRules</code> with a <code>hostType</code> (e.g. <code>github</code>, <code>gitlab</code>, <code>bitbucket</code>, etc.) and host rules without a <code>hostType</code> will be automatically setup for authentication. You can also configure a <code>hostRules</code> that's only for Cargo authentication (e.g. <code>hostType: 'crate'</code>).</p> Example of authentication for a private GitHub and Cargo registry:<pre><code>module.exports = {\n  hostRules: [\n    {\n      matchHost: 'github.enterprise.com',\n      token: process.env.GITHUB_TOKEN,\n      hostType: 'github',\n    },\n    {\n      matchHost: 'someGitHost.enterprise.com',\n      token: process.env.CARGO_GIT_TOKEN,\n      hostType: 'crate',\n    },\n  ],\n};\n</code></pre>"},{"location":"security-and-permissions/","title":"Security and Permissions","text":"<p>This page talks about our security stance, and explains what permissions are needed for the different ways you can run Renovate.</p>"},{"location":"security-and-permissions/#security-stance","title":"Security Stance","text":"<p>Renovate is open source software, and comes with no guarantees or warranties of any kind. That said, we will try to fix security problems in a reasonable timeframe if possible.</p>"},{"location":"security-and-permissions/#certifications","title":"Certifications","text":"<p>Renovate the open source project is not certified.</p> <p>Mend is the company which maintains Renovate and provides the Mend Renovate App. Mend is ISO 27001 and SOC2 certified.</p>"},{"location":"security-and-permissions/#security-disclosure","title":"Security / Disclosure","text":"<p>If you find any bug with Renovate that may be a security problem, then e-mail us at: renovate-disclosure@mend.io. This way we can evaluate the bug and hopefully fix it before it gets abused. Please give us enough time to investigate the bug before you report it anywhere else.</p> <p>Please do not create GitHub issues for security-related doubts or problems.</p>"},{"location":"security-and-permissions/#permissions","title":"Permissions","text":"<p>We apply the Principle of Least Privilege (PoLP) but do need substantial privileges for our apps to work.</p>"},{"location":"security-and-permissions/#global-permissions","title":"Global Permissions","text":"<p>These permissions are always needed to run the respective app.</p> Permission The Mend Renovate App Forking Renovate Why Dependabot alerts <code>read</code> <code>read</code> Create vulnerability fix PRs Administration <code>read</code> <code>read</code> Read branch protections and to be able to assign teams to PRs Metadata <code>read</code> <code>read</code> Mandatory for all apps Checks <code>read</code> and <code>write</code> not applicable Read and write status checks Code <code>read</code> and <code>write</code> <code>read</code> Read for repository content and write for creating branches Commit statuses <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Read and write commit statuses for Renovate PRs Issues <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Create Dependency Dashboard or Config Warning issues Pull Requests <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Create update PRs Workflows <code>read</code> and <code>write</code> not applicable Explicit permission needed to update workflows"},{"location":"security-and-permissions/#user-permissions","title":"User permissions","text":"<p>Renovate can also request users's permission to the following resources. These permissions will be requested and authorized on an individual-user basis.</p> Permission The Mend Renovate App Forking Renovate Why email <code>read</code> not applicable Per-user consent requested if logging into App dashboard"},{"location":"security-and-permissions/#privacy","title":"Privacy","text":""},{"location":"security-and-permissions/#self-hosted-renovate-oss-cli-mend-renovate-on-premises","title":"Self-hosted (Renovate OSS CLI, Mend Renovate On-Premises)","text":"<p>Renovate is designed to operate autonomously and directly with package and source repositories, so does not \"phone home\", send telemetry, or need to request information from Mend or any project infrastructure. An exception to this is when Merge Confidence badges are requested, because those are hosted on Mend servers. Such badges are public, do not require authentication, and Renovate does not identify the source user or repository when requesting them. Self-hosted Renovate does not send or submit any package data to Mend for the purpose of calculating Merge Confidence figures.</p> <p>According to a strict definition, Renovate may \"send data\" to third-party registries and source code hosts directly to look up new releases. For example, if you have an <code>npm</code> package and do not configure a private registry then Renovate will query URLs on <code>https://registry.npmjs.org</code> including names of packages used in your repositories. You could avoid this by configuring private registries but such registries need to query public registries anyway. We don't know of any public registries which reverse lookup IP addresses to associate companies with packages.</p>"},{"location":"security-and-permissions/#security-awareness-for-self-hosted-renovate-instances","title":"Security awareness for self-hosted Renovate instances","text":""},{"location":"security-and-permissions/#introduction","title":"Introduction","text":"<p>Before you start self-hosting Renovate you must understand the security implications associated with monitoring and updating repositories. The process that Renovate uses to update dependencies runs under the same user context as the Renovate process itself. This also means the process has the same level of access to information and resources as the user context!</p>"},{"location":"security-and-permissions/#trusting-repository-developers","title":"Trusting Repository Developers","text":"<p>All self-hosted Renovate instances must operate under a trust relationship with the developers of the monitored repositories. This has the following implications:</p> <ul> <li>Access to information</li> <li>Execution of code</li> </ul> <p>Keep reading to learn more.</p>"},{"location":"security-and-permissions/#access-to-information","title":"Access to information","text":"<p>Since the update process runs with the same user privileges as the Renovate process, it inherently has access to the same information and resources. This includes sensitive data that may be stored within the environment where Renovate is hosted.</p>"},{"location":"security-and-permissions/#execution-of-code","title":"Execution of code","text":"<p>In certain scenarios, code from the monitored repository is executed as part of the update process. This is particularly true during, for example:</p> <ul> <li><code>postUpgradeTasks</code>, where scripts specified by the repository are run</li> <li>when a wrapper within the repository is called, like <code>gradlew</code></li> </ul> <p>These scripts can contain arbitrary code. This may pose a significant security risk if the repository's integrity is compromised, or if the repository maintainers have malicious intentions.</p> <p>Because such insider attack is an inherent and unavoidable risk, the Renovate project will not issue CVEs for such attacks or weaknesses other than in exceptional circumstances.</p>"},{"location":"security-and-permissions/#centralized-logging-and-sensitive-information-management","title":"Centralized logging and sensitive information management","text":"<p>Centralized logging is key to monitor and troubleshoot self-hosted Renovate environments. But logging may inadvertently capture and expose sensitive information. Operations that involve <code>customEnvVariables</code>, among others, could expose sensitive data, when logging is used.</p>"},{"location":"security-and-permissions/#recommendations","title":"Recommendations","text":"<p>The Renovate maintainers recommend you follow these guidelines.</p>"},{"location":"security-and-permissions/#vet-and-monitor-repositories","title":"Vet and monitor repositories","text":"<p>Before integrating a repository with your self-hosted Renovate instance, thoroughly vet the repository for security and trustworthiness. This means that you should review the:</p> <ul> <li>repository's ownership</li> <li>contribution history</li> <li>open issues</li> <li>open pull requests</li> </ul>"},{"location":"security-and-permissions/#limit-permissions","title":"Limit permissions","text":"<p>Configure the environment running Renovate with the principle of least privilege. Ensure that the Renovate process has only the permissions needed to perform its tasks and no more. This reduces the impact of any malicious code execution.</p>"},{"location":"security-and-permissions/#regularly-review-post-upgrade-tasks","title":"Regularly review post-upgrade tasks","text":"<p>Regularly review the actions taken by <code>postUpgradeTasks</code> to make sure they do not execute unnecessary or risky operations. Consider implementing a review process for changes to these tasks within repositories.</p>"},{"location":"security-and-permissions/#use-security-tools","title":"Use security tools","text":"<p>Employ security tools and practices, like code scanning and vulnerability assessments, on the Renovate configuration and the repositories Renovate manages. This helps identify potentially malicious code before it is executed.</p>"},{"location":"security-and-permissions/#securing-environment-variables","title":"Securing environment variables","text":"<p>When configuring <code>customEnvVariables</code>: always use Renovate's secrets management syntax <code>({{ secrets.VAR_NAME }})</code> to reference sensitive variables securely. This makes sure that sensitive data is not exposed as plain text.</p>"},{"location":"security-and-permissions/#logging-infrastructure-security","title":"Logging infrastructure security","text":"<p>Ensure that the logging infrastructure is configured to handle logs as sensitive data. This includes measures like:</p> <ul> <li>log encryption</li> <li>access controls to restrict log viewing to authorized personnel only</li> <li>secure storage and transmission of log data</li> </ul>"},{"location":"security-and-permissions/#log-review-and-redaction-processes","title":"Log review and redaction processes","text":"<p>Implement rigorous log review mechanisms to regularly scan for and redact sensitive information that might be logged inadvertently. Automated tools can assist in identifying patterns indicative of sensitive data, such as credentials or personal information, enabling timely redaction or alerting.</p>"},{"location":"security-and-permissions/#stay-informed","title":"Stay informed","text":"<p>Keep abreast of updates and security advisories related to Renovate itself. Apply updates promptly to ensure that your self-hosted instances get the latest security enhancements and bug fixes.</p>"},{"location":"security-and-permissions/#conclusion","title":"Conclusion","text":"<p>The flexibility and power of self-hosting Renovate also means you must take steps to manage your security. By understanding the risks associated with repository management and taking steps to mitigate those risks, organizations can maintain a secure and efficient development workflow.</p>"},{"location":"security-and-permissions/#hostedsaas-the-mend-renovate-app","title":"Hosted/SaaS (the Mend Renovate App)","text":"<p>Users of the Mend Renovate App fall under Mend's Terms of Service and Privacy Policy.</p> <p>In this case the app needs to temporarily clone source code for Renovate to run, but the app does not keep the source code anywhere after jobs are completed.</p> <p>Mend anonymizes and aggregates package use and update success rates within the hosted app to derive Merge Confidence scores.</p> <p>The app database keeps a list of dependencies and versions per repo, plus basic into about any Renovate PRs it's created.</p>"},{"location":"self-hosted-configuration/","title":"Self-Hosted configuration options","text":"<p>Only use these configuration options when you self-host Renovate.</p> <p>Do not put the self-hosted config options listed on this page in your \"repository config\" file (<code>renovate.json</code> for example), because Renovate will ignore those config options, and may also create a config error issue.</p> <p>The config options below must be configured in the bot/admin config, so in either a environment variable, CLI option, or a special file like <code>config.js</code>.</p> <p>Note</p> <p>Renovate supports <code>JSONC</code> for <code>.json</code> files and any config files without file extension (e.g. <code>.renovaterc</code>).</p> <p>For information about how to configure Renovate with a <code>config.js</code> see the Using <code>config.js</code> documentation.</p> <p>Please also see Self-Hosted Experimental Options.</p> <p>Note</p> <p>Config options with <code>type=string</code> are always non-mergeable, so <code>mergeable=false</code>.</p>"},{"location":"self-hosted-configuration/#allowcustomcrateregistries","title":"allowCustomCrateRegistries","text":"<p>Set this to <code>true</code> to allow custom crate registries.</p> Name Value type boolean default <code>false</code> cli <code>--allow-custom-crate-registries</code> env <code>RENOVATE_ALLOW_CUSTOM_CRATE_REGISTRIES</code>"},{"location":"self-hosted-configuration/#allowplugins","title":"allowPlugins","text":"<p>Set this to <code>true</code> if repositories are allowed to run install plugins.</p> Name Value type boolean default <code>false</code> cli <code>--allow-plugins</code> env <code>RENOVATE_ALLOW_PLUGINS</code>"},{"location":"self-hosted-configuration/#allowscripts","title":"allowScripts","text":"<p>Set this to <code>true</code> if repositories are allowed to run install scripts.</p> Name Value type boolean default <code>false</code> cli <code>--allow-scripts</code> env <code>RENOVATE_ALLOW_SCRIPTS</code>"},{"location":"self-hosted-configuration/#allowedcommands","title":"allowedCommands","text":"<p>A list of regular expressions that decide which commands are allowed in post-upgrade tasks.</p> Name Value type array subType string cli <code>--allowed-commands</code> env <code>RENOVATE_ALLOWED_COMMANDS</code> default `[]` <p>A list of regular expressions that decide which commands in <code>postUpgradeTasks</code> are allowed to run.</p> <p>If you are using a template command, the regular expression should match the final resolved value. If this list is empty then no tasks will be executed.</p> <p>For example:</p> <pre><code>{\n  \"allowedCommands\": [\"^tslint --fix$\", \"^tslint --[a-z]+$\"]\n}\n</code></pre> <p>This configuration option was formerly known as <code>allowedPostUpgradeCommands</code>.</p>"},{"location":"self-hosted-configuration/#allowedenv","title":"allowedEnv","text":"<p>List of allowed patterns for environment variable names in repository env config.</p> Name Value type array subType string mergeable true cli <code>--allowed-env</code> env <code>RENOVATE_ALLOWED_ENV</code> default `[]` <p>Bot administrators can allow users to configure custom environment variables within repo config. Only environment variables matching the list will be accepted in the <code>env</code> configuration.</p> <p>Examples:</p> renovate.json<pre><code>{\n  \"env\": {\n    \"SOME_ENV_VARIABLE\": \"some_value\",\n    \"EXTRA_ENV_NAME\": \"value\"\n  }\n}\n</code></pre> <p>The above would require <code>allowedEnv</code> to be configured similar to the following:</p> config.js<pre><code>module.exports = {\n  allowedEnv: ['SOME_ENV_*', 'EXTRA_ENV_NAME'],\n};\n</code></pre> <p><code>allowedEnv</code> values can be exact match header names, glob patterns, or regex patterns. For more details on the syntax and supported patterns, see Renovate's String Pattern Matching documentation.</p>"},{"location":"self-hosted-configuration/#allowedheaders","title":"allowedHeaders","text":"<p>List of allowed patterns for header names in repository hostRules config.</p> Name Value type array default <pre><code>[\"X-*\"]\n</code></pre> subType string cli <code>--allowed-headers</code> env <code>RENOVATE_ALLOWED_HEADERS</code> default `[]` <p><code>allowedHeaders</code> can be useful when a registry uses a authentication system that's not covered by Renovate's default credential handling in <code>hostRules</code>. By default, all headers starting with \"X-\" are allowed. If needed, you can allow additional headers with the <code>allowedHeaders</code> option. Any set <code>allowedHeaders</code> overrides the default \"X-\" allowed headers, so you should include them in your config if you wish for them to remain allowed. The <code>allowedHeaders</code> config option takes an array of minimatch-compatible globs or re2-compatible regex strings. For more details on this syntax see Renovate's string pattern matching documentation.</p> <p>Examples:</p> Example header Kind of pattern Explanation <code>/X/</code> Regex Any header with <code>x</code> anywhere in the name <code>!/X/</code> Regex Any header without <code>X</code> anywhere in the name <code>X-*</code> Global pattern Any header starting with <code>X-</code> <code>X</code> Exact match glob Only the header matching exactly <code>X</code> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com/all-versions\",\n      \"headers\": {\n        \"X-Auth-Token\": \"secret\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Or with custom <code>allowedHeaders</code>:</p> config.js<pre><code>module.exports = {\n  allowedHeaders: ['custom-header'],\n};\n</code></pre>"},{"location":"self-hosted-configuration/#autodiscover","title":"autodiscover","text":"<p>Autodiscover all repositories.</p> Name Value type boolean default <code>false</code> cli <code>--autodiscover</code> env <code>RENOVATE_AUTODISCOVER</code> <p>When you enable <code>autodiscover</code>, by default, Renovate runs on every repository that the bot account can access. You can limit which repositories Renovate can access by using the <code>autodiscoverFilter</code> config option.</p>"},{"location":"self-hosted-configuration/#autodiscoverfilter","title":"autodiscoverFilter","text":"<p>Filter the list of autodiscovered repositories.</p> Name Value type array subType string cli <code>--autodiscover-filter</code> env <code>RENOVATE_AUTODISCOVER_FILTER</code> default `[]` <p>You can use this option to filter the list of repositories that the Renovate bot account can access through <code>autodiscover</code>. The pattern matches against the organization/repo path.</p> <p>This option supports an array of minimatch-compatible globs or RE2-compatible regex strings. For more details on this syntax see Renovate's string pattern matching documentation.</p> <p>If you set multiple filters, then the matches of each filter are added to the overall result.</p> <p>If you use an environment variable or the CLI to set the value for <code>autodiscoverFilter</code>, then commas <code>,</code> within filters are not supported. Commas will be used as delimiter for a new filter.</p> <pre><code># DO NOT use commas inside the filter if your are using env or cli variables to configure it.\nRENOVATE_AUTODISCOVER_FILTER=\"/MyOrg/{my-repo,foo-repo}\"\n\n\n# in this example you can use regex instead\nRENOVATE_AUTODISCOVER_FILTER=\"/MyOrg\\/(my|foo)-repo/\"\n</code></pre> <p>Minimatch:</p> <p>The configuration:</p> <pre><code>{\n  \"autodiscoverFilter\": [\"my-org/*\", \"!my-org/old-*\"]\n}\n</code></pre> <p>Glob patterns are case-insensitive.</p> <p>Regex:</p> <p>All text inside the start and end <code>/</code> will be treated as a regular expression. If using negations, all repositories except those who match the regex are added to the result:</p> <pre><code>{\n  \"autodiscoverFilter\": [\"/project/.*/\", \"!/project/old-/\"]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#autodiscovernamespaces","title":"autodiscoverNamespaces","text":"<p>Filter the list of autodiscovered repositories by namespaces.</p> Name Value type array subType string supportedPlatforms forgejo, gitea, gitlab cli <code>--autodiscover-namespaces</code> env <code>RENOVATE_AUTODISCOVER_NAMESPACES</code> default `[]` <p>You can use this option to autodiscover projects in specific namespaces (a.k.a. groups/organizations/workspaces). In contrast to <code>autodiscoverFilter</code> the filtering is done by the platform and therefore more efficient.</p> <p>For example:</p> <pre><code>{\n  \"platform\": \"gitlab\",\n  \"autodiscoverNamespaces\": [\"a-group\", \"another-group/some-subgroup\"]\n}\n</code></pre> <p>Note</p> <p>On Gitea/Forgejo, you can't use <code>autodiscoverTopics</code> together with <code>autodiscoverNamespaces</code> because both platforms do not support this. Topics are preferred and <code>autodiscoverNamespaces</code> will be ignored when you configure <code>autodiscoverTopics</code> on Gitea/Forgejo.</p>"},{"location":"self-hosted-configuration/#autodiscoverprojects","title":"autodiscoverProjects","text":"<p>Filter the list of autodiscovered repositories by project names.</p> Name Value type array subType string supportedPlatforms bitbucket cli <code>--autodiscover-projects</code> env <code>RENOVATE_AUTODISCOVER_PROJECTS</code> default `[]` <p>You can use this option to filter the list of autodiscovered repositories by project names. This feature is useful for users who want Renovate to only work on repositories within specific projects or exclude certain repositories from being processed.</p> Example for Bitbucket<pre><code>{\n  \"platform\": \"bitbucket\",\n  \"autodiscoverProjects\": [\"a-group\", \"!another-group/some-subgroup\"]\n}\n</code></pre> <p>The <code>autodiscoverProjects</code> config option takes an array of minimatch-compatible globs or RE2-compatible regex strings. For more details on this syntax see Renovate's string pattern matching documentation.</p>"},{"location":"self-hosted-configuration/#autodiscoverrepoorder","title":"autodiscoverRepoOrder","text":"<p>The order method for autodiscover server side repository search.</p> Name Value type string allowedValues asc, desc supportedPlatforms forgejo, gitea cli <code>--autodiscover-repo-order</code> env <code>RENOVATE_AUTODISCOVER_REPO_ORDER</code> <p>The order method for autodiscover server side repository search.</p> <p>If multiple <code>autodiscoverTopics</code> are used resulting order will be per topic not global.</p>"},{"location":"self-hosted-configuration/#autodiscoverreposort","title":"autodiscoverRepoSort","text":"<p>The sort method for autodiscover server side repository search.</p> Name Value type string allowedValues alpha, created, updated, size, id supportedPlatforms forgejo, gitea cli <code>--autodiscover-repo-sort</code> env <code>RENOVATE_AUTODISCOVER_REPO_SORT</code> <p>The sort method for autodiscover server side repository search.</p> <p>If multiple <code>autodiscoverTopics</code> are used resulting order will be per topic not global.</p>"},{"location":"self-hosted-configuration/#autodiscovertopics","title":"autodiscoverTopics","text":"<p>Filter the list of autodiscovered repositories by topics.</p> Name Value type array subType string supportedPlatforms forgejo, gitea, github, gitlab cli <code>--autodiscover-topics</code> env <code>RENOVATE_AUTODISCOVER_TOPICS</code> default `[]` <p>Some platforms allow you to add tags, or topics, to repositories and retrieve repository lists by specifying those topics. Set this variable to a list of strings, all of which will be topics for the autodiscovered repositories.</p> <p>For example:</p> <pre><code>{\n  \"autodiscoverTopics\": [\"managed-by-renovate\"]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#basedir","title":"baseDir","text":"<p>The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.</p> Name Value type string cli <code>--base-dir</code> env <code>RENOVATE_BASE_DIR</code> default <code>null</code> <p>By default Renovate uses a temporary directory like <code>/tmp/renovate</code> to store its data. You can override this default with the <code>baseDir</code> option.</p> <p>For example:</p> <pre><code>{\n  \"baseDir\": \"/my-own-different-temporary-folder\"\n}\n</code></pre>"},{"location":"self-hosted-configuration/#bbusedevelopmentbranch","title":"bbUseDevelopmentBranch","text":"<p>Use the repository's development branch as the repository's default branch.</p> Name Value type boolean default <code>false</code> supportedPlatforms bitbucket inheritConfigSupport true cli <code>--bb-use-development-branch</code> env <code>RENOVATE_BB_USE_DEVELOPMENT_BRANCH</code> <p>By default, Renovate will use a repository's \"main branch\" (typically called <code>main</code> or <code>master</code>) as the \"default branch\".</p> <p>Configuring this to <code>true</code> means that Renovate will detect and use the Bitbucket development branch as defined by the repository's branching model.</p> <p>If the \"development branch\" is configured but the branch itself does not exist (e.g. it was deleted), Renovate will fall back to using the repository's \"main branch\". This fall back behavior matches that of the Bitbucket Cloud web interface.</p>"},{"location":"self-hosted-configuration/#binarysource","title":"binarySource","text":"<p>Controls how third-party tools like npm or Gradle are called: directly, via Docker sidecar containers, or via dynamic install.</p> Name Value type string allowedValues global, docker, install, hermit default <code>\"install\"</code> cli <code>--binary-source</code> env <code>RENOVATE_BINARY_SOURCE</code> <p>Renovate often needs to use third-party tools in its PRs, like <code>npm</code> to update <code>package-lock.json</code> or <code>go</code> to update <code>go.sum</code>.</p> <p>Renovate supports four possible ways to access those tools:</p> <ul> <li><code>global</code>: Uses pre-installed tools, e.g. <code>npm</code> installed via <code>npm install -g npm</code>.</li> <li><code>install</code> (default): Downloads and installs tools at runtime if running in a Containerbase environment, otherwise falls back to <code>global</code></li> <li><code>docker</code>: Runs tools inside Docker \"sidecar\" containers using <code>docker run</code>.</li> <li><code>hermit</code>: Uses the Hermit tool installation approach.</li> </ul> <p>Starting in v36, Renovate's default Docker image (previously referred to as the \"slim\" image) uses <code>binarySource=install</code> while the \"full\" Docker image uses <code>binarySource=global</code>. If you are running Renovate in an environment where runtime download and install of tools is not possible then you should use the \"full\" image.</p> <p>If you are building your own Renovate image, e.g. by installing Renovate using <code>npm</code>, then you will need to ensure that all necessary tools are installed globally before running Renovate so that <code>binarySource=global</code> will work.</p> <p>The <code>binarySource=docker</code> approach should not be necessary in most cases now and <code>binarySource=install</code> is recommended instead. If you have a use case where you cannot use <code>binarySource=install</code> but can use <code>binarySource=docker</code> then please share it in a GitHub Discussion so that the maintainers can understand it. For this to work, <code>docker</code> needs to be installed and the Docker socket available to Renovate.</p>"},{"location":"self-hosted-configuration/#cachedir","title":"cacheDir","text":"<p>The directory where Renovate stores its cache. If left empty, Renovate creates a subdirectory within the <code>baseDir</code>.</p> Name Value type string cli <code>--cache-dir</code> env <code>RENOVATE_CACHE_DIR</code> default <code>null</code> <p>By default Renovate stores cache data in a temporary directory like <code>/tmp/renovate/cache</code>. Use the <code>cacheDir</code> option to override this default.</p> <p>The <code>baseDir</code> and <code>cacheDir</code> option may point to different directories. You can use one directory for the repo data, and another for the cache data.</p> <p>For example:</p> <pre><code>{\n  \"baseDir\": \"/my-own-different-temporary-folder\",\n  \"cacheDir\": \"/my-own-different-cache-folder\"\n}\n</code></pre>"},{"location":"self-hosted-configuration/#cachehardttlminutes","title":"cacheHardTtlMinutes","text":"<p>Maximum duration in minutes to keep datasource cache entries.</p> Name Value type integer default 10080 cli <code>--cache-hard-ttl-minutes</code> env <code>RENOVATE_CACHE_HARD_TTL_MINUTES</code> <p>This experimental feature configures the physical lifetime of cache entries. Renovate internally uses two types of Time-to-Live (TTL) for its cache:</p> <ul> <li>Soft TTL (logical): When a cache entry's soft TTL expires, Renovate tries to refresh the data from the upstream source.</li> <li>Hard TTL (physical): When a cache entry's hard TTL expires, Renovate permanently removes the data from the cache.</li> </ul> <p>This two-level cache expiry is used for:</p> <ol> <li>HTTP caching with <code>ETag</code>, <code>Last-Modified</code>, and <code>If-Modified-Since</code> headers</li> <li><code>getReleases</code> and <code>getDigest</code> datasource methods, i.e. the package release data</li> </ol> <p>If an upstream request fails, Renovate can still use stale data from the cache as long as its hard TTL has not expired.</p> <p>The <code>cacheHardTtlMinutes</code> option lets you configure the hard TTL. Set this to a non-zero value, the recommended minimum is 60 (one hour).</p> <p>If the soft TTL for a cache entry is longer than the hard TTL, Renovate uses the soft TTL value for both. The soft TTL is hard-coded but can be overridden with <code>cacheTtlOverride</code>.</p> <p>Example:</p> <p>The <code>npm</code> datasource has a default soft TTL of 15 minutes. When <code>cacheHardTtlMinutes</code> is set, for example to 60, Renovate will use the stale <code>npm</code> data in the following ways:</p> <ul> <li>The <code>ETag</code> from the cached result is used in new requests. If the upstream server returns a <code>304 Not Modified</code> response, the cached data is revalidated and used.</li> <li>If an error occurs when querying the <code>npmjs</code> registry, Renovate will use the stale data from the cache as long as it has been cached for less than 60 minutes.</li> </ul>"},{"location":"self-hosted-configuration/#cacheprivatepackages","title":"cachePrivatePackages","text":"<p>Cache private packages in the datasource cache. This is useful for self-hosted setups</p> Name Value type boolean default <code>false</code> cli <code>--cache-private-packages</code> env <code>RENOVATE_CACHE_PRIVATE_PACKAGES</code> <p>In the self-hosted setup, use option to enable caching of private packages to improve performance.</p>"},{"location":"self-hosted-configuration/#cachettloverride","title":"cacheTtlOverride","text":"<p>An object that contains cache namespace TTL override values.</p> Name Value type object cli <code>--cache-ttl-override</code> env <code>RENOVATE_CACHE_TTL_OVERRIDE</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Use this key-value map to override the default package cache TTL values for a specific namespace. This object contains pairs of namespaces and their corresponding TTL values in minutes.</p> <p>Internally, Renovate has the notion of soft TTL and hard TTL. In some contexts they are equal, but when they differ, this option overrides the soft TTL. See <code>cacheHardTtlMinutes</code> for more information.</p> <p>You can use:</p> <ul> <li>Exact matches: Direct namespace names</li> <li>Glob patterns: Wildcards like <code>datasource-*</code> or <code>*</code></li> <li>Regex patterns: Regular expressions like <code>/^datasource-/</code></li> </ul> <p>Priority order:</p> <ol> <li>Exact namespace matches take highest priority</li> <li>If no exact match, the longest (most specific) matching pattern wins</li> </ol> <p>Example:</p> <pre><code>{\n  \"cacheTtlOverride\": {\n    \"datasource-rubygems\": 120,\n    \"datasource-*\": 60,\n    \"datasource-{crate,go}\": 90,\n    \"/^changelog-/\": 45,\n    \"*\": 30\n  }\n}\n</code></pre> <p>In this example:</p> <ul> <li><code>datasource-rubygems</code> gets 120 minutes (exact match - highest priority)</li> <li><code>datasource-crate</code> and <code>datasource-go</code> get 90 minutes (matches <code>datasource-{crate,go}</code> - longest pattern)</li> <li><code>datasource-hex</code> gets 60 minutes (matches <code>datasource-*</code> - shorter pattern)</li> <li><code>changelog-github-release</code> gets 45 minutes (matches <code>/^changelog-/</code> regex)</li> <li><code>preset</code> gets 30 minutes (matches <code>*</code> wildcard - shortest pattern)</li> </ul> <p>Namespaces of special interest follow the pattern <code>datasource-releases-{datasource}</code>. When releases for a datasource are fetched, they are stored in this namespace. Whether caching is enabled for a particular datasource depends on whether it's private or caching is forced with <code>cachePrivatePackages</code>.</p> <p>Other valid cache namespaces are as follows:</p> <ul> <li><code>changelog-bitbucket-notes@v2</code></li> <li><code>changelog-bitbucket-release</code></li> <li><code>changelog-bitbucket-server-notes@v2</code></li> <li><code>changelog-bitbucket-server-release</code></li> <li><code>changelog-forgejo-notes@v2</code></li> <li><code>changelog-forgejo-release</code></li> <li><code>changelog-gitea-notes@v2</code></li> <li><code>changelog-gitea-release</code></li> <li><code>changelog-github-notes@v2</code></li> <li><code>changelog-github-release</code></li> <li><code>changelog-gitlab-notes@v2</code></li> <li><code>changelog-gitlab-release</code></li> <li><code>datasource-artifactory</code></li> <li><code>datasource-aws-machine-image</code></li> <li><code>datasource-aws-rds</code></li> <li><code>datasource-aws-eks-addon</code></li> <li><code>datasource-azure-bicep-resource</code></li> <li><code>datasource-azure-pipelines-tasks</code></li> <li><code>datasource-bazel</code></li> <li><code>datasource-bitbucket-tags</code></li> <li><code>datasource-bitbucket-server-tags</code></li> <li><code>datasource-bitrise</code></li> <li><code>datasource-buildpacks-registry</code></li> <li><code>datasource-cdnjs</code></li> <li><code>datasource-conan</code></li> <li><code>datasource-conda</code></li> <li><code>datasource-cpan</code></li> <li><code>datasource-crate-metadata</code></li> <li><code>datasource-crate</code></li> <li><code>datasource-deb</code></li> <li><code>datasource-deno</code></li> <li><code>datasource-docker-architecture</code></li> <li><code>datasource-docker-hub-cache</code></li> <li><code>datasource-docker-digest</code></li> <li><code>datasource-docker-hub-tags</code></li> <li><code>datasource-docker-imageconfig</code></li> <li><code>datasource-docker-labels</code></li> <li><code>datasource-docker-releases-v2</code></li> <li><code>datasource-docker-tags</code></li> <li><code>datasource-dotnet-version</code></li> <li><code>datasource-endoflife-date</code></li> <li><code>datasource-forgejo-releases</code></li> <li><code>datasource-forgejo-tags</code></li> <li><code>datasource-galaxy-collection</code></li> <li><code>datasource-galaxy</code></li> <li><code>datasource-git-refs</code></li> <li><code>datasource-git-tags</code></li> <li><code>datasource-git</code></li> <li><code>datasource-gitea-releases</code></li> <li><code>datasource-gitea-tags</code></li> <li><code>datasource-github-release-attachments</code></li> <li><code>datasource-gitlab-packages</code></li> <li><code>datasource-gitlab-releases</code></li> <li><code>datasource-gitlab-tags</code></li> <li><code>datasource-glasskube-packages</code></li> <li><code>datasource-go-direct</code></li> <li><code>datasource-go-proxy</code></li> <li><code>datasource-go</code></li> <li><code>datasource-golang-version</code></li> <li><code>datasource-gradle-version</code></li> <li><code>datasource-helm</code></li> <li><code>datasource-hermit</code></li> <li><code>datasource-hex</code></li> <li><code>datasource-hexpm-bob</code></li> <li><code>datasource-java-version</code></li> <li><code>datasource-jenkins-plugins</code></li> <li><code>datasource-jsr</code></li> <li><code>datasource-maven:cache-provider</code></li> <li><code>datasource-maven:postprocess-reject</code></li> <li><code>datasource-node-version</code></li> <li><code>datasource-npm:cache-provider</code></li> <li><code>datasource-nuget-v3</code></li> <li><code>datasource-orb</code></li> <li><code>datasource-packagist</code></li> <li><code>datasource-pod</code></li> <li><code>datasource-python-version</code></li> <li><code>datasource-repology</code></li> <li><code>datasource-rpm</code></li> <li><code>datasource-ruby-version</code></li> <li><code>datasource-rubygems</code></li> <li><code>datasource-sbt-package</code></li> <li><code>datasource-terraform-module</code></li> <li><code>datasource-terraform-provider</code></li> <li><code>datasource-terraform</code></li> <li><code>datasource-typst:cache-provider</code></li> <li><code>datasource-typst:releases</code></li> <li><code>datasource-unity3d</code></li> <li><code>datasource-unity3d-packages</code></li> <li><code>github-releases-datasource-v2</code></li> <li><code>github-tags-datasource-v2</code></li> <li><code>merge-confidence</code></li> <li><code>preset</code></li> <li><code>terraform-provider-hash</code></li> <li><code>url-sha256</code></li> </ul> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#checkedbranches","title":"checkedBranches","text":"<p>A list of branch names to mark for creation or rebasing as if it was selected in the Dependency Dashboard issue.</p> Name Value type array subType string cli <code>--checked-branches</code> env <code>RENOVATE_CHECKED_BRANCHES</code> default `[]` <p>This array will allow you to set the names of the branches you want to rebase/create, as if you selected their checkboxes in the Dependency Dashboard issue.</p> <p>It has been designed with the intention of being run on one repository, in a one-off manner, e.g. to \"force\" the rebase of a known existing branch. It is highly unlikely that you should ever need to add this to your permanent global config.</p> <p>Example: <code>renovate --checked-branches=renovate/chalk-4.x renovate-reproductions/checked</code> will rebase the <code>renovate/chalk-4.x</code> branch in the <code>renovate-reproductions/checked</code> repository.`</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#configfilenames","title":"configFileNames","text":"<p>List of filenames where repository config will be stored.</p> Name Value type array subType string inheritConfigSupport true default `[]` <p>A list of filenames where repository config can be stored.</p> <p>This list doesn't replace the existing list of default config filenames used internally, instead these filenames are prepended to the list.</p> <p>Example:</p> <pre><code>{\n  \"configFileNames\": [\"myrenovate.json\"]\n}\n</code></pre> <p>Note</p> <p>If you want renovate to use a custom filename for the onboarding branch you also need to change the <code>onboardingConfigFileName</code>.</p>"},{"location":"self-hosted-configuration/#containerbasedir","title":"containerbaseDir","text":"<p>The directory where Renovate stores its containerbase cache. If left empty, Renovate creates a subdirectory within the <code>cacheDir</code>.</p> Name Value type string cli <code>--containerbase-dir</code> env <code>RENOVATE_CONTAINERBASE_DIR</code> default <code>null</code> <p>This directory is used to cache downloads when <code>binarySource=docker</code> or <code>binarySource=install</code>.</p> <p>Use this option if you need such downloads to be stored outside of Renovate's regular cache directory (<code>cacheDir</code>).</p>"},{"location":"self-hosted-configuration/#customenvvariables","title":"customEnvVariables","text":"<p>Custom environment variables for child processes and sidecar Docker containers.</p> Name Value type object cli <code>--custom-env-variables</code> env <code>RENOVATE_CUSTOM_ENV_VARIABLES</code> <p>This configuration will be applied after all other environment variables so you can use it to override defaults.</p> <p>Warning</p> <p>Do not configure any secret values directly into <code>customEnvVariables</code> because they may be logged to stdout. Instead, configure them into <code>secrets</code> first so that they will be redacted in logs.</p> <p>If configuring secrets in to <code>customEnvVariables</code>, take this approach:</p> <pre><code>{\n  secrets: {\n    SECRET_TOKEN: process.env.SECRET_TOKEN,\n  },\n  customEnvVariables: {\n    SECRET_TOKEN: '{{ secrets.SECRET_TOKEN }}',\n  },\n}\n</code></pre> <p>The above configuration approach will mean the values are redacted in logs like in the following example:</p> <pre><code>         \"secrets\": {\"SECRET_TOKEN\": \"***********\"},\n         \"customEnvVariables\": {\"SECRET_TOKEN\": \"{{ secrets.SECRET_TOKEN }}\"},\n</code></pre>"},{"location":"self-hosted-configuration/#deleteadditionalconfigfile","title":"deleteAdditionalConfigFile","text":"<p>If set to <code>true</code>, Renovate tries to delete the additional self-hosted config file after reading it.</p> Name Value type boolean default <code>false</code> cli <code>--delete-additional-config-file</code> env <code>RENOVATE_DELETE_ADDITIONAL_CONFIG_FILE</code> <p>If set to <code>true</code> Renovate tries to delete the additional self-hosted config file after reading it.</p> <p>The process that runs Renovate must have the correct permissions to delete the additional config file.</p> <p>Tip</p> <p>You can tell Renovate where to find your config file with the <code>RENOVATE_ADDITONAL_CONFIG_FILE</code> environment variable.</p>"},{"location":"self-hosted-configuration/#deleteconfigfile","title":"deleteConfigFile","text":"<p>If set to <code>true</code>, Renovate tries to delete the self-hosted config file after reading it.</p> Name Value type boolean default <code>false</code> cli <code>--delete-config-file</code> env <code>RENOVATE_DELETE_CONFIG_FILE</code> <p>If set to <code>true</code> Renovate tries to delete the self-hosted config file after reading it.</p> <p>The process that runs Renovate must have the correct permissions to delete the config file.</p> <p>Tip</p> <p>You can tell Renovate where to find your config file with the <code>RENOVATE_CONFIG_FILE</code> environment variable.</p>"},{"location":"self-hosted-configuration/#detectglobalmanagerconfig","title":"detectGlobalManagerConfig","text":"<p>If <code>true</code>, Renovate tries to detect global manager configuration from the file system.</p> Name Value type boolean default <code>false</code> cli <code>--detect-global-manager-config</code> env <code>RENOVATE_DETECT_GLOBAL_MANAGER_CONFIG</code> <p>The purpose of this config option is to allow you (as a bot admin) to configure manager-specific files such as a global <code>.npmrc</code> file, instead of configuring it in Renovate config.</p> <p>This config option is disabled by default because it may prove surprising or undesirable for some users who don't expect Renovate to go into their home directory and import registry or credential information.</p> <p>Currently this config option is supported for the <code>npm</code> manager only - specifically the <code>~/.npmrc</code> file. If found, it will be imported into <code>config.npmrc</code> with <code>config.npmrcMerge</code> set to <code>true</code>.</p>"},{"location":"self-hosted-configuration/#detecthostrulesfromenv","title":"detectHostRulesFromEnv","text":"<p>If <code>true</code>, Renovate tries to detect host rules from environment variables.</p> Name Value type boolean default <code>false</code> cli <code>--detect-host-rules-from-env</code> env <code>RENOVATE_DETECT_HOST_RULES_FROM_ENV</code> <p>The format of the environment variables must follow:</p> <ul> <li><code>RENOVATE_</code> prefix (at the moment this prefix optional, but usage of prefix will be required in the future)</li> <li>Datasource name (e.g. <code>NPM</code>, <code>PYPI</code>) or Platform name (only <code>GITHUB</code>)</li> <li>Underscore (<code>_</code>)</li> <li><code>matchHost</code> (note: only domains or subdomains are supported - not <code>https://</code> URLs or anything with forward slashes)</li> <li>Underscore (<code>_</code>)</li> <li>Field name (<code>TOKEN</code>, <code>USERNAME</code>, <code>PASSWORD</code>, <code>HTTPSPRIVATEKEY</code>, <code>HTTPSCERTIFICATE</code>, <code>HTTPSCERTIFICATEAUTHORITY</code>)</li> </ul> <p>Hyphens (<code>-</code>) in datasource or host name must be replaced with double underscores (<code>__</code>). Periods (<code>.</code>) in host names must be replaced with a single underscore (<code>_</code>).</p> <p>Note</p> <p>You can't use these prefixes with the <code>detectHostRulesFromEnv</code> config option: <code>npm_config_</code>, <code>npm_lifecycle_</code>, <code>npm_package_</code>. In addition, platform host rules will only be picked up when <code>matchHost</code> is supplied.</p>"},{"location":"self-hosted-configuration/#npmjs-registry-token-example","title":"npmjs registry token example","text":"<p><code>NPM_REGISTRY_NPMJS_ORG_TOKEN=abc123</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"npm\",\n      \"matchHost\": \"registry.npmjs.org\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#gitlab-tags-usernamepassword-example","title":"GitLab Tags username/password example","text":"<p><code>GITLAB__TAGS_CODE__HOST_COMPANY_COM_USERNAME=bot GITLAB__TAGS_CODE__HOST_COMPANY_COM_PASSWORD=botpass123</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"gitlab-tags\",\n      \"matchHost\": \"code-host.company.com\",\n      \"username\": \"bot\",\n      \"password\": \"botpass123\"\n    }\n  ]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#datasource-and-credentials-only","title":"Datasource and credentials only","text":"<p>You can skip the host part, and use only the datasource and credentials.</p> <p><code>DOCKER_USERNAME=bot DOCKER_PASSWORD=botpass123</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"username\": \"bot\",\n      \"password\": \"botpass123\"\n    }\n  ]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#platform-with-https-authentication-options","title":"Platform with https authentication options","text":"<p><code>GITHUB_SOME_GITHUB__ENTERPRISE_HOST_HTTPSCERTIFICATE=certificate GITHUB_SOME_GITHUB__ENTERPRISE_HOST_HTTPSPRIVATEKEY=private-key GITHUB_SOME_GITHUB__ENTERPRISE_HOST_HTTPSCERTIFICATEAUTHORITY=certificate-authority</code>:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"github\",\n      \"matchHost\": \"some.github-enterprise.host\",\n      \"httpsPrivateKey\": \"private-key\",\n      \"httpsCertificate\": \"certificate\",\n      \"httpsCertificateAuthority\": \"certificate-authority\"\n    }\n  ]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#dockerchildprefix","title":"dockerChildPrefix","text":"<p>Change this value to add a prefix to the Renovate Docker sidecar container names and labels.</p> Name Value type string default <code>\"renovate_\"</code> cli <code>--docker-child-prefix</code> env <code>RENOVATE_DOCKER_CHILD_PREFIX</code> <p>Adds a custom prefix to the default Renovate sidecar Docker containers name and label.</p> <p>For example, if you set <code>dockerChildPrefix=myprefix_</code> then the final container created from the <code>containerbase/sidecar</code> is:</p> <ul> <li>called <code>myprefix_sidecar</code> instead of <code>renovate_sidecar</code></li> <li>labeled <code>myprefix_child</code> instead of <code>renovate_child</code></li> </ul> <p>Note</p> <p>Dangling containers are only removed when Renovate runs again with the same prefix.</p>"},{"location":"self-hosted-configuration/#dockerclioptions","title":"dockerCliOptions","text":"<p>Pass CLI flags to <code>docker run</code> command when <code>binarySource=docker</code>.</p> Name Value type string cli <code>--docker-cli-options</code> env <code>RENOVATE_DOCKER_CLI_OPTIONS</code> default <code>null</code> <p>You can use <code>dockerCliOptions</code> to pass Docker CLI options to Renovate's sidecar Docker containers.</p> <p>For example, <code>{\"dockerCliOptions\": \"--memory=4g\"}</code> will add a CLI flag to the <code>docker run</code> command that limits the amount of memory Renovate's sidecar Docker container can use to 4 gigabytes.</p> <p>Read the Docker Docs, configure runtime resource constraints to learn more.</p>"},{"location":"self-hosted-configuration/#dockermaxpages","title":"dockerMaxPages","text":"<p>By default, Renovate fetches up to 20 pages of Docker tags from registries. But you can set your own limit with this config option.</p> Name Value type integer default 20 cli <code>--docker-max-pages</code> env <code>RENOVATE_DOCKER_MAX_PAGES</code> <p>If set to an positive integer, Renovate will use this value as the maximum page number. Setting a different limit is useful for registries that ignore the <code>n</code> parameter in Renovate's query string and thus only return 50 tags per page.</p>"},{"location":"self-hosted-configuration/#dockersidecarimage","title":"dockerSidecarImage","text":"<p>Change this value to override the default Renovate sidecar image.</p> Name Value type string default <code>\"ghcr.io/containerbase/sidecar:13.23.15\"</code> cli <code>--docker-sidecar-image</code> env <code>RENOVATE_DOCKER_SIDECAR_IMAGE</code> <p>By default Renovate pulls the sidecar Docker containers from <code>ghcr.io/containerbase/sidecar</code>. You can use the <code>dockerSidecarImage</code> option to override this default.</p> <p>Say you want to pull a custom image from <code>ghcr.io/your_company/sidecar</code>. You would put this in your configuration file:</p> <pre><code>{\n  \"dockerSidecarImage\": \"ghcr.io/your_company/sidecar\"\n}\n</code></pre> <p>Now when Renovate pulls a new <code>sidecar</code> image, the final image is <code>ghcr.io/your_company/sidecar</code> instead of <code>ghcr.io/containerbase/sidecar</code>.</p>"},{"location":"self-hosted-configuration/#dockeruser","title":"dockerUser","text":"<p>Set the <code>UID</code> and <code>GID</code> for Docker-based binaries if you use <code>binarySource=docker</code>.</p> Name Value type string cli <code>--docker-user</code> env <code>RENOVATE_DOCKER_USER</code> default <code>null</code> <p>Override default user and group used by Docker-based tools. The user-id (UID) and group-id (GID) must match the user that executes Renovate.</p> <p>Read the Docker run reference for more information on user and group syntax. Set this to <code>1001:1002</code> to use UID 1001 and GID 1002.</p> Setting UID to 1001 and GID to 1002<pre><code>{\n  \"dockerUser\": \"1001:1002\"\n}\n</code></pre> <p>If you use <code>binarySource=docker|install</code> read the section below.</p> <p>If you need to change the Docker user please make sure to use the root (<code>0</code>) group, otherwise you'll get in trouble with missing file and directory permissions. Like this:</p> <pre><code>&gt; export RENOVATE_DOCKER_USER=\"$(id -u):0\" # 500:0 (username:root)\n</code></pre>"},{"location":"self-hosted-configuration/#dryrun","title":"dryRun","text":"<p>If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs.</p> Name Value type string allowedValues extract, lookup, full cli <code>--dry-run</code> env <code>RENOVATE_DRY_RUN</code> <p>Use <code>dryRun</code> to preview the behavior of Renovate in logs, without making any changes to the repository files.</p> <p>You can choose from the following behaviors for the <code>dryRun</code> config option:</p> <ul> <li><code>null</code>: Default behavior - Performs a regular Renovate run including creating/updating/deleting branches and PRs</li> <li><code>\"extract\"</code>: Performs a very quick package file scan to identify the extracted dependencies</li> <li><code>\"lookup\"</code>: Performs a package file scan to identify the extracted dependencies and updates available</li> <li><code>\"full\"</code>: Performs a dry run by logging messages instead of creating/updating/deleting branches and PRs</li> </ul> <p>Information provided mainly in debug log level.</p>"},{"location":"self-hosted-configuration/#encryptedwarning","title":"encryptedWarning","text":"<p>Warning text to use if encrypted config is found.</p> Name Value type string cli <code>--encrypted-warning</code> env <code>RENOVATE_ENCRYPTED_WARNING</code> default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Use this if you want to stop supporting <code>encrypted</code> configuration capabilities but want to warn users first to migrate.</p> <p>If set to a string value, Renovate will log warnings with the <code>encryptedWarning</code> text, meaning the message will be visible to users such as on the Dependency Dashboard.</p>"},{"location":"self-hosted-configuration/#endpoint","title":"endpoint","text":"<p>Custom endpoint to use.</p> Name Value type string cli <code>--endpoint</code> env <code>RENOVATE_ENDPOINT</code>"},{"location":"self-hosted-configuration/#executiontimeout","title":"executionTimeout","text":"<p>Default execution timeout in minutes for child processes Renovate creates.</p> Name Value type integer default 15 cli <code>--execution-timeout</code> env <code>RENOVATE_EXECUTION_TIMEOUT</code> <p>Default execution timeout in minutes for child processes Renovate creates. If this option is not set, Renovate will fallback to 15 minutes.</p>"},{"location":"self-hosted-configuration/#exposeallenv","title":"exposeAllEnv","text":"<p>Set this to <code>true</code> to allow passing of all environment variables to package managers.</p> Name Value type boolean default <code>false</code> cli <code>--expose-all-env</code> env <code>RENOVATE_EXPOSE_ALL_ENV</code> <p>To keep you safe, Renovate only passes a limited set of environment variables to package managers. If you must expose all environment variables to package managers, you can set this option to <code>true</code>.</p> <p>Warning</p> <p>Always consider the security implications of using <code>exposeAllEnv</code>! Secrets and other confidential information stored in environment variables could be leaked by a malicious script, that enumerates all environment variables.</p> <p>Set <code>exposeAllEnv</code> to <code>true</code> only if you have reviewed, and trust, the repositories which Renovate bot runs against. Alternatively, you can use the <code>customEnvVariables</code> config option to handpick a set of variables you need to expose.</p> <p>Setting this to <code>true</code> also allows for variable substitution in <code>.npmrc</code> files.</p>"},{"location":"self-hosted-configuration/#force","title":"force","text":"<p>Any configuration set in this object will force override existing settings.</p> Name Value type object mergeable true env <code>RENOVATE_FORCE</code> <p>This object is used as a \"force override\" when you need to make sure certain configuration overrides whatever is configured in the repository. For example, forcing a null (no) schedule to make sure Renovate raises PRs on a run even if the repository itself or its preset defines a schedule that's currently inactive.</p> <p>In practice, it is implemented by converting the <code>force</code> configuration into a <code>packageRule</code> that matches all packages.</p>"},{"location":"self-hosted-configuration/#forcecli","title":"forceCli","text":"<p>Decides if CLI configuration options are moved to the <code>force</code> config section.</p> Name Value type boolean default <code>true</code> cli <code>--force-cli</code> env <code>RENOVATE_FORCE_CLI</code> <p>This is set to <code>true</code> by default, meaning that any settings (such as <code>schedule</code>) take maximum priority even against custom settings existing inside individual repositories. It will also override any settings in <code>packageRules</code>.</p>"},{"location":"self-hosted-configuration/#forkcreation","title":"forkCreation","text":"<p>Whether to create forks as needed at runtime when running in \"fork mode\".</p> Name Value type boolean supportedPlatforms github default <code>true</code> cli <code>--fork-creation</code> env <code>RENOVATE_FORK_CREATION</code> <p>This configuration lets you disable the runtime forking of repositories when running in \"fork mode\".</p> <p>Usually you will need to keep this as the default <code>true</code>, and only set to <code>false</code> if you have some out of band process to handle the creation of forks.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#forkorg","title":"forkOrg","text":"<p>The preferred organization to create or find forked repositories, when in fork mode.</p> Name Value type string supportedPlatforms github cli <code>--fork-org</code> env <code>RENOVATE_FORK_ORG</code> default <code>null</code> <p>This configuration option lets you choose an organization you want repositories forked into when \"fork mode\" is enabled. It must be set to a GitHub Organization name and not a GitHub user account. When set, \"allow edits by maintainers\" will be false for PRs because GitHub does not allow this setting for organizations.</p> <p>This can be used if you're migrating from user-based forks to organization-based forks.</p> <p>If you've set a <code>forkOrg</code> then Renovate will:</p> <ol> <li>Check if a fork exists in the preferred organization before checking it exists in the fork user's account</li> <li>If no fork exists: it will be created in the <code>forkOrg</code>, not the user account</li> </ol> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#forktoken","title":"forkToken","text":"<p>Set a personal access token here to enable \"fork mode\".</p> Name Value type string supportedPlatforms github cli <code>--fork-token</code> env <code>RENOVATE_FORK_TOKEN</code> default <code>null</code> <p>If this value is configured then Renovate:</p> <ul> <li>forks the target repository into the account that owns the PAT</li> <li>keep this fork's default branch up-to-date with the target</li> </ul> <p>Renovate will then create branches on the fork and opens Pull Requests on the parent repository.</p> <p>Note</p> <p>Forked repositories will always be skipped when <code>forkToken</code> is set, even if <code>includeForks</code> is true.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#gitnoverify","title":"gitNoVerify","text":"<p>Which Git commands will be run with the <code>--no-verify</code> option.</p> Name Value type array subType string allowedValues commit, push default <pre><code>[\"commit\", \"push\"]\n</code></pre> cli <code>--git-no-verify</code> env <code>RENOVATE_GIT_NO_VERIFY</code> default `[]` <p>Controls when Renovate passes the <code>--no-verify</code> flag to <code>git</code>. The flag can be passed to <code>git commit</code> and/or <code>git push</code>. Read the documentation for git commit --no-verify and git push --no-verify to learn exactly what each flag does. To learn more about Git hooks, read the Pro Git 2 book, section on Git Hooks.</p>"},{"location":"self-hosted-configuration/#gitprivatekey","title":"gitPrivateKey","text":"<p>PGP key to use for signing Git commits.</p> Name Value type string env <code>RENOVATE_GIT_PRIVATE_KEY</code> default <code>null</code> <p>This is a private PGP or SSH key for signing Git commits.</p> <p>For PGP, it should be an armored private key, so the type you get from running <code>gpg --export-secret-keys --armor 92066A17F0D1707B4E96863955FEF5171C45FAE5 &gt; private.key</code>. Replace the newlines with <code>\\n</code> before adding the resulting single-line value to your bot's config.</p> <p>Note</p> <p>The private key can't be protected with a passphrase if running in a headless environment. Renovate will not be able to handle entering the passphrase.</p> <p>It will be loaded lazily. Before the first commit in a repository, Renovate will:</p> <ol> <li>Run <code>gpg import</code> (if you haven't before) when using PGP</li> <li>Run <code>git config user.signingkey</code>, <code>git config commit.gpgsign true</code> and <code>git config gpg.format</code></li> </ol> <p>The <code>git</code> commands are run locally in the cloned repo instead of globally. This reduces the chance of unintended consequences with global Git configs on shared systems.</p>"},{"location":"self-hosted-configuration/#gitprivatekeypassphrase","title":"gitPrivateKeyPassphrase","text":"<p>Passphrase for the <code>gitPrivateKey</code></p> Name Value type string env <code>RENOVATE_GIT_PRIVATE_KEY_PASSPHRASE</code> default <code>null</code> <p>Passphrase for the <code>gitPrivateKey</code> when the private key is protected with a passphrase.</p> <p>Currently supported for SSH keys only. When provided, Renovate will automatically decrypt the SSH private key during the signing process.</p> <p>Note</p> <p>Passphrases are not yet supported for GPG keys. If you provide a passphrase for a GPG key, it will be ignored and a warning will be logged.</p> <p>Warning</p> <p>Store this value securely as it provides access to decrypt your private key. Consider using environment variables or secure secret management systems rather than storing it in plain text configuration files.</p>"},{"location":"self-hosted-configuration/#gittimeout","title":"gitTimeout","text":"<p>Configure the timeout with a number of milliseconds to wait for a Git task.</p> Name Value type integer default 0 cli <code>--git-timeout</code> env <code>RENOVATE_GIT_TIMEOUT</code> <p>To handle the case where the underlying Git processes appear to hang, configure the timeout with the number of milliseconds to wait after last received content on either <code>stdOut</code> or <code>stdErr</code> streams before sending a <code>SIGINT</code> kill message.</p>"},{"location":"self-hosted-configuration/#giturl","title":"gitUrl","text":"<p>Overrides the default resolution for Git remote, e.g. to switch GitLab from HTTPS to SSH-based.</p> Name Value type string supportedPlatforms bitbucket-server, forgejo, gitea, gitlab allowedValues default, ssh, endpoint default <code>\"default\"</code> cli <code>--git-url</code> env <code>RENOVATE_GIT_URL</code> <p>Override the default resolution for Git remote, e.g. to switch GitLab from HTTPS to SSH-based.</p> <p>Possible values:</p> <ul> <li><code>default</code>: use HTTPS URLs provided by the platform for Git</li> <li><code>ssh</code>: use SSH URLs provided by the platform for Git</li> <li><code>endpoint</code>: ignore URLs provided by the platform and use the configured endpoint directly</li> </ul>"},{"location":"self-hosted-configuration/#githubtokenwarn","title":"githubTokenWarn","text":"<p>Display warnings about GitHub token not being set.</p> Name Value type boolean default <code>true</code> cli <code>--github-token-warn</code> env <code>RENOVATE_GITHUB_TOKEN_WARN</code> <p>By default, Renovate logs and displays a warning when the <code>RENOVATE_GITHUB_COM_TOKEN</code> is not set. By setting <code>githubTokenWarn</code> to <code>false</code>, Renovate suppresses these warnings on Pull Requests, etc. Disabling the warning is helpful for self-hosted environments that can't access the <code>github.com</code> domain, because the warning is useless in these environments.</p>"},{"location":"self-hosted-configuration/#globalextends","title":"globalExtends","text":"<p>Configuration presets to use or extend for a self-hosted config.</p> Name Value type array subType string cli <code>--global-extends</code> env <code>RENOVATE_GLOBAL_EXTENDS</code> default `[]` <p>Unlike the <code>extends</code> field, which is passed through unresolved to be part of repository config, any presets in <code>globalExtends</code> are resolved immediately as part of global config. Use the <code>globalExtends</code> field if your preset has any global-only configuration options, such as the list of repositories to run against.</p> <p>Use the <code>extends</code> field instead of this if, for example, you need the ability for a repository config (e.g. <code>renovate.json</code>) to be able to use <code>ignorePresets</code> for any preset defined in global config.</p> <p>Warning</p> <p><code>globalExtends</code> presets can't be private. When Renovate resolves <code>globalExtends</code> it does not fully process the configuration. This means that Renovate does not have the authentication it needs to fetch private things.</p>"},{"location":"self-hosted-configuration/#httpcachettldays","title":"httpCacheTtlDays","text":"<p>Maximum duration in days to keep HTTP cache entries.</p> Name Value type integer default 90 cli <code>--http-cache-ttl-days</code> env <code>RENOVATE_HTTP_CACHE_TTL_DAYS</code> <p>This option sets the number of days that Renovate will cache HTTP responses. The default value is 90 days. Value of <code>0</code> means no caching.</p> <p>Warning</p> <p>When you set <code>httpCacheTtlDays</code> to <code>0</code>, Renovate will remove the cached HTTP data.</p>"},{"location":"self-hosted-configuration/#ignoreprauthor","title":"ignorePrAuthor","text":"<p>Set to <code>true</code> to fetch the entire list of PRs instead of only those authored by the Renovate user.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-pr-author</code> env <code>RENOVATE_IGNORE_PR_AUTHOR</code> <p>This is usually needed if someone needs to migrate bot accounts, including from the Mend Renovate App to self-hosted. An additional use case is for GitLab users of project or group access tokens who need to rotate them.</p> <p>If <code>ignorePrAuthor</code> is configured to true, it means Renovate will fetch the entire list of repository PRs instead of optimizing to fetch only those PRs which it created itself. You should only want to enable this if you are changing the bot account (e.g. from <code>@old-bot</code> to <code>@new-bot</code>) and want <code>@new-bot</code> to find and update any existing PRs created by <code>@old-bot</code>.</p> <p>Setting this field to <code>true</code> in Github or GitLab will also mean that all Issues will be fetched instead of only those by the bot itself.</p>"},{"location":"self-hosted-configuration/#includemirrors","title":"includeMirrors","text":"<p>Whether to process repositories that are mirrors. By default, repositories that are mirrors are skipped.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--include-mirrors</code> env <code>RENOVATE_INCLUDE_MIRRORS</code> <p>By default, Renovate does not autodiscover repositories that are mirrors.</p> <p>Change this setting to <code>true</code> to include repositories that are mirrors as Renovate targets.</p>"},{"location":"self-hosted-configuration/#inheritconfig","title":"inheritConfig","text":"<p>If <code>true</code>, Renovate will inherit configuration from the <code>inheritConfigFileName</code> file in <code>inheritConfigRepoName</code>.</p> Name Value type boolean default <code>false</code> cli <code>--inherit-config</code> env <code>RENOVATE_INHERIT_CONFIG</code> <p>When you enable this option, Renovate will look for the <code>inheritConfigFileName</code> file in the <code>inheritConfigRepoName</code> repository before processing a repository, and read this in as config.</p> <p>If the repository is in a nested organization or group on a supported platform such as GitLab, such as <code>topGroup/nestedGroup/projectName</code> then Renovate will look in <code>topGroup/nestedGroup/renovate-config</code>.</p> <p>If <code>inheritConfig</code> is <code>true</code> but the inherited config file does not exist then Renovate will proceed without warning. If the file exists but cannot be parsed, then Renovate will raise a config warning issue and abort the job.</p> <p>The inherited config may include all valid repository config and these config options:</p> <ul> <li><code>bbUseDevelopmentBranch</code></li> <li><code>onboarding</code></li> <li><code>onboardingBranch</code></li> <li><code>onboardingCommitMessage</code></li> <li><code>onboardingConfig</code></li> <li><code>onboardingConfigFileName</code></li> <li><code>onboardingNoDeps</code></li> <li><code>onboardingPrTitle</code></li> <li><code>onboardingRebaseCheckbox</code></li> <li><code>requireConfig</code></li> </ul> <p>Note</p> <p>The above list is prepared manually and may become out of date. Consult the self-hosted configuration docs and look for <code>inheritConfigSupport</code> values there for the definitive list.</p> <p>This way organizations can change/control the default behavior, like whether configs are required and how repositories are onboarded.</p> <p>We disabled <code>inheritConfig</code> in the Mend Renovate App to avoid wasting millions of API calls per week. This is because each <code>404</code> response from the GitHub API due to a missing org inherited config counts as a used API call. We will add a smart/dynamic approach in future, so that we can selectively enable <code>inheritConfig</code> per organization.</p>"},{"location":"self-hosted-configuration/#inheritconfigfilename","title":"inheritConfigFileName","text":"<p>Renovate will look for this config file name in the <code>inheritConfigRepoName</code>.</p> Name Value type string default <code>\"org-inherited-config.json\"</code> cli <code>--inherit-config-file-name</code> env <code>RENOVATE_INHERIT_CONFIG_FILE_NAME</code> <p>Change this setting if you want Renovate to look for a different file name within the <code>inheritConfigRepoName</code> repository. You may use nested files, for example: <code>\"some-dir/config.json\"</code>.</p>"},{"location":"self-hosted-configuration/#inheritconfigreponame","title":"inheritConfigRepoName","text":"<p>Renovate will look in this repo for the <code>inheritConfigFileName</code>.</p> Name Value type string default <code>\"{{parentOrg}}/renovate-config\"</code> cli <code>--inherit-config-repo-name</code> env <code>RENOVATE_INHERIT_CONFIG_REPO_NAME</code> <p>Change this setting if you want Renovate to look in an alternative repository for the inherited config. The repository must be on the same platform and endpoint, and Renovate's token must have <code>read</code> permissions to the repository.</p>"},{"location":"self-hosted-configuration/#inheritconfigstrict","title":"inheritConfigStrict","text":"<p>If <code>true</code>, any <code>inheritedConfig</code> fetch error will result in an aborted run.</p> Name Value type boolean default <code>false</code> cli <code>--inherit-config-strict</code> env <code>RENOVATE_INHERIT_CONFIG_STRICT</code> <p>By default Renovate will silently (debug log message only) ignore cases where <code>inheritConfig=true</code> but no inherited config is found. When you set <code>inheritConfigStrict=true</code> then Renovate will abort the run and raise a config error if Renovate can't find the inherited config.</p> <p>Warning</p> <p>Only set this config option to <code>true</code> if every organization has an inherited config file and you want to make sure Renovate always uses that inherited config.</p>"},{"location":"self-hosted-configuration/#logcontext","title":"logContext","text":"<p>Add a global or per-repo log context to each log entry.</p> Name Value type string cli <code>--log-context</code> env <code>RENOVATE_LOG_CONTEXT</code> <p><code>logContext</code> is included with each log entry only if <code>logFormat=\"json\"</code> - it is not included in the pretty log output. If left as default (null), a random short ID will be selected.</p>"},{"location":"self-hosted-configuration/#mergeconfidencedatasources","title":"mergeConfidenceDatasources","text":"<p>If set, Renovate will query the merge-confidence JSON API only for datasources that are part of this list.</p> Name Value allowedValues go, maven, npm, nuget, packagist, pypi, rubygems default <pre><code>[\"go\", \"maven\", \"npm\", \"nuget\", \"packagist\", \"pypi\", \"rubygems\"]\n</code></pre> type array subType string cli <code>--merge-confidence-datasources</code> env <code>RENOVATE_MERGE_CONFIDENCE_DATASOURCES</code> default `[]` <p>This feature is applicable only if you have an access token for Mend's Merge Confidence API.</p> <p>If set, Renovate will query the merge-confidence JSON API only for datasources that are part of this list. Otherwise, it queries all the supported datasources (check default value).</p> <p>Example:</p> <pre><code>modules.exports = {\n  mergeConfidenceDatasources: ['npm'],\n};\n</code></pre>"},{"location":"self-hosted-configuration/#mergeconfidenceendpoint","title":"mergeConfidenceEndpoint","text":"<p>If set, Renovate will query this API for Merge Confidence data.</p> Name Value type string default <code>\"https://developer.mend.io/\"</code> cli <code>--merge-confidence-endpoint</code> env <code>RENOVATE_MERGE_CONFIDENCE_ENDPOINT</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This feature is applicable only if you have an access token for Mend's Merge Confidence API.</p> <p>If set, Renovate will retrieve Merge Confidence data by querying this API. Otherwise, it will use the default URL, which is https://developer.mend.io/.</p> <p>If you use the Mend Renovate Enterprise Edition (Renovate EE) and:</p> <ul> <li>have a static merge confidence token that you set via <code>MEND_RNV_MC_TOKEN</code></li> <li>or set <code>MEND_RNV_MC_TOKEN</code> to <code>auto</code></li> </ul> <p>Then you must set this variable at the server and the workers.</p> <p>But if you have specified the token as a <code>matchConfidence</code> <code>packageRule</code>, you only need to set this variable at the workers.</p> <p>This feature is in private beta.</p>"},{"location":"self-hosted-configuration/#migratepresets","title":"migratePresets","text":"<p>Define presets here which have been removed or renamed and should be migrated automatically.</p> Name Value type object additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> cli <code>--migrate-presets</code> env <code>RENOVATE_MIGRATE_PRESETS</code> <p>Use this if you have repositories that extend from a particular preset, which has now been renamed or removed. This is handy if you have a large number of repositories that all extend from a particular preset which you want to rename, without the hassle of manually updating every repository individually. Use an empty string to indicate that the preset should be ignored rather than replaced.</p> <p>Example:</p> <pre><code>modules.exports = {\n  migratePresets: {\n    '@company': 'local&gt;org/renovate-config',\n  },\n};\n</code></pre> <p>In the above example any reference to the <code>@company</code> preset will be replaced with <code>local&gt;org/renovate-config</code>.</p> <p>Tip</p> <p>Combine <code>migratePresets</code> with <code>configMigration</code> if you'd like your config migrated by PR.</p>"},{"location":"self-hosted-configuration/#onboarding","title":"onboarding","text":"<p>Require a Configuration PR first.</p> Name Value type boolean inheritConfigSupport true cli <code>--onboarding</code> env <code>RENOVATE_ONBOARDING</code> default <code>true</code> <p>Only set this to <code>false</code> if all three statements are true:</p> <ul> <li>You've configured Renovate entirely on the bot side (e.g. empty <code>renovate.json</code> in repositories)</li> <li>You want to run Renovate on every repository the bot has access to</li> <li>You want to skip all onboarding PRs</li> </ul>"},{"location":"self-hosted-configuration/#onboardingbranch","title":"onboardingBranch","text":"<p>Change this value to override the default onboarding branch name.</p> Name Value type string default <code>\"renovate/configure\"</code> inheritConfigSupport true env <code>RENOVATE_ONBOARDING_BRANCH</code> <p>Note</p> <p>This setting is independent of <code>branchPrefix</code>.</p> <p>For example, if you configure <code>branchPrefix</code> to be <code>renovate-</code> then you'd still have the onboarding PR created with branch <code>renovate/configure</code> until you configure <code>onboardingBranch=renovate-configure</code> or similar. If you have an existing Renovate installation and you change <code>onboardingBranch</code> then it's possible that you'll get onboarding PRs for repositories that had previously closed the onboarding PR unmerged.</p>"},{"location":"self-hosted-configuration/#onboardingcommitmessage","title":"onboardingCommitMessage","text":"<p>Change this value to override the default onboarding commit message.</p> Name Value type string inheritConfigSupport true env <code>RENOVATE_ONBOARDING_COMMIT_MESSAGE</code> <p>If <code>commitMessagePrefix</code> or <code>semanticCommits</code> values are set then they will be prepended to the commit message using the same logic that is used for adding them to non-onboarding commit messages.</p>"},{"location":"self-hosted-configuration/#onboardingconfig","title":"onboardingConfig","text":"<p>Configuration to use for onboarding PRs.</p> Name Value type object default <pre><code>{\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\"}\n</code></pre> inheritConfigSupport true mergeable true cli <code>--onboarding-config</code> env <code>RENOVATE_ONBOARDING_CONFIG</code>"},{"location":"self-hosted-configuration/#onboardingconfigfilename","title":"onboardingConfigFileName","text":"<p>Change this value to override the default onboarding config file name.</p> Name Value type string default <code>\"renovate.json\"</code> inheritConfigSupport true env <code>RENOVATE_ONBOARDING_CONFIG_FILE_NAME</code> <p>If set to one of the valid config file names, the onboarding PR will create a configuration file with the provided name instead of <code>renovate.json</code>. Falls back to <code>renovate.json</code> if the name provided is not valid.</p> <p>Note</p> <p>If you want renovate to use a custom filename for the onboarding branch you need add allow that filename using the <code>configFileNames</code> option.</p>"},{"location":"self-hosted-configuration/#onboardingnodeps","title":"onboardingNoDeps","text":"<p>Onboard the repository even if no dependencies are found.</p> Name Value type string default <code>\"auto\"</code> allowedValues auto, enabled, disabled inheritConfigSupport true cli <code>--onboarding-no-deps</code> env <code>RENOVATE_ONBOARDING_NO_DEPS</code> <p>The default <code>auto</code> setting is converted to <code>disabled</code> if <code>autodiscoverRepositories</code> is <code>true</code>, or converted to <code>enabled</code> if false.</p> <p>In other words, the default behavior is:</p> <ul> <li>If you run Renovate on discovered repositories then it will skip onboarding those without dependencies detected, but</li> <li>If you run Renovate on specific repositories then Renovate will onboard all such repositories even if no dependencies are found</li> </ul>"},{"location":"self-hosted-configuration/#onboardingprtitle","title":"onboardingPrTitle","text":"<p>Change this value to override the default onboarding PR title.</p> Name Value type string default <code>\"Configure Renovate\"</code> inheritConfigSupport true env <code>RENOVATE_ONBOARDING_PR_TITLE</code> <p>If you have an existing Renovate installation and you change the <code>onboardingPrTitle</code>: then you may get onboarding PRs again for repositories with closed non-merged onboarding PRs. This is similar to what happens when you change the <code>onboardingBranch</code> config option.</p>"},{"location":"self-hosted-configuration/#onboardingrebasecheckbox","title":"onboardingRebaseCheckbox","text":"<p>Set to enable rebase/retry markdown checkbox for onboarding PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms forgejo, gitea, github, gitlab cli <code>--onboarding-rebase-checkbox</code> env <code>RENOVATE_ONBOARDING_REBASE_CHECKBOX</code> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.To track this feature visit the following GitHub issue #17633.</p>"},{"location":"self-hosted-configuration/#optimizefordisabled","title":"optimizeForDisabled","text":"<p>Set to <code>true</code> to perform a check for disabled config prior to cloning.</p> Name Value type boolean default <code>false</code> cli <code>--optimize-for-disabled</code> env <code>RENOVATE_OPTIMIZE_FOR_DISABLED</code> <p>When this option is <code>true</code>, Renovate will do the following during repository initialization:</p> <ol> <li>Try to fetch the default config file (e.g. <code>renovate.json</code>)</li> <li>Check if the file contains <code>\"enabled\": false</code></li> <li>If so, skip cloning and skip the repository immediately</li> </ol> <p>If <code>onboardingConfigFileName</code> is set, that file name will be used instead of the default.</p> <p>If the file exists and the config is disabled, Renovate will skip the repo without cloning it. Otherwise, it will continue as normal.</p> <p><code>optimizeForDisabled</code> can make initialization quicker in cases where most repositories are disabled, but it uses an extra API call for enabled repositories.</p> <p>A second, advanced, use also exists when the bot global config has <code>extends: [\":disableRenovate\"]</code>. In that case, Renovate searches the repository config file for any of these configurations:</p> <ul> <li><code>extends: [\":enableRenovate\"]</code></li> <li><code>ignorePresets: [\":disableRenovate\"]</code></li> <li><code>enabled: true</code></li> </ul> <p>If Renovate finds any of the above configurations, it continues initializing the repository. If not, then Renovate skips the repository without cloning it.</p>"},{"location":"self-hosted-configuration/#password","title":"password","text":"<p>Password for authentication.</p> Name Value type string supportedPlatforms azure, bitbucket, bitbucket-server cli <code>--password</code> env <code>RENOVATE_PASSWORD</code> default <code>null</code>"},{"location":"self-hosted-configuration/#persistrepodata","title":"persistRepoData","text":"<p>If set to <code>true</code>: keep repository data between runs instead of deleting the data.</p> Name Value type boolean default <code>false</code> cli <code>--persist-repo-data</code> env <code>RENOVATE_PERSIST_REPO_DATA</code> <p>Set this to <code>true</code> if you want Renovate to persist repo data between runs. The intention is that this allows Renovate to do a faster <code>git fetch</code> between runs rather than <code>git clone</code>. It also may mean that ignored directories like <code>node_modules</code> can be preserved and save time on operations like <code>npm install</code>.</p>"},{"location":"self-hosted-configuration/#platform","title":"platform","text":"<p>Platform type of repository.</p> Name Value type string allowedValues azure, bitbucket, bitbucket-server, codecommit, forgejo, gerrit, gitea, github, gitlab, local default <code>\"github\"</code> cli <code>--platform</code> env <code>RENOVATE_PLATFORM</code>"},{"location":"self-hosted-configuration/#prcommitsperrunlimit","title":"prCommitsPerRunLimit","text":"<p>Set the maximum number of commits per Renovate run. By default there is no limit.</p> Name Value type integer default 0 cli <code>--pr-commits-per-run-limit</code> env <code>RENOVATE_PR_COMMITS_PER_RUN_LIMIT</code> <p>Parameter to reduce CI load. CI jobs are usually triggered by these events: pull-request creation, pull-request update, automerge events. Set as an integer. Default is no limit.</p>"},{"location":"self-hosted-configuration/#presetcachepersistence","title":"presetCachePersistence","text":"<p>Cache resolved presets in package cache.</p> Name Value type boolean default <code>false</code> cli <code>--preset-cache-persistence</code> env <code>RENOVATE_PRESET_CACHE_PERSISTENCE</code> <p>When this feature is enabled, resolved presets will be cached in Renovate's package cache, enabling reuse across multiple repositories.</p> <p>TTL is 15 minutes by default, and it is adjustable in cacheTtlOverride.</p> <p>Warning</p> <p>Doing so improves efficiency because shared presets don't need to be reloaded/resolved for every repository, however it also means that private presets can be \"leaked\" between repositories.  You should only enable this when all repositories are trusted, such as a corporate environment.</p>"},{"location":"self-hosted-configuration/#privatekey","title":"privateKey","text":"<p>Server-side private key.</p> Name Value type string replaceLineReturns true cli <code>--private-key</code> env <code>RENOVATE_PRIVATE_KEY</code> default <code>null</code> <p>This private key is used to decrypt config files.</p> <p>The corresponding public key can be used to create encrypted values for config files. If you want a UI to encrypt values you can put the public key in a HTML page similar to https://app.renovatebot.com/encrypt.</p> <p>To create the PGP key pair with GPG use the following commands:</p> <ul> <li><code>gpg --full-generate-key</code> and follow the prompts to generate a key. Name and email are not important to Renovate, and do not configure a passphrase. Use a 4096bit key.</li> </ul> key generation log <pre><code>\u276f gpg --full-generate-key\ngpg (GnuPG) 2.2.24; Copyright (C) 2020 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n  (14) Existing key from card\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Renovate Bot\nEmail address: renovate@whitesourcesoftware.com\nComment:\nYou selected this USER-ID:\n    \"Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n\ngpg: key 0649CC3899F22A66 marked as ultimately trusted\ngpg: revocation certificate stored as '/Users/rhys/.gnupg/openpgp-revocs.d/794B820F34B34A8DF32AADB20649CC3899F22A66.rev'\npublic and secret key created and signed.\n\npub   rsa4096 2021-09-10 [SC]\n      794B820F34B34A8DF32AADB20649CEXAMPLEONLY\nuid                      Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\nsub   rsa4096 2021-09-10 [E]\n</code></pre> <p>Note</p> <p>If you use GnuPG <code>v2.4</code> (or newer) to generate the key, then you must disable <code>AEAD</code> preferences. This is needed to allow Renovate to decrypt the encrypted values.</p> key edit log <pre><code>\u276f gpg --edit-key renovate@whitesourcesoftware.com\ngpg&gt; showpref\n[ultimate] (1). Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\n     Cipher: AES256, AES192, AES, 3DES\n     AEAD: OCB, EAX\n     Digest: SHA512, SHA384, SHA256, SHA224, SHA1\n     Compression: ZLIB, BZIP2, ZIP, Uncompressed\n     Features: MDC, AEAD, Keyserver no-modify\n\ngpg&gt; setpref AES256 AES192 AES 3DES SHA512 SHA384 SHA256 SHA224 SHA1 ZLIB BZIP2 ZIP\nSet preference list to:\n     Cipher: AES256, AES192, AES, 3DES\n     AEAD:\n     Digest: SHA512, SHA384, SHA256, SHA224, SHA1\n     Compression: ZLIB, BZIP2, ZIP, Uncompressed\n     Features: MDC, Keyserver no-modify\nReally update the preferences? (y/N) y\ngpg&gt; save\n</code></pre> <ul> <li>Copy the key ID from the output (<code>794B820F34B34A8DF32AADB20649CEXAMPLEONLY</code> in the above example) or run <code>gpg --list-secret-keys</code> if you forgot to take a copy</li> <li>Run <code>gpg --armor --export-secret-keys YOUR_NEW_KEY_ID &gt; renovate-private-key.asc</code> to generate an armored (text-based) private key file</li> <li>Run <code>gpg --armor --export YOUR_NEW_KEY_ID &gt; renovate-public-key.asc</code> to generate an armored (text-based) public key file</li> </ul> <p>The private key should then be added to your Renovate Bot global config (either using <code>privateKeyPath</code> or exporting it to the <code>RENOVATE_PRIVATE_KEY</code> environment variable). The public key can be used to replace the existing key in https://app.renovatebot.com/encrypt for your own use.</p> <p>Base64 Encoding Support</p> <p>Renovate supports base64-encoded private keys for easier handling in environment variables or configuration files. Simply provide the base64-encoded version of your private key, and Renovate will automatically detect and decode it. This works for both GPG and SSH private keys.</p> <p>Any PGP-encrypted secrets must have a mandatory organization/group scope, and optionally can be scoped for a single repository only. The reason for this is to avoid \"replay\" attacks where someone could learn your encrypted secret and then reuse it in their own Renovate repositories. Instead, with scoped secrets it means that Renovate ensures that the organization and optionally repository values encrypted with the secret match against the running repository.</p> <p>Note</p> <p>You could use public key encryption with earlier versions of Renovate. We deprecated this approach and removed the documentation for it. If you're still using public key encryption then we recommend that you use private keys instead.</p>"},{"location":"self-hosted-configuration/#privatekeyold","title":"privateKeyOld","text":"<p>Secondary or old private key to try.</p> Name Value type string replaceLineReturns true cli <code>--private-key-old</code> env <code>RENOVATE_PRIVATE_KEY_OLD</code> default <code>null</code> <p>Use this field if you need to perform a \"key rotation\" and support more than one keypair at a time. Decryption with this key will be tried after <code>privateKey</code>.</p> <p>If you are migrating from the legacy public key encryption approach to use a PGP key, then move your legacy private key from <code>privateKey</code> to <code>privateKeyOld</code> and then put your new PGP private key in <code>privateKey</code>. Doing so will mean that Renovate will first try to decrypt using the PGP key but fall back to the legacy key and try that next.</p> <p>You can remove the <code>privateKeyOld</code> config option once all the old encrypted values have been migrated, or if you no longer want to support the old key and let the processing of repositories fail.</p> <p>Note</p> <p>Renovate now logs a warning whenever repositories use non-PGP encrypted config variables.</p>"},{"location":"self-hosted-configuration/#privatekeypath","title":"privateKeyPath","text":"<p>Path to the Server-side private key.</p> Name Value type string cli <code>--private-key-path</code> env <code>RENOVATE_PRIVATE_KEY_PATH</code> default <code>null</code> <p>Used as an alternative to <code>privateKey</code>, if you want the key to be read from disk instead.</p>"},{"location":"self-hosted-configuration/#privatekeypathold","title":"privateKeyPathOld","text":"<p>Path to the Server-side old private key.</p> Name Value type string cli <code>--private-key-path-old</code> env <code>RENOVATE_PRIVATE_KEY_PATH_OLD</code> default <code>null</code> <p>Used as an alternative to <code>privateKeyOld</code>, if you want the key to be read from disk instead.</p>"},{"location":"self-hosted-configuration/#processenv","title":"processEnv","text":"<p>Environment variables to be used in global config only.</p> Name Value type object additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> cli <code>--process-env</code> env <code>RENOVATE_PROCESS_ENV</code> <p>Used to set environment variables through the configuration file instead of using actual environment variables.</p> <p>Example:</p> <pre><code>{\n  \"processEnv\": {\n    \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"AWS_SECRET_ACCESS_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    \"AWS_DEFAULT_REGION\": \"us-west-2\"\n  }\n}\n</code></pre> <p>Note</p> <ul> <li>All values must be provided as strings, e.g., <code>\"true\"</code> instead of <code>true</code></li> <li>Only supported in file configuration (not via CLI or environment).</li> </ul>"},{"location":"self-hosted-configuration/#productlinks","title":"productLinks","text":"<p>Links which are used in PRs, issues and comments.</p> Name Value type object mergeable true default <pre><code>{\n  \"documentation\": \"https://docs.renovatebot.com/\",\n  \"help\": \"https://github.com/renovatebot/renovate/discussions\",\n  \"homepage\": \"https://github.com/renovatebot/renovate\"\n}\n</code></pre> additionalProperties <pre><code>{\"type\": \"string\", \"format\": \"uri\"}\n</code></pre> cli <code>--product-links</code> env <code>RENOVATE_PRODUCT_LINKS</code> <p>Override this object if you want to change the URLs that Renovate links to, e.g. if you have an internal forum for asking for help.</p>"},{"location":"self-hosted-configuration/#redisprefix","title":"redisPrefix","text":"<p>Key prefix for redis cache entries.</p> Name Value type string cli <code>--redis-prefix</code> env <code>RENOVATE_REDIS_PREFIX</code> default <code>null</code> <p>If this value is set then Renovate will prepend this string to the name of all Redis cache entries used in Renovate. It's only used if <code>redisUrl</code> is configured.</p>"},{"location":"self-hosted-configuration/#redisurl","title":"redisUrl","text":"<p>If set, this Redis URL will be used for caching instead of the file system.</p> Name Value type string cli <code>--redis-url</code> env <code>RENOVATE_REDIS_URL</code> default <code>null</code> <p>If this value is set then Renovate will use Redis for its global cache instead of the local file system. The global cache is used to store lookup results (e.g. dependency versions and changelogs) between repositories and runs.</p> <p>For non encrypted connections,</p> <p>Example URL structure: <code>redis://[[username]:[password]]@localhost:6379/0</code>.</p> <p>For TLS/SSL-enabled connections, use rediss prefix</p> <p>Example URL structure: <code>rediss://[[username]:[password]]@localhost:6379/0</code>.</p> <p>Renovate also supports connecting to Redis clusters as well. In order to connect to a cluster, provide the connection string using the <code>redis+cluster</code> or <code>rediss+cluster</code> schema as appropriate.</p> <p>Example URL structure: <code>redis+cluster://[[username]:[password]]@redis.cluster.local:6379/0</code></p>"},{"location":"self-hosted-configuration/#reportpath","title":"reportPath","text":"<p>Path to where the file should be written. In case of <code>s3</code> this has to be a full S3 URI.</p> Name Value type string cli <code>--report-path</code> env <code>RENOVATE_REPORT_PATH</code> <p><code>reportPath</code> describes the location where the report is written to.</p> <p>If <code>reportType</code> is set to <code>file</code>, then set <code>reportPath</code> to a filepath. For example: <code>/foo/bar.json</code>.</p> <p>If the value <code>s3</code> is used in <code>reportType</code>, then use a S3 URI. For example: <code>s3://bucket-name/key-name</code>.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#reporttype","title":"reportType","text":"<p>Set how, or if, reports should be generated.</p> Name Value type string allowedValues logging, file, s3 cli <code>--report-type</code> env <code>RENOVATE_REPORT_TYPE</code> <p>Defines how the report is exposed:</p> <ul> <li><code>&lt;unset&gt;</code> If unset, no report will be provided, though the debug logs will still have partial information of the report</li> <li><code>logging</code> The report will be printed as part of the log messages on <code>INFO</code> level</li> <li><code>file</code> The report will be written to a path provided by <code>reportPath</code></li> <li><code>s3</code> The report is pushed to an S3 bucket defined by <code>reportPath</code>. This option reuses <code>s3Endpoint</code> and <code>s3PathStyle</code></li> </ul> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#repositories","title":"repositories","text":"<p>List of Repositories.</p> Name Value type array subType string env <code>RENOVATE_REPOSITORIES</code> default `[]` <p>Elements in the <code>repositories</code> array can be an object if you wish to define more settings. Example:</p> <pre><code>{\n  repositories: [{ repository: 'g/r1', bumpVersion: 'patch' }, 'g/r2'];\n}\n</code></pre>"},{"location":"self-hosted-configuration/#repositorycache","title":"repositoryCache","text":"<p>This option decides if Renovate uses a JSON cache to speed up extractions.</p> Name Value type string allowedValues disabled, enabled, reset default <code>\"disabled\"</code> cli <code>--repository-cache</code> env <code>RENOVATE_REPOSITORY_CACHE</code> <p>Set this to <code>\"enabled\"</code> to have Renovate maintain a JSON file cache per-repository to speed up extractions. Set to <code>\"reset\"</code> if you ever need to bypass the cache and have it overwritten. JSON files will be stored inside the <code>cacheDir</code> beside the existing file-based package cache.</p>"},{"location":"self-hosted-configuration/#repositorycachetype","title":"repositoryCacheType","text":"<p>Set the type of renovate repository cache if <code>repositoryCache</code> is enabled.</p> Name Value type string default <code>\"local\"</code> cli <code>--repository-cache-type</code> env <code>RENOVATE_REPOSITORY_CACHE_TYPE</code> Set repositoryCacheType to an S3 URI to enable S3 backed repository cache<pre><code>{\n  repositoryCacheType: 's3://bucket-name';\n}\n</code></pre> <p>Renovate uses the AWS SDK for JavaScript V3 to connect to the S3 instance. Therefore, Renovate supports all the authentication methods supported by the AWS SDK. Read more about the default credential provider chain for AWS SDK for JavaScript V3.</p> <p>Tip</p> <p>If you're storing the repository cache on Amazon S3 then you may set a folder hierarchy as part of <code>repositoryCacheType</code>. For example, <code>repositoryCacheType: 's3://bucket-name/dir1/.../dirN/'</code>.</p> <p>Note</p> <p>S3 repository is used as a repository cache (e.g. extracted dependencies) and not a lookup cache (e.g. available versions of dependencies). To keep the later remotely, define Redis URL.</p>"},{"location":"self-hosted-configuration/#requireconfig","title":"requireConfig","text":"<p>Controls Renovate's behavior regarding repository config files such as <code>renovate.json</code>.</p> Name Value type string default <code>\"required\"</code> allowedValues required, optional, ignored inheritConfigSupport true cli <code>--require-config</code> env <code>RENOVATE_REQUIRE_CONFIG</code> <p>By default, Renovate needs a Renovate config file in each repository where it runs before it will propose any dependency updates.</p> <p>You can choose any of these settings:</p> <ul> <li><code>\"required\"</code> (default): a repository config file must be present</li> <li><code>\"optional\"</code>: if a config file exists, Renovate will use it when it runs</li> <li><code>\"ignored\"</code>: config files in the repo will be ignored, and have no effect</li> </ul> <p>This feature is closely related to the <code>onboarding</code> config option. The combinations of <code>requireConfig</code> and <code>onboarding</code> are:</p> <code>onboarding=true</code> <code>onboarding=false</code> <code>requireConfig=required</code> An onboarding PR will be created if no config file exists. If the onboarding PR is closed and there's no config file, then the repository is skipped. Repository is skipped unless a config file is added manually. <code>requireConfig=optional</code> An onboarding PR will be created if no config file exists. If the onboarding PR is closed and there's no config file, the repository will be processed. Repository is processed regardless of config file presence. <code>requireConfig=ignored</code> No onboarding PR will be created and repo will be processed while ignoring any config file present. Repository is processed, any config file is ignored."},{"location":"self-hosted-configuration/#s3endpoint","title":"s3Endpoint","text":"<p>If set, Renovate will use this string as the <code>endpoint</code> when creating the AWS S3 client instance.</p> Name Value type string cli <code>--s3-endpoint</code> env <code>RENOVATE_S3_ENDPOINT</code> default <code>null</code> <p>If set, Renovate will use this string as the <code>endpoint</code> when creating the AWS S3 client instance.</p>"},{"location":"self-hosted-configuration/#s3pathstyle","title":"s3PathStyle","text":"<p>If set, Renovate will enable <code>forcePathStyle</code> when creating the AWS S3 client instance.</p> Name Value type boolean default <code>false</code> cli <code>--s3-path-style</code> env <code>RENOVATE_S3_PATH_STYLE</code> <p>If set, Renovate will enable <code>forcePathStyle</code> when creating the AWS S3 client instance.</p> <p>For example:</p> <code>s3PathStyle</code> Path <code>off</code> <code>https://bucket.s3.amazonaws.com/</code> <code>on</code> <code>https://s3.amazonaws.com/bucket/</code> <p>Read the AWS S3 docs, Interface BucketEndpointInputConfig to learn more about path-style URLs.</p>"},{"location":"self-hosted-configuration/#secrets","title":"secrets","text":"<p>Object which holds secret name/value pairs.</p> Name Value type object mergeable true additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> cli <code>--secrets</code> env <code>RENOVATE_SECRETS</code> <p>Secrets may be configured by a bot admin in <code>config.js</code>, which will then make them available for templating within repository configs. For example, to configure a <code>GOOGLE_TOKEN</code> to be accessible by all repositories:</p> <pre><code>module.exports = {\n  secrets: {\n    GOOGLE_TOKEN: 'abc123',\n  },\n};\n</code></pre> <p>They can also be configured per repository, e.g.</p> <pre><code>module.exports = {\n  repositories: [\n    {\n      repository: 'abc/def',\n      secrets: {\n        GOOGLE_TOKEN: 'abc123',\n      },\n    },\n  ],\n};\n</code></pre> <p>It could then be used in a repository config or preset like so:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"google.com\",\n      \"token\": \"{{ secrets.GOOGLE_TOKEN }}\"\n    }\n  ]\n}\n</code></pre> <p>Secret names must start with an upper or lower case character and can have only characters, digits, or underscores.</p>"},{"location":"self-hosted-configuration/#token","title":"token","text":"<p>Repository Auth Token.</p> Name Value type string cli <code>--token</code> env <code>RENOVATE_TOKEN</code> default <code>null</code>"},{"location":"self-hosted-configuration/#unicodeemoji","title":"unicodeEmoji","text":"<p>Enable or disable Unicode emoji.</p> Name Value type boolean default <code>true</code> cli <code>--unicode-emoji</code> env <code>RENOVATE_UNICODE_EMOJI</code> <p>If enabled emoji shortcodes are replaced with their Unicode equivalents. For example: <code>:warning:</code> will be replaced with <code>\u26a0\ufe0f</code>.</p>"},{"location":"self-hosted-configuration/#usecloudmetadataservices","title":"useCloudMetadataServices","text":"<p>If <code>false</code>, Renovate does not try to access cloud metadata services.</p> Name Value type boolean default <code>true</code> cli <code>--use-cloud-metadata-services</code> env <code>RENOVATE_USE_CLOUD_METADATA_SERVICES</code> <p>Some cloud providers offer services to receive metadata about the current instance, for example AWS Instance metadata or GCP VM metadata. You can control if Renovate should try to access these services with the <code>useCloudMetadataServices</code> config option.</p>"},{"location":"self-hosted-configuration/#useragent","title":"userAgent","text":"<p>If set to any string, Renovate will use this as the <code>user-agent</code> it sends with HTTP requests.</p> Name Value type string cli <code>--user-agent</code> env <code>RENOVATE_USER_AGENT</code> <p>If set to any string, Renovate will use this as the <code>user-agent</code> it sends with HTTP requests. Otherwise, it will default to <code>RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)</code>.</p>"},{"location":"self-hosted-configuration/#username","title":"username","text":"<p>Username for authentication.</p> Name Value type string supportedPlatforms azure, bitbucket, bitbucket-server cli <code>--username</code> env <code>RENOVATE_USERNAME</code> default <code>null</code> <p>The only time where <code>username</code> is required is if using <code>username</code> + <code>password</code> credentials for the <code>bitbucket</code> platform. You don't need to configure <code>username</code> directly if you have already configured <code>token</code>. Renovate will use the token to discover its username on the platform, including if you're running Renovate as a GitHub App.</p>"},{"location":"self-hosted-configuration/#variables","title":"variables","text":"<p>Object which holds variable name/value pairs.</p> Name Value type object mergeable true additionalProperties <pre><code>{\"type\": \"string\"}\n</code></pre> cli <code>--variables</code> env <code>RENOVATE_VARIABLES</code> <p>Variables may be configured by a bot admin in <code>config.js</code>, which will then make them available for templating within repository configs. This config option behaves exactly like secrets, except that it won't be masked in the logs. For example, to configure a <code>SOME_VARIABLE</code> to be accessible by all repositories:</p> <pre><code>module.exports = {\n  variables: {\n    SOME_VARIABLE: 'abc123',\n  },\n};\n</code></pre> <p>They can also be configured per repository, e.g.</p> <pre><code>module.exports = {\n  repositories: [\n    {\n      repository: 'abc/def',\n      variables: {\n        SOME_VARIABLE: 'abc123',\n      },\n    },\n  ],\n};\n</code></pre> <p>It could then be used in a repository config or preset like so:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"patch\"],\n      \"addLabels\": [\"{{ variables.SOME_VARIABLE }}\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#writediscoveredrepos","title":"writeDiscoveredRepos","text":"<p>Writes discovered repositories to a JSON file and then exit.</p> Name Value type string cli <code>--write-discovered-repos</code> env <code>RENOVATE_WRITE_DISCOVERED_REPOS</code> default <code>null</code> <p>By default, Renovate processes each repository that it finds. You can use this optional parameter so Renovate writes the discovered repositories to a JSON file and exits.</p> <p>Known use cases consist, among other things, of horizontal scaling setups. See Scaling Renovate Bot on self-hosted GitLab.</p> <p>Usage: <code>renovate --write-discovered-repos=/tmp/renovate-repos.json</code></p> <pre><code>[\"myOrg/myRepo\", \"myOrg/anotherRepo\"]\n</code></pre>"},{"location":"self-hosted-experimental/","title":"Self-hosted experimental environment variables","text":"<p>The following environment variables are \"experimental\" because they:</p> <ul> <li>are not commonly needed</li> <li>are typically an effort to work around some other service's or platform's problem</li> <li>can be removed at any time</li> <li>are variables for Renovate's internal use to validate they work as intended</li> </ul> <p>Experimental variables which are commonly used and for which there is no external solution in sight can be converted to an official configuration option by the Renovate bot developers.</p> <p>Use these experimental variables at your own risk. We do not follow Semantic Versioning for any experimental variables. These variables may be removed or have their behavior changed in any version. We will try to keep breakage to a minimum, but make no guarantees that an experimental variable will keep working.</p>"},{"location":"self-hosted-experimental/#otel_exporter_otlp_endpoint","title":"<code>OTEL_EXPORTER_OTLP_ENDPOINT</code>","text":"<p>If set, Renovate will export OpenTelemetry data to the supplied endpoint. For more information see the OpenTelemetry docs.</p>"},{"location":"self-hosted-experimental/#renovate_paginate_all","title":"<code>RENOVATE_PAGINATE_ALL</code>","text":"<p>If set to any value, Renovate will always paginate requests to GitHub fully, instead of stopping after 10 pages.</p>"},{"location":"self-hosted-experimental/#renovate_x_docker_hub_disable_label_lookup","title":"<code>RENOVATE_X_DOCKER_HUB_DISABLE_LABEL_LOOKUP</code>","text":"<p>If set to any value, Renovate will skip attempting to get release labels (e.g. gitRef, sourceUrl) from manifest annotations for <code>https://index.docker.io</code>.</p> <p>Due to the missing label information like sourceUrl, Renovate will not be able to perform certain actions dependent on these information for the images.</p> <p>This includes the following:</p> <ul> <li>Generating changelogs</li> <li>Applying package rules dependent on the labels</li> <li>Including the sourceUrls in PR bodies</li> </ul>"},{"location":"self-hosted-experimental/#renovate_x_docker_hub_tags_disable","title":"<code>RENOVATE_X_DOCKER_HUB_TAGS_DISABLE</code>","text":"<p>If set to any value, Renovate will stop using the Docker Hub API (<code>https://hub.docker.com</code>) to fetch tags and instead use the normal Docker API for images pulled from <code>https://index.docker.io</code>.</p>"},{"location":"self-hosted-experimental/#renovate_x_encrypted_strict","title":"<code>RENOVATE_X_ENCRYPTED_STRICT</code>","text":"<p>If set to <code>\"true\"</code>, a config error Issue will be raised in case repository config contains <code>encrypted</code> objects without any <code>privateKey</code> defined.</p>"},{"location":"self-hosted-experimental/#renovate_x_exec_gpid_handle","title":"<code>RENOVATE_X_EXEC_GPID_HANDLE</code>","text":"<p>If set, Renovate will terminate the whole process group of a terminated child process spawned by Renovate.</p>"},{"location":"self-hosted-experimental/#renovate_x_gitlab_auto_approve_token","title":"<code>RENOVATE_X_GITLAB_AUTO_APPROVE_TOKEN</code>","text":"<p>If set, when <code>autoApprove</code> is enabled, the provided token is used to authenticate GitLab approve requests instead of the default one. This is useful in environments where a user cannot approve its own PRs.</p>"},{"location":"self-hosted-experimental/#renovate_x_gitlab_auto_mergeable_check_attemps","title":"<code>RENOVATE_X_GITLAB_AUTO_MERGEABLE_CHECK_ATTEMPS</code>","text":"<p>If set to an positive integer, Renovate will use this as the number of attempts to check if a merge request on GitLab is mergeable before trying to automerge. The formula for the delay between attempts is <code>RENOVATE_X_GITLAB_MERGE_REQUEST_DELAY * attempt * attempt</code> milliseconds.</p> <p>Default value: <code>5</code> (attempts results in max. 13.75 seconds timeout).</p>"},{"location":"self-hosted-experimental/#renovate_x_gitlab_branch_status_check_attempts","title":"<code>RENOVATE_X_GITLAB_BRANCH_STATUS_CHECK_ATTEMPTS</code>","text":"<p>If set to a positive integer, Renovate will use this as the number of attempts to check branch status before trying to add a status check. The delay between attempts is <code>RENOVATE_X_GITLAB_BRANCH_STATUS_DELAY</code> milliseconds.</p> <p>Default value: <code>2</code> (attempts results in maximum 2 seconds timeout).</p> <p>!!! warning Increasing this value too much penalizes projects that do not have defined pipelines, Renovate will systematically wait <code>RENOVATE_X_GITLAB_BRANCH_STATUS_CHECK_ATTEMPTS * RENOVATE_X_GITLAB_BRANCH_STATUS_DELAY</code> milliseconds on these projects and slow down the Renovate analyzes.</p>"},{"location":"self-hosted-experimental/#renovate_x_gitlab_branch_status_delay","title":"<code>RENOVATE_X_GITLAB_BRANCH_STATUS_DELAY</code>","text":"<p>Adjust default time (in milliseconds) given to GitLab to create pipelines for a commit pushed by Renovate.</p> <p>Can be useful for slow-running, self-hosted GitLab instances that don't react fast enough for the default delay to help.</p> <p>Default value: <code>1000</code> (milliseconds).</p>"},{"location":"self-hosted-experimental/#renovate_x_gitlab_merge_request_delay","title":"<code>RENOVATE_X_GITLAB_MERGE_REQUEST_DELAY</code>","text":"<p>If set, Renovate will use this as a delay to proceed with an automerge.</p> <p>Default value: <code>250</code> (milliseconds).</p>"},{"location":"self-hosted-experimental/#renovate_x_hard_exit","title":"<code>RENOVATE_X_HARD_EXIT</code>","text":"<p>If set to any value, Renovate will use a \"hard\" <code>process.exit()</code> once all work is done, even if a sub-process is otherwise delaying Node.js from exiting. See issue 8660 for background on why this was created.</p>"},{"location":"self-hosted-experimental/#renovate_x_ignore_re2","title":"<code>RENOVATE_X_IGNORE_RE2</code>","text":"<p>Skip initializing <code>RE2</code> for regular expressions and instead use Node-native <code>RegExp</code> instead.</p>"},{"location":"self-hosted-experimental/#renovate_x_nuget_download_nupkgs","title":"<code>RENOVATE_X_NUGET_DOWNLOAD_NUPKGS</code>","text":"<p>If set to any value, Renovate will download <code>nupkg</code> files for determining package metadata.</p>"},{"location":"self-hosted-experimental/#renovate_x_platform_version","title":"<code>RENOVATE_X_PLATFORM_VERSION</code>","text":"<p>Specify this string for Renovate to skip API checks and provide Bitbucket server, Forgejo or GitLab version directly. Particularly useful with GitLab's <code>CI_JOB_TOKEN</code> to authenticate Renovate or to reduce API calls for Bitbucket.</p> <p>Read platform details to learn why we need the server version on GitLab.</p>"},{"location":"self-hosted-experimental/#renovate_x_rebase_pagination_links","title":"<code>RENOVATE_X_REBASE_PAGINATION_LINKS</code>","text":"<p>If set, Renovate will rewrite GitHub Enterprise Server's pagination responses to use the <code>endpoint</code> URL from the Renovate config.</p> <p>Note</p> <p>For the GitHub Enterprise Server platform only.</p>"},{"location":"self-hosted-experimental/#renovate_x_repo_cache_force_local","title":"<code>RENOVATE_X_REPO_CACHE_FORCE_LOCAL</code>","text":"<p>If set, Renovate will persist repository cache locally after uploading to S3.</p>"},{"location":"self-hosted-experimental/#renovate_x_sqlite_package_cache","title":"<code>RENOVATE_X_SQLITE_PACKAGE_CACHE</code>","text":"<p>If set, Renovate will use SQLite as the backend for the package cache. Don't combine with <code>redisUrl</code>, Redis would be preferred over SQlite.</p>"},{"location":"self-hosted-experimental/#renovate_x_static_repo_config_file","title":"<code>RENOVATE_X_STATIC_REPO_CONFIG_FILE</code>","text":"<p>If set to a valid path pointing to a file containing a valid Renovate configuration in <code>JSON</code> format, it will be applied to the repository config before resolving the actual configuration file within the repository.</p> <p>Warning</p> <p>If the file is missing or contains invalid configuration, the scan will be aborted.</p> <p>Note</p> <p>You probably shouldn\u2019t use this unless you have a very specific reason to override the repository\u2019s normal configuration resolution process.</p>"},{"location":"self-hosted-experimental/#renovate_x_suppress_pre_commit_warning","title":"<code>RENOVATE_X_SUPPRESS_PRE_COMMIT_WARNING</code>","text":"<p>Suppress the pre-commit support warning in PR bodies.</p>"},{"location":"self-hosted-experimental/#renovate_x_use_openpgp","title":"<code>RENOVATE_X_USE_OPENPGP</code>","text":"<p>Use <code>openpgp</code> instead of <code>kbpgp</code> for <code>PGP</code> decryption.</p>"},{"location":"self-hosted-experimental/#renovate_x_yarn_proxy","title":"<code>RENOVATE_X_YARN_PROXY</code>","text":"<p>Configure global Yarn proxy settings if HTTP proxy environment variables are detected.</p>"},{"location":"semantic-commits/","title":"Semantic Commit messages","text":"<p>Renovate looks at the last 10 commit messages in the base branch to decide if the repository uses semantic commits. If there are Semantic Commits, Renovate uses the conventional-commits-detector to decide what convention the commit messages follow.</p> <p>Renovate can only find Angular-style conventional commits, it does not \"understand\" other commit conventions.</p> <p>When Renovate finds Angular-style commits, Renovate creates commit messages and PR titles like this:</p> <ul> <li>chore(deps): update eslint to v7.30.0</li> </ul> <p>By default, Renovate uses the <code>chore</code> prefix.</p> <p>If you extend from <code>config:recommended</code> then Renovate uses the <code>chore</code> prefix for nearly all updates. There are some exceptions:</p> <ul> <li>if the <code>depType</code> is a known \"production dependency\" type (e.g. <code>dependencies</code> or <code>require</code>), then Renovate uses the <code>fix</code> prefix</li> <li>if an update uses the <code>maven</code> datasource and <code>matchDepTypes</code> is a known production type (e.g. <code>compile</code>, <code>provided</code>, <code>runtime</code>, <code>system</code>, <code>import</code> or <code>parent</code>) then Renovate uses the <code>fix</code> prefix</li> </ul> <p>Be aware that the semantic commits feature does not work if you have a <code>commitMessagePrefix</code> configured - <code>commitMessagePrefix</code> will take priority.</p>"},{"location":"semantic-commits/#manually-enabling-or-disabling-semantic-commits","title":"Manually enabling or disabling semantic commits","text":"<p>You can override the default settings, and disable or enable Semantic Commits.</p> If you want Renovate to use Semantic Commits<pre><code>{\n  \"extends\": [\":semanticCommits\"]\n}\n</code></pre> If you want Renovate to stop using Semantic Commits<pre><code>{\n  \"extends\": [\":semanticCommitsDisabled\"]\n}\n</code></pre>"},{"location":"semantic-commits/#changing-the-semantic-commit-type","title":"Changing the Semantic Commit type","text":"<p>You can change the Semantic Commit type that Renovate uses. For example:</p> <ul> <li>If you want Renovate to use the \"chore\" type for every PR, add <code>\":semanticCommitTypeAll(chore)\"</code> to your <code>extends</code> array:</li> </ul> <pre><code>{\n  \"extends\": [\":semanticCommitTypeAll(chore)\"]\n}\n</code></pre> <p>PR titles and commit messages start with <code>chore(deps):</code>.</p> <ul> <li>If you want Renovate to use the \"ci\" type for every PR, add <code>\":semanticCommitTypeAll(ci)\"</code> to your <code>extends</code> array:</li> </ul> <pre><code>{\n  \"extends\": [\":semanticCommitTypeAll(ci)\"]\n}\n</code></pre> <p>PR titles and commit messages start with <code>ci(deps):</code>.</p>"},{"location":"semantic-commits/#changing-the-semantic-commit-scope","title":"Changing the Semantic Commit scope","text":"<p>You can set your own word for the scope, if you do not like the default \"deps\" scope. For example, to set the scope to \"package\", add the preset <code>\":semanticCommitScope(package)\"</code> to your <code>extends</code> array:</p> <pre><code>{\n  \"extends\": [\":semanticCommitScope(package)\"]\n}\n</code></pre> <p>To remove the Semantic Commit scope, so Renovate uses <code>chore:</code> instead of <code>chore(deps):</code>, add the <code>\":semanticCommitScopeDisabled\"</code> preset to your <code>extends</code> array:</p> <pre><code>{\n  \"extends\": [\":semanticCommitScopeDisabled\"]\n}\n</code></pre>"},{"location":"string-pattern-matching/","title":"String Pattern Matching - Regex or Glob","text":"<p>Renovate string matching syntax for some configuration options allows you, as user, to choose between:</p> <ul> <li><code>minimatch</code> glob patterns, including exact strings matches</li> <li>regular expression (regex) patterns</li> </ul> <p>In cases where there are potentially multiple inputs, e.g. managers can have multiple categories, then the matcher will return <code>true</code> if any of them match.</p>"},{"location":"string-pattern-matching/#special-case-match-everything","title":"Special case: Match everything","text":"<p>The value <code>*</code> is a special case which means \"match everything\". It is not valid to combine <code>*</code> with any other positive or negative match.</p> Example of valid wildcard use<pre><code>{\n  \"allowedEnv\": [\"*\"]\n}\n</code></pre> Example of invalid wildcard use with additional match<pre><code>{\n  \"allowedEnv\": [\"*\", \"ABC\"]\n}\n</code></pre> Example of invalid wildcard use with negation<pre><code>{\n  \"allowedEnv\": [\"*\", \"!ABC\"]\n}\n</code></pre> <p>In the latter case, the <code>*</code> can be omitted and achieve the same thing.</p>"},{"location":"string-pattern-matching/#regex-matching","title":"Regex matching","text":"<p>A valid regex pattern:</p> <ol> <li>Starts with <code>/</code> or <code>!/</code></li> <li>Ends with <code>/</code> or <code>/i</code></li> </ol>"},{"location":"string-pattern-matching/#regex-is-case-sensitive-by-default","title":"Regex is case sensitive by default","text":"<p>By default, regex patterns are evaluated as case sensitive. To ignore case sensitivity you must set the <code>i</code> flag, see the regex patterns table for an example.</p>"},{"location":"string-pattern-matching/#renovate-uses-re2-syntax","title":"Renovate uses re2 syntax","text":"<p>Renovate uses the <code>re2</code> library for regex matching. <code>re2</code> is different from the full regex specification, because <code>re2</code> has a different syntax/support.</p> <p>For the full <code>re2</code> syntax, read the <code>re2</code> syntax wiki page.</p>"},{"location":"string-pattern-matching/#example-regex-patterns","title":"Example regex patterns","text":"Pattern Regex pattern explanation <code>/^abc/</code> matches any string starting with lower-case <code>abc</code> <code>/^abc/i</code> matches any string starting with <code>abc</code> in lower or upper case, or a mix <code>!/^a/</code> matches any string not starting with <code>a</code> in lower case"},{"location":"string-pattern-matching/#use-regex101-to-test-your-patterns","title":"Use regex101 to test your patterns","text":"<p>If you want to test your patterns interactively online, we recommend regex101.com. You can use the Code Generator in the sidebar and copy the regex in the generated \"Alternative syntax\" comment into JSON.</p> <p>Escape the backslashes from regex101</p> <p>Before you copy/paste the regex from regex101 into your Renovate config, you must escape the backslashes (<code>\\</code>) first. For example: <code>\\n\\s</code> --&gt; <code>\\\\n\\\\s</code>.</p>"},{"location":"string-pattern-matching/#glob-matching","title":"Glob matching","text":"<p>If the string provided is not a regex pattern then it will be treated as a glob pattern and parsed using the <code>minimatch</code> library. Although glob patterns were designed originally for file name matching, many users find glob syntax easier to understand than regex so prefer it.</p>"},{"location":"string-pattern-matching/#glob-patterns-always-ignore-casing","title":"Glob patterns always ignore casing","text":"<p>Glob patterns are always evaluated with case insensitivity and you can not change this. If you need a case-sensitive pattern you must use a regex pattern.</p>"},{"location":"string-pattern-matching/#example-glob-patterns","title":"Example glob patterns","text":"Pattern Glob pattern explanation <code>abc123</code> matches <code>abc123</code> exactly, or <code>AbC123</code> <code>abc*</code> matches <code>abc</code>, <code>abc123</code>, <code>ABCabc</code>, but not <code>abc/def</code> <code>abc**/*</code> matches <code>abc/def</code> but not <code>abc</code>, <code>abcd</code>, or <code>abc/def/ghi</code>, <code>abc**/**</code> matches <code>abc/def</code> and <code>abc/def/ghi</code>, but not <code>abc</code> or <code>abcd</code> <code>abc{/,}**</code> matches <code>abc</code>, <code>abcd</code>, <code>abc/def</code>, and <code>abc/def/ghi</code> <p>All matches above are case-insensitive, even if not shown.</p>"},{"location":"string-pattern-matching/#negative-matching","title":"Negative matching","text":"<p>Renovate has a specific approach to negative matching strings.</p> <p>\"Positive\" matches are patterns (in glob or regex) which do not start with <code>!</code>. \"Negative\" matches are patterns starting with <code>!</code>, like <code>!/^a/</code> or <code>!b*</code>.</p> <p>For an array of patterns to match, the following must be true:</p> <ul> <li>If any positive matches are included, at least one must match</li> <li>If any negative matches are included, none must match</li> </ul> <p>For example, the pattern <code>[\"/^abc/\", \"!/^abcd/\", \"!/abce/\"]</code>:</p> <ul> <li>matches <code>\"abc\"</code> and <code>\"abcf\"</code></li> <li>does not match <code>\"foo\"</code>, <code>\"abcd\"</code>, <code>\"abce\"</code>, or <code>\"abcdef\"</code></li> </ul> <p>If you find yourself in a situation where you need to positive-match a string which starts with <code>!</code>, then you need to do so using a regular expression pattern. For example, <code>[\"/^!abc$/\"]</code> will positively match against the string <code>\"!abc\"</code>.</p> <p>One limitation of negative matching is when there may be multiple inputs to match against. For example, a manager may have multiple categories, such as <code>java</code> and <code>docker</code>. If you have a rule such as <code>\"matchCategories\": [\"!docker\"]</code> then this will return <code>true</code> because the <code>java</code> category satisfies this rule.</p>"},{"location":"string-pattern-matching/#usage-in-renovate-configuration-options","title":"Usage in Renovate configuration options","text":"<p>Renovate has evolved its approach to string pattern matching over time, but this means that existing configurations may have a mix of approaches and not be entirely consistent with each other.</p> <p>The configuration options that support \"regex or glob\" syntax mention this in their documentation, and also link to this page.</p>"},{"location":"templates/","title":"Template fields","text":"<p>In order to provide flexible configuration, Renovate supports using \"templates\" for certain fields like <code>addLabels</code>, <code>branchName</code>, <code>extractVersionTemplate</code>, <code>labels</code>.</p> <p>Renovate's templates use handlebars under the hood. You can recognize templates when you see strings like <code>{{depName}}</code> in configuration fields.</p> <p>Below you can find lists of fields/values that you can use in templates. Some are configuration options passed through, while others are generated as part of Renovate's run.</p> <p><code>logJSON</code> and <code>releases</code> are only allowed in <code>commitBody</code> template.</p>"},{"location":"templates/#exposed-config-options","title":"Exposed config options","text":"<p>The following configuration options are passed through for templating: additionalBranchPrefix, addLabels, branchName, branchPrefix, branchTopic, commitBody, commitMessage, commitMessageAction, commitMessageExtra, commitMessagePrefix, commitMessageSuffix, commitMessageTopic, gitAuthor, group, groupName, groupSlug, labels, prBodyColumns, prBodyDefinitions, prBodyNotes, prTitle, semanticCommitScope, semanticCommitType, separateMajorMinor, separateMinorPatch, separateMultipleMinor, sourceDirectory.</p>"},{"location":"templates/#other-available-fields","title":"Other available fields","text":"<p>The following runtime values are passed through for templating: </p> <ul> <li><code>baseBranch</code>: The baseBranch for this branch/PR</li> <li><code>body</code>: The body of the release notes</li> <li><code>categories</code>: The categories of the manager of the dependency being updated</li> <li><code>currentValue</code>: The extracted current value of the dependency being updated</li> <li><code>currentVersion</code>: The version that would be currently installed. For example, if currentValue is ^3.0.0 then currentVersion might be 3.1.0.</li> <li><code>currentVersionAgeInDays</code>: The age of the current version in days</li> <li><code>currentVersionTimestamp</code>: The timestamp of the current version</li> <li><code>currentDigest</code>: The extracted current digest of the dependency being updated</li> <li><code>currentDigestShort</code>: The extracted current short digest of the dependency being updated</li> <li><code>datasource</code>: The datasource used to look up the upgrade</li> <li><code>depName</code>: The name of the dependency being updated</li> <li><code>depNameLinked</code>: The dependency name already linked to its home page using markdown</li> <li><code>depNameSanitized</code>: The depName field sanitized for use in branches after removing spaces and special characters</li> <li><code>depType</code>: The dependency type (if extracted - manager-dependent)</li> <li><code>depTypes</code>: A deduplicated array of dependency types (if extracted - manager-dependent) in a branch</li> <li><code>displayFrom</code>: The current value, formatted for display</li> <li><code>displayPending</code>: Latest pending update, if internalChecksFilter is in use</li> <li><code>displayTo</code>: The to value, formatted for display</li> <li><code>hasReleaseNotes</code>: true if the upgrade has release notes</li> <li><code>indentation</code>: The indentation of the dependency being updated</li> <li><code>isGroup</code>: true if the upgrade is part of a group</li> <li><code>isLockfileUpdate</code>: true if the branch is a lock file update</li> <li><code>isMajor</code>: true if the upgrade is major</li> <li><code>isMinor</code>: true if the upgrade is minor</li> <li><code>isPatch</code>: true if the upgrade is a patch upgrade</li> <li><code>isPin</code>: true if the upgrade is pinning dependencies</li> <li><code>isPinDigest</code>: true if the upgrade is pinning digests</li> <li><code>isRollback</code>: true if the upgrade is a rollback PR</li> <li><code>isReplacement</code>: true if the upgrade is a replacement</li> <li><code>isRange</code>: true if the new value is a range</li> <li><code>isSingleVersion</code>: true if the upgrade is to a single version rather than a range</li> <li><code>isVulnerabilityAlert</code>: true if the upgrade is a vulnerability alert</li> <li><code>logJSON</code>: ChangeLogResult object for the upgrade</li> <li><code>manager</code>: The (package) manager which detected the dependency</li> <li><code>newDigest</code>: The new digest value</li> <li><code>newDigestShort</code>: A shorted version of newDigest, for use when the full digest is too long to be conveniently displayed</li> <li><code>newMajor</code>: The major version of the new version. e.g. \"3\" if the new version is \"3.1.0\"</li> <li><code>newMinor</code>: The minor version of the new version. e.g. \"1\" if the new version is \"3.1.0\"</li> <li><code>newPatch</code>: The patch version of the new version. e.g. \"0\" if the new version is \"3.1.0\"</li> <li><code>newName</code>: The name of the new dependency that replaces the current deprecated dependency</li> <li><code>newNameLinked</code>: The new dependency name already linked to its home page using markdown</li> <li><code>newValue</code>: The new value in the upgrade. Can be a range or version e.g. \"^3.0.0\" or \"3.1.0\"</li> <li><code>newVersion</code>: The new version in the upgrade, e.g. \"3.1.0\"</li> <li><code>newVersionAgeInDays</code>: The age of the new version in days</li> <li><code>packageFile</code>: The filename that the dependency was found in</li> <li><code>packageFileDir</code>: The directory with full path where the packageFile was found</li> <li><code>packageName</code>: The full name that was used to look up the dependency</li> <li><code>packageScope</code>: The scope of the package name. Supports Maven group ID only</li> <li><code>parentDir</code>: The name of the directory that the dependency was found in, without full path</li> <li><code>parentOrg</code>: The name of the parent organization for the current repository</li> <li><code>platform</code>: VCS platform in use, e.g. \"github\", \"gitlab\", etc.</li> <li><code>prettyDepType</code>: Massaged depType</li> <li><code>prettyNewMajor</code>: The new major value with v prepended to it.</li> <li><code>prettyNewVersion</code>: The new version value with v prepended to it.</li> <li><code>project</code>: ChangeLogProject object</li> <li><code>recreateClosed</code>: If true, this PR will be recreated if closed</li> <li><code>references</code>: A list of references for the upgrade</li> <li><code>releases</code>: An array of releases for an upgrade</li> <li><code>releaseNotes</code>: A ChangeLogNotes object for the release</li> <li><code>releaseTimestamp</code>: The timestamp of the release</li> <li><code>repository</code>: The current repository</li> <li><code>semanticPrefix</code>: The fully generated semantic prefix for commit messages</li> <li><code>sourceRepo</code>: The repository in the sourceUrl, if present</li> <li><code>sourceRepoName</code>: The repository name in the sourceUrl, if present</li> <li><code>sourceRepoOrg</code>: The repository organization in the sourceUrl, if present</li> <li><code>sourceRepoSlug</code>: The slugified pathname of the sourceUrl, if present</li> <li><code>sourceUrl</code>: The source URL for the package</li> <li><code>topLevelOrg</code>: The name of the top-level organization for the current repository</li> <li><code>updateType</code>: One of digest, pin, rollback, patch, minor, major, replacement, pinDigest</li> <li><code>upgrades</code>: An array of upgrade objects in the branch</li> <li><code>url</code>: The url of the release notes</li> <li><code>version</code>: The version number of the changelog</li> <li><code>versioning</code>: The versioning scheme in use</li> <li><code>versions</code>: An array of ChangeLogRelease objects in the upgrade</li> <li><code>vulnerabilitySeverity</code>: The severity for a vulnerability alert upgrade (LOW, MEDIUM, MODERATE, HIGH, CRITICAL, UNKNOWN)</li> </ul>"},{"location":"templates/#additional-handlebars-helpers","title":"Additional Handlebars helpers","text":""},{"location":"templates/#and","title":"and","text":"<p>Returns <code>true</code> only if all expressions are <code>true</code>.</p> <p><code>{{#if (and isMajor hasReleaseNotes)}}Backwards Incompatible release! Check out the Release notes.{{/if}}</code></p> <p>In the example above, it will only show a text if <code>isMajor=true</code> and <code>hasReleaseNotes=true</code>.</p>"},{"location":"templates/#containsstring","title":"containsString","text":"<p>Returns <code>true</code> if a given string is a substring.</p> <p><code>{{#if (containsString depName 'python')}}Python{{else}}Other{{/if}}</code></p>"},{"location":"templates/#decodebase64","title":"decodeBase64","text":"<p>If you want to convert a Base64 value to a string, use the built-in function <code>decodeBase64</code> like this:</p> <p><code>{{{decodeBase64 body}}}</code></p> <p>In the example above <code>body</code> is the base64 encoded value you want to decode.</p>"},{"location":"templates/#decodeuricomponent","title":"decodeURIComponent","text":"<p>If you want to decode a percent-encoded string, use the built-in function <code>decodeURIComponent</code> like this:</p> <p><code>{{{decodeURIComponent depName}}}</code></p> <p>In the example above <code>depName</code> is the string you want to decode.</p> <p>Read the MDN Web Docs, decodeURIComponent() to learn more.</p>"},{"location":"templates/#distinct","title":"distinct","text":"<p>Removes duplicate elements from an array.</p> <p><code>{{#each (distinct (lookupArray (lookupArray upgrades \"prBodyDefinitions\") \"Issue\"))}} {{{.}}}{{/each}}</code></p>"},{"location":"templates/#encodebase64","title":"encodeBase64","text":"<p>If you want to convert a string to Base64, use the built-in function <code>encodeBase64</code> like this:</p> <p><code>{{{encodeBase64 body}}}</code></p> <p>In the example above <code>body</code> is the string you want to transform into a Base64-encoded value.</p>"},{"location":"templates/#encodeuricomponent","title":"encodeURIComponent","text":"<p>If you want to convert a string to a valid URI, use the built-in function <code>encodeURIComponent</code> like this:</p> <p><code>{{{encodeURIComponent baseDir}}}</code></p> <p>In the example above <code>baseDir</code> is the string you want to transform into a valid URI.</p> <p>Read the MDN Web Docs, encodeURIComponent() to learn more.</p>"},{"location":"templates/#equals","title":"equals","text":"<p>Returns <code>true</code> if two values equals (checks strict equality, i.e. <code>===</code>).</p> <p><code>{{#if (equals datasource 'git-refs')}}git-refs{{else}}Other{{/if}}</code></p>"},{"location":"templates/#lookuparray","title":"lookupArray","text":"<p>Similar to the built-in <code>lookup</code> helper, but performs lookups in every element of an array, instead of just one object.</p> <p>For example:</p> <p><code>{{#each (lookupArray upgrades \"prBodyDefinitions\")}} {{{Issue}}}{{/each}}</code></p> <p>will produce the same output as:</p> <p><code>{{#each upgrades}}{{#with prBodyDefinitions}} {{{Issue}}}{{/with}}{{/each}}</code>.</p> <p>The return value of <code>lookupArray</code> can be passed to other helpers - for example, to <code>distinct</code>.</p>"},{"location":"templates/#lowercase","title":"lowercase","text":"<p>The <code>lowercase</code> helper converts a given string to lower case.</p> <p><code>{{{ lowercase depName }}}</code></p>"},{"location":"templates/#or","title":"or","text":"<p>Returns <code>true</code> if at least one expression is <code>true</code>.</p> <p><code>{{#if (or isPatch isSingleVersion}}Small update, safer to merge and release.{{else}}Check out the changelog for all versions before merging!{{/if}}</code></p>"},{"location":"templates/#replace","title":"replace","text":"<p>The <code>replace</code> helper replaces all found strings matching the given regex with the replacement string. If you want to replace some characters in a string, use the built-in function <code>replace</code> like this:</p> <p><code>{{{replace '[a-z]+\\.github\\.com' 'ghc' depName}}}</code></p> <p>In the example above all matches of the regex <code>[a-z]+\\.github\\.com</code> will be replaced by <code>ghc</code> in <code>depName</code>.</p> <p>Read the MDN Web Docs, String.prototype.replace() to learn more.</p>"},{"location":"templates/#split","title":"split","text":"<p>Splits a string into an array of substrings.</p> <p>This example splits a package name by <code>-</code> and gets the second part: <code>{{ lookup (split packageName '-') 1 }}</code> An input of <code>foo-bar-test</code> therefore would return <code>bar</code>.</p>"},{"location":"templates/#stringtoprettyjson","title":"stringToPrettyJSON","text":"<p>If you want to print pretty JSON with Handlebars you can use the built-in function <code>stringToPrettyJSON</code> like this:</p> <p><code>{{{stringToPrettyJSON myvar}}}</code></p> <p>In the example above <code>myvar</code> is a variable/field, that has valid JSON.</p>"},{"location":"templates/#toarray","title":"toArray","text":"<p>If you want to convert elements to an array, use <code>toArray</code>, e.g.,</p> <p><code>{{{ toJSON (toArray 'value1' 'value2' 'value3') }}}</code> will render <code>[\"value1\",\"value2\",\"value3\"]</code>.</p>"},{"location":"templates/#tojson","title":"toJSON","text":"<p>If you want to convert an object to a JSON string, you can use the built-in function <code>toJSON</code> like this:</p> <p><code>{{{ toJSON upgrades }}}</code></p>"},{"location":"templates/#toobject","title":"toObject","text":"<p>If you want to convert key-value pairs to an object, use <code>toObject</code>, e.g.,</p> <p><code>{{{ toJSON (toObject 'key1' 'value1' 'key2' 'value2') }}}</code> will render <code>{\"key1\":\"value1\",\"key2\":\"value2\"}</code>.</p>"},{"location":"templates/#environment-variables","title":"Environment variables","text":"<p>By default, you can only access a handful of basic environment variables like <code>HOME</code> or <code>PATH</code>. This is for security reasons.</p> <p><code>HOME is {{env.HOME}}</code></p> <p>If you're self-hosting Renovate, you can expose more variables with the <code>customEnvVariables</code> config option.</p> <p>You can also use the <code>exposeAllEnv</code> config option to allow all environment variables in templates, but make sure to consider the security implications of giving the scripts unrestricted access to all variables.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Renovate","text":"<p>Learn how to troubleshoot problems with Renovate, where to find the logging output, and how to get help if needed.</p>"},{"location":"troubleshooting/#getting-the-logs","title":"Getting the logs","text":"<p>Renovate's debug-level logs are usually enough to help troubleshoot most problems. Where you can find the logs depends on how you're running Renovate.</p>"},{"location":"troubleshooting/#the-mend-renovate-app","title":"The Mend Renovate App","text":"<p>Each pull request from the Mend Renovate App has a link to the Mend Developer Portal in the PR body text.</p> <p>The text you're looking for is:</p> <p>This PR was generated by Mend Renovate. View the repository job log.</p> <p>Select the blue text \"repository job log\" to go to the Recent jobs page in the Mend Developer Portal. Sign in with your GitHub account. Once you're logged in, you can see the logs for the Renovate jobs on your repository. You should have access to any repository which you have write access to and which has Renovate installed.</p> <p>Renovate only provides the 10 most recent logs for each repository.</p> <p>After selecting a recent job, you can select the debug level that you care about. For a full overview, select the <code>DEBUG</code> log level.</p>"},{"location":"troubleshooting/#self-hosted","title":"Self-hosted","text":"<p>The easiest way to gather logs from Renovate for any platform is to use the default logging to <code>stdout</code>/console. By default, Renovate will log in a human-readable format at <code>INFO</code> level.</p> <p>For troubleshooting it's recommended to increase logging to <code>DEBUG</code> level by adding <code>LOG_LEVEL=debug</code> to your environment variables before invoking Renovate.</p> <p>If your Renovate logs are being processed by a log service before you access them, you may find it better to have Renovate output logs in JSON format instead so that they can be reliably parsed and filtered. This can be achieved by adding <code>LOG_FORMAT=json</code> to your environment variables before invoking Renovate.</p>"},{"location":"troubleshooting/#log-debug-levels","title":"Log debug levels","text":"<p>There are different severity levels for the log output. From least severe to most severe:</p> <ul> <li><code>DEBUG</code></li> <li><code>INFO</code></li> <li><code>WARN</code></li> <li><code>ERROR</code></li> <li><code>FATAL</code></li> </ul> <p>To check for problems, look for <code>WARN</code> or <code>ERROR</code> logs (level 40 or 50 if in JSON format). To troubleshoot further, you usually need to look at <code>DEBUG</code> logs.</p>"},{"location":"troubleshooting/#resolving-problems-using-logs","title":"Resolving problems using logs","text":"<p>We recommend you follow this process:</p> <ol> <li>Try to narrow in on the problem area e.g. by looking for relevant branches or <code>WARN</code> or <code>ERROR</code> messages</li> <li>Find all relevant <code>DEBUG</code> or <code>INFO</code> messages from before and after the problem occurred</li> <li>Copy/paste the relevant parts of the logs into your discussion post or bug report</li> </ol> <p>If you cannot fix the problem yourself after reading the logs, and reading - or searching through - our documentation, search the <code>renovatebot/renovate</code> discussion forum to see if somebody has asked a similar or related question.</p> <p>If none of these steps have helped you, then create a new discussion post to get help from the Renovate maintainers.</p> <p>Please locate the relevant parts of the logs as described earlier before asking for help or posting a bug report. Do not expect the Renovate maintainers to read through the full logs when trying to help you, as that takes a lot of time on our part. If later it turns out that the full logs are necessary, you will be asked for them then.</p>"},{"location":"troubleshooting/#validating-configuration-changes","title":"Validating configuration changes","text":"<p>Sometimes you will have to change your Renovate configuration to solve a problem. The <code>renovate-config-validator</code> program helps validate such configuration changes without committing them to your repository.</p>"},{"location":"updating-rebasing/","title":"Updating and rebasing branches","text":"<p>There are many situations in which Renovate must update/rebase a branch.</p> <p>Here is a list of the most common cases where Renovate must update/rebase the branch:</p> <ul> <li>When a pull request has conflicts due to changes on the base branch</li> <li>When you have enabled \"Require branches to be up to date before merging\" on GitHub</li> <li>When you have manually told Renovate to rebase when behind the base branch with <code>\"rebaseWhen\": \"behind-base-branch\"</code></li> <li>When you have set <code>keepUpdatedLabel</code> and included the label on a PR</li> <li>When a newer version of the dependency is released</li> <li>When you request a manual rebase from the Renovate bot</li> <li>When you use <code>\"automerge\": true</code> and <code>\"rebaseWhen\": \"auto\"</code> on a branch / pr</li> </ul> <p>Renovate uses its own version of \"rebasing\", which is not the same as doing a <code>git rebase</code> with Git. Instead, Renovate reapplies all updates into a new commit based off of the head of the base branch.</p>"},{"location":"updating-rebasing/#no-rebasing-if-you-have-made-edits","title":"No rebasing if you have made edits","text":"<p>First of all, here is the one time when Renovate won't update branches. If you push a new commit to a Renovate branch, for example to fix your code so the tests pass, then Renovate stops all updates of that branch. It is up to you to either finish the job and merge the PR, or rename it and close it so that Renovate can take over again.</p> <p>Warning</p> <p>Do not amend Renovate's commits, because Renovate will rebase over your amended commit. Keep your work safe and always push your own new commit to any Renovate branch.</p>"},{"location":"updating-rebasing/#rebasing-conflicted-prs","title":"Rebasing conflicted PRs","text":"<p>If new commits to the base branch - such as merging another Renovate PR - result in an open Renovate PR having merge conflicts, then Renovate will recreate (\"rebase\") any conflicted PRs. This applies both to commits to dependency files such as <code>package.json</code> as well as lock files such as <code>yarn.lock</code>. You should not ever need to resolve such conflicts manually. You can disable this functionality by configuring <code>\"rebaseWhen\": \"never\"</code> (not recommended).</p>"},{"location":"updating-rebasing/#rebasing-out-of-date-branches","title":"Rebasing out-of-date branches","text":"<p>There are multiple cases where Renovate will rebase its branches off the base branch every time they are out of date:</p> <ol> <li>If you configure <code>\"rebaseWhen\": \"behind-base-branch\"</code></li> <li>If you use the default configuration <code>\"rebaseWhen\": \"auto\"</code> and the repository has a requirement that branches must be up-to-date before merging (e.g. \"Require branches to be up to date before merging\" on GitHub, or fast-forward-only settings on Bitbucket Server or GitLab)</li> <li>If you use the default configuration <code>\"rebaseWhen\" : \"auto\"</code> and configure <code>\"automerge\" : true</code></li> </ol> <p>In that case Renovate PRs will be rebased off the repository's base branch whenever they are behind the base branch, even if the PRs are not conflicted.</p>"},{"location":"updating-rebasing/#newer-dependency-versions","title":"Newer dependency versions","text":"<p>If an existing PR is open to upgrade dependency \"foo\" to v1.1.0 and then v1.1.1 is released, then Renovate will regenerate the branch again. This way:</p> <ul> <li>Each Renovate branch will always have 1 and only 1 commit</li> <li>The newest version will be based off the latest base branch commit at the time</li> </ul>"},{"location":"updating-rebasing/#manual-rebasing","title":"Manual rebasing","text":"<p>You can request that Renovate rebase a PR by selecting the rebase/retry checkbox on GitHub or GitLab. Or you can add a \"rebase\" label to the PR. The label name is configurable via the <code>rebaseLabel</code> option.</p> <p>If you apply a rebase label then Renovate will regenerate its commit for the branch, even if the branch has been modified. The rebase label is useful in situations like:</p> <ul> <li>If a branch is behind the base branch but you don't have <code>rebaseWhen=behind-base-branch</code> enabled</li> <li>If a branch has been edited and you want to discard the edits and have Renovate create it again</li> <li>If a branch was created with an error (e.g. lockfile generation) and you want Renovate to try again</li> </ul>"},{"location":"upgrade-best-practices/","title":"Upgrade best practices","text":"<p>This page explains what we (the Renovate maintainers) recommend you do to update your dependencies.</p>"},{"location":"upgrade-best-practices/#general-recommendations","title":"General recommendations","text":"<p>In general, you should:</p> <ul> <li>Run Renovate on every repository</li> <li>Use the <code>config:best-practices</code> preset, instead of the <code>config:recommended</code> preset</li> <li>Use the Dependency Dashboard issue (it's on by default)</li> <li>Update your dependencies often</li> <li>Read the changelogs for the updates</li> <li>Update to new <code>major</code> versions in good time</li> <li>Talk with your team about the update strategy</li> </ul> <p>If Renovate is too noisy for you, read the noise reduction docs.</p>"},{"location":"upgrade-best-practices/#use-the-configbest-practices-preset","title":"Use the <code>config:best-practices</code> preset","text":"<p>The <code>config:recommended</code> preset is the recommended configuration for most Renovate users. Renovate also has a <code>config:best-practices</code> preset that includes our upgrade best practices.</p> <p>You should extend from the <code>config:best-practices</code> preset:</p> <pre><code>{\n  \"extends\": [\"config:best-practices\"]\n}\n</code></pre> <p>If you're using <code>config:recommended</code> now, replace it with <code>config:best-practices</code>:</p> <pre><code>- \"extends\": [\"config:recommended\"]\n+ \"extends\": [\"config:best-practices\"]\n</code></pre>"},{"location":"upgrade-best-practices/#whats-in-the-configbest-practices-preset","title":"What's in the <code>config:best-practices</code> preset?","text":"<p>The <code>config:best-practices</code> preset has this configuration:</p> <pre><code>{\n  \"extends\": [\n    \"config:recommended\",\n    \"docker:pinDigests\",\n    \"helpers:pinGitHubActionDigests\",\n    \":configMigration\",\n    \":pinDevDependencies\",\n    \"abandonments:recommended\"\n  ]\n}\n</code></pre> <p>The next sections explain what each part of the preset does.</p>"},{"location":"upgrade-best-practices/#config-migration","title":"Config migration","text":"<p>Renovate creates a config migration PR to replace old config option names with their new replacements. This way your configuration file and the Renovate docs always use the same terms.</p> <p>You'll get config migration PRs no matter how you run Renovate: self-hosting or the Mend Renovate app.</p>"},{"location":"upgrade-best-practices/#extends-configrecommended","title":"Extends <code>config:recommended</code>","text":"<p>The <code>config:recommended</code> preset is a good base to start from. That's why we extend from it.</p>"},{"location":"upgrade-best-practices/#extends-dockerpindigests","title":"Extends <code>docker:pinDigests</code>","text":"<p>The Renovate docs, Docker Digest pinning section explains why you should pin your Docker containers to an exact digest.</p>"},{"location":"upgrade-best-practices/#extends-helperspingithubactiondigests","title":"Extends <code>helpers:pinGitHubActionDigests</code>","text":"<p>The GitHub Docs, using third-party actions recommend that you pin third-party GitHub Actions to a full-length commit SHA.</p> <p>We recommend pinning all Actions. That's why the <code>helpers:pinGitHubActionDigests</code> preset pins all GitHub Actions.</p> <p>For an in-depth explanation why you should pin your Github Actions, read the Palo Alto Networks blog post about the GitHub Actions worm.</p>"},{"location":"upgrade-best-practices/#extends-pindevdependencies","title":"Extends <code>:pinDevDependencies</code>","text":"<p>Pinning your development dependencies means you, and your team, are using the same versions of development tools. This makes the developer-tool side of your builds reproducible. Debugging faulty versions of your tools is easier, because you can use Git to check out different versions of the tools.</p>"},{"location":"upgrade-best-practices/#why-updating-often-is-easier-faster-and-safer","title":"Why updating often is easier, faster and safer","text":"<p>You may think that updating takes too much time. But updating regularly actually saves you time, because:</p> <ul> <li>Regular updates tend to be small</li> <li>Applying <code>major</code> updates is easier</li> <li>You'll be ready for CVE patches</li> <li>You'll look for ways to automate the updates</li> </ul>"},{"location":"upgrade-best-practices/#regular-updates-tend-to-be-small","title":"Regular updates tend to be small","text":"<p>Firstly, when you update regularly updates tend to be small. The update's changelogs are small, quick to read, and easy to understand. You probably only need to make changes in a few places (if at all) to merge the PR and get going again. Because you're reading the changelogs regularly, you'll get a feel for the direction of the upstream project.</p>"},{"location":"upgrade-best-practices/#applying-major-updates-is-easier","title":"Applying <code>major</code> updates is easier","text":"<p>Secondly, when you're current with upstream, <code>major</code> updates are easier. This is because you already:</p> <ul> <li>follow the latest best practices of upstream</li> <li>use the latest names for features/variables</li> <li>read the previous changelogs</li> </ul>"},{"location":"upgrade-best-practices/#youll-be-ready-for-cve-patches","title":"You'll be ready for CVE patches","text":"<p>Thirdly, you'll be ready when a upstream package releases a patch for a critical CVE. If you're current, you can review and merge Renovate's PR quickly.</p> <p>When you're behind on updates, you'll have a bad time, because you must read more changelogs and make more changes before you can merge the critical patch.</p>"},{"location":"upgrade-best-practices/#youll-look-for-ways-to-automate-the-updates","title":"You'll look for ways to automate the updates","text":"<p>Finally, when you're updating often, you'll start looking for ways to automate the updates. You may start to <code>automerge</code> development dependencies like Prettier, or ESLint when the linter passes. Or you may decide to automerge any <code>patch</code> type upgrades, by using the <code>default:automergePatch</code> preset.</p>"},{"location":"upgrade-best-practices/#wait-two-weeks-before-automerging-third-party-dependencies","title":"Wait two weeks before automerging third-party dependencies","text":"<p>If you <code>automerge</code> third-party dependencies, we recommend setting <code>minimumReleaseAge</code> to <code>\"14 days\"</code>. By waiting two weeks before automerging the dependencies, you give the upstream registries time to pull malicious dependencies, before Renovate merges them. If you want a third-party dependency update now, instead of waiting two weeks, you can request the update from the Dependency Dashboard.</p>"},{"location":"upgrade-best-practices/#use-github-pull-request-merge-queues","title":"Use GitHub Pull Request Merge Queues","text":"<p>You may also start using GitHub's pull request merge queues to speed up the merge process. Renovate does not support GitLab's Merge Trains, see issue #5573.</p>"},{"location":"upgrade-best-practices/#starting-from-a-new-project","title":"Starting from a new project","text":"<p>Let's assume you're starting a new project. You created a new Git repository, installed the latest frameworks, libraries and development tools. After pushing the initial commit, you should enable and onboard Renovate.</p> <p>Now you'll have to stay on the \"update often\" train.</p>"},{"location":"upgrade-best-practices/#project-with-one-year-old-dependencies","title":"Project with one year old dependencies","text":"<p>If you have a project that's a year behind on dependencies, you'll need to do some work. Let's assume that most dependencies need a <code>patch</code> or <code>minor</code> update, and at least one dependency needs a <code>major</code> update.</p> <p>Start small, and get the <code>patch</code> and <code>minor</code> updates first. Read the changelogs for your updates. You may have to make small changes to get things working again.</p> <p>When you have the latest <code>patch</code> and <code>minor</code> versions, you are ready for <code>major</code> updates. Start with <code>major</code> version updates for tools like Prettier or ESLint.</p> <p>Then work on <code>major</code> updates for your framework or library. Take your time, read the changelogs, and make the necessary changes. Let multiple team members review your work before merging, it's easy to miss something.</p> <p>Finally, update your development tools.</p> <p>Now you're up to date, you should think how to make updating a regular habit.</p>"},{"location":"upgrade-best-practices/#project-with-five-year-old-dependencies","title":"Project with five year old dependencies","text":"<p>Let's assume your Dependency Dashboard lists more than 50 updates, and you have a few <code>major</code> version updates pending. If your project is this badly behind on updates, you have two problems:</p> <ul> <li>Updating your dependencies</li> <li>Improving your update process</li> </ul>"},{"location":"upgrade-best-practices/#focus-on-critical-updates-first","title":"Focus on critical updates first","text":"<p>Fix the easier problem first: getting back up to date. Update any dependencies that have critical updates for CVEs or other security related improvements.</p> <p>If you're on the GitHub platform: follow the steps listed in the <code>vulnerabilityAlerts</code> docs to make sure Renovate is reading GitHub's Vulnerability Alerts.</p> <p>You may want to enable the experimental <code>osvVulnerabilityAlerts</code> config option, to get OSV-based vulnerability alerts for direct dependencies. Read the <code>osvVulnerabilityAlerts</code> config option docs to learn more.</p>"},{"location":"upgrade-best-practices/#fix-blocking-updates","title":"Fix blocking updates","text":"<p>Next, update any dependency that's blocking another update. You may need to update dependency <code>A</code> before you can update dependency <code>B</code> or <code>C</code>. In that case, update dependency <code>A</code> first.</p>"},{"location":"upgrade-best-practices/#update-to-latest-minor-or-patch-of-current-version","title":"Update to latest <code>minor</code> or <code>patch</code> of current version","text":"<p>Then update all dependencies to their latest <code>minor</code> or <code>patch</code> version, to prepare for the <code>major</code> updates.</p>"},{"location":"upgrade-best-practices/#take-major-updates-in-sequence","title":"Take <code>major</code> updates in sequence","text":"<p>Take <code>major</code> updates in sequence. This way you'll read the changelogs for each <code>major</code> version, and learn why upstream made certain breaking changes.</p> <p>Say you're on version <code>1</code> of a dependency, and the latest <code>major</code> version is at <code>4</code>. You should update to <code>2</code>, then <code>3</code> and finally <code>4</code>. Avoid updating from <code>1</code> directly to <code>4</code>.</p> <p>Use the <code>:separateMultipleMajorReleases</code> preset to get separate <code>major</code> updates.</p>"},{"location":"upgrade-best-practices/#update-development-tools","title":"Update development tools","text":"<p>Finally update development tools like Prettier, ESLint, TSLint, Cypress, and so on.</p>"},{"location":"upgrade-best-practices/#improve-the-human-side","title":"Improve the human side","text":"<p>You're done with the technical side. Now comes the harder part, fixing the human side. There are probably a number of reasons why the project got this badly out of date.</p> <p>When working on the human side, focus on the process, rules, and habits. Avoid blaming developers for not updating often.</p>"},{"location":"upgrade-best-practices/#why-developers-avoid-updating","title":"Why developers avoid updating","text":"<p>Let's assume most developers want a project that's up to date. So why are your developers avoiding updates? Some common reasons:</p> <ul> <li>Developers get blamed when things break in production</li> <li>There are no tests, so merging updates is scary</li> <li>The test suite is slow</li> <li>Releasing a new version of the project must be done by hand</li> <li>Updating must be done by hand</li> <li>The company doesn't allow developer time for updates</li> <li>The company has complex rules about updates</li> </ul> <p>If updating is painful, or takes a lot of time, developers tend to avoid it. Make it easy and fast to update dependencies.</p>"},{"location":"upgrade-best-practices/#talk-with-your-team-about-the-update-process","title":"Talk with your team about the update process","text":"<p>Listen to your team, write down their problems. Then fix each problem as best as you can.</p>"},{"location":"upgrade-best-practices/#make-updating-easy-and-fast","title":"Make updating easy and fast","text":"<p>Respect your developer's time and brains:</p> <ul> <li>Run Renovate on all projects</li> <li>Use Renovate to propose updates</li> <li>Building the project must be as fast as possible</li> <li>Have automated tests for the critical path of your project</li> <li>Run the automated tests on every pull request</li> <li>If you're on GitHub: use GitHub's Merge Queue to speed up merges</li> <li>Follow SemVer versioning</li> <li>Use the <code>semantic-release</code> bot to automate the release process</li> <li>Refactor existing code to make future changes easier</li> </ul>"},{"location":"upgrade-best-practices/#ground-rules","title":"Ground rules","text":"<p>As a starting point:</p> <ul> <li>Avoid long lived branches that diverge from <code>main</code> over time</li> <li>Dig beyond \"developer error\" when things go wrong, again: focus on the process</li> <li>Ensure company policy allows frequent updates</li> </ul>"},{"location":"upgrade-best-practices/#how-we-use-renovate","title":"How we use Renovate","text":"<ul> <li>We run Renovate on all repositories</li> <li>Most of our repositories have automated tests for the critical path of the application</li> <li>We automerge some dependencies, but request <code>major</code> updates from the Dependency Dashboard</li> <li>When a developer merges a breaking change, we revert to a known-good version, and try again later</li> <li>We automated the release with the <code>semantic-release</code> bot</li> <li>We spend time to make our build and automated tests as fast as possible</li> </ul>"},{"location":"upgrade-best-practices/#how-others-use-renovate","title":"How others use Renovate","text":"<p>Read the Swissquote user story to see how they use Renovate.</p>"},{"location":"upgrade-best-practices/#recommended-reading","title":"Recommended reading","text":"<p>There's a lot of good information out there, so we can only highlight a few resources.</p> <p>Martin Fowler has two great resources:</p> <ul> <li>The free page Patterns for Managing Source Code Branches to help you decide what Git branch pattern to use</li> <li>The book Refactoring, Improving the Design of Existing Code to help your developers gradually refactor to clean, modular and easy to read code</li> </ul> <p>The <code>git bisect</code> command can help you find the commit that introduced a bug, or other behavior change. Read the ProGit 2 book, section on binary search to learn more.</p>"},{"location":"examples/opentelemetry/","title":"OpenTelemetry","text":"<p>Requirements:</p> <ul> <li>docker-compose</li> </ul>"},{"location":"examples/opentelemetry/#prepare-setup","title":"Prepare setup","text":"<p>Create a <code>docker-compose.yaml</code> and <code>otel-collector-config.yml</code> file as seen below in a folder.</p> docker-compose.yaml<pre><code>name: renovate-otel-demo\n\nservices:\n  # Jaeger for storing traces\n  jaeger:\n    image: jaegertracing/jaeger:2.11.0\n    ports:\n      - '16686:16686' # Web UI\n      - '4317' # OTLP gRPC\n      - '4318' # OTLP HTTP\n\n  # Prometheus for storing metrics\n  prometheus:\n    image: prom/prometheus:v3.7.3\n    ports:\n      - '9090:9090' # Web UI\n      - '4318' # OTLP HTTP\n    command:\n      - --web.enable-otlp-receiver\n      # Mirror these flags from the Dockerfile, because `command` overwrites the default flags.\n      # https://github.com/prometheus/prometheus/blob/5b5fee08af4c73230b2dae35964816f7b3c29351/Dockerfile#L23-L24\n      - --config.file=/etc/prometheus/prometheus.yml\n      - --storage.tsdb.path=/prometheus\n\n  otel-collector:\n    # Using the Contrib version to access the spanmetrics connector.\n    # If you don't need the spanmetrics connector, you can use the standard version\n    image: otel/opentelemetry-collector-contrib:0.138.0\n    volumes:\n      - ./otel-collector-config.yml:/etc/otelcol-contrib/config.yaml\n    ports:\n      - '4318:4318' # OTLP HTTP ( exposed to the host )\n      - '4317:4317' # OTLP gRPC ( exposed to the host )\n    depends_on:\n      - jaeger\n      - prometheus\n</code></pre> otel-collector-config.yml<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nexporters:\n  otlp/jaeger:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\n  otlphttp/prometheus:\n    endpoint: http://prometheus:9090/api/v1/otlp\n  debug:\n  # verbosity: normal\n\nconnectors:\n  spanmetrics:\n    histogram:\n      exponential:\n    dimensions:\n      - name: http.method\n        default: GET\n      - name: http.status_code\n      - name: http.host\n    dimensions_cache_size: 1000\n    aggregation_temporality: 'AGGREGATION_TEMPORALITY_CUMULATIVE'\n    exemplars:\n      enabled: true\n\nprocessors:\n  batch:\n\nextensions:\n  health_check:\n  pprof:\n  zpages:\n\nservice:\n  extensions: [pprof, zpages, health_check]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters:\n        - otlp/jaeger\n        # Send traces to connector for metrics calculation\n        - spanmetrics\n        # Enable debug exporter to see traces in the logs\n        #- debug\n      processors: [batch]\n\n    metrics:\n      receivers:\n        - otlp # Receive metrics from Renovate.\n        - spanmetrics # Receive metrics calculated by the spanmetrics connector.\n      processors: [batch]\n      exporters:\n        - otlphttp/prometheus\n        # Enable debug exporter to see metrics in the logs\n        # - debug\n</code></pre> <p>Start setup using this command inside the folder containing the files created in the earlier steps:</p> <pre><code>docker-compose up\n</code></pre> <p>This command will start:</p> <ul> <li>an OpenTelemetry Collector</li> <li>an instance of Jaeger for traces</li> <li>and Prometheus</li> </ul> <p>Jaeger will be now reachable under http://localhost:16686.</p>"},{"location":"examples/opentelemetry/#run-renovate-with-opentelemetry","title":"Run Renovate with OpenTelemetry","text":"<p>To start Renovate with OpenTelemetry enabled run following command, after pointing to your <code>config.js</code> config file:</p> <pre><code>docker run \\\n  --rm \\\n  --network renovate-otel-demo_default \\\n  -e OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318 \\\n  -v \"/path/to/your/config.js:/usr/src/app/config.js\" \\\n  renovate/renovate:latest\n</code></pre> <p>You should now see <code>trace_id</code> and <code>span_id</code> fields in the logs.</p> <pre><code> INFO: Repository finished (repository=org/example)\n       \"durationMs\": 5574,\n       \"trace_id\": \"f9a4c33852333fc2a0fbdc163100c987\",\n       \"span_id\": \"4ac1323eeaee\n</code></pre>"},{"location":"examples/opentelemetry/#traces","title":"Traces","text":"<p>Open now Jaeger under http://localhost:16686.</p> <p>You should now be able to pick <code>renovate</code> under in the field <code>service</code> field.</p> <p></p> <p>Select <code>Find Traces</code> to search for all Renovate traces and then select one of the found traces to open the trace view.</p> <p></p> <p>You should be able to see now the full trace view which shows each HTTP request and internal spans.</p> <p></p>"},{"location":"examples/opentelemetry/#metrics","title":"Metrics","text":"<p>Additional to the received traces some metrics are calculated. This is achieved using the spanmetrics connector. The previously implemented setup will produce following metrics, which pushed to Prometheus:</p> <pre><code>### Example of internal spans\ntraces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 2\ntraces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"run\", status_code=\"STATUS_CODE_UNSET\"} 2\n\n### Example of http calls from Renovate to external services\ntraces_span_metrics_calls_total{http_host=\"api.github.com:443\", http_method=\"POST\", http_status_code=\"200\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_CLIENT\", span_name=\"POST\", status_code=\"STATUS_CODE_UNSET\"} 4\n\n\n### Example histogram metrics\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"8\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 0\n...\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"2000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"5000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"15000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"10000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"+Inf\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\n\ntraces_span_metrics_duration_milliseconds_sum{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 4190.694209\ntraces_span_metrics_duration_milliseconds_count{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\n</code></pre> <p>The spanmetrics connector creates two sets of metrics.</p>"},{"location":"examples/opentelemetry/#calls-metric","title":"Calls metric","text":"<p>At first there are the <code>traces_span_metrics_calls_total</code> metrics. These metrics show how often specific trace spans have been observed.</p> <p>For example:</p> <ul> <li><code>traces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repositories\", status_code=\"STATUS_CODE_UNSET\"} 2</code> signals that 2 repositories have been renovated.</li> <li><code>traces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"run\", status_code=\"STATUS_CODE_UNSET\"} 1</code> represents how often Renovate has been run.</li> </ul> <p>If we combine this using the PrometheusQueryLanguage ( PromQL ), we can calculate the average count of repositories each Renovate run handles.</p> <pre><code>traces_span_metrics_calls_total{span_name=\"repository\",service_name=\"renovate\"} / traces_span_metrics_calls_total{span_name=\"run\",service_name=\"renovate\"}\n</code></pre> <p>These metrics are generated for HTTP call spans too:</p> <pre><code>traces_span_metrics_calls_total{http_host=\"prometheus-community.github.io:443\", http_method=\"GET\", http_status_code=\"200\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_CLIENT\", span_name=\"GET\", status_code=\"STATUS_CODE_UNSET\"} 5\n</code></pre>"},{"location":"examples/opentelemetry/#latency-buckets","title":"Latency buckets","text":"<p>The second class of metrics exposed are the latency-focused buckets, that allow creating heatmaps. A request is added to a backed if the latency is bigger than the bucket value (<code>le</code>). <code>request_duration =&gt; le</code></p> <p>As an example if we receive a request which need <code>1.533s</code> to complete get following metrics:</p> <pre><code>traces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"10\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"100\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"250\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 1\ntraces_span_metrics_duration_milliseconds_sum{http_host=\"api.github.com:443\"} 1.533\ntraces_span_metrics_duration_milliseconds_count{http_host=\"api.github.com:443\"} 1\n</code></pre> <p>Now we have another request which this time takes 10s to complete:</p> <pre><code>traces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"10\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"100\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"250\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 2\ntraces_span_metrics_duration_milliseconds_sum{http_host=\"api.github.com:443\"} 11.533\ntraces_span_metrics_duration_milliseconds_count{http_host=\"api.github.com:443\"} 2\n</code></pre> <p>More about the functionality can be found on the Prometheus page for metric types.</p>"},{"location":"examples/self-hosting/","title":"Self-Hosting Examples","text":""},{"location":"examples/self-hosting/#installing-renovate-oss-cli","title":"Installing Renovate OSS CLI","text":""},{"location":"examples/self-hosting/#npmjs","title":"npmjs","text":"<pre><code>npm install -g renovate\n</code></pre> <p>Renovate does not embed <code>npm</code>, <code>pnpm</code> and <code>yarn</code> as its own dependencies. If you want to use these package managers to update your lockfiles, you must ensure that the correct versions are installed globally.</p> <pre><code>npm install -g yarn pnpm\n</code></pre> <p>The same goes for any other third-party binary tool like <code>gradle</code> or <code>poetry</code> - you need to make sure it is installed and the correct version before running Renovate.</p>"},{"location":"examples/self-hosting/#docker","title":"Docker","text":"<p>Renovate is available for Docker via an automated build at <code>renovate/renovate</code> on Docker Hub. It builds <code>latest</code> based on the <code>main</code> branch and all SemVer tags are published too.</p> Example of valid tags<pre><code>docker run --rm renovate/renovate\ndocker run --rm renovate/renovate:41\ndocker run --rm renovate/renovate:41.159\ndocker run --rm renovate/renovate:41.159.4\n</code></pre> <p>Warning</p> <p>Do not use the example tags listed above, as they will be out-of-date. Go to the <code>renovate/renovate</code> tags on DockerHub to grab the latest tagged release from Renovate.</p> <p>If you want to configure Renovate using a <code>config.js</code> file then map it to <code>/usr/src/app/config.js</code> using Docker volumes. For example:</p> <pre><code>docker run --rm -v \"/path/to/your/config.js:/usr/src/app/config.js\" renovate/renovate\n</code></pre>"},{"location":"examples/self-hosting/#kubernetes","title":"Kubernetes","text":"<p>Renovate's official Docker image is compatible with Kubernetes. The following is an example manifest of running Renovate against a GitHub Enterprise server.</p> Kubernetes manifest<pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: renovate\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n            - name: renovate\n              # Update this to the latest available and then enable Renovate on\n              # the manifest\n              image: renovate/renovate:41.159.4\n              args:\n                - user/repo\n              # Environment Variables\n              env:\n                - name: LOG_LEVEL\n                  value: debug\n              envFrom:\n                - secretRef:\n                    name: renovate-env\n          restartPolicy: Never\n</code></pre> <p>And the <code>secret.yaml</code> that goes with it:</p> secret.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: renovate-env\ntype: Opaque\nstringData:\n  RENOVATE_GITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n  # You can set RENOVATE_AUTODISCOVER to true to run Renovate on all repos you have push access to\n  RENOVATE_AUTODISCOVER: 'false'\n  RENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\n  RENOVATE_GIT_AUTHOR: 'Renovate Bot &lt;bot@renovateapp.com&gt;'\n  RENOVATE_PLATFORM: 'github'\n  RENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n</code></pre> <p>A <code>config.json</code> file can be added to the manifest using a <code>ConfigMap</code> as shown in the following example (using a \"dry run\" in github.com):</p> Adding a config.json file to the manifest with configMap<pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: renovate-config\ndata:\n  config.json: |-\n    {\n      \"repositories\": [\"orgname/repo\",\"username/repo\"],\n      \"dryRun\" : \"full\"\n    }\n\n---\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: renovate-bot\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n            - image: renovate/renovate:41.159.4\n              name: renovate-bot\n              env: # For illustration purposes, please use secrets.\n                - name: RENOVATE_PLATFORM\n                  value: 'github'\n                - name: RENOVATE_TOKEN\n                  value: 'some-token'\n                - name: RENOVATE_AUTODISCOVER\n                  value: 'false'\n                - name: RENOVATE_BASE_DIR\n                  value: '/tmp/renovate/'\n                - name: RENOVATE_CONFIG_FILE\n                  value: '/opt/renovate/config.json'\n                - name: LOG_LEVEL\n                  value: debug\n              volumeMounts:\n                - name: config-volume\n                  mountPath: /opt/renovate/\n                - name: work-volume\n                  mountPath: /tmp/renovate/\n          restartPolicy: Never\n          volumes:\n            - name: config-volume\n              configMap:\n                name: renovate-config\n            - name: work-volume\n              emptyDir: {}\n</code></pre>"},{"location":"examples/self-hosting/#circleci","title":"CircleCI","text":"<p>Warning</p> <p>The CircleCI configuration examples are for version <code>2</code> of <code>daniel-shuy/renovate</code>, which is outdated. Do you know how to get <code>daniel-shuy/renovate</code> version <code>3</code> working? Then please open a pull request to update the docs and close Renovate issue #13428.</p> <p>If you are using CircleCI, you can use the third-party daniel-shuy/renovate orb to run a self-hosted instance of Renovate on CircleCI.</p> <p>By default, the orb looks for the self-hosted configuration file in the project root, but you can specify another path to the configuration file with the <code>config_file_path</code> parameter.</p> <p>Secrets should be configured using environment variables (e.g. <code>RENOVATE_TOKEN</code>, <code>RENOVATE_GITHUB_COM_TOKEN</code>).</p> <p>Configure environment variables in CircleCI Project Settings. To share environment variables across projects, use CircleCI Contexts.</p> This runs Renovate hourly, and looks for the self-hosted config file at renovate-config.js<pre><code>version: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  renovate:\n    jobs:\n      - renovate/self-hosted:\n          config_file_path: renovate-config.js\n    nightly:\n      triggers:\n        - schedule:\n            cron: 0 * * * *\n            filters:\n              branches:\n                only:\n                  - main\n</code></pre>"},{"location":"examples/self-hosting/#renovate-config-file-validation-when-using-circleci","title":"Renovate config file validation when using CircleCI","text":"Validate your config as part of your workflow<pre><code>version: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  lint:\n    jobs:\n      - renovate/validate-config\n</code></pre>"},{"location":"examples/self-hosting/#gitlab-cicd-pipeline","title":"GitLab CI/CD pipeline","text":"<p>For GitLab pipelines we recommend you use the <code>renovate-runner</code> project on GitLab. We created some pipeline templates to help you run Renovate on pipeline schedules. You can also find the configuration steps there.</p> <p>For self-hosted GitLab clone/import the <code>renovate-runner</code> project on GitLab project to your instance.</p>"},{"location":"examples/self-hosting/#filedirectory-usage","title":"File/directory usage","text":"<p>By default, Renovate stores all files in the <code>renovate/</code> subdirectory of the operating system's temporary directory, e.g. <code>/tmp/renovate/</code>.</p> <p>Repository data is copied or cloned into unique subdirectories under <code>repos/</code>, e.g. <code>/tmp/renovate/repos/github/owner1/repo-a/</code>.</p> <p>Renovate's cache, and the caches(s) for npm, Yarn, Composer, and so on, are stored in <code>/tmp/renovate/cache</code>.</p>"},{"location":"examples/self-hosting/#overriding-the-default-directory","title":"Overriding the default directory","text":"<p>If you don't want to use the default <code>tmp/renovate</code> directory you can:</p> <ul> <li>Set a value for <code>baseDir</code> in <code>config.js</code></li> <li>Use an environment variable <code>RENOVATE_BASE_DIR</code></li> <li>Use the CLI to pass a base directory: <code>--base-dir=</code></li> </ul>"},{"location":"examples/self-hosting/#overriding-the-default-cache-directory","title":"Overriding the default cache directory","text":"<p>If you want to override the cache directory then set your own value for <code>cacheDir</code>.</p>"},{"location":"examples/self-hosting/#usage","title":"Usage","text":"<p>The following example uses the Renovate CLI tool, which you can install by running <code>npm i -g renovate</code>.</p> <p>If running your own Renovate bot then you will need a user account that Renovate will run as. We recommend you create and use a dedicated account for the bot, e.g. name it <code>renovate-bot</code> if on your own instance. Create and save a PAT for this account.</p> <p>Create a Renovate config file, for example:</p> <pre><code>module.exports = {\n  endpoint: 'https://self-hosted.gitlab/api/v4/',\n  token: '**gitlab_token**',\n  platform: 'gitlab',\n  onboardingConfig: {\n    extends: ['config:recommended'],\n  },\n  repositories: ['username/repo', 'orgname/repo'],\n};\n</code></pre> <p>Here change the <code>repositories</code> to something appropriate. Also replace <code>gitlab-token</code> value with the one created during the previous step.</p> <p>If you're running against GitHub Enterprise Server, then change the <code>gitlab</code> values in the example to the equivalent GitHub ones.</p> <p>You can save this file as anything you want and then use the <code>RENOVATE_CONFIG_FILE</code> environment variable to tell Renovate where to find it.</p> <p>Most people use <code>cron</code> to schedule when Renovate runs, usually on an hourly schedule.</p> Example bash script that you can point cron to<pre><code>#!/bin/bash\n\nexport PATH=\"/home/user/.yarn/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH\"\nexport RENOVATE_CONFIG_FILE=\"/home/user/renovate-config.js\"\nexport RENOVATE_TOKEN=\"**some-token**\" # GitHub, GitLab, Azure DevOps\nexport RENOVATE_GITHUB_COM_TOKEN=\"**github-token**\" # Delete this if using github.com\n\n# Renovate\nrenovate\n</code></pre> <p>Save the script file, and run the script manually. Only add the script to <code>cron</code> after you checked it works.</p> <p>Note</p> <p>The GitHub.com token as an environment variable is needed to fetch changelogs that are usually hosted on github.com. You don't need to add it if you are already running the bot against github.com, but you do need to add it if you're using GitHub Enterprise Server, GitLab, Azure DevOps, or Bitbucket.</p>"},{"location":"examples/self-hosting/#kubernetes-for-gitlab-using-git-over-ssh","title":"Kubernetes for GitLab, using Git over SSH","text":"<p>This section describes how to use a Git binary with SSH for GitLab, to avoid API shortcomings.</p> <p>You need to first create a SSH key, then add the public part to GitLab (see this guide).</p> <p>Then, you need to create the secret to add the SSH key, and the following config to your container:</p> <pre><code>host gitlab.com\n  HostName gitlab.com\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  User git\n</code></pre> <p>To easily create the secret, you can do the following (see docs).</p> <pre><code>kubectl create secret generic ssh-key-secret --from-file=config=/path/to/config --from-file=id_rsa=/path/to/.ssh/id_rsa --from-file=id_rsa.pub=/path/to/.ssh/id_rsa.pub\n</code></pre> <p>It creates something like this:</p> <pre><code>apiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: &lt;base64String&gt;\n  id_rsa.pub: &lt;base64String&gt;\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: &lt;namespace&gt;\n</code></pre> <p>Then you need to add a Git author, and configure the mount volumes. The final configuration should look something like this:</p> <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: &lt;namespace, for example renovate&gt;\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: renovate-env\n  namespace: &lt;namespace&gt;\ntype: Opaque\nstringData:\n  RENOVATE_GITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n  RENOVATE_AUTODISCOVER: 'false'\n  RENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\n  RENOVATE_GIT_AUTHOR: 'Renovate Bot &lt;bot@renovateapp.com&gt;'\n  RENOVATE_PLATFORM: 'github'\n  RENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n---\napiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: &lt;base64String&gt;\n  id_rsa.pub: &lt;base64String&gt;\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: &lt;namespace&gt;\n---\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: renovate\n  namespace: &lt;namespace&gt;\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          volumes:\n            - name: ssh-key-volume\n              secret:\n                secretName: ssh-key-secret\n          containers:\n            - name: renovate\n              # Update this to the latest available and then enable Renovate on the manifest\n              image: renovate/renovate:41.159.4\n              volumeMounts:\n                - name: ssh-key-volume\n                  readOnly: true\n                  mountPath: '/home/ubuntu/.ssh'\n              args:\n                - &lt;repository&gt;\n              # Environment Variables\n              envFrom:\n                - secretRef:\n                    name: renovate-env\n          restartPolicy: Never\n</code></pre>"},{"location":"examples/self-hosting/#logging","title":"Logging","text":"<p>If you're ingesting/parsing logs into another system then we recommend you set <code>LOG_LEVEL=debug</code> and <code>LOG_FORMAT=json</code> in your environment variables. Debug logging is usually needed for any debugging, while JSON format will mean that the output is parsable.</p>"},{"location":"examples/self-hosting/#about-the-log-level-numbers","title":"About the log level numbers","text":"<p>When you use <code>LOG_LEVEL=debug</code> and <code>LOG_FORMAT=json</code>, Renovate uses numbers in the <code>level</code> field.</p> <p>The logging level output is controlled by the Bunyan logging library.</p> Level Meaning 10 trace 20 debug 30 info 40 warn 50 error 60 fatal"},{"location":"examples/self-hosting/#self-signed-tlsssl-certificates","title":"Self-signed TLS/SSL certificates","text":"<p>Renovate and invoked helper programs (like Git, or npm) use a secure TLS connection (e.g. HTTPS) to connect to remote source code and dependency hosts. If the remote hosts uses self-signed certificates or certificate authorities then Renovate must be told to trust them.</p>"},{"location":"examples/self-hosting/#renovate-nodejs-app","title":"Renovate Node.js app","text":"<p>For the main Renovate Node.js application set the environment variable <code>NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/self-signed-certificate.crt</code>. The Renovate application now trusts the <code>self-signed-certificate.crt</code> file. This means Renovate can safely connect to systems using that certificate or certificates signed by this certificate authority.</p>"},{"location":"examples/self-hosting/#helper-programs-like-git-or-npm","title":"Helper programs like Git or npm","text":"<p>Helper programs like Git and npm use the system trust store. For those programs to trust a self-signed certificate you must add it to the systems trust store. On Ubuntu/Debian and many Linux-based systems, this can be done by:</p> <ol> <li>copying the self-signed certificate (e.g. <code>self-signed-certificate.crt</code>) to <code>/usr/local/share/ca-certificates/</code></li> <li>and running <code>update-ca-certificates</code> to update the system trust store afterwards</li> </ol>"},{"location":"examples/self-hosting/#renovate-docker-image","title":"Renovate Docker image","text":"<p>If you're using the official Renovate Docker image then we recommend you add the self-signed certificate and build your own modified Docker image.</p> Example of a Dockerfile that uses a self-signed certificate<pre><code>FROM renovate/renovate\n\n# Changes to the certificate authority require root permissions\nUSER root\n\n# Copy and install the self signed certificate\nCOPY self-signed-certificate.crt /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\n# Change back to the Ubuntu user\nUSER 12021\n\n# OpenSSL\nENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\n</code></pre>"},{"location":"examples/self-hosting/#proxy-environment-variable-configuration","title":"Proxy Environment Variable Configuration","text":"<p>If your environment uses an HTTP proxy configured via environment variables (<code>HTTP_PROXY</code>, <code>HTTPS_PROXY</code>, <code>NO_PROXY</code>, and their lowercase variants), Renovate inherits these settings and prefers the lowercase variant.</p> <p>In some cases, you may need to adjust the <code>NO_PROXY</code> variable if Renovate encounters network or TLS errors when accessing internal or excluded domains.</p> <p>Renovate uses the global-agent library to manage proxy connections.</p> <p>To exclude a domain and all its subdomains, you must use a wildcard \u2014 for example:</p> <pre><code>NO_PROXY=*.example.org\n</code></pre> <p>This configuration ensures that both <code>example.org</code> and <code>www.example.org</code> are accessed directly, bypassing the proxy for Renovate.</p> <p>If a tool that Renovate runs (such as git) still has proxy-related issues, note that different tools interpret NO_PROXY formats differently. See GitLab\u2019s detailed explanation for guidance on tool-specific behavior.</p> <p>To to debug the proxy configuration behavior you can set the environment variable <code>ROARR_LOG=true</code> to enable log printing to stdout.</p>"},{"location":"getting-started/installing-onboarding/","title":"Installing and onboarding Renovate into repositories","text":""},{"location":"getting-started/installing-onboarding/#about-the-security-and-privacy-of-installing-renovate","title":"About the security and privacy of installing Renovate","text":"<p>Read the Security and Permissions page to learn more about:</p> <ul> <li>Renovate's security stance</li> <li>What do if you need to use certified software</li> <li>The security/disclosure process</li> <li>Permissions</li> <li>Privacy</li> </ul>"},{"location":"getting-started/installing-onboarding/#repository-installation","title":"Repository installation","text":"<p>Renovate administrators can configure Renovate to either \"autodiscover\" installed repositories, or configure a fixed list of repository names to operate on.</p> <p>If the administrator has configured a fixed list of repositories then the only way to \"install\" Renovate on a extra repository is for it to be manually added for the next run or restart.</p> <p>Otherwise, the process for adding new repositories to a Renovate installation can vary:</p> <ul> <li>Most commonly, you run Renovate as a dedicated \"bot user\" with global config option <code>autodiscover</code> set to <code>true</code>, meaning that it will run on every repository which it's been granted access to</li> <li>If using a GitHub App (including the Mend Renovate App) then you can install the app into a user or organization account and select either \"All repositories\", or \"Select repositories\" and pick them manually</li> </ul>"},{"location":"getting-started/installing-onboarding/#hosted-githubcom-app","title":"Hosted GitHub.com App","text":"<p>Follow these steps to install and enable the Mend Renovate App:</p> <p>First, navigate to https://github.com/apps/renovate and select the Install button:</p> <p></p> <p>The only choice you need to make is whether to run Renovate on all repositories or on selected repositories:</p> <p></p> <p>Renovate will ignore any repositories that don't have known package files, as well as any forks, so you can enable Renovate for all your repositories with no problems. That said, most people run Renovate on selected repositories. Unfortunately GitHub doesn't offer a \"select all except X, Y, Z\" option, so you must select each repository where you want Renovate to run.</p> <p>Once you're done selecting repositories for Renovate to run on, select the green Install button at the bottom of the page and Renovate will be enabled for those repositories and start the onboarding process.</p> <p>Note</p> <p>If you are using the Mend Renovate App then it has a custom behavior for forked repositories. If you choose \"All repositories\" when installing then forked repositories will be skipped by default, while if you choose \"Select repositories\" then they will be processed by Renovate even if they're a fork.</p>"},{"location":"getting-started/installing-onboarding/#hosted-gitlabcom-app","title":"Hosted GitLab.com App","text":"<p>Unfortunately Mend's hosted GitLab app needed to be taken offline indefinitely until a viable security model for bots on GitLab.com is available. For more details on GitLab security for bots, please see the GitLab Bot Security doc.</p>"},{"location":"getting-started/installing-onboarding/#self-hosting-on-windows","title":"Self-hosting on Windows","text":"<p>We recommend you set <code>core.autocrlf = input</code> in your Git config. You can do this by running this Git command:</p> <pre><code>git config --global core.autocrlf input\n</code></pre> <p>This prevents the carriage return <code>\\r\\n</code> which may confuse Renovate bot. You can also set the line endings in your repository by adding <code>* text=auto eol=lf</code> to your <code>.gitattributes</code> file.</p>"},{"location":"getting-started/installing-onboarding/#repository-onboarding","title":"Repository onboarding","text":"<p>Once you have enabled Renovate on a repository, you will get a \"Configure Renovate\" Pull Request looking something like this:</p> <p></p> <p>Note</p> <p>If you self-host Renovate, and want to add the rebase/retry checkbox to Renovate's onboarding PRs: enable the <code>onboardingRebaseCheckbox</code> config option first.</p>"},{"location":"getting-started/installing-onboarding/#no-risk-onboarding","title":"No risk onboarding","text":"<p>Conveniently, Renovate will not make any changes to your repository or raise any further Pull Requests until after you merge the onboarding Pull Request. If there is anything about the Pull Request that you don't like or understand, take your time to read the documentation or ask questions on the discussions forum on GitHub and merge the PR only once you're satisfied with the result.</p> <p>You can edit your Renovate configuration within the <code>renovate/configure</code> branch and Renovate will keep updating the description in the PR to match, so you can work on the config until you're satisfied with the results.</p>"},{"location":"getting-started/installing-onboarding/#check-for-warnings","title":"Check for warnings","text":"<p>If you have any Warnings or Errors listed, see if you need or want to make any changes to fix them. Warnings and errors should be fixed on the base branch (e.g. <code>main</code>) so that Renovate can recreate its Configure Renovate PR on its next cycle.</p>"},{"location":"getting-started/installing-onboarding/#configuration-location","title":"Configuration location","text":"<p>The \"Configure Renovate\" PR will include a <code>renovate.json</code> file in the root directory, with suggested default settings. If you don't want a <code>renovate.json</code> file in your repository you can use one of the following files instead:</p> <ul> <li><code>renovate.json5</code></li> <li><code>.github/renovate.json</code></li> <li><code>.github/renovate.json5</code></li> <li><code>.gitlab/renovate.json</code></li> <li><code>.gitlab/renovate.json5</code></li> <li><code>.renovaterc</code></li> <li><code>.renovaterc.json</code></li> <li><code>.renovaterc.json5</code></li> <li><code>package.json</code> (deprecated)</li> </ul> <p>Or in a custom file present within the <code>configFileNames</code>. The bot first checks all the files in the <code>configFileNames</code> array before checking from the above file list.</p>"},{"location":"getting-started/installing-onboarding/#packagejson","title":"package.json","text":"<p>Warning</p> <p>This approach has been deprecated and will be removed in a future release.</p> <p>You can add the same settings to a <code>\"renovate\"</code> section in your <code>package.json</code> file instead. The <code>package.json</code> file must be located at the root of your repository. This is handy if you are already using a <code>package.json</code> file anyway, e.g. when you're working on a JavaScript project. The configuration in your <code>package.json</code> will apply to the whole project (this includes other, nested <code>package.json</code> files).</p>"},{"location":"getting-started/installing-onboarding/#customized-defaults","title":"Customized defaults","text":"<p>Renovate provides a <code>renovate.json</code> file, with default settings that will work for most cases. Sometimes Renovate detects that an override to these defaults is needed, and will add this override automatically, such as:</p> <ul> <li>Automatically enabling Angular-style semantic commits if your repository uses them</li> <li>Determining whether to use dependency range pinning depending on the detected project type (app vs library)</li> </ul>"},{"location":"getting-started/installing-onboarding/#common-overrides","title":"Common overrides","text":"<p>Please check the docs on this website for an exhaustive Configuration Reference. To help you get started, here are some of the most commonly changed (overridden) configuration settings:</p> <ul> <li>rangeStrategy: By default (with zero config) it's <code>\"replace\"</code> but the <code>\"config:recommended\"</code> preset overrides it to <code>\"auto\"</code>. Some prefer <code>\"bump\"</code>.</li> <li>labels: Labels to assign to Pull Requests</li> <li>assignees: GitHub user(s) to assign the Pull Requests to</li> </ul> <p>Renovate will update your PR description each time it finds changes.</p>"},{"location":"getting-started/installing-onboarding/#merge","title":"Merge","text":"<p>Once you're done checking and configuring in your Configure Renovate PR, it's time to merge it to enable the real Pull Requests to begin.</p>"},{"location":"getting-started/installing-onboarding/#repository-re-configuration","title":"Repository re-configuration","text":"<p>There will be times when you need to change your Renovate config. There are two recommended approaches:</p> <ul> <li>Reconfigure via PR</li> <li>Nuke the config and re-onboard</li> </ul>"},{"location":"getting-started/installing-onboarding/#reconfigure-via-pr","title":"Reconfigure via PR","text":"<p>If you want to make config edits directly, follow these steps:</p> <ol> <li>Create a new branch named <code>renovate/reconfigure</code></li> <li>Edit your Renovate configuration file</li> <li>Create a pull request from the <code>renovate/reconfigure</code> branch</li> <li>Run renovate on your repository(if self-hosted), or wait for the hosted app to process the changes</li> <li>Renovate will comment on your PR, outlining the expected changes from your modified configuration</li> <li>You can continue to edit the configuration file in the same PR, and the bot will update its comment accordingly</li> <li>If you only want to validate your configuration changes, check out: Validate your config</li> </ol>"},{"location":"getting-started/installing-onboarding/#nuke-config-and-re-onboard","title":"Nuke config and re-onboard","text":"<p>Perhaps you really liked the interactive onboarding PR and want to use it again. You can follow the steps below to nuke the config and get a new PR. Any existing Renovate PRs will be closed after you've completed these steps.</p> <ol> <li>Find your original <code>Configure Renovate</code> PR</li> <li>Rename the original PR to something else, e.g. <code>Configure Renovate - old</code></li> <li>Remove the current Renovate configuration file (e.g. <code>renovate.json</code>) from your mainline branch</li> </ol> <p>Following these steps will trick Renovate into thinking that your repository was never onboarded, and will trigger a new \"Configure Renovate\" PR. If you're using the Mend Renovate App and you don't get a new onboarding PR within a few hours, then please create a Discussions post to request staff trigger it manually.</p>"},{"location":"getting-started/private-packages/","title":"Private package support","text":"<p>It's a very common requirement to be able to support private module/dependency lookups. This page describes Renovate's approach to authentication.</p> <p>First, a quick note on terminology:</p> <ul> <li>The terms <code>module</code>, <code>package</code> and <code>dependency</code> can mostly be used interchangeably below</li> <li>The terms <code>credentials</code>, <code>secrets</code> and <code>authentication</code> are also used interchangeably</li> </ul>"},{"location":"getting-started/private-packages/#when-does-renovate-need-credentials","title":"When does Renovate need credentials?","text":"<p>By default, the only credentials Renovate has are those for the \"platform\", i.e. GitHub, GitLab, etc. If the token used has sufficient permissions, this will enable Renovate to lookup dependencies located in alternative repositories on the same host or any hosted on any embedded package registry on the same host.</p> <p>It's also quite common to need to look up packages on other protected hosts, including npmjs, Docker Hub, or private registries like Nexus or Artifactory. Any time you need Renovate to access such registries with credentials then you will need to provision them as part of your config.</p> <p>There are four times in Renovate's behavior when it may need credentials:</p> <ul> <li>Resolving private config presets</li> <li>Looking up dependency versions</li> <li>Looking up changelogs</li> <li>Passing to package managers when updating lock files or checksums</li> </ul> <p>Note</p> <p>If you self-host Renovate, and have a self-hosted registry which doesn't require authentication to access, then such modules/packages are not considered \"private\" to Renovate.</p>"},{"location":"getting-started/private-packages/#private-config-presets","title":"Private Config Presets","text":"<p>Renovate supports config presets, including those which are private.</p> <p>Although npm presets were the first type supported, they are now deprecated and it is recommend that all users migrate to git-hosted \"local\" presets instead. However if you do still use them, private modules should work if you configure <code>hostRules</code> (recommended) or <code>npmrc</code> including token credentials in your bot global config. It is strongly recommended not to use private modules on a private registry and a warning will be logged if that is found. Credentials stored on disk (e.g. in <code>~/.npmrc</code>) are no longer supported.</p> <p>The recommended way of using local presets is to configure them using \"local\" presets, e.g. <code>\"extends\": [\"local&gt;myorg/renovate-config\"]</code>, and ensure that the platform token has access to that repo.</p> <p>It's not recommended that you use a private repository to host your config while then extending it from a public repository. If your preset doesn't have secrets then you should make it public, while if it does have secrets then it's better to split your preset between a public one which all repos extend, and a private one with secrets which only other private repos extend.</p> <p>In summary, the recommended approach to private presets is:</p> <ul> <li>Host the presets on the same server/platform as other repositories</li> <li>Make sure you install Renovate into the preset repository so that it has credentials to access it from other private repos</li> <li>Use <code>local&gt;....</code> syntax to refer to private presets</li> </ul>"},{"location":"getting-started/private-packages/#dependency-version-lookups","title":"Dependency Version Lookups","text":"<p>Whenever Renovate detects that a project uses a particular dependency, it tries to look up that dependency to see if any new versions exist. If such a package is private, then Renovate must be configured with the relevant credentials. Renovate does not use any package managers for this step and performs all HTTP(S) lookups itself, including insertion of authentication headers.</p> <p>Configuring Renovate with credentials requires <code>hostRules</code>. Each host rule consists of a <code>hostType</code> value and/or a way to match against hosts using <code>matchHost</code>.</p> <p><code>hostType</code> is not particularly important at this step unless you have different credentials for the same host, but it is sometimes useful in later steps so is good to include if you can. It can be either a \"platform\" name (e.g. <code>github</code>, <code>azure</code>, etc) or a \"datasource\" name (e.g. <code>npm</code>, <code>maven</code>, <code>github-tags</code>, etc).</p> <p>If you want to apply credentials only for a nested path within a host then write <code>matchHost</code> as a base URL like <code>https://registry.company.com/nested/path/</code>. If the same credentials apply to all paths on a host and not on any subdomains of it then configure <code>matchHost</code> with a protocol like <code>https://registry.company.com</code>. Finally, to apply credentials to all hosts within the domain, use a <code>matchHost</code> value with no <code>https://</code> prefix, e.g. <code>company.com</code> or <code>registry.company.com</code>, both of which would apply to a host like <code>beta.registry.company.com</code>.</p> <p>In addition to the above options to match against a host, you need to add the credentials. Typically they are either <code>token</code>, or <code>username</code> + <code>password</code>. Other credential terms are not supported yet.</p> Example host rules<pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"registry.npmjs.org\",\n      \"token\": \"abc123\"\n    },\n    {\n      \"matchHost\": \"https://registry.company.com/pypi-simple/\",\n      \"username\": \"engineering\",\n      \"password\": \"abc123\"\n    }\n  ]\n}\n</code></pre> <p>Renovate applies these <code>hostRules</code> to every HTTP(s) request which is sent, so they are largely independent of any platform or datasource logic. With <code>hostRules</code> in place, private package lookups should all work.</p>"},{"location":"getting-started/private-packages/#github-and-enterprise-repo-scoped-credentials","title":"GitHub (and Enterprise) repo scoped credentials","text":"<p>If you need to use different credentials for a specific GitHub repo, then you can configure <code>hostRules</code> like one of the following:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://api.github.com/repos/org/repo\",\n      \"token\": \"abc123\"\n    },\n    {\n      \"matchHost\": \"https://github.domain.com/api/v3/repos/org/repo\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n</code></pre> <p>Renovate will use those credentials for all requests to <code>org/repo</code>.</p>"},{"location":"getting-started/private-packages/#example-for-gomod","title":"Example for gomod","text":"<p>Here's an example for <code>gomod</code> with private <code>github.com</code> repos. Assume this config is used on the <code>github.com/some-other-org</code> repo:</p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"dependencyDashboard\": true,\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://gitlab.com\",\n      \"token\": \"glpat-token_for_different_git_platform\",\n      \"hostType\": \"gitlab\"\n    },\n    {\n      \"matchHost\": \"https://github.com/some-org\",\n      \"token\": \"ghp_token_for_different_org\",\n      \"hostType\": \"go\"\n    },\n    {\n      \"matchHost\": \"https://api.github.com/repos/some-org\",\n      \"token\": \"ghp_token_for_different_org\",\n      \"hostType\": \"github\"\n    }\n  ],\n  \"customEnvVariables\": {\n    \"GOPRIVATE\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n    \"GONOSUMDB\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n    \"GONOPROXY\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\"\n  },\n  \"postUpdateOptions\": [\"gomodTidy\"]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#looking-up-changelogs","title":"Looking up changelogs","text":"<p>When Renovate creates Pull Requests, its default behavior is to locate and embed release notes/changelogs of packages. These release notes are fetched from the source repository of packages and not from the registries themselves, so if they are private then they will require different credentials.</p> <p>When it comes to open source, most packages host their source on <code>github.com</code> in public repositories. GitHub greatly rate limits unauthenticated API requests, so you need to configure credentials for <code>github.com</code> or the bot will get rate limited quickly. It can be confusing for people who host their own source code privately to be asked to configure a <code>github.com</code> token but without it changelogs for most open source packages will be blocked.</p> <p>Currently the preferred way to configure <code>github.com</code> credentials for self-hosted Renovate is:</p> <ul> <li>Create a read-only Personal Access Token (PAT) for a <code>github.com</code> account. This can be any GitHub account, but we recommend you create an \"empty\" account for this purpose.</li> <li>Add the PAT to Renovate using the environment variable <code>RENOVATE_GITHUB_COM_TOKEN</code></li> </ul> <p>Note</p> <p><code>GITHUB_COM_TOKEN</code> is still parsed and takes precedence over <code>RENOVATE_GITHUB_COM_TOKEN</code>, but is considered deprecated and will be removed in a future major update.</p>"},{"location":"getting-started/private-packages/#package-manager-credentials-for-artifact-updating","title":"Package Manager Credentials for Artifact Updating","text":"<p>In Renovate terminology, \"artifacts\" includes lock files, checksum files, and vendored dependencies. One way of understanding artifacts is: \"everything else that needs to be updated when the dependency version changes\".</p> <p>Not all package managers supported by Renovate require artifact updating, because not all use lock or checksum files. But when such files need updating, Renovate does so by using the package managers themselves instead of trying to \"reverse engineer\" each package manager's file formats and behavior. Importantly, such package managers are run via shell commands and do not understand Renovate's <code>hostRules</code> objects, so Renovate needs to reformat the credentials into formats (such as environment variables or configuration files) which the package manager understands.</p> <p>Because of this need to convert <code>hostRules</code> credentials into a format which package managers understand, sometimes artifact updating can fail due to missing credentials. Sometimes this can be resolved by changing Renovate configuration, but other times it may be due to a feature gap. The following details the most common/popular manager artifacts updating and how credentials are passed:</p>"},{"location":"getting-started/private-packages/#bundler","title":"bundler","text":"<p><code>hostRules</code> with <code>hostType=rubygems</code> are converted into environment variables which Bundler supports.</p>"},{"location":"getting-started/private-packages/#composer","title":"composer","text":"<p>Any <code>hostRules</code> token for <code>github.com</code> or <code>gitlab.com</code> are found and written out to <code>COMPOSER_AUTH</code> in env for Composer to parse. Any <code>hostRules</code> with <code>hostType=packagist</code> are also included. For dependencies on <code>github.com</code> without a Packagist server: use a Personal Access Token for <code>hostRule</code> with <code>hostType=git-tags</code>, do not use an application token. Avoid adding a <code>hostRule</code> with <code>hostType=github</code> because:</p> <ul> <li>it overrides the default Renovate application token for everything else</li> <li>it causes unwanted side effects</li> </ul> <p>The repository in <code>composer.json</code> should have the <code>vcs</code> type with a <code>https</code> URL. For example:</p> <pre><code>{\n  \"repositories\": [\n    {\n      \"type\": \"vcs\",\n      \"url\": \"https://github.com/organization/private-repository\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#gomod","title":"gomod","text":"<p>If a <code>github.com</code> token is found in <code>hostRules</code>, then it is written out to local GIT_CONFIG_ variables prior to running <code>go</code> commands. The environment variables used are: <code>GIT_CONFIG_KEY_0=url.https://${token}@github.com/.insteadOf GIT_CONFIG_VALUE_0=https://github.com/ GIT_CONFIG_COUNT=1</code>.</p>"},{"location":"getting-started/private-packages/#helm","title":"helm","text":"<p>Maybe you're running your own ChartMuseum server to host your private Helm Charts. This is how you connect to a private Helm repository:</p> Connecting to a private Helm repository<pre><code>module.exports = {\n  hostRules: [\n    {\n      matchHost: 'your.host.io',\n      hostType: 'helm',\n      username: '&lt;your-username&gt;',\n      password: process.env.SELF_HOSTED_HELM_CHARTS_PASSWORD,\n    },\n  ],\n};\n</code></pre> <p>If you need to configure per-repository credentials then you can also configure the above within a repository's Renovate config (e.g. <code>renovate.json</code>).</p>"},{"location":"getting-started/private-packages/#npm","title":"npm","text":"<p>The recommended approaches in order of preference are:</p> <ol> <li>Self-hosted hostRules: Configure a hostRules entry in the bot's <code>config.js</code> with the <code>hostType</code>, <code>matchHost</code> and <code>token</code> specified</li> <li>The Mend Renovate App with private modules from npmjs.org: Add an encrypted <code>npmToken</code> to your Renovate config</li> <li>The Mend Renovate App with a private registry: Add an plaintext <code>npmrc</code> plus an encrypted <code>npmToken</code> in config</li> </ol> <p>These approaches are described in full below.</p>"},{"location":"getting-started/private-packages/#add-hostrule-to-bots-config","title":"Add hostRule to bots config","text":"<p>Define <code>hostRules</code> like this:</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      hostType: 'npm',\n      matchHost: 'registry.npmjs.org',\n      token: process.env.NPMJS_TOKEN,\n    },\n    {\n      hostType: 'npm',\n      matchHost:\n        'https://pkgs.dev.azure.com/{organization}/{project}/_packaging/{feed}/npm/registry/',\n      username: 'VssSessionToken',\n      password: process.env.AZURE_NPM_TOKEN,\n    },\n    {\n      // https://www.jfrog.com/confluence/display/JFROG/npm+Registry\n      // Will be passed as `//artifactory.my-company.com/artifactory/api/npm/npm:_auth=&lt;TOKEN&gt;` to `.npmrc`\n      hostType: 'npm',\n      matchHost: 'https://artifactory.my-company.com/artifactory/api/npm/npm/',\n      token: process.env.ARTIFACTORY_NPM_TOKEN,\n      authType: 'Basic',\n    },\n  ],\n};\n</code></pre> <p>Tip</p> <p>Remember to put a trailing slash at the end of your <code>matchHost</code> URL.</p>"},{"location":"getting-started/private-packages/#add-npmrc-string-to-renovate-config","title":"Add npmrc string to Renovate config","text":"<p>You can add an <code>.npmrc</code> authentication line to your Renovate config under the field <code>npmrc</code>. e.g. a <code>renovate.json</code> might look like this:</p> <pre><code>{\n  \"npmrc\": \"//some.registry.com/:_authToken=abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n</code></pre> <p>If configured like this, Renovate will use this to authenticate with npm and will ignore any <code>.npmrc</code> files(s) it finds checked into the repository. If you wish for the values in your <code>config.npmrc</code> to be merged (prepended) with any values found in repos then also set <code>config.npmrcMerge=true</code>. This merge approach is similar to how <code>npm</code> itself behaves if <code>.npmrc</code> is found in both the user home directory as well as a project.</p>"},{"location":"getting-started/private-packages/#add-npmtoken-to-renovate-config","title":"Add npmToken to Renovate config","text":"<p>If you are using the main npmjs registry then you can configure only the <code>npmToken</code> instead:</p> <pre><code>{\n  \"npmToken\": \"abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n</code></pre>"},{"location":"getting-started/private-packages/#add-an-encrypted-npm-token-to-renovate-config","title":"Add an encrypted npm token to Renovate config","text":"<p>If you don't want all users of the repository to see the plaintext token, you can encrypt it with Renovate's public key instead, so that only Renovate can decrypt it.</p> <p>Go to https://app.renovatebot.com/encrypt, paste in your npm token, select \"Encrypt\", then copy the encrypted result.</p> <p>Paste the encrypted result inside an <code>encrypted</code> object like this:</p> <pre><code>{\n  \"encrypted\": {\n    \"npmToken\": \"xxT19RIdhAh09lkhdrK39HzKNBn3etoLZAwHdeJ25cX+5y52a9kAC7flXmdw5JrkciN08aQuRNqDaKxp53IVptB5AYOnQPrt8MCT+x0zHgp4A1zv1QOV84I6uugdWpFSjPUkmLGMgULudEZJMlY/dAn/IVwf/IImqwazY8eHyJAA4vyUqKkL9SXzHjvS+OBonQ/9/AHYYKmDJwT8vLSRCKrXxJCdUfH7ZnikZbFqjnURJ9nGUHP44rlYJ7PFl05RZ+X5WuZG/A27S5LuBvguyQGcw8A2AZilHSDta9S/4eG6kb22jX87jXTrT6orUkxh2WHI/xvNUEout0gxwWMDkA==\"\n  }\n}\n</code></pre> <p>If you have no <code>.npmrc</code> file then Renovate creates one for you, pointing to the default npmjs registry. If instead you use an alternative registry or need an <code>.npmrc</code> file for some other reason, you should configure it too and substitute the npm token with <code>${NPM_TOKEN}</code> for it to be replaced. e.g.</p> <pre><code>{\n  \"encrypted\": {\n    \"npmToken\": \"xxT19RIdhAh09lkhdrK39HzKNBn3etoLZAwHdeJ25cX+5y52a9kAC7flXmdw5JrkciN08aQuRNqDaKxp53IVptB5AYOnQPrt8MCT+x0zHgp4A1zv1QOV84I6uugdWpFSjPUkmLGMgULudEZJMlY/dAn/IVwf/IImqwazY8eHyJAA4vyUqKkL9SXzHjvS+OBonQ/9/AHYYKmDJwT8vLSRCKrXxJCdUfH7ZnikZbFqjnURJ9nGUHP44rlYJ7PFl05RZ+X5WuZG/A27S5LuBvguyQGcw8A2AZilHSDta9S/4eG6kb22jX87jXTrT6orUkxh2WHI/xvNUEout0gxwWMDkA==\"\n  },\n  \"npmrc\": \"registry=https://my.custom.registry/npm\\n//my.custom.registry/npm:_authToken=${NPM_TOKEN}\"\n}\n</code></pre> <p>Renovate will then use the following logic:</p> <ol> <li>If no <code>npmrc</code> string is present in config then one will be created with the <code>_authToken</code> pointing to the default npmjs registry</li> <li>If an <code>npmrc</code> string is present and has a <code>${NPM_TOKEN}</code> then that placeholder will be replaced with the decrypted token</li> <li>If an <code>npmrc</code> string is present but doesn't have a <code>${NPM_TOKEN}</code> then the file will have <code>_authToken=&lt;token&gt;</code> appended to it</li> </ol>"},{"location":"getting-started/private-packages/#encrypted-entire-npmrc-file-into-config","title":"Encrypted entire .npmrc file into config","text":"<p>Copy the entire <code>.npmrc</code>, replace newlines with <code>\\n</code> characters , and then try encrypting it at https://app.renovatebot.com/encrypt.</p> <p>You will then get an encrypted string that you can substitute into your <code>renovate.json</code> instead. The end-result looks like this:</p> <pre><code>{\n  \"encrypted\": {\n    \"npmrc\": \"WOTWu+jliBtXYz3CU2eI7dDyMIvSJKS2N5PEHZmLB3XKT3vLaaYTGCU6m92Q9FgdaM/q2wLYun2JrTP4GPaW8eGZ3iiG1cm7lgOR5xPnkCzz0DUmSf6Cc/6geeVeSFdJ0zqlEAhdNMyJ4pUW6iQxC3WJKgM/ADvFtme077Acvc0fhCXv0XvbNSbtUwHF/gD6OJ0r2qlIzUMGJk/eI254xo5SwWVctc1iZS9LW+L0/CKjqhWh4SbyglP3lKE5shg3q7mzWDZepa/nJmAnNmXdoVO2aPPeQCG3BKqCtCfvLUUU/0LvnJ2SbQ1obyzL7vhh2OF/VsATS5cxbHvoX/hxWQ==\"\n  }\n}\n</code></pre>"},{"location":"getting-started/private-packages/#automatically-authenticate-for-npm-package-stored-in-private-github-npm-repository","title":"Automatically authenticate for npm package stored in private GitHub npm repository","text":"<pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://npm.pkg.github.com/\",\n      \"hostType\": \"npm\",\n      \"encrypted\": {\n        \"token\": \"&lt;Encrypted PAT Token&gt;\"\n      }\n    }\n  ],\n  \"npmrc\": \"@organizationName:registry=https://npm.pkg.github.com/\"\n}\n</code></pre>"},{"location":"getting-started/private-packages/#yarn-2","title":"Yarn 2+","text":"<p>Renovate doesn't support reading <code>npmRegistries</code> and <code>npmScopes</code> from <code>.yarnrc.yml</code>, so <code>hostRules</code> (or <code>npmToken</code>) and <code>npmrc</code> should be configured like above. Renovate updates <code>npmRegistries</code> in <code>.yarnrc.yml</code> with resolved <code>hostRules</code> before running Yarn. For Renovate to overwrite existing <code>npmRegistries</code> entry, the key should match the <code>matchHost</code> minus the protocol (<code>http:</code> or <code>https:</code>) plus the trailing slash.</p> <p>For example, the Renovate configuration:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://npm.pkg.github.com/\",\n      \"hostType\": \"npm\",\n      \"encrypted\": {\n        \"token\": \"&lt;Encrypted PAT Token&gt;\"\n      }\n    }\n  ]\n}\n</code></pre> <p>will update <code>.yarnrc.yml</code> as following:</p> <p>If no registry currently set</p> <pre><code>npmRegistries:\n  //npm.pkg.github.com/:\n    npmAuthToken: &lt;Decrypted PAT Token&gt;\n</code></pre> <p>If current registry key has protocol set:</p> <pre><code>npmRegistries:\n  https://npm.pkg.github.com:\n    npmAuthToken: &lt;Decrypted PAT Token&gt;\n</code></pre>"},{"location":"getting-started/private-packages/#maven","title":"maven","text":"<p>GitLab package registry can be authorized using <code>Authorization: Bearer &lt;token&gt;</code>. In GitLab Pipelines authorization can be achieved using following config:</p> <pre><code>hostRules: [\n  {\n    hostType: 'maven',\n    matchHost: 'https://gitlab.host.com/api/v4',\n    token: process.env.CI_JOB_TOKEN,\n  },\n];\n</code></pre>"},{"location":"getting-started/private-packages/#nuget","title":"nuget","text":"<p>For each known NuGet registry, Renovate searches for <code>hostRules</code> with <code>hostType=nuget</code> and matching host. For those found, a command like the following is run: <code>dotnet nuget add source ${registryInfo.feedUrl} --configfile ${nugetConfigFile} --username ${username} --password ${password} --store-password-in-clear-text</code>.</p> <pre><code>hostRules: [\n  {\n    matchHost: 'https://pkgs.dev.azure.com/&lt;org&gt;/',\n    hostType: 'nuget',\n    username: 'user', // doesn't matter for azure\n    password: '&lt;PAT&gt;',\n  },\n];\n</code></pre>"},{"location":"getting-started/private-packages/#pip","title":"pip","text":"<p>If a <code>requirements.txt</code> file has an index-url then Renovate follows that link, instead of following any link set in the <code>registryUrls</code> array. To override the URL found in <code>requirements.txt</code>, you must create a custom <code>packageRules</code> setting. This is because <code>packageRules</code> are applied after package file extraction.</p> <p>For example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"pip_requirements\"],\n      \"registryUrls\": [\"https://docker.mycompany.domain\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#pipenv","title":"pipenv","text":"<p>If a <code>Pipfile</code> contains a <code>source</code> with <code>USERNAME</code> or <code>PASSWORD</code> environment variables and there is a <code>hostRules</code> entry with a matching host plus <code>username</code> and <code>password</code> fields, then these variables would be passed to <code>pipenv lock</code>.</p> <p>For example:</p> <pre><code>[[source]]\nurl = \"https://$USERNAME:${PASSWORD}@mypypi.example.com/simple\"\nverify_ssl = true\nname = \"pypi\"\n</code></pre>"},{"location":"getting-started/private-packages/#pip-compile","title":"pip-compile","text":"<p>The pip-compile manager can extract these directives from the input file given to Renovate:</p> <ul> <li><code>--index-url</code></li> <li><code>--extra-index-url</code></li> </ul> <p>Renovate matches those URLs with credentials from matching <code>hostRules</code> blocks in the Renovate configuration. Then Renovate passes the information to <code>pip-compile</code> via environment variables.</p> <p>Put directives in the .in file, avoid the lockfile</p> <p>You must put the <code>--[extra-]index-url</code> directive(s) in the <code>.in</code> file, for <code>pip-compile</code> to use during Renovate jobs. Do not put the directive(s) in the lockfile, as this is not supported.</p> requirements.in<pre><code>--extra-index-url https://pypi.my.domain/simple\n\nprivate-package==1.2.3\n</code></pre> <pre><code>{\n  \"pip-compile\": {\n    \"managerFilePatterns\": [\"requirements.txt\"]\n  },\n  \"hostRules\": [\n    {\n      \"matchHost\": \"pypi.my.domain\",\n      \"username\": \"myuser\",\n      \"password\": \"mypassword\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#packages-that-renovate-needs","title":"Packages that Renovate needs","text":"<p>Renovate relies on <code>pip</code>'s integration with the Python keyring package along with the keyrings.envvars backend for this.</p>"},{"location":"getting-started/private-packages/#self-hosting-renovate","title":"Self-hosting Renovate","text":"<p>This section only applies to users who self-host Renovate. If you self-host and use Containerbase, or our Docker sidecar container, then Renovate can already access the packages it needs.</p> <p>But if you are self-hosting Renovate and:</p> <ul> <li>not running Renovate in a Containerbase environment</li> <li>or, not using the Docker sidecar container</li> </ul> <p>Then you must install the Python keyring package and the keyrings.envvars package into your self-hosted environment.</p>"},{"location":"getting-started/private-packages/#poetry","title":"poetry","text":"<p>For every Poetry source, a <code>hostRules</code> search is done and then any found credentials are added to env like <code>POETRY_HTTP_BASIC_X_USERNAME</code> and <code>POETRY_HTTP_BASIC_X_PASSWORD</code>, where <code>X</code> represents the normalized name of the source in <code>pyproject.toml</code>.</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      matchHost: 'pypi.example.com',\n      hostType: 'pypi',\n      username: process.env.PYPI_USERNAME,\n      password: process.env.PYPI_PASSWORD,\n    },\n  ],\n};\n</code></pre> <p>If you're self-hosting Renovate via the GitLab Runner and want to access packages from private GitLab registries, you can use the GitLab CI job token for authentication:</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      matchHost: 'gitlab.example.com',\n      hostType: 'pypi',\n      username: 'gitlab-ci-token',\n      password: process.env.CI_JOB_TOKEN,\n    },\n  ],\n};\n</code></pre>"},{"location":"getting-started/private-packages/#automatic-hostrules-credentials-for-platform-hosted-registries","title":"Automatic hostRules credentials for platform-hosted registries","text":""},{"location":"getting-started/private-packages/#github-packages","title":"GitHub Packages","text":"<p>For GitHub Packages, Renovate will automatically provision hostRules for both <code>ghcr.io</code> (containers) and <code>*.pkg.github.com</code> (maven, npm, nuget, rubygems) using the GitHub platform token. This means that any private packages hosted on GitHub will be automatically authenticated if they are accessible using the same token by Renovate.</p> <p>If you wish to override this authentication by providing a different token, then your rule must be at least as specific as the automatic rule that Renovate generates. For example:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"npm.pkg.github.com\",\n      \"hostType\": \"npm\",\n      \"token\": \"some-personal-access-token\"\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#encryption-and-the-mend-renovate-app","title":"Encryption and the Mend Renovate App","text":"<p>Many users use the Mend Renovate App, which is hosted by Mend. If you are a user of this app, and have private modules, then the following is applicable.</p>"},{"location":"getting-started/private-packages/#private-presets-with-public-repositories","title":"Private presets with public repositories","text":"<p>If you have a preset in a private repo but reference (\"extend\") it from a public repository then it won't work. This is because public repositories are provided with a token scoped to only that particular repository, and not for all repositories within the organization. This is a security measure so that if a the token is accidentally leaked publicly, the damage is limited to the public repository it leaked to and not to every repository within the organization.</p> <p>The solution to this is that you should break your presets into public and private ones, and reference only the public ones from public repositories.</p>"},{"location":"getting-started/private-packages/#encrypting-secrets","title":"Encrypting secrets","text":"<p>It is strongly recommended that you avoid committing secrets to repositories, including private ones, and this includes secrets needed by Renovate to access private modules. The preferred approach to secrets is that the bot administrator configures them as <code>hostRules</code> which are then applied to all repositories which the bot accesses.</p> <p>Store secrets for your Mend-hosted app via the web UI</p> <p>Mend no longer supports putting encrypted secrets in the Renovate config file on your repository. Going forward, all secrets must be stored in the App settings via the web UI. If you have encrypted secrets in your Renovate config, you must migrate them to the web UI. Read Migrating Secrets from Repo Config to App Settings to learn how.</p> <p>If you need to provide credentials to the Mend Renovate App, please do this:</p> <ol> <li>Add each secret string in the Credentials section of Organisation or Repository settings in the web UI at http://developer.mend.io.</li> </ol> <p></p> <ol> <li>Reference secrets inside your Renovate config files with notation: <code>{{ secrets.YOUR_SECRET }}</code>.</li> </ol> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.RENOVATE_GITHUB_COM_TOKEN }}\"\n    }\n  ]\n}\n</code></pre> <p>For more details, see Using Secrets with Mend Cloud Apps.</p>"},{"location":"getting-started/private-packages/#access-to-github-actions-secrets","title":"Access to GitHub Actions Secrets","text":"<p>The Mend Renovate App does not run using GitHub Actions, but such secrets would be a bad fit for the app anyway for the following reasons:</p> <ul> <li>The app would be granted access to all the repository/org secrets, not just the ones you want</li> <li>If Renovate wants access to such secrets, it would need to ask for them from every user, not just the ones who want to use this approach (GitHub does not support the concept of optional permissions for Apps, so people do not have the option to decline)</li> </ul>"},{"location":"getting-started/private-packages/#adminbot-config-vs-userrepository-config-for-self-hosted-users","title":"Admin/Bot config vs User/Repository config for Self-hosted users","text":"<p>\"Admin/Bot config\" refers to the config which the Renovate Bot administrator provides at bot startup, e.g. using environment variables, CLI parameters, or the <code>config.js</code> configuration file. User/Repository config refers to the in-repository config file which defaults to <code>renovate.json</code> but has a large number of alternative filenames supported.</p> <p>If there is a need to supply custom rules for certain repository, it can still be done using the <code>config.js</code> file and the <code>repositories</code> array.</p> <p>If per-repository config must be done within the repository, it is still recommended against committing secrets directly (including e.g. <code>.npmrc</code> files with tokens) and instead encrypting them with a custom public key first. For instructions on this, see the above section on encrypting secrets for the Mend Renovate App but instead:</p> <ul> <li>Save a copy of the https://app.renovatebot.com/encrypt HTML file locally, or host it locally</li> <li>Generate a public/private key pair for the app using the instructions in privateKey</li> <li>Replace the existing public key in the HTML with the public key you generated in the step prior</li> <li>Use the resulting HTML encrypt page to encrypt secrets for your app before adding them to user/repository config</li> <li>Configure the app to run with <code>privateKey</code> set to the private key you generated above</li> </ul> <p>Note</p> <p>Encrypted values can't be used in the \"Admin/Bot config\".</p>"},{"location":"getting-started/private-packages/#hostrules-configuration-using-environment-variables","title":"hostRules configuration using environment variables","text":"<p>Self-hosted users can enable the option <code>detectHostRulesFromEnv</code> to configure the most common types of <code>hostRules</code> via environment variables.</p>"},{"location":"getting-started/running/","title":"Running Renovate","text":"<p>As end user, you can choose from these ways to run Renovate:</p> <ul> <li>You use the Mend Renovate App</li> <li>You self-administer/host your own Renovate instance</li> <li>Someone else is hosting Renovate, and you install/configure it for the repositories you choose</li> </ul> <p>If you're using the Mend Renovate App, or if someone else is hosting Renovate for you, skip ahead to the installing &amp; onboarding page.</p>"},{"location":"getting-started/running/#self-hosting-renovate","title":"Self-Hosting Renovate","text":"<p>When self-hosting Renovate you're the \"administrator\" of the bot, this means you:</p> <ul> <li>provide the infrastructure that Renovate runs on,</li> <li>provision Renovate's global config,</li> <li>make sure Renovate bot runs regularly,</li> <li>make sure Renovate bot itself is updated</li> </ul> <p>If you're self-hosting Renovate on Windows, read Self-hosting on Windows to prevent line endings from confusing Renovate bot.</p> <p>If you're running Renovate Community Edition or Renovate Enterprise Edition, refer to the documentation on the <code>mend/renovate-ce-ee</code> GitHub repository.</p>"},{"location":"getting-started/running/#available-distributions","title":"Available distributions","text":""},{"location":"getting-started/running/#npm-package-cli","title":"npm package (CLI)","text":"<p>Renovate's Open Source CLI is built and distributed as the npm package <code>renovate</code>. You can run this package in any Node.js environment - even via <code>npx</code> - and it will process all the repositories it is configured with, before exiting.</p> <p>When installing Renovate via npm you are responsible for installing any third-party tools or languages like Ruby, Python, Composer, Bundler, Poetry, etc.</p> <p>The <code>renovate</code> npm package is compatible with all of Renovate's supported platforms.</p>"},{"location":"getting-started/running/#docker-images","title":"Docker images","text":"<p>Renovate is also distributed as Docker images on Docker Hub (<code>renovate/renovate</code>) and GitHub container registry (<code>ghcr.io/renovatebot/renovate</code>). These Docker images work on all the hosting platforms that Renovate supports.</p> <p>Both <code>linux/amd64</code> and <code>linux/arm64</code> architectures are supported, but you may still find some bugs in the <code>arm64</code> image. You can't run the Docker images in a Windows or macOS container.</p> <p>In general, you can run Renovate natively on Windows as long as you have all tools it will need (e.g. <code>npm</code>, <code>pipenv</code>, etc.) preinstalled before you run Renovate.</p> <p>There are two Docker image flavors:</p> <ul> <li>The default image, which installs required tools at runtime (default for <code>latest</code> tag),</li> <li>The <code>-full</code> image, which comes with latest or very recent versions of every tool pre-installed</li> </ul>"},{"location":"getting-started/running/#the-default-image-formerly-slim","title":"The default image (formerly <code>slim</code>)","text":"<p>The default image only comes with the Node.js environment. Renovate will then install any needed tools when it runs. Read the <code>binarySource=install</code> documentation for more details. We recommend this default image for most users.</p> <p>Renovate supports a persistent cache for downloaded tools, so that it only needs to unpack the tools on later runs. Use the <code>containerbaseDir</code> config option to control where Renovate stores its containerbase cache.</p> <p>If you want, you can map the Docker socket into the container so that Renovate can dynamically invoke \"sidecar\" images when needed. You'll need to set <code>binarySource=docker</code> for this to work. Read the <code>binarySource</code> config option docs for more information.</p>"},{"location":"getting-started/running/#the-full-image","title":"The full image","text":"<p>The <code>-full</code> image comes with most package managers that Renovate supports, but not all package managers. Update your Docker images regularly to keep the pre-installed tools up-to-date.</p> <p>The full image is for users who don't want to download or install things at runtime. This image has some downsides, because it:</p> <ul> <li>Comes pre-installed with one version of each language/manager - usually the latest</li> <li>Weighs several gigabytes</li> </ul>"},{"location":"getting-started/running/#github-action","title":"GitHub Action","text":"<p>Renovate's npm tool is also provided as a GitHub Action on <code>renovatebot/github-action</code>. Details on how to use it can be found in the repository.</p>"},{"location":"getting-started/running/#gitlab-runner","title":"GitLab Runner","text":"<p>The Renovate team provide a \"Renovate Runner\" project to make it easier to run Renovate as a CI pipeline job. This supports both <code>gitlab.com</code> and self-hosted GitLab. Details for how it works can be found in the project.</p>"},{"location":"getting-started/running/#mend-renovate-community-edition-enterprise-edition","title":"Mend Renovate Community Edition / Enterprise Edition","text":"<p>Mend Renovate Community Edition (Renovate CE) and Enterprise Edition (Renovate EE) are closed-source offerings of Renovate for self-hosted users. Renovate CE and Renovate EE have support for GitHub (both <code>github.com</code> and GitHub Enterprise Server) as well as GitLab self-hosted. It is built similarly to the default \"full\" Renovate image described above, but with these differences:</p> <ul> <li>It is a stateful app and does not exit after processing all repositories</li> <li>It is installed as an App on GitHub, and behaves similarly on GitLab - for example responding to webhooks</li> <li>It includes a priority job queue which prioritizes events like merged PRs over scheduled jobs</li> <li>It is released every 1-2 months in a slower, more stable cadence than Renovate OSS, which releases on every commit</li> <li>It's licensed using an end-user license agreement (EULA) and not the Affero General Public License (AGPL)</li> </ul> <p>Plus, the Enterprise Edition has:</p> <ul> <li>Horizontal scaling to run multiple 'worker' containers</li> <li>Dedicated support from Mend.io</li> <li>Premium features, including Smart Merge Control</li> </ul> <p>Go to the Mend.io website to learn more about Renovate Enterprise Edition.</p> <p>To learn how to configure Renovate CE or Renovate EE, read the documentation on the public GitHub repository <code>mend/renovate-ce-ee</code>.</p>"},{"location":"getting-started/running/#mend-remediate","title":"Mend Remediate","text":"<p>Mend Remediate is an extension of WSOP available for Mend commercial customers, with full enterprise support. It is integrated with Mend's vulnerability detection capabilities and additionally supports the capability of \"horizontal\" scalability - the ability to configure many Renovate \"worker\" containers which share a common job queue in order to not conflict with each other.</p> <p>Mend Remediate supports GitHub Enterprise Server, GitLab self-hosted, and Bitbucket Server.</p>"},{"location":"getting-started/running/#forking-renovate-app","title":"Forking Renovate app","text":"<p>\"Forking Renovate\" is the sister app to the Mend Renovate App. The difference is that Forking Renovate does not need <code>write</code> permissions to create branches within the repo, and instead submits PRs from its own fork. Because of how it works, it functions on public repositories only and additionally cannot support <code>automerge</code> capabilities.</p> <p>Install Forking Renovate from GitHub App store.</p>"},{"location":"getting-started/running/#benefits","title":"Benefits","text":"<p>Forking Renovate needs only <code>read</code> level access to the code of any repository it runs on.</p>"},{"location":"getting-started/running/#drawbacks","title":"Drawbacks","text":"<p>If you use Forking Renovate, you'll miss out on these features of the regular Renovate app:</p> <ul> <li>Automerge</li> <li>The <code>baseBranchPatterns</code> config option</li> </ul>"},{"location":"getting-started/running/#hosting-renovate","title":"Hosting Renovate","text":"<p>After deciding on a Renovate distribution, you need to decide where and how to run it.</p> <p>For the GitHub Action and GitLab Runner approaches, they will naturally run on their respective CI infrastructure. For the npm package approach or Docker images, you will need some form of VM or container infrastructure to run Renovate on.</p> <p>In all the above cases you must make sure that some form of cron-like capability exists to schedule when Renovate runs. We recommend that you run Renovate hourly, if possible.</p> <p>Mend Renovate On-Premises and Mend Remediate both run as long-lived containers, so they do not need any cron-like concept as it is built-in.</p>"},{"location":"getting-started/running/#global-config","title":"Global config","text":"<p>Renovate's server-side/admin config is referred to as its \"global\" config, and can be set by using either:</p> <ul> <li>a config file, or</li> <li>an additional config file, or</li> <li>environment variables, or</li> <li>CLI parameters</li> </ul> <p>By default Renovate checks if a file named <code>config.js</code> is present. Any other (<code>*.js</code>, <code>*.json</code>, <code>*.json5</code>, <code>*.yaml</code> or <code>*.yml</code>) file is supported, when you reference it with the <code>RENOVATE_CONFIG_FILE</code> environment variable (for example: <code>RENOVATE_CONFIG_FILE=config.yaml</code>).</p> <p>Renovate checks for the additional config file only if the <code>RENOVATE_ADDITIONAL_CONFIG_FILE</code> is set. Behaviour wise this config is similar to the file config, except that it has higher priority than the default config file.</p> <p>Some config is global-only, meaning that either it is only applicable to the bot administrator or it can only be controlled by the administrator and not repository users. Those are documented in Self-hosted Configuration. Your bot's global config can include both global as well as non-global configuration options, while user/repo config can only include non-global options. We recommend that you keep as much of the non-global config as possible in repository config files. This way the Renovate end users can see as much of the bot's configuration as possible.</p> <p>If you are configuring Renovate using environment variables, there are two possibilities:</p> <ul> <li>Upper-cased, camel-cased, <code>RENOVATE_</code>-prefixed single config options like <code>RENOVATE_TOKEN=abc123</code> or <code>RENOVATE_GIT_AUTHOR=a@b.com</code></li> <li>Set <code>RENOVATE_CONFIG</code> to a stringified version of the full JSON config, for example: <code>RENOVATE_CONFIG='{\"token\":\"abc123\",\"gitAuthor\":\"a@b.com\"}'</code></li> </ul> <p>If you combine both of the above then any single config option in the environment variable will override what's in <code>RENOVATE_CONFIG</code>.</p> <p>Note</p> <p>It's also possible to change the default prefix from <code>RENOVATE_</code> using <code>ENV_PREFIX</code>. For example: <code>ENV_PREFIX=RNV_ RNV_TOKEN=abc123 renovate</code>.</p>"},{"location":"getting-started/running/#using-configjs","title":"Using <code>config.js</code>","text":"<p>If you use a <code>config.js</code>, it will be expected to export a configuration via <code>module.exports</code>. The value can be either a plain JavaScript object like in this example where <code>config.js</code> exports a plain object:</p> <pre><code>module.exports = {\n  token: 'abcdefg',\n};\n</code></pre> <p><code>config.js</code> may also export a <code>Promise</code> of such an object, or a function that will return either a plain JavaScript object or a <code>Promise</code> of such an object. This allows one to include the results of asynchronous operations in the exported value. An example of a <code>config.js</code> that exports an <code>async</code> function (which is a function that returns a <code>Promise</code>) can be seen in a comment for #10011: Allow autodiscover filtering for repo topic and more examples can be seen in <code>file.spec.ts</code>.</p>"},{"location":"getting-started/running/#authentication","title":"Authentication","text":"<p>Regardless of platform, you need to select a user account for <code>renovate</code> to assume the identity of, and generate a Personal Access Token. We recommend you use <code>@renovate-bot</code> as username if you're on a self-hosted server where you can set all usernames. We also recommend you configure <code>config.gitAuthor</code> with the same identity as your Renovate user, for example: <code>\"gitAuthor\": \"Renovate Bot &lt;renovate@some.domain.test&gt;\"</code>.</p> <p>Warning</p> <p>We recommend you use a single, dedicated username for your Renovate bot. Never share the Renovate username with your other bots, as this can cause flip-flopping.</p>"},{"location":"getting-started/running/#docs","title":"Docs","text":"<p>Read the platform-specific docs to learn how to setup authentication on your platform:</p> <ul> <li>Azure DevOps</li> <li>Bitbucket Cloud</li> <li>Bitbucket Server</li> <li>Forgejo</li> <li>Gitea</li> <li>github.com and GitHub Enterprise Server</li> <li>GitLab</li> </ul>"},{"location":"getting-started/running/#githubcom-token-for-changelogs","title":"GitHub.com token for changelogs","text":"<p>If you are running on any platform except github.com, you should also set the environment variable <code>RENOVATE_GITHUB_COM_TOKEN</code> and put the Personal Access Token for github.com in it. This account can be any account on GitHub, and needs only <code>read-only</code> access. It's used when fetching changelogs for repositories in order to increase the hourly API limit. It's also OK to configure the same as a host rule instead, if you prefer that.</p> <p>Note</p> <p>If you're using Renovate in a project where dependencies are loaded from github.com (such as Go modules hosted on GitHub), we highly recommend that you add a <code>github.com</code> PAT (classic). Otherwise you will exceed the rate limit for the github.com API, which will lead to Renovate closing and reopening PRs because it could not get reliable info on updated dependencies.</p>"},{"location":"getting-started/running/#self-hosting-examples","title":"Self-hosting examples","text":"<p>For more examples on running Renovate self-hosted, read our Self-hosted examples page.</p>"},{"location":"getting-started/use-cases/","title":"Use Cases","text":"<p>This page describes common use cases for Renovate.</p>"},{"location":"getting-started/use-cases/#development-dependency-updates","title":"Development dependency updates","text":"<p>The original use case, and the most popular one, is for developers to automate dependency updating in their software projects.</p>"},{"location":"getting-started/use-cases/#updating-of-package-files","title":"Updating of package files","text":"<p>We use the term \"package file\" to describe files which reference dependencies. Package files are managed by a \"package manager\".</p> <p>Example package files include:</p> <ul> <li><code>package.json</code>, managed by npm or Yarn</li> <li><code>Gemfile</code>, managed by Bundler</li> <li><code>go.mod</code>, managed by <code>go</code> modules</li> </ul>"},{"location":"getting-started/use-cases/#how-renovate-updates-a-package-file","title":"How Renovate updates a package file","text":"<p>Renovate:</p> <ol> <li>Scans your repositories to find package files and their dependencies</li> <li>Checks if any newer versions exist</li> <li>Raises Pull Requests for available updates</li> </ol> <p>The Pull Requests patch the package files directly, and include changelogs for the newer versions (if they are available).</p> <p>By default:</p> <ul> <li>You'll get separate Pull Requests for each dependency</li> <li>Major updates are kept separate from non-major updates</li> </ul>"},{"location":"getting-started/use-cases/#package-managers-with-lock-files","title":"Package managers with lock files","text":"<p>Many package managers support \"lock files\", which \"freeze\" the entire dependency tree including transitive dependencies. npm, Yarn, Bundler, Composer, Poetry, Pipenv, and Cargo all support or use lock files.</p> <p>If you use a lock file then changes to your package file must come with a compatible change to the lock file. Renovate can patch/update package files directly, but can't \"reverse engineer\" lock files. This is why Renovate lets the package manager do the lock file update. A simplified example:</p> <ol> <li>The repository has a <code>package.json</code> and <code>package-lock.json</code> with version <code>1.0.0</code> of a dependency</li> <li>Renovate sees that version <code>1.1.0</code> is available</li> <li>Renovate patches the <code>package.json</code> to change the dependency's version from <code>1.0.0</code> to <code>1.1.0</code></li> <li>Renovate runs <code>npm install</code> to let <code>npm</code> update the <code>package-lock.json</code></li> <li>Renovate commits the <code>package.json</code> and <code>package-lock.json</code></li> <li>Renovate creates the PR</li> </ol>"},{"location":"getting-started/use-cases/#custom-dependency-extraction","title":"Custom dependency extraction","text":"<p>Renovate supports 90+ types of package files. By default, Renovate finds most dependencies, but there are exceptions. This can be because:</p> <ul> <li>The package manager/file format is not supported, or</li> <li>The file format is not a standard or is proprietary</li> </ul> <p>If your dependencies are not found by default, you can use our <code>custom</code> manager to set your own custom patterns to extract dependencies. You configure the custom manager by telling it:</p> <ul> <li>Which file pattern(s) to match</li> <li>How to find the dependency name and version from within the file</li> <li>Which datasource (e.g. Docker registry, npm registry, etc) to use to look up new versions</li> </ul> <p>The end result is that Renovate can keep dependencies in custom file formats up-to-date as long as the dependency datasource is known to Renovate.</p>"},{"location":"getting-started/use-cases/#devops-tooling","title":"DevOps tooling","text":"<p>Renovate is increasingly used for purposes which are traditionally described as DevOps instead of Developer.</p>"},{"location":"getting-started/use-cases/#devops-infrastructure-as-code-updates","title":"DevOps / Infrastructure as Code updates","text":"<p>It's common for repositories to have DevOps-related files like CI/CD configs, or \"Infrastructure as Code\" (IaC) files. Examples of IaC files are Docker, Kubernetes or Terraform files. Renovate handles IaC files as \"package managers\" and \"package files\" and can find and update them.</p>"},{"location":"getting-started/use-cases/#docker-compatible-images","title":"Docker-compatible images","text":"<p>Docker-compatible images are a key building block of modern software. These images are commonly found in CI/CD pipeline configs or referenced in IaC files. Renovate finds these IaC files and then searches Docker registries to see if there are newer tags or digests.</p>"},{"location":"getting-started/use-cases/#tag-based-updating","title":"Tag-based updating","text":"<p>An example of tag-based updating are <code>node</code> images from Docker Hub. The <code>node</code> images use these tag formats:</p> <ul> <li><code>14.17.4</code></li> <li><code>14.17.4-alpine3.11</code></li> </ul> <p>Renovate understands both formats and raises updates like these:</p> <ul> <li>From <code>14.17.4</code> to <code>14.17.5</code></li> <li>From <code>14.17.4-alpine3.11</code> to <code>14.17.5-alpine3.11</code></li> </ul>"},{"location":"getting-started/use-cases/#docker-digests","title":"Docker digests","text":"<p>You can check and update versions like <code>14.17.4</code> yourself. But looking up image digests like <code>341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9</code> and updating them yourself doesn't scale. So let Renovate update your Docker digests.</p> <p>You can even configure Renovate to \"pin\" your Docker digests. When you're using tag+digest based images, you'll have immutable builds.</p>"},{"location":"getting-started/use-cases/#internal-package-updates","title":"Internal package updates","text":"<p>Your company typically has dozens of repositories, if not hundreds or thousands. These repositories often rely on other repositories and may have upstream or downstream internal dependencies. In such cases, it is best practice to:</p> <ul> <li>Update downstream links as soon as possible, and</li> <li>Keep internal version use as consistent as possible</li> </ul> <p>You can use Renovate to follow this best practice. Renovate finds and updates internal dependencies just like external or Open Source dependencies.</p>"},{"location":"getting-started/use-cases/#automerge-internal-dependencies","title":"Automerge internal dependencies","text":"<p>Renovate's automerge feature is really useful for internal dependencies where you can say \"if it passes tests let's merge it\".</p> <p>To learn more about \"automerge\" read the key concepts, automerge documentation.</p>"},{"location":"getting-started/use-cases/#example-of-automerging-internal-dependencies","title":"Example of automerging internal dependencies","text":"<p>We use these Renovate features to automerge an internal dependency:</p> <ul> <li>Git submodule support</li> <li><code>automerge</code> set to <code>true</code></li> <li><code>automergeType</code> set to <code>branch</code></li> </ul>"},{"location":"getting-started/use-cases/#background-information","title":"Background information","text":"<p>We split our work over two repositories:</p> <ol> <li>The <code>renovatebot/renovate</code> repository, which has the Renovate code, and most of the Markdown documentation files</li> <li>The <code>renovatebot/renovatebot.github.io</code> repository, which has a submodule link to the <code>renovatebot/renovate</code> repository</li> </ol>"},{"location":"getting-started/use-cases/#update-process","title":"Update process","text":"<ol> <li>We edit our documentation files on the main Renovate repository <code>renovatebot/renovate</code></li> <li>Renovate sees the change(s) to the <code>renovatebot/renovate</code> Git submodule, and creates an update branch on the documentation build repository</li> <li>If the tests pass Renovate automerges the update branch into the <code>main</code> branch.</li> <li>A GitHub Actions workflow runs on <code>main</code> to build the documentation site and push the build live on our GitHub Pages domain</li> </ol>"},{"location":"getting-started/use-cases/#benefits","title":"Benefits","text":"<p>The way we've set things up means we avoid:</p> <ul> <li>reviewing PRs</li> <li>manually merging PRs</li> </ul> <p>In fact we don't even get the update PR anymore!</p>"},{"location":"getting-started/use-cases/#advanced-configuration","title":"Advanced configuration","text":"<p>The capabilities listed below are commonly needed for all the above use cases.</p>"},{"location":"getting-started/use-cases/#batched-updates","title":"Batched updates","text":"<p>Renovate defaults to separating each dependency update into its own PR. But you may want to batch or \"group\" updates together. For example, group all patch updates into one PR or even all non-major updates together (patches and minor updates).</p> <p>You can configure batched updates by setting a <code>groupName</code> as part of <code>packageRules</code>.</p>"},{"location":"getting-started/use-cases/#scheduled-updates","title":"Scheduled updates","text":"<p>You may want to limit the times when Renovate is allowed to raise updates. This reduces \"noise\" during your working hours, and reduces the chance of CI contention. You can tell Renovate to \"not bother you\" during times when you're using the CI resources, or want to focus on your work.</p> <p>You can set the time ranges during which Renovate creates updates in the <code>schedule</code> field.</p>"},{"location":"getting-started/use-cases/#on-demand-updates-via-dependency-dashboard","title":"On-demand updates via Dependency Dashboard","text":"<p>You can use Renovate's \"Dependency Dashboard\" on platforms which support dynamic Markdown checkboxes:</p> <ul> <li>Forgejo</li> <li>Gitea</li> <li>GitHub</li> <li>GitLab</li> </ul> <p>When you enable the Dependency Dashboard, Renovate creates a \"Dependency Dashboard\" issue. This issue lists all updates which are pending, in progress, or were previously closed ignored.</p> <p>If you want to get an update ahead of schedule, or want to retry a previously closed update: select the update's checkbox in the Dependency Dashboard.</p>"},{"location":"getting-started/use-cases/#dependency-dashboard-approval","title":"Dependency Dashboard Approval","text":"<p>If you enable the Dependency Dashboard you can opt-in to a different workflow for some, or even all of your packages. We call this the \"Dependency Dashboard Approval\" workflow.</p> <p>Here's how it works:</p> <ul> <li>You tell Renovate which package updates need \"Dashboard Approval\" by setting a custom <code>packageRule</code></li> <li>Renovate only raises updates for packages that need \"Dashboard Approval\" after you select the corresponding checkbox on the dashboard</li> </ul>"},{"location":"getting-started/use-cases/#benefits-of-using-dependency-dashboard-approval","title":"Benefits of using Dependency Dashboard Approval","text":"<ul> <li>By not raising PRs automatically, it allows you to request updates on-demand when you're ready, and</li> <li>It offers you an alternative to permanently ignoring/disabling certain types of updates, like major updates</li> </ul> <p>When you use the Dependency Dashboard Approval workflow you have full visibility and control over your updates.</p>"},{"location":"getting-started/use-cases/#configuration-presets","title":"Configuration presets","text":"<p>You may run Renovate on many, or even all your repositories. This also means that you might want a similar config for all of your repositories. You can use configuration \"presets\" to avoid duplicating your configuration across your repositories.</p> <p>Configuration presets are JSON configuration files which are committed to repositories and then referenced from others. Renovate includes over 100 built-in presets, like the default recommended <code>config:recommended</code> preset.</p> <p>The typical workflow for a company is:</p> <ul> <li>Create a dedicated repository to store the company's default Renovate settings</li> <li>Set that repository as the default <code>extends</code> value when onboarding new repositories</li> </ul> <p>This means that repositories get the centralized config by default, and any changes made to the centralized config repository are propagated to other repositories immediately.</p>"},{"location":"getting-started/use-cases/#how-others-use-renovate","title":"How others use Renovate","text":"<p>You can learn a lot by seeing how others use Renovate. Check out the Swissquote user story.</p>"},{"location":"key-concepts/automerge/","title":"Introduction","text":"<p>You can choose to automate some dependency updates by letting Renovate automerge its PR. Renovate will wait for the required tests to pass before it automerges.</p>"},{"location":"key-concepts/automerge/#renovate-automerges-take-time","title":"Renovate automerges take time","text":"<p>Renovate automerges take time, so Renovate can't automerge a PR the second it passes your required tests. Before you start troubleshooting, wait! Give Renovate about two hours, so Renovate can run in a state where your tests have passed, and the PR branch is up-to-date with the base branch. If you or others keep committing to the default branch then Renovate cannot find a suitable gap to automerge into!</p> <p>After Renovate automerges a branch, Renovate must calculate the \"Git state\" again, for all remaining branches. Merging one branch may result in another branch's updates being changed, or even removed as no longer needed. Renovate requires automerging branches to be up-to-date with their target branch, before automerging. As merging more than one branch in a row does not work reliably, Renovate will only automerge one branch/PR, per target branch, per run. Then you'll have to wait for the next time Renovate runs.</p>"},{"location":"key-concepts/automerge/#recommendations-from-the-renovate-maintainers","title":"Recommendations from the Renovate maintainers","text":"<p>In general, we recommend you enable automerge for any dependency update where you would select \"merge\" anyway. Keep automerge disabled for updates where you want to read the changelogs or code before the merge.</p> <p>Automerge often works well for <code>devDependencies</code>. It can work for production <code>dependencies</code> too, but your project should have good test coverage.</p> <p>For example, if you have Jest or Mocha as a development dependency, and it has an upgrade with passing tests... automerge them! If you have a linter like ESLint or TSLint and its update passes... automerge them! If you have an API with 100% test coverage and Express is updated... automerge it!</p> <p></p>"},{"location":"key-concepts/automerge/#configuration-examples","title":"Configuration examples","text":""},{"location":"key-concepts/automerge/#automerge-lock-file-maintenance","title":"Automerge lock file maintenance","text":"<p>The lowest risk type of update to automerge is probably <code>lockFileMaintenance</code>. When Renovate performs lock file maintenance, it leaves the project dependency definitions unchanged, but refreshes the lock file completely. This means Renovate installs the latest versions, that match the package file constraints.</p> Example of automerging lock file maintenance<pre><code>{\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"automerge\": true\n  }\n}\n</code></pre>"},{"location":"key-concepts/automerge/#automerge-lint-tool-updates","title":"Automerge lint tool updates","text":"<p>Automerging lint tool updates can be a real time-saver. Often a new lint tool version pass the updated tests, without any code changes on your end. If the tests pass you may as well automerge the PR.</p> <p>In cases where you need to make changes to your code, the Renovate PR will fail the linter check. You can then make the necessary code changes directly in the Renovate branch for that PR, confirm the tests pass with your changes, and manually merge the PR.</p> Example of automerging lint and Prettier development packages<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"matchPackageNames\": [\"lint\", \"prettier\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#automerge-non-major-updates","title":"Automerge non-major updates","text":"<p>Non-major updates in SemVer ecosystems shouldn't have breaking changes (if they follow the spec), so many users enable automerge for these too:</p> Example of automerging non-major updates in SemVer ecosystem<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"minor\", \"patch\"],\n      \"matchCurrentVersion\": \"!/^0/\",\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre> <p>The <code>matchCurrentVersion</code> setting above is a rule to exclude any dependencies which are pre-1.0.0 because those can make breaking changes at any time according to the SemVer spec.</p>"},{"location":"key-concepts/automerge/#automerge-monorepo-prs","title":"Automerge monorepo PRs","text":"<p>Say you want to automerge <code>patch</code> and <code>minor</code> updates for packages in the <code>group:ionic-nativeMonorepo</code> preset:</p> Example of automerging patch and minor updates in a group from a preset<pre><code>{\n  \"packageRules\": [\n    {\n      \"extends\": [\"monorepo:ionic-native\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#faster-merges-with-platform-native-automerge","title":"Faster merges with platform-native automerge","text":"<p>By default, Renovate uses platform-native automerge to speed up automerging. If you don't want Renovate to use the platform-native automerge, then set <code>platformAutomerge</code> to <code>false</code>.</p> Example of disabling platform-native automerge<pre><code>{\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"automerge\": true,\n    \"automergeType\": \"pr\",\n    \"platformAutomerge\": false\n  }\n}\n</code></pre> <p>For more information read <code>platformAutomerge</code>.</p>"},{"location":"key-concepts/automerge/#github-merge-queue","title":"GitHub Merge Queue","text":"<p>Renovate supports GitHub's Merge Queue.</p> <p>Read the GitHub Docs, managing a merge queue first.</p> <p>The steps to enable GitHub's Merge Queue differ based on whether you use GitHub Actions or another CI provider.</p> <p>GitHub Merge Queue overview page</p> <p>GitHub has a page that shows all the PRs in the Merge Queue. The page link follows this pattern: <code>https://github.com/organization-name/repository-name/queue/base-branch-name</code>. For example, here's Renovate's main repository's Merge Queue overview.</p>"},{"location":"key-concepts/automerge/#if-you-use-github-actions","title":"If you use GitHub Actions","text":"<p>If you use GitHub Actions as your CI provider, follow these steps:</p> <p>Add the <code>on.merge_group</code> event to your GitHub Action <code>.yaml</code> files, for example:</p> <pre><code>on:\n  pull_request:\n  merge_group:\n</code></pre> <p>On <code>github.com</code>, go to your repository's \"homepage\", click on Settings, scroll down to the Pull Requests section and enable the \"Allow auto-merge\" checkbox.</p> <p>Then go to your repository's branch protection rules for your base branch (usually <code>main</code>) and enable the \"Require merge queue\" setting. Confirm you've set the correct \"required checks\" for your base branch.</p> <p>Finally, allow Renovate to automerge by setting <code>automerge=true</code> in your Renovate config file, for example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Automerge non-major updates\",\n      \"matchUpdateTypes\": [\"minor\", \"patch\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#if-you-dont-use-github-actions","title":"If you don't use GitHub Actions","text":"<p>If you don't use GitHub Actions as your CI provider, follow these steps:</p> <p>Update your CI provider's configuration so it also runs tests on the temporary <code>gh-readonly-queue/{base_branch}</code> branches, read your CI providers's documentation to learn how to do this.</p> <p>On <code>github.com</code>, go to your repository's \"homepage\", click on Settings, scroll down to the Pull Requests section and enable the \"Allow auto-merge\" checkbox. Go to your repository's branch protection rules for your base branch (usually <code>main</code>) and enable the \"Require merge queue\" setting. Confirm you've set the correct \"required checks\" for your base branch.</p> <p>Finally, allow Renovate to automerge by setting <code>automerge=true</code> in your Renovate config file (see earlier example).</p>"},{"location":"key-concepts/automerge/#automerging-and-scheduling","title":"Automerging and scheduling","text":"<p>Automerging is particularly beneficial if you have configured a schedule, because Renovate on its own may be able to automerge the majority of your updates. And this is especially so if your repository needs rebasing, like when you use lock files. Let's say you have dependencies <code>abc</code> and <code>xyz</code> with upgrades, and you use a <code>yarn.lock</code> file.</p> <ul> <li>At the start of the schedule, <code>Renovate</code> will create branches for <code>abc</code> and <code>xyz</code> upgrades, including <code>yarn.lock</code> updates</li> <li>After <code>abc</code> passes tests, <code>Renovate</code> will automerge it into the base branch</li> <li>The <code>xyz</code> branch has a <code>yarn.lock</code> conflict now</li> <li>Renovate will immediately check all other branches and rebase them</li> <li>The change to <code>xyz</code> branch will trigger another round of CI tests</li> <li>After the updated <code>xyz</code> branch passes, Renovate will automerge it too</li> </ul> <p>This is a lot better than you waking up to two PRs and then having to deal with conflicts yourself after you merge the first one.</p>"},{"location":"key-concepts/automerge/#branch-vs-pr-automerging","title":"Branch vs PR automerging","text":"<p>Even if you automerge PRs, you are likely to still get notification noise - one when the PR is created and another when it is merged. For this reason we recommend you consider setting <code>automergeType=branch</code> which will mean:</p> <ul> <li>Renovate first creates a branch and no PR</li> <li>If tests pass, Renovate pushes a commit directly to the base branch without PR</li> <li>If tests fail, Renovate raises a PR for you to review</li> </ul> <p>Add the <code>renovate/**</code> branch to your testing workflow files, or Renovate will not work properly with the <code>automergeType=branch</code> setting.</p> <p>The result is that passing updates are essentially \"silent\" - the only sign of them are the commits Renovate pushes to your base branch. If you have enabled branch protection which prevents Renovate from automerging directly to the base branch, then this won't work and you should stick with the default PR-based automerging instead.</p>"},{"location":"key-concepts/automerge/#assignees-and-reviewers","title":"Assignees and Reviewers","text":"<p>When automerge is enabled on a PR, Renovate will not add assignees or reviewers at PR creation time, in order to decrease notifications noise a little. If tests subsequently fail, making automerge not possible, then Renovate will add the configured assignees and/or reviewers.</p> <p>Note: Renovate won't add assignees and reviewers to a PR with failing checks if the PR already has assignees or reviewers present. If there are accounts you wish to ignore (i.e. add assignees and reviewers regardless) then add them to <code>ignoreReviewers</code> to specify those which should be filtered out in such consideration.</p>"},{"location":"key-concepts/automerge/#frequent-problems-and-how-to-resolve-them","title":"Frequent problems and how to resolve them","text":""},{"location":"key-concepts/automerge/#automerge-not-enabled-correctly-in-config","title":"Automerge not enabled correctly in config","text":"<p>Sometimes, the reason Renovate is not automerging a PR is because of a configuration mistake. You can confirm that Renovate knows you want it to automerge by checking if the PR body includes the text \"Automerge: Enabled\". If you see \"Automerge: Disabled by config\" it means you need to make a config change for automerge to work.</p>"},{"location":"key-concepts/automerge/#absence-of-tests","title":"Absence of tests","text":"<p>By default, Renovate will not automerge until it sees passing status checks / check runs for the branch. If you have no tests but still want Renovate to automerge, you need to add <code>\"ignoreTests\": true</code> to your configuration.</p> <p>Tip</p> <p>We strongly recommend you have tests in any project where you are regularly updating dependencies.</p>"},{"location":"key-concepts/automerge/#committer-restrictions","title":"Committer restrictions","text":"<p>If you have protected your base branch with a list of allowed committers, and Renovate is not on that list, then naturally automerge can't work.</p>"},{"location":"key-concepts/automerge/#pull-requests-required","title":"Pull Requests Required","text":"<p>If you have configured your project to require Pull Requests before merging, it means that branch automerging is not possible, even if Renovate has rights to commit to the base branch.</p>"},{"location":"key-concepts/automerge/#required-pull-request-reviews","title":"Required Pull Request reviews","text":"<p>If you have mandatory Pull Request reviews then it means Renovate can't automerge its own PR until such a review has happened.</p> <p>If you're on <code>github.com</code> or GitHub Enterprise Server (<code>&gt;=3.4</code>) you can let Renovate bypass the mandatory Pull Request reviews using the \"Allow specified actors to bypass required pull requests\" option in your branch protection rules.</p> <p>Alternatively, if you use the Mend Renovate App, you can also install the helper apps renovate-approve and renovate-approve-2 and they will mark all automerging Pull Requests by Renovate as approved. These approval helper apps are only available for GitHub.</p> <p>On Azure/Gerrit/Gitlab, you can activate the <code>autoApprove</code> option.</p>"},{"location":"key-concepts/automerge/#codeowners","title":"Codeowners","text":"<p>Depending on the platform, having a <code>CODEOWNERS</code> file could block automerging, because it means a code owner must review the PR.</p>"},{"location":"key-concepts/automerge/#overriding-global-automerge","title":"Overriding global automerge","text":"<p>You might have setup a global configuration in a <code>.github</code> repository, that has a <code>renovate.json</code> file that turns on automerge for certain dependencies. It does not matter where you've put the global config, the important point in this example is that you're extending from a global config that's somewhere else. For this example we'll assume you put your config in a repository on GitHub, called <code>.github</code>.</p> <p>Repositories in the organization all extend from this global configuration, and so they \"inherit\" the automerge settings as well.</p> <p>To turn off automerge for all dependencies of a selected repository, you need to make a config that overrides all <code>packageRules</code> in the repository's <code>renovate.json</code> file, like this:</p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"local&gt;org-name/.github:renovate-config\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"*\"],\n      \"automerge\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"key-concepts/changelogs/","title":"Renovate and changelogs","text":"<p>This page explains how Renovate fetches changelogs, when it can display them, and more.</p>"},{"location":"key-concepts/changelogs/#how-renovate-detects-changelogs","title":"How Renovate detects changelogs","text":"<p>Renovate detects and populates changelogs by:</p> <ol> <li>Identifying a source URL from the datasource response for a package, and saving that internally as <code>sourceUrl</code> if found</li> <li>Checking if Renovate's internal sourceUrl data for the package includes a source URL</li> <li>Looking up the source URL, if it resides on a supported platform (e.g. GitHub)</li> <li>Checking for both \"Releases\" metadata in the repository and any commonly known \"changelog\" file names</li> <li>Filtering the found releases to only include those versions being updated by the current PR</li> <li>Formatting and embedding the results into the PR body</li> </ol>"},{"location":"key-concepts/changelogs/#changelogs-for-private-packages","title":"Changelogs for private packages","text":"<p>For private packages, the algorithm is mostly the same as described above, with the additional considerations:</p> <ul> <li>Renovate must be able to access the private package in the first place</li> <li>The private registry must include the source URL in its response</li> <li>Renovate must be able to detect and authenticate with whatever private repository corresponds to the source URL</li> </ul> <p>For more details, see Private packages, looking up changelogs.</p>"},{"location":"key-concepts/changelogs/#relevant-configuration-options","title":"Relevant configuration options","text":""},{"location":"key-concepts/changelogs/#fetchchangelogs","title":"<code>fetchChangelogs</code>","text":"<p>Set to <code>off</code> if changelog fetching is causing a problem.</p> <p>Set to <code>branch</code> if you have an advanced use case where you're embedding changelogs in the Git commit itself, we don't recommend this due to its potential size.</p>"},{"location":"key-concepts/changelogs/#changelogurl","title":"<code>changelogUrl</code>","text":"<p>This doesn't help with fetching the changelogs, but if you configure it then Renovate will include a link to this URL in the PR body, so users can click through to read the changelog.</p>"},{"location":"key-concepts/changelogs/#platforms-that-renovate-can-fetch-changelogs-from","title":"Platforms that Renovate can fetch changelogs from","text":"<p>See the list of platforms in the <code>fetchChangelogs</code> config option docs.</p>"},{"location":"key-concepts/changelogs/#running-renovate-on-a-non-github-platform","title":"Running Renovate on a non-GitHub platform","text":"<p>Most Open Source packages are hosted on github.com, which means most changelogs are hosted there too. Fetching changelogs from github.com requires a GitHub token because GitHub blocks unauthenticated GraphQL API use.</p> <p>This means that if you run Renovate on self-hosted GitHub Enterprise Server, or any non-GitHub platform which Renovate supports, then you need to configure a github.com Personal Access Token in Renovate in order to fetch changelogs.</p> <p>Read Running Renovate, GitHub.com token for changelogs to learn more.</p>"},{"location":"key-concepts/changelogs/#troubleshooting-missing-changelogs","title":"Troubleshooting missing changelogs","text":"<p>Follow these steps to find out why Renovate does not find a changelog:</p> <ol> <li>The datasource for this package does not support sourceUrls.</li> <li>If the registry fundamentally does not provide this data, then the only possibility is for it to be manually populated through PRs to Renovate's source code</li> <li>If the registry provides source URLs in its response but Renovate does not understand the required fields, then raise a feature request with examples, or better yet a Pull Request to implement support for the source URL parsing/mapping yourself</li> <li>Sometimes self-hosted versions of registries don't include the full metadata compared to what the public registries do</li> <li>The package was published without source URL information being included.</li> <li>For example, occasionally <code>npm</code> packages don't have <code>repository</code> fields included</li> <li>For example, Docker images regularly do not have the required <code>LABEL</code> entry</li> <li>Renovate cannot access the source repository</li> <li>This is typically a concern for private repositories only</li> <li>Check if the token Renovate uses has access rights to the repository you need it to access</li> <li>Renovate cannot detect the file names or release name convention within the repository</li> <li>In this case an enhancement to Renovate might be needed to better detect the releases/formats, assuming the package/repository has a reasonable convention to follow</li> <li>Renovate cannot detect the release version in the changelog file</li> <li>Ensure the changelog header for the section contains the version being released, or in the case of a monorepo where this may not be the case, ensure the body has a line that contains both the package name and the version.</li> <li>Otherwise an enhancement to Renovate might be needed to better detect the versions, assuming the package/repository has a reasonable convention to follow</li> </ol> <p>If none of this helps, search the Renovate issues and discussions to see if this is a known problem.</p>"},{"location":"key-concepts/changelogs/#advice-for-package-maintainers","title":"Advice for package maintainers","text":"<p>This section is for package maintainers that want to make sure Renovate can see their changelogs.</p> <p>There isn't much information to add other than what's already written above.</p> <p>Make sure that you have the required source URL in your package metadata, not just in your repository but also in the final data which the registry returns. For example, we have seen cases where the <code>repository</code> field in npm's <code>package.json</code> is populated correctly in the repository, but stripped out as part of the publishing process.</p>"},{"location":"key-concepts/changelogs/#let-renovate-understand-your-versioning-and-changelogs","title":"Let Renovate understand your versioning and changelogs","text":"<p>In general, Renovate can understand your versions and changelogs best when you:</p> <ul> <li>Use SemVer versioning, so <code>major.minor.patch</code></li> <li>Use the <code>semantic-release</code> bot to automate the release process</li> </ul> <p>Try to avoid things like:</p> <ul> <li>Stripping out the trailing <code>.0</code> unnecessarily (e.g. having a package <code>3.1.0</code> on a registry but using only <code>3.1</code> in your changelogs)</li> <li>Using \"Release names\" in a way which makes the actual version hard to discern (e.g. instead of <code>3.0.0</code> you title your release notes <code>Big news! v3 is here</code></li> </ul>"},{"location":"key-concepts/changelogs/#npm-package-maintainers","title":"npm package maintainers","text":"<p>As maintainer, make sure the <code>package.json</code> has a filled in <code>repository</code> field, read the npm Docs, configuring npm <code>repository</code> field to learn more. If your repository uses the monorepo pattern make sure each <code>package.json</code> file has a <code>repository</code> field.</p>"},{"location":"key-concepts/changelogs/#maven-package-maintainers","title":"maven package maintainers","text":"<p>Read <code>maven</code> datasource, making your changelogs fetchable.</p>"},{"location":"key-concepts/changelogs/#docker-image-maintainers","title":"Docker image maintainers","text":"<p>Read the Docker datasource docs.</p>"},{"location":"key-concepts/changelogs/#nuget-package-maintainers","title":"NuGet package maintainers","text":"<p>See Renovate issue #14128 about using NuGet's changelogs.</p>"},{"location":"key-concepts/dashboard/","title":"Introduction","text":"<p>Renovate has a Dependency Dashboard that shows an overview of the state of your repositories' dependencies.</p> <p>When the Dependency Dashboard is enabled, Renovate will create a new issue in the repository. This issue has a \"dashboard\" where you can get an overview of the status of all updates.</p> <p>Having the Dependency Dashboard also enables the concept of an \"approval\" workflow for new upgrades, either for selected dependencies (recommended) or even for all.</p>"},{"location":"key-concepts/dashboard/#supported-platforms","title":"Supported platforms","text":"<p>The Dependency Dashboard requires that the host platforms supports the concept of issues with dynamic Markdown checkboxes. Read our FAQ, Renovate core features not supported on all platforms to see if your platform can use the Dependency Dashboard feature.</p>"},{"location":"key-concepts/dashboard/#how-to-enable-the-dashboard","title":"How to enable the dashboard","text":"<p>To turn on the Dashboard manually, add the <code>:dependencyDashboard</code> preset to your <code>extends</code> array in the Renovate configuration file:</p> <pre><code>{\n  \"extends\": [\"schedule:automergeDaily\", \":dependencyDashboard\"]\n}\n</code></pre> <p>Or set <code>dependencyDashboard</code> to <code>true</code>:</p> <pre><code>{\n  \"dependencyDashboard\": true\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#how-to-disable-the-dashboard","title":"How to disable the dashboard","text":"<p>To disable the Dependency Dashboard, add the preset <code>:disableDependencyDashboard</code> or set <code>dependencyDashboard</code> to <code>false</code>.</p> <pre><code>{\n  \"extends\": [\"config:recommended\", \":disableDependencyDashboard\"]\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#use-cases","title":"Use cases","text":"<p>This section explains some common use cases where having the Dependency Dashboard can help.</p>"},{"location":"key-concepts/dashboard/#warnings-for-deprecated-dependencies","title":"Warnings for deprecated dependencies","text":"<p>If Renovate finds:</p> <ul> <li>packages flagged as deprecated on their registry, or</li> <li>packages that have a community-sourced replacement PR available</li> </ul> <p>Then Renovate adds a prominent warning about these packages near the top of the Dependency Dashboard. Here is an example of how this can look:</p> <p>The following dependencies are deprecated:</p> Datasource Name Replacement? npm <code>airbnb-prop-types</code> npm <code>left-pad</code>"},{"location":"key-concepts/dashboard/#abandonment-detection","title":"Abandonment detection","text":"<p>Renovate includes the <code>abandonments:recommended</code> preset (automatically included in <code>config:best-practices</code>) to help identify potentially abandoned packages. This preset:</p> <ul> <li>Sets a default <code>abandonmentThreshold</code> of <code>1 year</code> for all packages</li> <li>Includes community-sourced overrides for packages that appear abandoned but are still maintained</li> <li>Prevents updates to truly abandoned packages while allowing updates to packages with irregular release schedules</li> </ul> <p>Usage:</p> <pre><code>{\n  \"extends\": [\"abandonments:recommended\"]\n}\n</code></pre> <p>You can contribute additional overrides by updating the <code>abandonments.json</code> file.</p>"},{"location":"key-concepts/dashboard/#visibility-into-rejecteddeferred-updates","title":"Visibility into rejected/deferred updates","text":"<p>Renovate's Dependency Dashboard shows an overview of all updates that are still \"to do\".</p> <p>If you close an update PR from Renovate without merging, the Dashboard will list this update in the Closed/Ignored section. If you later change your mind about the update, you can get a new PR by selecting the corresponding checkbox on the dashboard.</p>"},{"location":"key-concepts/dashboard/#dependency-dashboard-approval-workflow","title":"Dependency Dashboard Approval workflow","text":"<p>Sometimes you want Renovate to wait for your approval before creating an update PR. You can customize this \"wait for approval\" behavior however you like best.</p> <p>At a high level the options are:</p> <ul> <li>Require approval for all updates</li> <li>Require approval for a type of updates (<code>major</code> for example)</li> <li>Require approval for specific packages</li> </ul> <p>You can mix and match these options as well.</p>"},{"location":"key-concepts/dashboard/#require-approval-for-all-updates","title":"Require approval for all updates","text":"<p>We do not recommend that you require approval for all updates. When you require prior approval, you need to check the dashboard issue regularly to check for important updates. You'll probably forget to check often enough, and out of sight means out of mind!</p> <p>Maybe you find Renovate too noisy, and want to opt-out of getting automatic updates whenever they're ready.</p> <p>In this case, you can tell Renovate to wait for your approval before making any pull requests. This means that you have full control over when you get updates.</p> <p>But vulnerability remediation PRs will still get created immediately without requiring approval.</p> <p>To require manual approval for all updates, add the <code>:dependencyDashboardApproval</code> presets to the <code>extends</code> array in your Renovate configuration file:</p> <pre><code>{\n  \"extends\": [\"config:recommended\", \":dependencyDashboardApproval\"]\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#require-approval-for-major-updates","title":"Require approval for major updates","text":"<p>Major updates often have breaking changes which require manual changes in your code before they can be merged. So maybe you only want to get major updates when you have sufficient time to check them carefully.</p> <p>Dependency Dashboard Approval is far superior to disabling major updates because at least you can fully see what's pending on the dashboard, instead of updates being totally invisible.</p> <p>If you want to require approval for major updates, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>major</code> object:</p> <pre><code>{\n  \"major\": {\n    \"dependencyDashboardApproval\": true\n  }\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#require-approval-for-specific-packages","title":"Require approval for specific packages","text":"<p>Sometimes you only want to update specific packages when you say so.</p> <p>Maybe a package doesn't follow Semantic Versioning, and has breaking changes on every new release, so you want to update on your terms.</p> <p>Or maybe you have a package that updates too rapidly for you to keep up with, and you want to update once in a while manually.</p> <p>If you want to approve specific packages, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>packageRules</code> entry where you have defined a specific package or pattern.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageName\": [\"@somescope/**\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"key-concepts/how-renovate-works/","title":"Introduction","text":"<p>Renovate usually performs these steps:</p> <ul> <li>Cloning the repository</li> <li>Scanning package files to extract dependencies</li> <li>Looking up registries to check for updates</li> <li>Applying any grouping rules defined</li> <li>Pushing branches and raising Pull Requests</li> </ul> <p>Because Renovate must support a lot of dependency naming and versioning conventions, it has modules for each known convention. You can contribute your own modules, if you want.</p>"},{"location":"key-concepts/how-renovate-works/#modules","title":"Modules","text":"<p>Renovate's modules are:</p> <ul> <li>datasource</li> <li>manager</li> <li>platform</li> <li>versioning</li> </ul> <p>Renovate uses these modules in order:</p> <ol> <li>The platform module interacts with the source control platform and clones the repository</li> <li>The manager module looks for files based on their name and extracts the dependencies (each dependency has a datasource)</li> <li>The datasource module looks up versions of the dependency</li> <li>The versioning module validates and sorts the returned versions</li> </ol> <p>For example:</p> <ol> <li>The <code>gitlabci</code> manager finds a dependency: <code>python:3.10-alpine</code> which has the <code>docker</code> datasource</li> <li>The <code>docker</code> datasource looks for versions and finds: <code>[python:3.9,python:3.9-alpine,python:3.10,python:3.10-alpine,python:3.11,python:3.11-alpine]</code></li> <li>The <code>docker</code> versioning returns <code>python:3.11-alpine</code>, because that version is compatible with <code>python:3.10-alpine</code></li> </ol>"},{"location":"key-concepts/how-renovate-works/#workflow","title":"Workflow","text":"<p>Here's an overview of the workflow:</p> <pre><code>flowchart TB\n    subgraph INITIALIZATION\n        direction TB\n        MC[Merge configurations &lt;br&gt; most important to least: &lt;br&gt; cli &gt; env &gt; file &gt; default]\n        MC --&gt; IP[Initialize platform]\n        IP --&gt; AD[Query the platform for repositories]\n        AD --&gt; NFIL[Narrow the list with filters]\n    end\n\n    subgraph REPOSITORY\n       direction TB\n       FER{{For each repository}}\n\n      subgraph EXTRACTD[EXTRACT DEPENDENCIES]\n          direction TB\n          CLBRANCH[Extract base branches]\n          CLBRANCH --&gt; VULN[Check for vulnerabilities]\n          VULN --&gt; CC{{For each manager}}\n          CC --&gt;|manager A| CD[\"...\"]\n          CC --&gt;|manager B| CCF[\"match files\"]\n          CCF --&gt; CFEF{{For each file}}\n          CFEF --&gt;|file 1| CCD1[Extract dependency]\n          CFEF --&gt;|file 2| CCD2[...]\n      end\n\n      subgraph LOOKUP[LOOK UP UPDATES]\n          direction TB\n          UC{{For each manager}}\n          UC --&gt;|manager A| UD[\"...\"]\n          UC --&gt;|manager B| UFEF{{For each file}}\n          UFEF --&gt;|file 1| FED{{For each dependency}}\n          UFEF --&gt;|file 2| FED2[...]\n          FED --&gt;|dep 1| D1[...]\n          D1 -..-&gt; CU\n          FED --&gt;|dep 2| D2[use datasource to &lt;br&gt; fetch versions]\n          D2 --&gt; J[use versioning to find &lt;br&gt; next valid update]\n          FED2 -...-&gt; CU\n          UD -....-&gt; CU\n          J --&gt; CU[Look up updates]\n      end\n\n      subgraph WRITEU[WRITE UPDATES]\n        direction TB\n        FEU{{For each update}}\n        FEU --&gt; AUCOND[Check if branch needed: &lt;br&gt; existing/rebase/concurrent amount]\n        AUCOND --&gt; AU[Create branch&lt;br&gt;Apply update&lt;br&gt;Create PR]\n      end\n\n      subgraph FINALIZE[FINALIZE]\n      direction TB\n        CM[Check for config migration]\n        CM --&gt; CSB[Clean stale branches]\n\n      end\n\n      FER --&gt; IRPO[Initialize repository]\n\n      IRPO --&gt; EXTRACTD\n      EXTRACTD --&gt; LOOKUP\n\n      LOOKUP --&gt; WRITEU\n\n      WRITEU --&gt; FINALIZE\n\n    end\n\n    INITIALIZATION --&gt; REPOSITORY</code></pre>"},{"location":"key-concepts/presets/","title":"Presets","text":"<p>This document describes Renovate configuration presets and why you should use them.</p> <p>To learn how to create your own presets, how to host them, and how to extend from presets read the Shareable Config Presets page.</p>"},{"location":"key-concepts/presets/#why-you-should-use-presets","title":"Why you should use presets","text":"<p>Use presets to:</p> <ul> <li>Set up the bot with good default settings</li> <li>Avoid duplicating your configuration</li> <li>Share your configuration with others</li> <li>Use somebody else's configuration as-is, or extend it with your own rules</li> </ul>"},{"location":"key-concepts/presets/#how-to-use-presets","title":"How to use presets","text":"<p>Say you're using the <code>config:recommended</code> preset, and want to pin your GitHub Action digests. Instead of writing your own Renovate config, you search the docs, and find the <code>helpers:pinGitHubActionDigests</code> preset. Then you add the preset to the <code>\"extends\"</code> array in your Renovate configuration file:</p> <pre><code>{\n  \"extends\": [\"config:recommended\", \"helpers:pinGitHubActionDigests\"]\n}\n</code></pre> <p>In the example above, Renovate follows the rules from the <code>config:recommended</code> preset, plus the rules for <code>helpers:pinGitHubActionDigests</code>.</p> <p>Tip</p> <p>If there is a logical conflict between presets, then the last preset in the <code>\"extends\"</code> array \"wins\".</p>"},{"location":"key-concepts/presets/#managing-config-for-many-repositories","title":"Managing config for many repositories","text":"<p>If you manage the Renovate configuration for many repositories, we recommend that you:</p> <ol> <li>Create a global preset configuration</li> <li>Extend from the global preset in all of the repositories that should use your global preset as base</li> </ol> <p>This way, when you want to change your global Renovate configuration, you only need to edit the global preset file.</p>"},{"location":"key-concepts/presets/#presets-are-modular","title":"Presets are modular","text":"<p>Preset configs are modular: a preset can be as small or large as you need. A preset can even extend from other presets.</p>"},{"location":"key-concepts/presets/#built-in-presets","title":"Built-in presets","text":"<p>Renovate comes with many built-in presets. We recommend you browse Renovate's default presets. Again, to use the preset: add it to the <code>\"extends\"</code> array in your Renovate config file.</p>"},{"location":"key-concepts/presets/#contributing-a-new-built-in-preset","title":"Contributing a new built-in preset","text":"<p>If you have a Renovate config that may help others, you can put it into Renovate's built-in presets. Read Contributing to presets to learn how.</p>"},{"location":"key-concepts/presets/#summary","title":"Summary","text":"<p>In short:</p> <ul> <li>Browse Renovate's default presets, or our other presets, to find helpful presets</li> <li>Use presets by putting them in the <code>\"extends\"</code> array in your Renovate config file</li> <li>To manage the Renovate configuration for many repositories at once, create a global preset config file</li> <li>The order of presets matters: in a logical conflict, the last preset in the <code>\"extends\"</code> array \"wins\"</li> </ul>"},{"location":"key-concepts/pull-requests/","title":"Pull requests","text":"<p>This page describes how Renovate pull requests work.</p>"},{"location":"key-concepts/pull-requests/#how-renovate-finds-existing-prs","title":"How Renovate finds existing PRs","text":"<p>Renovate does not need to maintain any database/state about open or closed Pull Requests. Instead, it uses the code platform's APIs to search and find such PRs.</p> <p>Renovate finds existing PRs (open or closed) by matching both:</p> <ul> <li>the branch name, for example: <code>renovate/lodash-4.x</code>,</li> <li>and the Pull Request title, for example: <code>Update lodash to v4.17.21</code></li> </ul> <p>In cases like the above, there is typically one existing PR with a matching branch name and PR title. But if you group PRs and use titles like \"All non-major updates\", then multiple past PRs may match.</p>"},{"location":"key-concepts/pull-requests/#normal-prs","title":"Normal PRs","text":"<p>As explained above, Renovate PRs normally have some \"uniqueness\" in their title relating to the version in the upgrade. When you close a \"unique\" PR, Renovate assumes you don't want to see that PR again in future, for example:</p> <ol> <li>You ignored <code>lodash@4.17.21</code> by closing Renovate's PR</li> <li>Renovate assumes you don't want any updates to <code>4.17.21</code> of <code>lodash</code></li> <li>Renovate creates a new PR when the branch + title \"uniqueness\" exists again, like when <code>lodash@4.17.22</code> releases</li> </ol> <p>Renovate behaves similarly for <code>major</code> updates, for example:</p> <ol> <li>You ignored a <code>major</code> update for Lodash (pr title: \"Update lodash to v4\") by closing Renovate's PR</li> <li>Renovate assumes you don't want any updates to <code>v4</code> of <code>lodash</code></li> <li>Renovate won't create any update PRs for <code>v4</code> of <code>lodash</code>, even if there are newer versions of <code>v4</code></li> </ol>"},{"location":"key-concepts/pull-requests/#immortal-prs","title":"Immortal PRs","text":"<p>Some Renovate pull requests have a section like this:</p> <p>\ud83d\udc7b Immortal: This PR will be recreated if closed unmerged. Get config help if that's undesired.</p> <p>An immortal PR keeps popping up again after you close it.</p> <p>This document explains why we have immortal PRs, and how you can fix them.</p>"},{"location":"key-concepts/pull-requests/#why-we-have-immortal-prs","title":"Why we have immortal PRs","text":"<p>First off, we don't have immortal PRs for some philosophical reason like: \"don't ignore this update, it's good for you!\". We have no good way to ignore some PRs after they're closed.</p>"},{"location":"key-concepts/pull-requests/#branch-name-and-pr-title-are-cache-keys","title":"Branch name and PR title are cache keys","text":"<p>Renovate uses the branch name and PR title like a cache key. If the same key exists and the PR was closed, then we ignore the PR.</p>"},{"location":"key-concepts/pull-requests/#cache-keys-can-cause-problems","title":"Cache keys can cause problems","text":"<p>Let's say you have an \"All non-major updates\" PR. If you close the PR, and Renovate ignores it based on the PR title, then you would never get a non-major update again.</p>"},{"location":"key-concepts/pull-requests/#only-unique-version-prs-can-be-ignored","title":"Only unique version PRs can be ignored","text":"<p>Renovate can only ignore PRs if they have a unique version, like \"to v16.1.2\" or \"to v16\" in the title.</p>"},{"location":"key-concepts/pull-requests/#grouped-updates-with-different-versions","title":"Grouped updates with different versions","text":"<p>The problem comes when there are groups of updates which have different versions. Then the update becomes \"Update react (major)\", which is not safely ignorable, instead of \"Update react to v16\".</p>"},{"location":"key-concepts/pull-requests/#future-plans-for-immortal-prs","title":"Future plans for immortal PRs","text":"<p>In the future we may embed metadata in each PR identifying the exact files and packages + versions that PR contains. Then we could allow such PRs to be closed/ignored but then as soon as there's any chance to files/packages/versions being updated then we'd be cache busted and create a new PR. If you regularly wish to close immortal PRs, it's an indication that you may be grouping too widely.</p>"},{"location":"key-concepts/pull-requests/#how-to-fix-immortal-prs","title":"How to fix immortal PRs","text":"<p>Avoid grouping dependencies together which have different versions, or which you have a high chance of wanting to ignore. If you have immortal PRs which you want to keep closed, then set <code>\"recreateWhen\": \"never\"</code>.</p>"},{"location":"key-concepts/pull-requests/#major-updates-require-dependency-dashboard-approval","title":"Major updates require Dependency Dashboard approval","text":"<p>Avoid grouping major upgrades together unless they are related dependencies. Instead, set <code>\"dependencyDashboardApproval\": true</code> for major updates so that you have control about when they are created.</p>"},{"location":"key-concepts/pull-requests/#ignoring-prs","title":"Ignoring PRs","text":"<p>Close a Renovate PR to ignore it.</p> <p>Note</p> <p>Renovate re-creates any PRs that are marked \"immortal\". This means that any immortal PR you close, pops up again the next time Renovate runs. To ignore immortal PRs, follow the advice in the How to fix immortal PRs section.</p>"},{"location":"key-concepts/scheduling/","title":"Renovate scheduling","text":"<p>This document describes Renovate's scheduling.</p>"},{"location":"key-concepts/scheduling/#default-behavior","title":"Default behavior","text":"<p>On the backend side, Renovate bot runs as often as its administrator has configured Renovate to run. For example, the administrator configure Renovate to begin its runs hourly, daily, or outside office hours only. How often Renovate runs per-repository subsequently depends on how many repositories there are to check, and how many updates are pending for each repository at the time. If the backend configuration for Renovate means it runs scheduled jobs per-repo approximately every X hours, it is not possible for repository configuration to reduce that to less than X, or to force Renovate to run at exact times on specific repos.</p>"},{"location":"key-concepts/scheduling/#default-timezone","title":"Default timezone","text":"<p>By default, Renovate schedules use the UTC timezone. But you can set your own timezone with the <code>timezone</code> config option.</p>"},{"location":"key-concepts/scheduling/#how-long-renovate-takes-to-run-when-scheduled","title":"How long Renovate takes to run when scheduled","text":"<p>How often Renovate processes individual repositories depends on:</p> <ul> <li>How often Renovate runs</li> <li>How many repositories Renovate is onboarded to, in your organization or user account</li> <li>How much work Renovate must do in each repository</li> </ul> <p>The table below shows how the number of dependencies and repositories affect Renovate run times.</p> Dependencies to update Repositories with the dependencies Run time 1 1 Very fast 1 10 Fast 1 100 Slow 50 1 Slow 100 100 Very slow"},{"location":"key-concepts/scheduling/#global-schedule-vs-specific-schedule","title":"Global schedule vs specific schedule","text":"<p>At a high level, you have two ways to schedule Renovate, a \"global way\" and a \"specific way\":</p> Way to schedule Renovate What this does Notes Global Decides when Renovate runs. This schedule is usually controlled by your organization's bot administor. For the Mend Renovate app, Mend decides when Renovate runs. Specific When Renovate runs it checks the schedule to see if it should look for updates to a specific dependency. Usually set in the <code>renovate.json</code> config file, or similar config file. <p>Renovate can only update a dependency if both of these conditions are true:</p> <ul> <li>The Renovate program is running (on your hardware, or on Mend's hardware)</li> <li>The schedule set in the Renovate config file(s) allows Renovate to look for updates for that dependency</li> </ul>"},{"location":"key-concepts/scheduling/#managing-update-frequency","title":"Managing update frequency","text":"<p>Because Renovate defaults to \"always on\" and \"open PRs right away\" it can overwhelm you with \"new PR\" notifications. Use the schedule to control when Renovate looks for updates, for example:</p> <ul> <li>Limit Renovate to check for updates in your repository to once a week. (In your repository's Renovate config file)</li> <li>Set update schedules for a package, or group of packages</li> </ul>"},{"location":"key-concepts/scheduling/#scheduling-use-cases","title":"Scheduling use cases","text":"<p>You can use the scheduling tools to:</p> <ul> <li>Run Renovate outside office hours, to free up continous integration resources for your developers</li> <li>Get updates for certain packages on a regular interval, instead of right away</li> <li>Reduce Renovate bot PR notifications during the day</li> </ul>"},{"location":"key-concepts/scheduling/#customizing-the-schedule","title":"Customizing the schedule","text":"<p>Use the <code>timezone</code> and <code>schedule</code> configuration options to control when Renovate runs.</p> <p>At a high level you need to follow these steps:</p> <ol> <li>Tell Renovate what <code>timezone</code> you want to use</li> <li>Learn about the scheduling syntax</li> <li>Optional set an \"in-repository schedule\"</li> <li>Optional set packageRules with a custom <code>schedule</code> for a package, or group of packages</li> </ol>"},{"location":"key-concepts/scheduling/#setting-your-timezone","title":"Setting your timezone","text":"<p>By default, Renovate's schedules use the UTC timezone.</p> <p>If you want Renovate to use your local time, use the <code>timezone</code> configuration option. You must use a valid IANA time zone!</p> Setting a specific timezone in your local config file<pre><code>{\n  \"timezone\": \"America/Los_Angeles\"\n}\n</code></pre> <p>Also read the <code>timezone</code> config option docs.</p>"},{"location":"key-concepts/scheduling/#scheduling-syntax","title":"Scheduling syntax","text":"<p>After you've set your local timezone, you can set \"days of the week\" or \"hours of the day\" in which Renovate is allowed to make changes.</p>"},{"location":"key-concepts/scheduling/#recommended-cron-syntax","title":"Recommended cron syntax","text":"<p>We recommend you use the <code>cron</code> syntax in your Renovate schedules.</p> Description Cron syntax every weekend <code>* * * * 0,6</code> before 5:00am <code>* 0-4 * * *</code> after 10pm and before 5am every weekday <code>* 22-23,0-4 * * 1-5</code> on friday and saturday <code>* * * * 5,6</code> every 3 months on the first day of the month <code>* * 1 */3 *</code> <p>Note</p> <p>For Cron schedules, you must use the <code>*</code> wildcard for the minutes value, as Renovate doesn't support minute granularity. And the cron schedule must have five parts.</p>"},{"location":"key-concepts/scheduling/#deprecated-breejslater-syntax","title":"Deprecated breejs/later syntax","text":"<p>This section explains the deprecated <code>@breejs/later</code> syntax. We plan to remove the <code>@breejs/later</code> library in a future major Renovate release if we can find a way to migrate all valid schedules to cron syntax. Due to this upcoming change, we strongly recommend you use <code>cron</code> schedules.</p> <p>Renovate uses the <code>@breejs/later</code> library to parse the text. For Renovate to understand the schedule, you must use valid <code>@breejs/later</code> syntax. Read the @breejs/later parses docs at breejs.github.io for more details. The <code>@breejs/later</code> library also controls the interpretation of \"days\", time_before\", and \"time_after\" keywords.</p> Valid, but deprecated later syntax Cron syntax every weekend <code>* * * * 0,6</code> before 5:00am <code>* 0-4 * * *</code> after 10pm and before 5am every weekday <code>* 22-23,0-4 * * 1-5</code> on friday and saturday <code>* * * * 5,6</code> every 3 months on the first day of the month <code>* * 1 */3 *</code> <p>Warning</p> <p>Renovate does not support scheduled minutes or \"at an exact time\" granularity. Granularity must be at least one hour.</p>"},{"location":"key-concepts/scheduling/#in-repository-schedule-configuration","title":"In-repository schedule configuration","text":"<p>Important: when the Renovate process runs is usually controlled by the bot admin, using tools such as <code>cron</code>. For the Mend Renovate App, the Mend maintainers control when the Renovate process runs, usually hourly.</p> <p>If you control the hardware that Renovate runs on, we recommend you:</p> <ul> <li>Schedule enough time on the hardware for Renovate to process your repositories</li> <li>Avoid schedules like \"Run Renovate for an hour each Sunday\" as you will run into problems</li> </ul> <p>Some config examples:</p> Renovate should run each day before 4 am<pre><code>{\n  \"description\": \"Schedule daily before 4 AM\",\n  \"schedule\": [\"* 0-3 * * *\"]\n}\n</code></pre> Renovate should run outside of common office hours<pre><code>{\n  \"description\": \"Schedule during typical non-office hours on weekdays (i.e., 10 PM - 5 AM) and anytime on weekends\",\n  \"schedule\": [\"* 0-4,22-23 * * 1-5\", \"* * * * 0,6\"]\n}\n</code></pre>"},{"location":"key-concepts/scheduling/#schedule-presets","title":"Schedule presets","text":"<p>Renovate has built-in presets for common schedules, like \"once a week\", \"outside office hours\" and so on. Before you create your own custom schedule, check if the Schedule Presets has what you need.</p> <p>The preset schedules only decide when Renovate looks for updates, and do not affect any specific dependencies/packages.</p>"},{"location":"key-concepts/scheduling/#schedule-when-to-update-specific-dependencies","title":"Schedule when to update specific dependencies","text":"<p>With Renovate's scheduling features you can \"limit the noise\" from frequently updating dependencies, like the AWS SDK:</p> Restrict AWS SDK to weekly updates<pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule AWS SDK updates on Sunday nights (9 PM - 12 AM)\",\n      \"matchPackageNames\": [\"@aws-sdk/*\"],\n      \"schedule\": [\"* 21-23 * * 0\"]\n    }\n  ]\n}\n</code></pre> <p>Important tips for the <code>\"schedule\"</code> property:</p> <ul> <li>Always use the array syntax <code>[]</code>, even if you only set a single schedule</li> <li>Separate entries with a comma, like this: <code>[\"cron for schedule 1\", \"cron for schedule 2\"]</code></li> <li>Multiple entries in the <code>\"schedule\"</code> array are interpreted with the Boolean OR logic</li> </ul> <p>Read the schedule config option documentation to learn more.</p>"},{"location":"mend-hosted/credentials/","title":"Using secrets with Mend cloud Apps","text":"<p>The information on this page is for the Mend-hosted cloud apps:</p> <ul> <li>Renovate App on GitHub</li> <li>Mend App on Bitbucket</li> <li>Mend App on Azure DevOps</li> </ul> <p>If you self-host, you can skip reading this page.</p>"},{"location":"mend-hosted/credentials/#migrate-secrets-in-your-renovate-config-file","title":"Migrate secrets in your Renovate config file","text":"<p>The Mend Renovate cloud apps no longer read <code>encrypted</code> secrets from Renovate config files in your repositories. You must migrate any secrets you currently keep in a Renovate config file, and upload them as secrets to org or repo settings pages on developer.mend.io. To add secrets you must have admin-level rights.</p> <p>Read Migrating encrypted secrets from Repo Config to App Settings to learn more.</p>"},{"location":"mend-hosted/credentials/#managing-secrets-via-the-web-ui","title":"Managing secrets via the Web UI","text":"<p>This section explains how to manage secrets for the Mend-hosted cloud apps via the Web UI.</p> <p>Only administrators of an Org or Repo can manage the secrets for that Org or Repo.</p>"},{"location":"mend-hosted/credentials/#adding-a-secret-through-the-ui","title":"Adding a secret through the UI","text":"<p>To add a secret for the Mend cloud app:</p> <ol> <li>Go to the web UI at developer.mend.io.</li> <li>Open your organization/repository settings.</li> <li>Put the secret in the Credentials section:</li> </ol> <p></p> <ol> <li>Reference the secret from Renovate config files inside the repo.    Alternatively, you can use the Host Rules UI (see below).</li> </ol> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.MY_ORG_SECRET }}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"mend-hosted/credentials/#adding-a-host-rule-through-the-ui","title":"Adding a host rule through the UI","text":"<p>You can centrally add/configure Host Rules through the Mend UI as an alternative to including them in Renovate presets.</p> <ol> <li>Open the Credentials section of the settings page for the relevant Org or Repo.</li> <li>Select <code>ADD HOST RULE</code> to open the \"Add a Host Rule\" dialog box.</li> </ol> <p></p> <ol> <li>Fill out the details for your host rule.</li> </ol> <p>As an example, if you are a Bitbucket or Azure DevOps user, and you want to specify a github.com token to fetch release notes and enable github-based datasources, you could create a host rule like this:</p> <p></p>"},{"location":"mend-hosted/credentials/#organization-secrets-vs-repository-secrets","title":"Organization secrets vs repository secrets","text":""},{"location":"mend-hosted/credentials/#secret-scope","title":"Secret scope","text":"<p>Secrets can be scoped to your organization or to your repository:</p> Secret scoped to your What will happen? Organization Secrets are inherited by all repositories in your organization Repository Secrets are referenced by that repository only"},{"location":"mend-hosted/credentials/#make-changes-on-the-right-page","title":"Make changes on the right page","text":"<p>The web UI has two settings pages. One page is for the organization, and the other page is for the repository.</p> <p>Make sure you're making the changes on the right page!</p>"},{"location":"mend-hosted/credentials/#example","title":"Example","text":"<p>The screenshot shows inherited organization secrets and specific repository secrets.</p>"},{"location":"mend-hosted/credentials/#managing-organization-level-secrets","title":"Managing organization-level secrets","text":"<p>The Installed Repositories table means you are on your organization's page. Select the Settings button to manage your organization secrets:</p> <p></p>"},{"location":"mend-hosted/credentials/#managing-repository-level-secrets","title":"Managing repository-level secrets","text":"<p>The Recent jobs table means you are on your repository's page. Select the Settings button to manage your repository secrets:</p> <p></p>"},{"location":"mend-hosted/credentials/#automating-secrets-via-apis-github-only","title":"Automating secrets via APIs (GitHub only)","text":"<p>Administrators of GitHub organizations and repositories can use the Developer Platform APIs to manage secrets.</p> <p>See the Developer Platform API documentation for details.</p>"},{"location":"mend-hosted/credentials/#authenticating-the-apis","title":"Authenticating the APIs","text":"<p>Calls to the APIs require authentication with a personal access token from the GitHub user making the request. The token must be included in the request header as the <code>authorization</code> property.</p> <p>You can use a classic token or a fine-grained token. Mend recommends the use of fine-grained tokens for enhanced security.</p>"},{"location":"mend-hosted/credentials/#scopes-and-permissions-for-tokens","title":"Scopes and permissions for tokens","text":"<p>No additional scopes or permissions need to be added when calling APIs on public repositories. When calling APIs on private repositories, the following scopes and permissions are required:</p> <ul> <li>Classic tokens require <code>repo</code> scope (Full control of private repositories)</li> <li>Fine-grained tokens must set the \"Resource owner\" as the org that the API is being called on, and must have a minimum of <code>metadata:read-only</code> permission on the selected repositories.</li> </ul>"},{"location":"mend-hosted/credentials/#fine-grained-token-example","title":"Fine-grained token example","text":"<p>To create a fine-grained token for the APIs, follow these steps:</p> <ul> <li>Provide a name for the token in the \"Token name\" field.</li> <li>[Optional] Provide a description for the token.</li> </ul> <p></p> <ul> <li>Set the \"Resource owner\" to be the User or Org for the APIs that will be called.</li> </ul> <p></p> <ul> <li> <p>Choose an expiry date in the \"Expiration\" field.</p> </li> <li> <p>Choose the \"Repository access\" setting. If using APIs to update secrets on a private-repository, choose \"All repositories\" or \"Only selected repositories\".</p> </li> <li> <p>In the \"Permissions\" section, add permissions for \"Metadata\" (read-only).</p> </li> </ul> <p></p>"},{"location":"mend-hosted/credentials/#known-issues","title":"Known Issues","text":""},{"location":"mend-hosted/credentials/#error-deleting-host-rule-from-developer-portal","title":"Error deleting host rule from Developer Portal","text":"<p>Problem: When deleting a host rule from the Developer Portal, an error is shown \"Error deleting host rule\".</p> <p>Workaround: Update the host rule to point to a valid host that you are not using in your repo. This way, the host rule will have no effect.</p>"},{"location":"mend-hosted/github-com-token/","title":"Purpose of github.com Token","text":"<p>Users of Mend's Renovate apps on Bitbucket Cloud and Azure DevOps need to provide a github.com token retrieve release notes and changelogs, plus some package files.</p> <p>If github.com credentials are not provided, Renovate will continue to run, but with the following limitations:</p> <ul> <li>release notes and changelogs will be disabled in Renovate pull requests</li> <li>lookups for packages hosted on github.com may fail due to rate limiting</li> </ul>"},{"location":"mend-hosted/github-com-token/#do-i-need-to-provide-a-githubcom-token","title":"Do I need to provide a github.com token?","text":""},{"location":"mend-hosted/github-com-token/#githubcom-cloud-users","title":"github.com (Cloud) users","text":"<p>If your repositories are hosted on github.com (Cloud) and you are using the Renovate App on GitHub, you do not need to provide a token for github.com because the Renovate App already has access to GitHub.</p>"},{"location":"mend-hosted/github-com-token/#bitbucket-and-azure-devops-users","title":"Bitbucket and Azure DevOps users","text":"<p>If your repositories are hosted on Bitbucket or Azure DevOps, you will need to provide a github.com token if you want your Renovate PRs to contain release notes and changelogs, or if you want updates on packages that live exclusively on github.com.</p> <p>If the github.com token is not provided, a warning will be shown in the Developer Portal and in the Dependency Dashboard.</p> <p></p>"},{"location":"mend-hosted/github-com-token/#how-to-provide-a-githubcom-token","title":"How to provide a github.com token","text":"<p>Renovate will accept a github.com token from any GitHub user. The token requires no special access or permissions.</p>"},{"location":"mend-hosted/github-com-token/#step-1-acquire-a-githubcom-token","title":"Step 1: Acquire a github.com token","text":"<ol> <li>Log in to github.com (any user)</li> <li>Navigate to Personal access tokens in Developer settings</li> <li>Choose <code>Generate new token</code> (either fine-grained or classic)</li> <li>Provide a <code>Token name</code> (fine-grained) or <code>Note</code> (optional for classic token)</li> <li>Choose the expiration date. (No additional scopes or repository permissions are required.)</li> <li>Press <code>Generate token</code></li> <li>Copy the token when it is presented on the screen</li> </ol> <p>[!IMPORTANT]</p> <p>Make sure to copy your personal access token now as you will not be able to see this again.</p>"},{"location":"mend-hosted/github-com-token/#step-2-add-the-token-to-the-orgrepo-credentials","title":"Step 2: Add the token to the Org/Repo credentials","text":"<p>Use the token generated in the previous step to provide a secret and host rule for the Org or Repos.</p> <p>[!NOTE]</p> <p>If a github.com token is added to the settings for an Org, Workspace or Project, the token will be inherited by of its all child repositories.</p> <ol> <li>Log in to Developer Portal</li> <li>Navigate to the Settings for an Org/Workspace/Project or a Repo</li> <li>Go to the <code>Credentials</code> settings page</li> <li>Choose <code>ADD SECRET</code> and create a secret to store the token</li> <li>Provide a <code>Secret Name</code> (e.g. <code>GITHUB_TOKEN</code>)</li> <li>Store the github.com token in the <code>Secret Value</code></li> <li>Choose <code>ADD HOST RULE</code> and create a host rule for <code>github</code></li> <li>Select host type <code>github</code></li> <li>Select Secret Type as <code>Token</code></li> <li>Select the github.com token as the secret</li> </ol> <p></p> <p>For more information about providing Secrets and Host Rules in the Developer Portal UI, see the documentation for Credentials.</p>"},{"location":"mend-hosted/hosted-apps-config/","title":"Mend-hosted Apps Configuration","text":"<p>This page:</p> <ul> <li>covers all non-default Renovate behavior of these Mend-hosted apps</li> <li>is a supplement to the CLI documentation</li> </ul> <p>Note</p> <p>For general configuration of the Renovate CLI, read the main Configuration/Overview section.</p>"},{"location":"mend-hosted/hosted-apps-config/#finding-the-logs","title":"Finding the logs","text":"<p>The Renovate logs for the Mend-hosted apps are on the Mend Developer Portal.</p> <p>Reading the logs can help you understand the configuration that Renovate used.</p>"},{"location":"mend-hosted/hosted-apps-config/#renovate-version","title":"Renovate Version","text":"<p>The Renovate version used by the Mend-hosted apps is updated manually by the maintainers of the app. The maintainers don't follow any release schedule or release cadence, but try to update at least once a week. This means the Mend Renovate App can lag a few hours to a week behind the open source version.</p> <p>Major releases of Renovate are held back until the maintainers are reasonably certain it works for most users.</p>"},{"location":"mend-hosted/hosted-apps-config/#which-version-is-the-mend-renovate-app-using","title":"Which version is the Mend Renovate app using?","text":"<p>Follow these steps to see which version the Mend Renovate app used for a specific job:</p> <ol> <li>Sign in to the Mend Developer Portal with your GitHub or Bitbucket account</li> <li>Select your organization</li> <li>Select a installed repository</li> <li>Select a job from the Recent jobs overview</li> <li>Select the Info Log Level from the dropdown menu</li> <li>You should see something like this:</li> </ol> <pre><code>INFO: Repository started\n{\n  \"renovateVersion\": \"39.11.5\"\n}\n</code></pre> <p>Tip</p> <p>The PRs that Renovate creates have a link to the \"repository job log\" in the footer of the PR body text.</p>"},{"location":"mend-hosted/hosted-apps-config/#onboarding-behavior","title":"Onboarding behavior","text":""},{"location":"mend-hosted/hosted-apps-config/#installing-renovate-into-all-repositories-leads-to-silent-mode","title":"Installing Renovate into all repositories leads to silent mode","text":"<p>If an Organization installed Renovate with \"All repositories\" (instead of \"Selected repositories\"), then Renovate defaults to \"Silent\" mode (<code>dryRun=lookup</code>). We chose this behavior because:</p> <ul> <li>Too often an account or org administrator selects the \"All repositories\" option and accidentally onboards hundreds of repositories, and</li> <li>By offering this option, it means that org administrators can install Renovate into \"All repositories\" without worrying about the noise, and let individual repository admins decide if/when to start onboarding</li> </ul>"},{"location":"mend-hosted/hosted-apps-config/#why-we-call-this-silent-mode","title":"Why we call this silent mode","text":"<ul> <li>It's not just no PRs, it's also no Issues</li> <li>It's a common term across other Mend capabilities, such as OSS security and SAST security, where status checks also use silent/non-silent</li> </ul>"},{"location":"mend-hosted/hosted-apps-config/#get-onboarding-prs-from-renovate-by-getting-out-of-silent-mode","title":"Get onboarding PRs from Renovate by getting out of silent mode","text":"<p>If Renovate is installed, and you can see a job log, but Renovate is not onboarding your repository: look for <code>dryRun</code> in the logs to confirm you are in Silent mode. To get a onboarding PR from Renovate, change to Interactive mode either at the Repository level or Organization level.</p>"},{"location":"mend-hosted/hosted-apps-config/#installing-renovate-into-selected-repositories-always-leads-to-onboarding-prs","title":"Installing Renovate into selected repositories always leads to onboarding PRs","text":"<p>Additionally, if an Organization is installed with \"Selected repositories\" then the app will change <code>onboardingNoDeps</code> to <code>\"enabled\"</code>. This change causes Renovate to create an Onboarding PR, even if Renovate does not detect any dependencies.</p>"},{"location":"mend-hosted/hosted-apps-config/#fork-processing","title":"Fork Processing","text":"<p>If an Organization installs Renovate with the \"All repositories\" option, then <code>forkProcessing</code> will remain set to its default value <code>disabled</code>. This means forked repositories are not onboarded, Renovate ignores them. To change this behavior, push a <code>renovate.json</code> file to the repository with <code>\"forkProcessing\": \"enabled\"</code>.</p> <p>If an Organization installs Renovate with \"Selected repositories\", we assume the organization wants to onboard all of the selected repositories, even forked repositories. Therefore we set <code>forkProcessing</code> to \"enabled\".</p>"},{"location":"mend-hosted/hosted-apps-config/#inherited-config","title":"Inherited config","text":"<p>The Mend Renovate app automatically applies inherited config to all installed repositories in an organization, if these conditions are met:</p> <ol> <li>A repository called <code>renovate-config</code> exists in the same organization, and the organization has installed the Mend Renovate app. The repository does not need to be onboarded</li> <li>Renovate finds a file called <code>org-inherited-config.json</code> in the <code>renovate-config</code> repository</li> </ol> <p>If you use a Mend-hosted app, you can not change the values for the <code>inheritConfigFileName</code> and the <code>inheritConfigRepoName</code> config options.</p> <p>To avoid wasted API calls, Mend apps will enable <code>inheritConfig</code> in an org only when Renovate detects a commit for the <code>inheritConfig</code> file. This means the <code>inheritConfig</code> file will not be detected if the Mend Renovate app is not installed on the <code>renovate-config</code> repository at the time of adding or changing the file. If you have such a file but the Mend app has not enabled <code>inheritConfig</code> in your org, try pushing a commit to that file and wait a minute to see if Renovate detects the change.</p>"},{"location":"mend-hosted/hosted-apps-config/#default-presets","title":"Default presets","text":"<p>The Mend Renovate app automatically adds the <code>mergeConfidence:all-badges</code> preset to the <code>extends</code> array. If you do not want the Merge Confidence badges: add the <code>mergeConfidence:all-badges</code> preset to the <code>ignorePresets</code> array.</p> <p>Additionally, the preset <code>config:recommended</code> is added to <code>onboardingConfig</code>.</p>"},{"location":"mend-hosted/hosted-apps-config/#allowed-post-upgrade-commands","title":"Allowed Post-upgrade commands","text":"<p>A limited set of approved <code>postUpgradeTasks</code> commands are allowed in the app. The commands are not documented, as they may change over time.</p> <p>You can find the allowed <code>postUpgradeTasks</code> commands in Renovate's log output, when searching for a log line which references <code>allowedCommands</code>.</p>"},{"location":"mend-hosted/job-scheduling/","title":"Job Scheduling &amp; Renovate Status","text":"<p>Mend Renovate Cloud will automatically schedule Renovate jobs to be run on installed repos. When the scheduler runs, selected repositories are added to the Job Queue, and eventually executed by the job runners.</p>"},{"location":"mend-hosted/job-scheduling/#job-schedulers","title":"Job Schedulers","text":"<p>There are four types of job schedulers, each with a different frequency and selection of repositories.</p> Job Scheduler Frequency Renovate statuses Active jobs 4-hourly (1) new, activated Inactive jobs Daily onboarded, onboarding, silent, failed Blocked Weekly timeout, resource-limit, kernel-out-of-memory, unknown All repos Monthly All installed repos (including disabled) <p>(1) Renovate Enterprise jobs are scheduled every hour for repositories on GitHub and Azure DevOps.</p>"},{"location":"mend-hosted/job-scheduling/#renovate-status","title":"Renovate Status","text":"<p>Each repository installed with Renovate Cloud has a Renovate Status. The Renovate Status is used by the job scheduler to determine which repositories will be selected. The status appears in the list of repositories shown on the Org page of the Developer Portal.</p> <p>The table below describes all the Renovate statuses.</p> Renovate Status Description Schedule &lt;-blank-&gt; New repo. Renovate has never run on this repo. Hourly onboarding Onboarding PR has not been merged Daily onboarded Onboarding PR has been merged. No Renovate PRs merged Daily activated At least one Renovate PR has been merged Hourly silent Renovate will run, but not deliver PRs or issues Daily failed An error occurred while running the last job Daily timeout A timeout occurred while running the last job Weekly kernel-out-of-memory An OOM error occurred while running the last job Weekly resource-limit A resource limit was hit while running the last job Weekly unknown An unknown error occurred while running the last job Weekly disabled Renovate will not run on this repository Monthly"},{"location":"mend-hosted/migrating-secrets/","title":"Migrating Secrets from Repo Config to App Settings","text":"<p>The Mend Renovate Cloud apps no longer read encrypted secrets from Renovate config files in your repositories. Previously, you could encrypt a secret with the Renovate encryption tool and then put it in your Renovate config file.</p> <p>When using the Mend Renovate Cloud apps, all secrets must be stored in the App settings on the cloud. The secrets can be referenced from the Renovate config files inside the repo using <code>{{ secrets.SECRET_NAME }}</code> notation.</p>"},{"location":"mend-hosted/migrating-secrets/#old-method","title":"Old method","text":"<p>This method is deprecated:</p> Put encrypted secret in Renovate config<pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"encrypted\": {\n        \"token\": \"drsMDVf6M2hTZCN......+gQm/0Rpw\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"mend-hosted/migrating-secrets/#new-method","title":"New method","text":"<p>This is the new method that you should start using:</p> Reference the app secret in the Renovate config<pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.GITHUB_COM_TOKEN }}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"mend-hosted/migrating-secrets/#tips","title":"Tips","text":""},{"location":"mend-hosted/migrating-secrets/#do-not-change-the-secret-during-migration","title":"Do not change the secret during migration","text":"<p>Mend recommends that you do not change the secret during the migration, as this introduces an extra point of failure. After the migration you can of course change/rotate the secret.</p>"},{"location":"mend-hosted/migrating-secrets/#migrate-your-secrets-in-the-raw-form-plain-text","title":"Migrate your secrets in the raw form (plain text)","text":"<p>When migrating secrets, DO NOT migrate the encrypted form of the secret. You must input the secret in the web UI from plain text. (The web UI will store the value securely.) If you do not have the original plain text form of the secret being migrated, you will need to create a new secret.</p>"},{"location":"mend-hosted/migrating-secrets/#how-to-migrate-secrets","title":"How to migrate secrets","text":""},{"location":"mend-hosted/migrating-secrets/#use-plain-text-values-not-encrypted-values","title":"Use Plain text values - not encrypted values","text":"<p>You must Migrate encrypted secrets using the PLAIN TEXT value. You can not use the encrypted version of the secret.</p>"},{"location":"mend-hosted/migrating-secrets/#add-the-secret-to-the-correct-org-or-repo","title":"Add the secret to the correct Org or Repo","text":"<p>When you migrate a secret from a repository, make sure you are adding the secret to the same organization or repository for which you generated the secret!</p> <ul> <li>A secret generated for a specific repository can only be added to that same repository.</li> <li>A secret generated for a specific repository can only be added to the repository settings for the matching repository. This secret can not be added to the organization's settings.</li> <li>A secret generated without a specific repository can be added into the organization or into the repository settings under that organization.</li> </ul>"},{"location":"mend-hosted/migrating-secrets/#steps-to-migrate-a-secret-to-the-renovate-cloud-app","title":"Steps to migrate a secret to the Renovate Cloud App","text":"<ol> <li> <p>Go to the correct settings page for your organization or repository in the web UI at developer.mend.io.</p> </li> <li> <p>On the Credentials page, select <code>ADD SECRET</code> to add the plaintext secret.    </p> </li> <li> <p>Give a value for <code>Secret name</code>, paste the plaintext secret into the <code>Secret Value</code> field, and select <code>SAVE</code>.    </p> </li> <li> <p>Wait for the confirmation dialog: \u201cSuccessfully stored secret\u201d.    </p> </li> </ol>"},{"location":"mend-hosted/migrating-secrets/#using-the-api","title":"Using the API","text":"<p>The Mend Developer Platform has an API, allowing programmatic management of repo secrets and org secrets.</p>"},{"location":"mend-hosted/migrating-secrets/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mend-hosted/migrating-secrets/#secret-is-stored-successfully-but-it-doesnt-work-when-used-in-the-app","title":"Secret is stored successfully, but it doesn't work when used in the app","text":"<p>The secret might be wrong. Try uploading the secret again.</p> <ul> <li>Ensure that the PLAIN TEXT value of the secret is used - not the encrypted value.</li> <li>Ensure that the secret was uploaded to the correct Org or Repo.</li> </ul>"},{"location":"mend-hosted/migrating-secrets/#related-links","title":"Related links","text":"<ul> <li>Using Secrets with Mend Cloud Apps</li> <li>Mend Developer Platform API (1.0)</li> </ul>"},{"location":"mend-hosted/overview/","title":"Mend Renovate Cloud-hosted (Community and Enterprise)","text":"<p>Mend provides cloud hosting services for running Renovate in free and paid versions:</p> <ul> <li>Mend Renovate Community Cloud (Free)</li> <li>Mend Renovate Enterprise Cloud</li> </ul> <p>They are available for Git repositories hosted on the following cloud platforms:</p> <ul> <li>GitHub</li> <li>Bitbucket Cloud</li> <li>Azure DevOps</li> </ul> <p>Mend Renovate cloud will regularly schedule Renovate jobs against all installed repositories. It also listens to webhooks and enqueues a Renovate job when relevant changes occur in a repo, or when actions are triggered from the Renovate PRs or Dashboard issue. There is a web UI with functionality to view and interact with installed repositories, their jobs and job logs.</p>"},{"location":"mend-hosted/overview/#getting-started","title":"Getting started","text":"<p>To get started using Mend Renovate Cloud versions, access the Developer Portal at https://developer.mend.io/.</p> <p>Developers can log in using the OAuth credentials from their cloud-based Git repository.</p> <p></p> <p>Features of the Developer Portal include:</p> <ul> <li>Ability to install, uninstall and view installed repositories</li> <li>Trigger Renovate jobs to run on demand</li> <li>View logs for all Renovate jobs</li> <li>Configure settings that apply at the Org-level or Repo-level</li> </ul>"},{"location":"mend-hosted/overview/#resources-and-scheduling","title":"Resources and Scheduling","text":"<p>The resources, scheduling and concurrency of Renovate jobs is determined by the version of Mend Renovate used by the Org. Details of the Mend Renovate Cloud versions are shown in the table below.</p> Mend Renovate Community Cloud (Free) Mend Renovate Enterprise Cloud Concurrent jobs per Org 1 16 Job scheduling (active repos) Every 4 hours Hourly (*1) Job runner CPUs 1 CPU 2 CPU Job runner Memory 2Gb 8Gb Job runner Disk space 15Gb 40Gb Job timeout 30 minutes 60 minutes Merge Confidence Workflows Not included Included Mend.io Helpdesk Support Not included Included <p>(1) Bitbucket repositories running Mend Renovate Enterprise are scheduled to run every 4 hours, to avoid hitting rate limits on GitHub APIs.</p> <p>Mend Renovate Community Cloud (Free) - Available for free for all repositories.</p> <p>Mend Renovate Enterprise Cloud - Supported premium version. Contact Mend at sales@mend.io for purchase details.</p> <p>Note</p> <p>OSS-licensed orgs can request increased resources on Mend Renovate Community Cloud. To request increased resources, create a \u201cSuggest an Idea\u201d item on the Renovate discussions board on GitHub. Acceptance is at the discretion of Mend.io.</p>"},{"location":"modules/","title":"Modules introduction","text":"<p>Renovate modules, please select a subsection.</p>"},{"location":"modules/#supported-modules","title":"Supported modules","text":"<ul> <li>Datasources</li> <li>Managers</li> <li>Platform</li> <li>Versioning</li> </ul>"},{"location":"modules/datasource/","title":"Datasources","text":"<p>After Renovate's manager scanned the files and extracted the dependencies, it assigns a <code>datasource</code> to each extracted package file or dependency. The <code>datasource</code> tells Renovate how to search for new versions.</p> <p>You don't need to configure or override datasources. But you may use datasources in a <code>packageRules</code> array to configure Renovate's behavior, for example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"lodash\"],\n      \"automerge\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/#supported-datasources","title":"Supported Datasources","text":"<p>Supported values for <code>datasource</code> are:</p> <ul> <li><code>artifactory</code></li> <li><code>aws-eks-addon</code></li> <li><code>aws-machine-image</code></li> <li><code>aws-rds</code></li> <li><code>azure-bicep-resource</code></li> <li><code>azure-pipelines-tasks</code></li> <li><code>bazel</code></li> <li><code>bitbucket-server-tags</code></li> <li><code>bitbucket-tags</code></li> <li><code>bitrise</code></li> <li><code>buildpacks-registry</code></li> <li><code>cdnjs</code></li> <li><code>clojure</code></li> <li><code>conan</code></li> <li><code>conda</code></li> <li><code>cpan</code></li> <li><code>crate</code></li> <li><code>custom</code></li> <li><code>dart</code></li> <li><code>dart-version</code></li> <li><code>deb</code></li> <li><code>deno</code></li> <li><code>devbox</code></li> <li><code>docker</code></li> <li><code>dotnet-version</code></li> <li><code>endoflife-date</code></li> <li><code>flutter-version</code></li> <li><code>forgejo-releases</code></li> <li><code>forgejo-tags</code></li> <li><code>galaxy</code></li> <li><code>galaxy-collection</code></li> <li><code>git-refs</code></li> <li><code>git-tags</code></li> <li><code>gitea-releases</code></li> <li><code>gitea-tags</code></li> <li><code>github-release-attachments</code></li> <li><code>github-releases</code></li> <li><code>github-runners</code></li> <li><code>github-tags</code></li> <li><code>gitlab-packages</code></li> <li><code>gitlab-releases</code></li> <li><code>gitlab-tags</code></li> <li><code>glasskube-packages</code></li> <li><code>go</code></li> <li><code>golang-version</code></li> <li><code>gradle-version</code></li> <li><code>hackage</code></li> <li><code>helm</code></li> <li><code>hermit</code></li> <li><code>hex</code></li> <li><code>hexpm-bob</code></li> <li><code>java-version</code></li> <li><code>jenkins-plugins</code></li> <li><code>jsr</code></li> <li><code>kubernetes-api</code></li> <li><code>maven</code></li> <li><code>node-version</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>orb</code></li> <li><code>packagist</code></li> <li><code>pod</code></li> <li><code>puppet-forge</code></li> <li><code>pypi</code></li> <li><code>python-version</code></li> <li><code>repology</code></li> <li><code>rpm</code></li> <li><code>ruby-version</code></li> <li><code>rubygems</code></li> <li><code>sbt-package</code></li> <li><code>sbt-plugin</code></li> <li><code>terraform-module</code></li> <li><code>terraform-provider</code></li> <li><code>typst</code></li> <li><code>unity3d</code></li> <li><code>unity3d-packages</code></li> </ul>"},{"location":"modules/datasource/artifactory/","title":"Artifactory Datasource","text":""},{"location":"modules/datasource/artifactory/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>artifactory</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the date-like text, next to the version hyperlink tag in the results. Source URL support No"},{"location":"modules/datasource/artifactory/#description","title":"Description","text":"<p>Artifactory is the recommended registry for Conan packages.</p> <p>This datasource returns releases from given custom <code>registryUrl</code>(s).</p> <p>The target URL is composed by the <code>registryUrl</code> and the <code>packageName</code>.</p> <p>The release timestamp is taken from the date in the directory listing, and is assumed to be in UTC time.</p>"},{"location":"modules/datasource/aws-eks-addon/","title":"Aws Eks Addon Datasource","text":""},{"location":"modules/datasource/aws-eks-addon/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>aws-eks-addon</code> Default versioning <code>aws-eks-addon</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/aws-eks-addon/#description","title":"Description","text":"<p>This <code>datasource</code> returns the addon versions available for use on AWS EKS via the AWS API.</p> <p>AWS API configuration</p> <ul> <li>Amazon EKS add-ons</li> <li>Available Amazon EKS add-ons from AWS</li> </ul> <p>Since the datasource uses the AWS SDK for JavaScript, you can configure it like other AWS Tools. You can use common AWS configuration options, for example:</p> <ul> <li>Set the region via the <code>AWS_REGION</code> environment variable or your <code>~/.aws/config</code> file</li> <li>Provide credentials via the <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> environment variables or your <code>~/.aws/credentials</code> file</li> <li>Select the profile to use via <code>AWS_PROFILE</code> environment variable</li> </ul> <p>Alternatively, you can specify different <code>region</code> and <code>profile</code> for each addon.</p> <p>Read the AWS Developer Guide - Configuring the SDK for JavaScript for more information on these configuration options.</p> <p>The minimal IAM privileges required for this datasource are:</p> <pre><code>{\n  \"Sid\": \"AllowDescribeEKSAddonVersions\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"eks:DescribeAddonVersions\"],\n  \"Resource\": \"*\"\n}\n</code></pre> <p>Read the AWS EKS IAM reference for more information.</p> <p>Usage</p> <p>Because Renovate has no manager for the AWS EKS Addon datasource, you need to help Renovate by configuring the custom manager to identify the AWS EKS Addons you want updated.</p> <p>When configuring the custom manager, you have to pass in the Kubernetes version and addon names as a minified JSON object as the <code>packageName</code> For example:</p> <pre><code># Getting the vpc-cni version for Kubernetes 1.30\n{\n   \"kubernetesVersion\": \"1.30\",\n   \"addonName\": \"vpc-cni\"\n}\n\n# In order to use it with this datasource, you have to minify it:\n{\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\"}\n</code></pre> <p>Although it's unlikely that EKS might support different addon versions across regions, you can optionally specify the <code>region</code> and/or <code>profile</code> in the minified JSON object to discover the addon versions specific to this region.</p> <pre><code># discover kube-proxy addon versions without specifying a cluster version.\nrenovate: eksAddonsFilter={\"addonName\":\"kube-proxy\"}\n\n# discover kube-proxy default addon versions\nrenovate: eksAddonsFilter={\"addonName\":\"kube-proxy\", \"default\":true}\n\n# discover vpc-cni addon versions on Kubernetes 1.30 in us-east-1 region using environmental AWS credentials.\nrenovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\",\"region\":\"eu-west-1\"}\n\n# discover vpc-cni addon versions on Kubernetes 1.30 in us-east-1 region using AWS credentials from `renovate-east` profile.\nrenovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\",\"region\":\"us-east-1\",\"profile\":\"renovate-east\"}\n</code></pre> <p>Here's an example of using the custom manager to configure this datasource:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"aws-eks-addon\"],\n      \"overrideDepName\": \"{{replace '.*\\\"addonName\\\":\\\"([^\\\"]+)\\\".*' '$1' depName}}\"\n    }\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/.*\\\\.tf/\"],\n      \"matchStrings\": [\n        \".*# renovate: eksAddonsFilter=(?&lt;packageName&gt;.*?)\\n.*?[a-zA-Z0-9-_:]*[ ]*?[:|=][ ]*?[\\\"|']?(?&lt;currentValue&gt;[a-zA-Z0-9-_.]+)[\\\"|']?.*\"\n      ],\n      \"datasourceTemplate\": \"aws-eks-addon\",\n      \"versioningTemplate\": \"aws-eks-addon\" // Optional. Default value is 'aws-eks-addon'\n    }\n  ]\n}\n</code></pre> <p>The configuration above matches every terraform file, and recognizes these lines:</p> <pre><code>variable \"vpc_cni_version\" {\n  type        = string\n  description = \"EKS vpc-cni add-on version\"\n  # kubernetesVersion and addonName provided\n  # renovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\"}\n  default     = \"v1.18.1-eksbuild.3\"\n}\n</code></pre> <p>or</p> <pre><code>addons:\n  - name: vpc-cni\n    # only addon name and the supported default version\n    # renovate: eksAddonsFilter={\"addonName\":\"vpc-cni\", \"default\":true}\n    version: v1.18.5-eksbuild.1\n</code></pre>"},{"location":"modules/datasource/aws-machine-image/","title":"Aws Machine Image Datasource","text":""},{"location":"modules/datasource/aws-machine-image/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>aws-machine-image</code> Default versioning <code>aws-machine-image</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>CreationDate</code> field in the results. Source URL support No"},{"location":"modules/datasource/aws-machine-image/#description","title":"Description","text":"<p>Warning</p> <p>This datasource is experimental. Its syntax and behavior may change at any time!</p> <p>This datasource returns the latest Amazon Machine Image via the AWS API.</p> <p>Because the datasource uses the AWS-SDK for JavaScript, you can configure it like other AWS Tools. You can use common AWS configuration options, for example (partial list):</p> <ul> <li>Setting the region via <code>AWS_REGION</code> (environment variable) or your <code>~/.aws/config</code> file</li> <li>Provide credentials via <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> (environment variable) or your <code>~/.aws/credentials</code> file</li> <li>Select the profile to use via <code>AWS_PROFILE</code> environment variable</li> </ul> <p>Read the Developer guide for more information on configuration options.</p> <p>The least IAM privileges required for this datasource are:</p> <pre><code>{\n  \"Sid\": \"AllowEc2ImageLookup\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"ec2:DescribeImages\"],\n  \"Resource\": \"*\"\n}\n</code></pre> <p>Read the AWS IAM Reference for more information.</p> <p>Because there is no general <code>packageName</code>, you have to use the describe images filter as minified JSON as a <code>packageName</code>.</p> <p>Example:</p> <pre><code># Getting the latest official EKS image from AWS (account '602401143452' for eu-central-1) for EKS 1.21 (name matches 'amazon-eks-node-1.21-*') would look as a describe images filter like:\n\n[\n  {\n    \"Name\": \"owner-id\",\n    \"Values\": [ \"602401143452\" ]\n  },\n  {\n    \"Name\": \"name\",\n    \"Values\": [ \"amazon-eks-node-1.21-*\" ]\n  }\n]\n\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n</code></pre> <p>At the moment, this datasource has no \"manager\". You have to use the custom manager for this.</p> <p>Usage Example</p> <p>Here's an example of using the custom manager:</p> <pre><code>module.exports = {\n  customManagers: [\n    {\n      customType: 'regex',\n      managerFilePatterns: ['/.*/'],\n      matchStrings: [\n        '.*amiFilter=(?&lt;packageName&gt;.*?)\\n(.*currentImageName=(?&lt;currentDigest&gt;.*?)\\n)?(.*\\n)?.*?(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\"|\\']?(?&lt;currentValue&gt;ami-[a-z0-9]{17})[\"|\\']?.*',\n      ],\n      datasourceTemplate: 'aws-machine-image',\n      versioningTemplate: 'aws-machine-image',\n    },\n  ],\n};\n</code></pre> <p>Or as JSON:</p> <pre><code>{\n  'customManagers':\n    [\n      {\n        'customType': 'regex',\n        'managerFilePatterns': ['/.*/'],\n        'matchStrings':\n          [\n            \".*amiFilter=(?&lt;packageName&gt;.*?)\\n(.*currentImageName=(?&lt;currentDigest&gt;.*?)\\n)?(.*\\n)?.*?(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\\\"|']?(?&lt;currentValue&gt;ami-[a-z0-9]{17})[\\\"|']?.*\",\n          ],\n        'datasourceTemplate': 'aws-machine-image',\n        'versioningTemplate': 'aws-machine-image',\n      },\n    ],\n}\n</code></pre> <p>Note about <code>currentImageName</code>:</p> <p>The optional <code>currentImageName</code> comment is automatically updated by Renovate to track the actual AMI name corresponding to the AMI ID. This provides human-readable context about which image version is being used. When Renovate finds a newer AMI, it will update both the AMI ID and the <code>currentImageName</code> comment.</p> <p>This would match every file, and would recognize the following lines:</p> <pre><code># With AMI name mentioned in the comments\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n# currentImageName=amazon-eks-node-1.21-v20240703\nmy_ami1: ami-02ce3d9008cab69cb\n\n# Only AMI, no name mentioned\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n# currentImageName=amazon-eks-node-1.20-v20240615\nmy_ami2: ami-0083e9407e275acf2\n\n# Using custom aws profile and region\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]},{\"profile\":\"test\",\"region\":\"eu-central-1\"}]\n# currentImageName=amazon-eks-node-1.20-v20240615\nami = \"ami-0083e9407e275acf2\"\n\n# Without currentImageName comment (also works!)\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.19-*\"]}]\nmy_ami3: ami-0a1b2c3d4e5f6g7h8\n</code></pre> <pre><code>const myConfigObject = {\n  // With AMI name mentioned in the comments\n  // amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n  // currentImageName=amazon-eks-node-1.21-v20240703\n  my_ami1: 'ami-02ce3d9008cab69cb',\n};\n\n/**\n * AMI with name tracked in comment\n * amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n * currentImageName=amazon-eks-node-1.20-v20240615\n */\nconst my_ami2 = 'ami-0083e9407e275acf2';\n\n/**\n * Without currentImageName comment\n * amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.19-*\"]}]\n */\nconst my_ami3 = 'ami-0a1b2c3d4e5f6g7h8';\n</code></pre> <pre><code>resource \"aws_instance\" \"web\" {\n\n    # AMI with name tracked in comment\n    # amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n    # currentImageName=amazon-eks-node-1.20-v20240615\n    ami = \"ami-0083e9407e275acf2\"\n\n    count = 2\n    source_dest_check = false\n\n    connection {\n        user = \"root\"\n    }\n}\n\nresource \"aws_instance\" \"app\" {\n    # Without currentImageName comment\n    # amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.19-*\"]}]\n    ami = \"ami-0a1b2c3d4e5f6g7h8\"\n\n    count = 1\n}\n</code></pre>"},{"location":"modules/datasource/aws-machine-image/#default-configuration","title":"Default configuration","text":"<pre><code>{\n  \"commitMessageExtra\": \"to {{{newVersion}}}\",\n  \"prBodyColumns\": [\n    \"Change\",\n    \"Image\"\n  ],\n  \"prBodyDefinitions\": {\n    \"Image\": \"```{{{newDigest}}}```\"\n  },\n  \"digest\": {\n    \"commitMessageExtra\": \"to {{{newDigest}}}\",\n    \"prBodyColumns\": [\n      \"Image\"\n    ],\n    \"prBodyDefinitions\": {\n      \"Image\": \"```{{{newDigest}}}```\"\n    }\n  }\n}\n</code></pre>"},{"location":"modules/datasource/aws-rds/","title":"Aws Rds Datasource","text":""},{"location":"modules/datasource/aws-rds/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>aws-rds</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/aws-rds/#description","title":"Description","text":"<p>This datasource returns the database engine versions available for use on AWS RDS via the AWS API.</p> <p>Generally speaking, all publicly released database versions are available for use on RDS. However, new versions may not be available on RDS for a few weeks or months after their release while AWS tests them. In addition, AWS may pull existing versions if serious problems arise during their use.</p> <p>Warning</p> <p>The default versioning of the <code>aws-rds</code> datasource is not compatible with AWS Aurora! If you use AWS Aurora, you must set your own custom versioning. Scroll down to see an example.</p>"},{"location":"modules/datasource/aws-rds/#aws-api-configuration","title":"AWS API configuration","text":"<p>Since the datasource uses the AWS SDK for JavaScript, you can configure it like other AWS Tools. You can use common AWS configuration options, for example:</p> <ul> <li>Set the region via the <code>AWS_REGION</code> environment variable or your <code>~/.aws/config</code> file</li> <li>Provide credentials via the <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> environment variables or your <code>~/.aws/credentials</code> file</li> <li>Select the profile to use via <code>AWS_PROFILE</code> environment variable</li> </ul> <p>Read the AWS Developer Guide - Configuring the SDK for JavaScript for more information on these configuration options.</p> Minimal IAM privileges needed for this datasource<pre><code>{\n  \"Sid\": \"AllowDBEngineVersionLookup\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"rds:DescribeDBEngineVersions\"],\n  \"Resource\": \"*\"\n}\n</code></pre> <p>Read the AWS RDS IAM reference for more information.</p>"},{"location":"modules/datasource/aws-rds/#usage","title":"Usage","text":"<p>Because Renovate has no manager for the AWS RDS datasource, you need to help Renovate by configuring the custom manager to identify the RDS dependencies you want updated.</p> <p>When configuring the custom manager, you have to pass a filter as minified JSON as the <code>packageName</code>. For example:</p> <pre><code># Getting the latest supported MySQL 5.7 version from RDS as a filter would look like:\n\n[\n  {\n    \"Name\": \"engine\",\n    \"Values\": [ \"mysql\" ]\n  },\n  {\n    \"Name\": \"engine-version\",\n    \"Values\": [ \"5.7\" ]\n  }\n]\n\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\n</code></pre> Using a custom manager to configure this datasource<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"**.yaml\"],\n      \"matchStrings\": [\n        \".*rdsFilter=(?&lt;packageName&gt;.+?)[ ]*\\n[ ]*(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?:[ ]*?[\\\"|']?(?&lt;currentValue&gt;[.\\\\d]+)[\\\"|']?.*\"\n      ],\n      \"datasourceTemplate\": \"aws-rds\"\n    }\n  ]\n}\n</code></pre> <p>The configuration above matches every YAML file, and recognizes these lines:</p> <pre><code>spec:\n  # rdsFilter=[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\n  engineVersion: 5.7.34\n</code></pre>"},{"location":"modules/datasource/aws-rds/#using-terraform-aws-rds-datasource-and-aurora-mysql","title":"Using Terraform, <code>aws-rds</code> datasource and Aurora MySQL","text":"<p>Here is the Renovate configuration to use Terraform, <code>aws-rds</code> and Aurora MySQL:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"description\": \"Update RDS\",\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/.+\\\\.tf$/\"],\n      \"matchStrings\": [\n        \"\\\\s*#\\\\s*renovate:\\\\s*rdsFilter=(?&lt;packageName&gt;.+?) depName=(?&lt;depName&gt;.*) versioning=(?&lt;versioning&gt;.*)\\\\s*.*_version\\\\s*=\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"aws-rds\"\n    }\n  ]\n}\n</code></pre> <p>The above configuration is an example of updating an AWS RDS version inside a Terraform file, using a custom manager.</p> <pre><code># renovate:rdsFilter=[{\"Name\":\"engine\",\"Values\":[\"aurora-mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"8.0\"]}] depName=aurora-mysql versioning=loose\nengine_version = \"8.0.mysql_aurora.3.05.2\"\n</code></pre>"},{"location":"modules/datasource/azure-bicep-resource/","title":"Azure Bicep Resource Datasource","text":""},{"location":"modules/datasource/azure-bicep-resource/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>azure-bicep-resource</code> Default versioning <code>azure-rest-api</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/azure-bicep-resource/#description","title":"Description","text":"<p>This data source returns available Bicep resource versions from the official index, which is also used by all Bicep tooling: https://github.com/Azure/bicep-types-az</p>"},{"location":"modules/datasource/azure-bicep-resource/#default-configuration","title":"Default configuration","text":"<pre><code>{\n  \"commitMessageTopic\": \"resource {{depName}}\",\n  \"commitMessageExtra\": \"to {{{newVersion}}}\",\n  \"prBodyColumns\": [\n    \"Resource\",\n    \"Change\"\n  ],\n  \"prBodyDefinitions\": {\n    \"Resource\": \"{{{depNameLinked}}}\"\n  }\n}\n</code></pre>"},{"location":"modules/datasource/azure-pipelines-tasks/","title":"Azure Pipelines Tasks Datasource","text":""},{"location":"modules/datasource/azure-pipelines-tasks/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>azure-pipelines-tasks</code> Default versioning <code>loose</code> Custom registry support No Release timestamp support No Source URL support No"},{"location":"modules/datasource/azure-pipelines-tasks/#description","title":"Description","text":"<p>This datasource returns versions of the built-in Azure Pipelines tasks and from all public extensions on the Visual Studio Marketplace.</p>"},{"location":"modules/datasource/bazel/","title":"Bazel Datasource","text":""},{"location":"modules/datasource/bazel/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>bazel</code> Default versioning <code>bazel-module</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/bazel/#description","title":"Description","text":"<p>The <code>bazel</code> datasource is designed to query one or more Bazel registries or file based BCR using the first successful result.</p>"},{"location":"modules/datasource/bitbucket-server-tags/","title":"Bitbucket Server Tags Datasource","text":""},{"location":"modules/datasource/bitbucket-server-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>bitbucket-server-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/bitbucket-tags/","title":"Bitbucket Tags Datasource","text":""},{"location":"modules/datasource/bitbucket-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>bitbucket-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/bitrise/","title":"Bitrise Datasource","text":""},{"location":"modules/datasource/bitrise/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>bitrise</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined from the <code>source_code_url</code> field of the release object in the results."},{"location":"modules/datasource/bitrise/#description","title":"Description","text":"<p>Renovate uses this datasource to fetch Bitrise steps from GitHub repositories.</p> Renovate field What value to use? <code>packageName</code> Name of the Bitrise step <code>registryUrl</code> GitHub HTTP Git URL, as used by Bitrise <p>For example, in the YAML snippet below:</p> <ul> <li><code>packageName</code> is <code>script</code></li> <li><code>registryUrl</code> is <code>https://github.com/bitrise-io/bitrise-steplib.git</code></li> </ul> <pre><code>format_version: 11\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\nproject_type: android\napp:\n  envs:\n    - MY_NAME: My Name\nworkflows:\n  test:\n    steps:\n      - script@1.1.5:\n          inputs:\n            - content: echo \"Hello ${MY_NAME}!\"\n</code></pre>"},{"location":"modules/datasource/buildpacks-registry/","title":"Buildpacks Registry Datasource","text":""},{"location":"modules/datasource/buildpacks-registry/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>buildpacks-registry</code> Default versioning No default versioning Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined from the <code>source_code_url</code> field of the release object in the results."},{"location":"modules/datasource/cdnjs/","title":"Cdnjs Datasource","text":""},{"location":"modules/datasource/cdnjs/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>cdnjs</code> Default versioning No default versioning Custom registry support No Release timestamp support No Source URL support Yes The source URL is determined from the <code>repository</code> field in the results."},{"location":"modules/datasource/clojure/","title":"Clojure Datasource","text":""},{"location":"modules/datasource/clojure/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>clojure</code> Default versioning <code>maven</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>Last-Modified</code> header or the <code>lastModified</code> field in the results. Source URL support Yes The source URL is determined from the <code>scm</code> tags in the results."},{"location":"modules/datasource/conan/","title":"Conan Datasource","text":""},{"location":"modules/datasource/conan/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>conan</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support Yes The source URL is supported only if the package is served from the Artifactory servers. In which case we determine it from the <code>properties[conan.package.url]</code> field in the results."},{"location":"modules/datasource/conda/","title":"Conda Datasource","text":""},{"location":"modules/datasource/conda/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>conda</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support Yes The source URL is determined from the <code>dev_url</code> field in the results."},{"location":"modules/datasource/conda/#description","title":"Description","text":"<p>This datasource returns releases for package from anaconda registry and prefix.dev. Other repositories are not supported currently.</p> <p>This datasource support following cases:</p> <p>Look up <code>numpy</code> in <code>conda-forge</code> channel on anaconda.</p> <pre><code>{\n  packageName: 'conda-forge/numpy',\n}\n</code></pre> <p>Look up <code>numpy</code> in <code>conda-forge</code> channel from prefix.dev using API <code>https://prefix.dev/api/graphql</code>.</p> <pre><code>{\n  packageName: 'numpy',\n  registryUrls: [\"https://prefix.dev/conda-forge/\"]\n}\n</code></pre>"},{"location":"modules/datasource/conda/#multiple-channels-support","title":"Multiple channels support","text":"<pre><code>{\n  packageName: 'some-package',\n  registryUrls: [\n    \"https://api.anaconda.org/package/conda-forge/\",\n    \"https://prefix.dev/conda-forge/\",\n  ]\n}\n</code></pre> <p>The above example will lookup try to find the package on anaconda first, if the package can not be found on prefix.dev.</p>"},{"location":"modules/datasource/cpan/","title":"Cpan Datasource","text":""},{"location":"modules/datasource/cpan/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>cpan</code> Default versioning <code>perl</code> Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>date</code> field in the results. Source URL support No"},{"location":"modules/datasource/crate/","title":"Crate Datasource","text":""},{"location":"modules/datasource/crate/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>crate</code> Default versioning <code>cargo</code> Custom registry support Yes Release timestamp support No Source URL support Yes The source URL is determined from the <code>repository</code> field in the results."},{"location":"modules/datasource/custom/","title":"Custom Datasource","text":""},{"location":"modules/datasource/custom/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>custom</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/custom/#description","title":"Description","text":"<p>This <code>custom</code> datasource allows requesting version data from generic HTTP(S) endpoints.</p>"},{"location":"modules/datasource/custom/#usage","title":"Usage","text":"<p>The <code>customDatasources</code> option takes a record of <code>customDatasource</code> configs. This example shows how to update the <code>k3s.version</code> file with a custom datasource and a regex custom manager:</p> <p>Options:</p> option default description defaultRegistryUrlTemplate <code>\"\"</code> URL used if no <code>registryUrl</code> is provided when looking up new releases format <code>\"json\"</code> format used by the API. Available values are: <code>html</code>, <code>json</code>, <code>plain</code>, <code>toml</code>, <code>yaml</code> transformTemplates <code>[]</code> JSONata rules to transform the API output. Each rule will be evaluated after another and the result will be used as input to the next <p>Tip</p> <p>Use JSONata Exerciser to test your JSONata rules.</p> <p>Available template variables:</p> <ul> <li><code>packageName</code></li> <li><code>currentValue</code></li> </ul> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/k3s.version/\"],\n      \"matchStrings\": [\"(?&lt;currentValue&gt;\\\\S+)\"],\n      \"depNameTemplate\": \"k3s\",\n      \"versioningTemplate\": \"semver-coerced\",\n      \"datasourceTemplate\": \"custom.k3s\"\n    }\n  ],\n  \"customDatasources\": {\n    \"k3s\": {\n      \"defaultRegistryUrlTemplate\": \"https://update.k3s.io/v1-release/channels\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $$.(data[id = 'stable'].latest),\\\"sourceUrl\\\":\\\"https://github.com/k3s-io/k3s\\\",\\\"changelogUrl\\\":$join([\\\"https://github.com/k3s-io/k3s/releases/tag/\\\",data[id = 'stable'].latest])}],\\\"sourceUrl\\\": \\\"https://github.com/k3s-io/k3s\\\",\\\"homepage\\\": \\\"https://k3s.io/\\\"}\"\n      ]\n    }\n  }\n}\n</code></pre> <p>After all transformations, the resulting JSON must match one of these formats:</p> <p>Minimal-supported object:</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"v1.1.0\"\n    },\n    {\n      \"version\": \"v1.2.0\"\n    }\n  ]\n}\n</code></pre> <p>All available options:</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"v1.0.0\",\n      \"isDeprecated\": true,\n      \"releaseTimestamp\": \"2022-12-24T18:21Z\",\n      \"changelogUrl\": \"https://github.com/demo-org/demo/blob/main/CHANGELOG.md#v0710\",\n      \"sourceUrl\": \"https://github.com/demo-org/demo\",\n      \"sourceDirectory\": \"monorepo/folder\",\n      \"digest\": \"c667f758f9e46e1d8111698e8d3a181c0b10f430\",\n      \"isStable\": true\n    }\n  ],\n  \"sourceUrl\": \"https://github.com/demo-org/demo\",\n  \"sourceDirectory\": \"monorepo/folder\",\n  \"changelogUrl\": \"https://github.com/demo-org/demo/blob/main/CHANGELOG.md\",\n  \"homepage\": \"https://demo.org\"\n}\n</code></pre>"},{"location":"modules/datasource/custom/#debugging","title":"Debugging","text":"<p>Renovate writes tracing logs entries before transformation. If Renovate finds an unexpected dataformat, it also writes a tracing log after transformation.</p>"},{"location":"modules/datasource/custom/#getting-trace-level-logs-on-hosted-app","title":"Getting trace level logs on hosted app","text":"<p>If you use the Mend Renovate app, use the <code>logLevelRemap</code> config option to get the trace log.</p> Getting trace logs from the Mend Renovate app<pre><code>{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/^Custom datasource/\",\n      \"newLogLevel\": \"info\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/custom/#getting-trace-level-logs-when-self-hosting","title":"Getting trace level logs when self-hosting","text":"<p>If you self-host Renovate, follow these steps to get the trace logs:</p> <ol> <li>Set the <code>LOG_FILE_LEVEL</code> env var to <code>trace</code></li> <li>Run Renovate in <code>dryRun</code> mode</li> </ol>"},{"location":"modules/datasource/custom/#formats","title":"Formats","text":""},{"location":"modules/datasource/custom/#json","title":"JSON","text":"<p>If <code>json</code> is used processing works as described above. The returned body will be directly interpreted as JSON and forwarded to the transformation rules.</p>"},{"location":"modules/datasource/custom/#plain","title":"Plain","text":"<p>If the format is set to <code>plain</code>, Renovate will call the HTTP endpoint with the <code>Accept</code> header value <code>text/plain</code>. The body of the response will be treated as plain text and will be converted into JSON.</p> <p>Suppose the body of the HTTP response is as follows:</p> <pre><code>1.0.0\n2.0.0\n3.0.0\n</code></pre> <p>When Renovate receives this response with the <code>plain</code> format, it will convert it into the following:</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"version\": \"2.0.0\"\n    },\n    {\n      \"version\": \"3.0.0\"\n    }\n  ]\n}\n</code></pre> <p>After the conversion, any <code>jsonata</code> rules defined in the <code>transformTemplates</code> section will be applied as usual to further process the JSON data.</p>"},{"location":"modules/datasource/custom/#yaml","title":"Yaml","text":"<p>If <code>yaml</code> is used, response is parsed and converted into JSON for further processing.</p> <p>Suppose the body of the HTTP response is as follows:</p> <pre><code>releases:\n  - version: 1.0.0\n  - version: 2.0.0\n  - version: 3.0.0\n</code></pre> <p>When Renovate receives this response with the <code>yaml</code> format, it will convert it into the following:</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"version\": \"2.0.0\"\n    },\n    {\n      \"version\": \"3.0.0\"\n    }\n  ]\n}\n</code></pre> <p>After the conversion, any <code>jsonata</code> rules defined in the <code>transformTemplates</code> section will be applied as usual to further process the JSON data.</p>"},{"location":"modules/datasource/custom/#toml","title":"TOML","text":"<p>If <code>toml</code> is used, response is parsed and converted into TOML for further processing.</p> <p>The below TOML document</p> <pre><code>[[releases]]\nversion = \"1.0.0\"\n[[releases]]\nversion = \"2.0.0\"\n[[releases]]\nversion = \"3.0.0\"\n</code></pre> <p>Will convert applying any <code>jsonata</code> rules defined in the <code>transformTemplates</code> section will be applied.</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"version\": \"2.0.0\"\n    },\n    {\n      \"version\": \"3.0.0\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/custom/#html","title":"HTML","text":"<p>If the format is set to <code>html</code>, Renovate will call the HTTP endpoint with the <code>Accept</code> header value <code>text/html</code>. The body of the response will be treated as a HTML document, and all hyperlinks will be converted to versions.</p> <p>For the following HTML document:</p> <pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;a href=\"package-1.0.tar.gz\"&gt;package-1.0.tar.gz&lt;/a&gt;\n    &lt;a href=\"package-2.0.tar.gz\"&gt;package-2.0.tar.gz&lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The following JSON will be generated:</p> <pre><code>{\n  \"releases\": [\n    {\n      \"version\": \"package-1.0.tar.gz\"\n    },\n    {\n      \"version\": \"package-1.0.tar.gz\"\n    }\n  ]\n}\n</code></pre> <p>After the conversion, any <code>jsonata</code> rules defined in the <code>transformTemplates</code> section will be applied to process the JSON data.</p> <p>To extract the version number, you may use <code>extractVersion</code> or JSONata rules.</p>"},{"location":"modules/datasource/custom/#examples","title":"Examples","text":""},{"location":"modules/datasource/custom/#k3s","title":"K3s","text":"<p>You can use this configuration to request the newest version available to K3s</p> <pre><code>{\n  \"customDatasources\": {\n    \"k3s\": {\n      \"defaultRegistryUrlTemplate\": \"https://update.k3s.io/v1-release/channels\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $$.(data[id = 'stable'].latest),\\\"sourceUrl\\\":\\\"https://github.com/k3s-io/k3s\\\",\\\"changelogUrl\\\":$join([\\\"https://github.com/k3s-io/k3s/releases/tag/\\\",data[id = 'stable'].latest])}],\\\"sourceUrl\\\": \\\"https://github.com/k3s-io/k3s\\\",\\\"homepage\\\": \\\"https://k3s.io/\\\"}\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"modules/datasource/custom/#hashicorp","title":"Hashicorp","text":"<p>You can use this configuration to request the newest versions of the Hashicorp products:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/\\\\.yml$/\"],\n      \"datasourceTemplate\": \"custom.hashicorp\",\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*(datasource=(?&lt;datasource&gt;.*?) )?depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\s*\\\\w*:\\\\s*(?&lt;currentValue&gt;.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ],\n  \"customDatasources\": {\n    \"hashicorp\": {\n      \"defaultRegistryUrlTemplate\": \"https://api.releases.hashicorp.com/v1/releases/{{packageName}}?license_class=oss\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"releaseTimestamp\\\": $v.timestamp_created, \\\"changelogUrl\\\": $v.url_changelog, \\\"sourceUrl\\\": $v.url_source_repository } }), \\\"homepage\\\": $[0].url_project_website, \\\"sourceUrl\\\": $[0].url_source_repository }\"\n      ]\n    }\n  }\n}\n</code></pre> <p>To have the latest Nomad version in your Ansible variables, use this snippet after adding the above configuration:</p> <pre><code># renovate: depName=nomad\nnomad_version: 1.6.0\n</code></pre>"},{"location":"modules/datasource/custom/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>You can use the following configuration to upgrade the Grafana Dashboards versions in your Grafana Helm chart:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/\\\\.yml$/\"],\n      \"matchStrings\": [\n        \"#\\\\s+renovate:\\\\s+depName=\\\"(?&lt;depName&gt;.*)\\\"\\\\n\\\\s+gnetId:\\\\s+(?&lt;packageName&gt;.*?)\\\\n\\\\s+revision:\\\\s+(?&lt;currentValue&gt;.*)\"\n      ],\n      \"versioningTemplate\": \"regex:^(?&lt;major&gt;\\\\d+)$\",\n      \"datasourceTemplate\": \"custom.grafana-dashboards\"\n    }\n  ],\n  \"customDatasources\": {\n    \"grafana-dashboards\": {\n      \"defaultRegistryUrlTemplate\": \"https://grafana.com/api/dashboards/{{packageName}}\",\n      \"format\": \"json\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $string(revision)}]}\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Grafana Helm chart <code>values.yaml</code> snippet:</p> <pre><code>dashboards:\n  default:\n    1860-node-exporter-full:\n      # renovate: depName=\"Node Exporter Full\"\n      gnetId: 1860\n      revision: 31\n      datasource: Prometheus\n    15760-kubernetes-views-pods:\n      # renovate: depName=\"Kubernetes / Views / Pods\"\n      gnetId: 15760\n      revision: 20\n      datasource: Prometheus\n</code></pre>"},{"location":"modules/datasource/custom/#custom-offline-dependencies","title":"Custom offline dependencies","text":"<p>Sometimes the \"dependency version source\" is not available via an API. To work around a missing API, you can create dependency \"files\". These files are served via HTTP(S), so that Renovate can access them. For example, imagine the following file <code>versiontracker.json</code> for the software <code>something</code>:</p> <pre><code>[\n  {\n    \"version\": \"77\"\n  },\n  {\n    \"version\": \"76\"\n  }\n]\n</code></pre> <p>By writing a custom datasource, Renovate can process the <code>versiontracker.json</code> file, see below. This example uses Nexus as the webserver.</p> <pre><code>{\n  \"customDatasources\": {\n    \"nexus_generic\": {\n      \"defaultRegistryUrlTemplate\": \"https://nexus.example.com/repository/versiontrackers/{{packageName}}/versiontracker.json\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"sourceUrl\\\": $v.filelink } }) }\"\n      ]\n    }\n  }\n}\n</code></pre> <p>This could be used to update Ansible YAML files with the latest version through a custom manager. For example, with the following Ansible content:</p> <pre><code># renovate: datasource=custom.nexus_generic depName=something versioning=loose\nsomething_version: '77'\n</code></pre> <p>And the following custom manager:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/\\\\.yml$/\"],\n      \"datasourceTemplate\": \"custom.nexus_generic\",\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*(datasource=(?&lt;datasource&gt;.*?)\\\\s*)?depName=(?&lt;depName&gt;.*?)(\\\\s*versioning=(?&lt;versioning&gt;.*?))?\\\\s*\\\\w*:\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n</code></pre> <p>Or if you have the datasource locally, you can also define your local registry by prefixing it with <code>file://</code>:</p> <pre><code>{\n  \"customDatasources\": {\n    \"local_generic\": {\n      \"defaultRegistryUrlTemplate\": \"file://dependencies/{{packageName}}/versiontracker.json\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"sourceUrl\\\": $v.filelink } }) }\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Renovate will then parse your file from your current folder to access it.</p>"},{"location":"modules/datasource/custom/#nginx-directory-listing","title":"nginx directory listing","text":"<p>Sometimes all you have is a directory with files, and a HTTP server that can generate directory listings.</p> <p>Let's use nginx itself as an example:</p> <pre><code>{\n  \"customDatasources\": {\n    \"nginx\": {\n      \"defaultRegistryUrlTemplate\": \"https://nginx.org/download\",\n      \"format\": \"html\"\n    }\n  },\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"custom.nginx\"],\n      \"extractVersion\": \"^nginx-(?&lt;version&gt;.+)\\\\.tar\\\\.gz$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/custom/#html-page","title":"HTML page","text":"<p>You can use the <code>html</code> format to extract versions from a typical \"Downloads\" page:</p> <pre><code>{\n  \"customDatasources\": {\n    \"curl\": {\n      \"defaultRegistryUrlTemplate\": \"https://curl.se/download.html\",\n      \"format\": \"html\"\n    }\n  },\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"custom.curl\"],\n      \"extractVersion\": \"/curl-(?&lt;version&gt;.+)\\\\.tar\\\\.gz$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/dart/","title":"Dart Datasource","text":""},{"location":"modules/datasource/dart/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>dart</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>published</code> field in the results. Source URL support Yes The source URL is determined from the <code>repository</code> field of the latest release object in the results."},{"location":"modules/datasource/dart-version/","title":"Dart Version Datasource","text":""},{"location":"modules/datasource/dart-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>dart-version</code> Default versioning No default versioning Custom registry support No Release timestamp support No Source URL support Yes We use the URL: https://github.com/dart-lang/sdk."},{"location":"modules/datasource/deb/","title":"Deb Datasource","text":""},{"location":"modules/datasource/deb/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>deb</code> Default versioning <code>deb</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/deb/#description","title":"Description","text":"<p>Renovate uses the Debian datasource to update packages from Debian repositories. The <code>debian</code> datasource is meant for projects that:</p> <ul> <li>depend on Debian-based systems, or</li> <li>depend on Debian-based distributions, like Ubuntu</li> </ul> <p>By default, Renovate does not detect Debian dependencies. For Renovate to update dependencies, you must combine the Debian datasource with regex managers.</p>"},{"location":"modules/datasource/deb/#set-url-when-using-a-debian-repository","title":"Set URL when using a Debian repository","text":"<p>To use a Debian repository with the datasource, you must set a properly formatted URL with specific query parameters as <code>registryUrl</code>:</p> <ul> <li><code>components</code>: Comma-separated list of repository components (e.g., <code>main,contrib,non-free</code>).</li> <li><code>binaryArch</code>: Architecture of the binary packages (e.g., <code>amd64</code>,<code>all</code>).</li> <li><code>suite</code>:</li> <li>A rolling release alias like <code>stable</code>.</li> <li>A fixed release name such as <code>bullseye</code> or <code>buster</code>.</li> </ul> <p>Note</p> <p>These parameters are used to give Renovate context and are not directly used to call the repository. Therefore, the <code>registryUrl</code> has not to be a valid URL for a repository.</p> <p>Example:</p> <pre><code>https://deb.debian.org/debian?suite=stable&amp;components=main,contrib,non-free&amp;binaryArch=amd64\n</code></pre> <p>This URL points to the <code>stable</code> suite of the Debian repository for <code>amd64</code> architecture, including <code>main</code>, <code>contrib</code>, and <code>non-free</code> components.</p>"},{"location":"modules/datasource/deb/#usage-example","title":"Usage Example","text":"<p>Say you're using apt packages in a Dockerfile and want to update them. With the debian datasource you can \"pin\" each dependency, and get automatic updates.</p> <p>First you would set a custom manager in your <code>renovate.json</code> file for <code>Dockerfile</code>:</p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^Dockerfile$/\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*?(suite=(?&lt;suite&gt;.*?))?\\\\s*depName=(?&lt;depName&gt;.*?)?\\\\sENV .*?_VERSION=\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"registryUrlTemplate\": \"https://deb.debian.org/debian?suite={{#if suite }}{{suite}}{{else}}stable{{/if}}&amp;components=main,contrib,non-free&amp;binaryArch=amd64\",\n      \"datasourceTemplate\": \"deb\"\n    }\n  ]\n}\n</code></pre> <p>Then you would put comments in your Dockerfile, to tell Renovate where to find the updates:</p> <pre><code>FROM debian:bullseye\n\n# renovate: suite=bullseye depName=gcc-11\nENV GCC_VERSION=\"11.2.0-19\"\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y \\\n    gcc-11=\"${GCC_VERSION}\" &amp;&amp; \\\n    apt-get clean\n</code></pre> <p>When the apt package for <code>gcc</code> is updated, Renovate updates the environment variable.</p> Override deb registryUrl with a packageRules entry<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"deb\"],\n      \"matchPackageNames\": [\"gcc-11\"],\n      \"registryUrls\": [\n        \"https://deb.debian.org/debian?suite=stable&amp;components=main,contrib,non-free&amp;binaryArch=amd64\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/deb/#artifactory","title":"Artifactory","text":"<p>The Debian datasource can be used with Artifactory.</p>"},{"location":"modules/datasource/deb/#supported-repository-types","title":"Supported repository types","text":"<p>The <code>debian</code> datasource supports these repository types:</p> <ul> <li>virtual</li> <li>local</li> <li>remote</li> </ul>"},{"location":"modules/datasource/deb/#set-a-registryurl","title":"Set a <code>registryUrl</code>","text":"<p>To use Artifactory, first configure the <code>deb</code> datasource by setting the <code>registryUrl</code>.</p> Example of valid registryUrl format<pre><code>https://&lt;host&gt;:&lt;port&gt;/artifactory/&lt;repository-slug&gt;?suite=&lt;suite&gt;&amp;components=&lt;components&gt;&amp;binaryArch=&lt;binaryArch&gt;\nhttps://artifactory.example.com:443/artifactory/debian?suite=bookworm&amp;components=main,contrib,non-free&amp;binaryArch=amd64\n</code></pre>"},{"location":"modules/datasource/deb/#authenticating-to-artifactory","title":"Authenticating to Artifactory","text":"<p>If Artifactory asks for authentication, you must set up a host rule. First, generate a password for Renovate with Artifactory's \"Set Me Up\" feature. Then, add the following configuration:</p> Example Artifactory host rule configuration, with username and password<pre><code>{\n  \"hostRules\": [\n    {\n      \"hostType\": \"deb\",\n      \"matchHost\": \"https://artifactory.example.com:443/artifactory/debian\",\n      \"username\": \"myuser\",\n      \"password\": \"&lt; the generated password &gt;\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/deno/","title":"Deno Datasource","text":""},{"location":"modules/datasource/deno/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>deno</code> Default versioning <code>semver</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>uploaded_at</code> field in the results. Source URL support Yes The source URL is determined from the <code>repository</code> field in the results."},{"location":"modules/datasource/deno/#description","title":"Description","text":"<p>This datasource extracts dependencies from a <code>denoland/apiland</code> compatible registry server.</p> <p>By default, Renovate uses the official Deno registry. You can override this by setting your own <code>registryUrl</code>.</p>"},{"location":"modules/datasource/devbox/","title":"Devbox Datasource","text":""},{"location":"modules/datasource/devbox/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>devbox</code> Default versioning <code>devbox</code> Custom registry support Yes Release timestamp support Yes Source URL support No"},{"location":"modules/datasource/docker/","title":"Docker Datasource","text":""},{"location":"modules/datasource/docker/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>docker</code> Default versioning <code>docker</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>tag_last_pushed</code> field in the results. Source URL support Yes The source URL is determined from the <code>org.opencontainers.image.source</code> and <code>org.label-schema.vcs-url</code> labels present in the metadata of the latest stable image found on the Docker registry."},{"location":"modules/datasource/docker/#description","title":"Description","text":"<p>This datasource identifies an image's source repository according to the pre-defined annotation keys of the OCI Image Format Specification.</p> <p>This datasource looks for the metadata of the latest stable image found on the Docker registry and uses the value of the label <code>org.opencontainers.image.source</code> and <code>org.label-schema.vcs-url</code> as the <code>sourceUrl</code>. Additionally, it uses the value of the label <code>org.opencontainers.image.revision</code> as the <code>gitRef</code>.</p> <p>The Label Schema is superseded by OCI annotations, use the <code>org.opencontainers.image.source</code> label if possible.</p> <p>If you maintain a Docker image and want Renovate to find your changelogs, add a <code>org.opencontainers.image.source</code> field to your Dockerfile. The link must point to your GitHub or GitLab repository. Here's an example from our <code>renovate/renovate</code> Dockerfile:</p> <pre><code>LABEL org.opencontainers.image.source=\"https://github.com/renovatebot/renovate\"\n</code></pre> <p>If you use Harbor as a proxy cache for Docker Hub, then you must use Harbor version <code>2.5.0</code> or higher.</p>"},{"location":"modules/datasource/docker/#default-configuration","title":"Default configuration","text":"<pre><code>{\n  \"commitMessageTopic\": \"{{{depName}}} Docker tag\",\n  \"commitMessageExtra\": \"to {{#if isPinDigest}}{{{newDigestShort}}}{{else}}{{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{prettyNewVersion}}}{{/if}}{{/if}}\",\n  \"digest\": {\n    \"branchTopic\": \"{{{depNameSanitized}}}-{{{currentValue}}}\",\n    \"commitMessageExtra\": \"to {{newDigestShort}}\",\n    \"commitMessageTopic\": \"{{{depName}}}{{#if currentValue}}:{{{currentValue}}}{{/if}} Docker digest\",\n    \"group\": {\n      \"commitMessageTopic\": \"{{{groupName}}}\",\n      \"commitMessageExtra\": \"\"\n    }\n  },\n  \"pin\": {\n    \"commitMessageExtra\": \"\",\n    \"groupName\": \"Docker digests\",\n    \"group\": {\n      \"commitMessageTopic\": \"{{{groupName}}}\",\n      \"branchTopic\": \"digests-pin\"\n    }\n  }\n}\n</code></pre>"},{"location":"modules/datasource/dotnet-version/","title":"Dotnet Version Datasource","text":""},{"location":"modules/datasource/dotnet-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>dotnet-version</code> Default versioning No default versioning Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>release-date</code> field in the results. Source URL support Yes We use the URL https://github.com/dotnet/sdk for the <code>dotnet-sdk</code> package and, the https://github.com/dotnet/runtime URL for the <code>dotnet-runtime</code> package."},{"location":"modules/datasource/dotnet-version/#description","title":"Description","text":"<p>This datasource returns releases of the .NET Runtime and SDK. It only accepts dependencies with the name <code>dotnet-sdk</code> or <code>dotnet-runtime</code>.</p>"},{"location":"modules/datasource/endoflife-date/","title":"Endoflife Date Datasource","text":""},{"location":"modules/datasource/endoflife-date/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>endoflife-date</code> Default versioning <code>loose</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>releaseDate</code> field in the results. Source URL support No"},{"location":"modules/datasource/endoflife-date/#description","title":"Description","text":"<p>endoflife.date provides version and end-of-life information for different packages.</p> <p>To find the right \"package\" name for the software you're trying to update, use the endoflife.date \"All packages\" API endpoint. You can find it in the endoflife.date API documentation.</p> <p>By default, this datasource uses <code>loose</code> versioning. If possible, we recommend you use a stricter versioning like <code>semver</code> instead of <code>loose</code>.</p> <p>Usage Example</p> <p>Say you're using Amazon EKS and want Renovate to update the versions in a Terraform <code>.tfvars</code> file. For example, you have this <code>.tfvars</code> file:</p> <pre><code># renovate: datasource=endoflife-date depName=amazon-eks versioning=loose\nkubernetes_version = \"1.26\"\n</code></pre> <p>Given the above <code>.tfvars</code> file, you put this in your <code>renovate.json</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"description\": \"Update Kubernetes version for Amazon EKS in tfvars files\",\n      \"managerFilePatterns\": [\"/.+\\\\.tfvars$/\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\s.*?_version\\\\s*=\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{/if}}\"\n    }\n  ],\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"endoflife-date\"],\n      \"matchPackageNames\": [\"amazon-eks\"],\n      \"extractVersion\": \"^(?&lt;version&gt;.*)-eks.+$\"\n    }\n  ]\n}\n</code></pre> <p>With this configuration, Renovate will parse all <code>*.tfvars</code> files in the repository. It will then update variables that end with <code>_version</code> and have the <code># renovate: datasource=endoflife-date depName=dependency-name versioning=versioning</code> comment set in the line above when any new versions are available.</p> <p>For <code>amazon-eks</code>, the defined <code>packageRule</code> above will also strip the <code>-eks-${eks-release-version}</code> suffix to only set the Kubernetes minor version.</p>"},{"location":"modules/datasource/flutter-version/","title":"Flutter Version Datasource","text":""},{"location":"modules/datasource/flutter-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>flutter-version</code> Default versioning <code>semver</code> Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>release_date</code> field in the results. Source URL support Yes We use the URL: https://github.com/flutter/flutter."},{"location":"modules/datasource/forgejo-releases/","title":"Forgejo Releases Datasource","text":""},{"location":"modules/datasource/forgejo-releases/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>forgejo-releases</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/forgejo-releases/#description","title":"Description","text":"<p>This datasource allows to lookup releases from a Forgejo repositories.</p> <p>By default it will use <code>https://code.forgejo.org</code> to lookup releases.</p>"},{"location":"modules/datasource/forgejo-tags/","title":"Forgejo Tags Datasource","text":""},{"location":"modules/datasource/forgejo-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>forgejo-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/forgejo-tags/#description","title":"Description","text":"<p>This datasource allows to lookup git tags from a Forgejo repositories.</p> <p>By default it will use <code>https://code.forgejo.org</code> to lookup tags.</p>"},{"location":"modules/datasource/galaxy/","title":"Galaxy Datasource","text":""},{"location":"modules/datasource/galaxy/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>galaxy</code> Default versioning <code>pep440</code> Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>created</code> field in the results. Source URL support Yes The source URL is determined from the <code>github_user</code> and <code>github_repo</code> fields in the results."},{"location":"modules/datasource/galaxy-collection/","title":"Galaxy Collection Datasource","text":""},{"location":"modules/datasource/galaxy-collection/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>galaxy-collection</code> Default versioning <code>pep440</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created_at</code> field in the results. Source URL support Yes The <code>sourceUrl</code> is determined from the <code>repository</code> field in the results."},{"location":"modules/datasource/galaxy-collection/#description","title":"Description","text":"<p>By default, the <code>galaxy-collection</code> datasource checks for dependencies on <code>https://galaxy.ansible.com</code>. But you can override the default if you want.</p> <p>Set your own registries by:</p> <ul> <li>setting a <code>source</code> in your <code>requirements.yaml</code> file, or</li> <li>writing a <code>packageRule</code> to set a new <code>registryURLs</code></li> </ul> <p>Then you can use Renovate with a private automation hub or an ansible repository on artifactory.</p> Example config for requirements.yaml<pre><code>---\ncollections:\n  - name: community.general\n    version: 3.0.0\n    source: https://hub.mydomain.com/api/galaxy/content/community/\n</code></pre> Example config for renovate.json<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"galaxy-collection\"],\n      \"registryUrls\": [\n        \"https://hub.mydomain.com/api/galaxy/content/community/\",\n        \"https://hub.mydomain.com/api/galaxy/content/certified/\",\n        \"https://hub.mydomain.com/api/galaxy/content/myprivaterepo/\",\n        \"https://mydomain.com/artifactory/api/ansible/myrepository/\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/git-refs/","title":"Git Refs Datasource","text":""},{"location":"modules/datasource/git-refs/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>git-refs</code> Default versioning No default versioning Custom registry support No Release timestamp support No Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/git-refs/#description","title":"Description","text":"<p>You can use this datasource plus regex managers to update git-based dependencies that are not natively supported by Renovate.</p> <p>The <code>git-refs</code> datasource returns a reference from a Git repository.</p> <p>The <code>packageName</code> must be a fully qualified domain name.</p> <p>To fetch the latest digest of a reference instead of the named reference: put the named reference in <code>currentValue</code> and match on the <code>currentDigest</code>.</p> <p>Usage example</p> <p>Say you want to maintain the <code>HEAD</code> digest of the <code>master</code> branch of a repository. You would configure a custom manager in your Renovate config file for files named <code>versions.ini</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^versions.ini$/\"],\n      \"matchStrings\": [\"GOOGLE_API_VERSION=(?&lt;currentDigest&gt;.*?)\\\\n\"],\n      \"currentValueTemplate\": \"master\",\n      \"depNameTemplate\": \"googleapis\",\n      \"packageNameTemplate\": \"https://github.com/googleapis/googleapis\",\n      \"datasourceTemplate\": \"git-refs\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/git-tags/","title":"Git Tags Datasource","text":""},{"location":"modules/datasource/git-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>git-tags</code> Default versioning No default versioning Custom registry support No Release timestamp support No Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/gitea-releases/","title":"Gitea Releases Datasource","text":""},{"location":"modules/datasource/gitea-releases/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gitea-releases</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/gitea-releases/#description","title":"Description","text":"<p>This datasource allows to lookup releases from a Gitea repositories.</p> <p>Note</p> <p>Use <code>forgejo-releases</code> as the datasource if you are using Forgejo. Forgejo support will be removed from <code>gitea-releases</code> datasource in a future release.</p> <p>By default it will use <code>https://gitea.com</code> to lookup releases.</p>"},{"location":"modules/datasource/gitea-tags/","title":"Gitea Tags Datasource","text":""},{"location":"modules/datasource/gitea-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gitea-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/gitea-tags/#description","title":"Description","text":"<p>This datasource allows to lookup git tags from a Gitea repositories.</p> <p>Note</p> <p>Use <code>forgejo-tags</code> as the datasource if you are using Forgejo. Forgejo support will be removed from <code>gitea-tags</code> datasource in a future release.</p> <p>By default it will use <code>https://gitea.com</code> to lookup tags.</p>"},{"location":"modules/datasource/github-release-attachments/","title":"Github Release Attachments Datasource","text":""},{"location":"modules/datasource/github-release-attachments/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>github-release-attachments</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>releaseTimestamp</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/github-releases/","title":"Github Releases Datasource","text":""},{"location":"modules/datasource/github-releases/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>github-releases</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>releaseTimestamp</code> field from the response. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/github-releases/#description","title":"Description","text":"<p>This datasource allows lookup releases from GitHub.com and GitHub Enterprise repositories.</p> <ul> <li><code>registryUrl</code>: The URL of the GitHub registry to use. Defaults to <code>https://github.com/</code>.</li> <li><code>packageName</code>: The name of the repository to lookup. in the format <code>owner/repo</code>. e.g. <code>renovatebot/renovate</code>.</li> </ul>"},{"location":"modules/datasource/github-runners/","title":"Github Runners Datasource","text":""},{"location":"modules/datasource/github-runners/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>github-runners</code> Default versioning <code>docker</code> Custom registry support Yes Release timestamp support No Source URL support Yes We use the URL: https://github.com/actions/runner-images."},{"location":"modules/datasource/github-runners/#description","title":"Description","text":"<p>This datasource returns a list of all runners that are hosted by GitHub. The datasource is based on GitHub's <code>runner-images</code> and <code>partner-runner-images</code> repositories.</p> <p>Examples: <code>windows-2025</code> / <code>ubuntu-24.04</code> / <code>macos-15</code>.</p>"},{"location":"modules/datasource/github-runners/#maintenance","title":"Maintenance","text":""},{"location":"modules/datasource/github-runners/#adding-a-new-version","title":"Adding a new version","text":"<p>New runner versions must be added to the datasource with a pull request.</p>"},{"location":"modules/datasource/github-runners/#unstable-runners","title":"Unstable runners","text":"<p>Unstable runners are tagged as <code>[beta]</code> in the <code>runner-images</code> repository's readme and should get the <code>isStable:false</code> property in our code.</p>"},{"location":"modules/datasource/github-runners/#promoting-a-version-to-stable","title":"Promoting a version to stable","text":"<p>Once a runner version becomes stable, the <code>[beta]</code> tag is removed and the suffix <code>latest</code> is added to its YAML label. We then remove the <code>isStable:false</code> property in our code.</p>"},{"location":"modules/datasource/github-runners/#deprecating-a-version","title":"Deprecating a version","text":"<p>Deprecated runners are tagged as <code>[deprecated]</code> in the <code>runner-images</code> repository's readme and we should give it the <code>isDeprecated:true</code> property. If a runner is very old, the readme may drop it completely, but we should still give it the <code>isDeprecated:true</code> property.</p>"},{"location":"modules/datasource/github-tags/","title":"Github Tags Datasource","text":""},{"location":"modules/datasource/github-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>github-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The get release timestamp is determined from the <code>releaseTimestamp</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/github-tags/#description","title":"Description","text":"<p>This datasource allows lookup Git tags from GitHub.com and GitHub Enterprise repositories.</p> <ul> <li><code>registryUrl</code>: The URL of the GitHub registry to use. Defaults to <code>https://github.com/</code>.</li> <li><code>packageName</code>: The name of the repository to lookup. in the format <code>owner/repo</code>. e.g. <code>renovatebot/renovate</code>.</li> </ul>"},{"location":"modules/datasource/gitlab-packages/","title":"Gitlab Packages Datasource","text":""},{"location":"modules/datasource/gitlab-packages/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gitlab-packages</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created_at</code> field in the results. Source URL support No"},{"location":"modules/datasource/gitlab-packages/#description","title":"Description","text":"<p>GitLab Packages API supports looking up package versions from all types of packages registry supported by GitLab and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be formed with the project path first, then a <code>:</code> and finally the package name.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js</code> would look for the<code>@gitlab-org/nk-js</code> packages in the generic packages repository of the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>If you are using a self-hosted GitLab instance, please note the following requirements:</p> <ul> <li>If you are on the <code>Free</code> edition, this datasource requires at least GitLab 13.3</li> <li>If you are on the <code>Premium</code> or the <code>Ultimate</code> edition, this datasource requires at least GitLab 11.8, but GitLab 12.9 or more is recommended if you have a lot of packages with different names in the same project</li> </ul> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a custom manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^versions.ini$/\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-packages depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-packages</code> uses the <code>docker</code> versioning scheme.</p>"},{"location":"modules/datasource/gitlab-releases/","title":"Gitlab Releases Datasource","text":""},{"location":"modules/datasource/gitlab-releases/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gitlab-releases</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>released_at</code> field in the results. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/gitlab-releases/#description","title":"Description","text":"<p>GitLab Releases API supports looking up releases supported by GitLab and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be set to the project path.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> would look for releases in the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>Please note the following requirements:</p> <ul> <li>This datasource requires at least GitLab 11.7</li> </ul> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a custom manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^versions.ini$/\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-releases depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-releases</code> uses the <code>semver-coerced</code> versioning scheme.</p>"},{"location":"modules/datasource/gitlab-tags/","title":"Gitlab Tags Datasource","text":""},{"location":"modules/datasource/gitlab-tags/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gitlab-tags</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes To get release timestamp we use the <code>created_at</code> field from the response. Source URL support Yes The source URL is determined by using the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/gitlab-tags/#description","title":"Description","text":"<p>GitLab Tags API supports looking up Git tags and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be set to the project path.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> would look for releases in the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a custom manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^versions.ini$/\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-tags depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-tags</code> uses the <code>semver-coerced</code> versioning scheme.</p>"},{"location":"modules/datasource/glasskube-packages/","title":"Glasskube Packages Datasource","text":""},{"location":"modules/datasource/glasskube-packages/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>glasskube-packages</code> Default versioning <code>glasskube</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/go/","title":"Go Datasource","text":""},{"location":"modules/datasource/go/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>go</code> Default versioning <code>semver</code> Custom registry support No Release timestamp support Yes If the release timestamp is not returned from the respective datasoure used to fetch the releases, then Renovate uses the <code>Time</code> field in the results instead. Source URL support Yes The source URL is determined from the <code>packageName</code> and <code>registryUrl</code>."},{"location":"modules/datasource/go/#description","title":"Description","text":"<p>The best way to lookup Go Modules is using Go proxies.</p>"},{"location":"modules/datasource/go/#goproxy-settings","title":"GOPROXY settings","text":"<p>This datasource will use default <code>GOPROXY</code> settings of <code>https://proxy.golang.org,direct</code> if the environment variable is unset.</p> <p>To override this default and use a different proxy in self-hosted environments, configure <code>GOPROXY</code> to an alternative setting in env.</p> <p>To override this default and stop using any proxy at all, set <code>GOPROXY</code> to the value <code>direct</code>.</p>"},{"location":"modules/datasource/go/#pseudo-versions","title":"Pseudo versions","text":"<p>Go proxies return an empty list of versions when queried (<code>@v/list</code>) for a package which uses pseudo versions, but return the latest pseudo-version when queried for <code>@latest</code>.</p> <p>If the <code>@latest</code> endpoint returns a pseudo-version, and the release list is empty, then this datasource will return the latest pseudo-version as the only release/version for the package.</p>"},{"location":"modules/datasource/go/#checking-for-new-major-releases","title":"Checking for new major releases","text":"<p>When a Go proxy is queried for <code>@v/list</code> it returns only versions for v0 or v1 of a package. Therefore Renovate will also query <code>@v2/list</code> just in case there also exists a v2 of the package. Similarly, if the dependency is already on a higher version such as <code>v5</code>, Renovate will check in case higher major versions exist. You do not need to be worried about any 403/404 responses which result from such checks - they are the only way for Renovate to know if newer major releases exist.</p>"},{"location":"modules/datasource/go/#fallback-to-direct-lookups","title":"Fallback to direct lookups","text":"<p>If no result is found from Go proxy lookups then Renovate will fall back to direct lookups.</p>"},{"location":"modules/datasource/go/#default-configuration","title":"Default configuration","text":"<pre><code>{\n  \"commitMessageTopic\": \"module {{depName}}\"\n}\n</code></pre>"},{"location":"modules/datasource/golang-version/","title":"Golang Version Datasource","text":""},{"location":"modules/datasource/golang-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>golang-version</code> Default versioning <code>semver</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>Date</code> field in the results. Source URL support Yes We use the URL: https://github.com/golang/go."},{"location":"modules/datasource/gradle-version/","title":"Gradle Version Datasource","text":""},{"location":"modules/datasource/gradle-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>gradle-version</code> Default versioning <code>gradle</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>buildTime</code> field in the results. Source URL support Yes We use the URL: https://github.com/gradle/gradle."},{"location":"modules/datasource/hackage/","title":"Hackage Datasource","text":""},{"location":"modules/datasource/hackage/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>hackage</code> Default versioning <code>pvp</code> Custom registry support No Release timestamp support No Source URL support No"},{"location":"modules/datasource/hackage/#description","title":"Description","text":"<p>This datasource uses the Hackage JSON API to fetch versions for published Haskell packages.</p> <p>While not all versions use PVP, the majority does. This manager assumes a default versioning set to PVP. Versioning can be overwritten using <code>packageRules</code>, e.g. with <code>matchDatasources</code>.</p>"},{"location":"modules/datasource/helm/","title":"Helm Datasource","text":""},{"location":"modules/datasource/helm/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>helm</code> Default versioning <code>helm</code> Custom registry support Yes Release timestamp support Yes The release timstamp is determined from the <code>created</code> field in the results. Source URL support Yes The source URL is determined from the <code>home</code> field or the <code>sources</code> field in the results."},{"location":"modules/datasource/helm/#default-configuration","title":"Default configuration","text":"<pre><code>{\n  \"commitMessageTopic\": \"Helm release {{depName}}\"\n}\n</code></pre>"},{"location":"modules/datasource/hermit/","title":"Hermit Datasource","text":""},{"location":"modules/datasource/hermit/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>hermit</code> Default versioning <code>hermit</code> Custom registry support Yes Release timestamp support No Source URL support Yes The source URL is determined from the <code>Repository</code> field in the results."},{"location":"modules/datasource/hermit/#description","title":"Description","text":"<p>By default Hermit looks up packages from the open source project https://github.com/cashapp/hermit-packages.</p> <p>Hermit supports private packages. To get Renovate to find your private packages, follow these steps:</p> <ol> <li>perform <code>hermit search --json</code> with your private Hermit distribution and save the file to <code>index.json</code></li> <li>make a GitHub release in your private packages repository named <code>index</code> with the asset <code>index.json</code> generated in step 1.</li> <li>setup a CI pipeline to repeat step 1 &amp; 2 on new commits to the private packages repository.</li> <li>Add a package rule for the Hermit manager, so that Renovate knows where to find your private packages:</li> </ol> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"hermit\"],\n      \"defaultRegistryUrls\": [\n        \"https://github.com/your/private-hermit-packages\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/hex/","title":"Hex Datasource","text":""},{"location":"modules/datasource/hex/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>hex</code> Default versioning <code>hex</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined the <code>inserted_at</code> field in the results. Source URL support Yes The source URL is determined from the <code>Github</code> field in the results."},{"location":"modules/datasource/hexpm-bob/","title":"Hexpm Bob Datasource","text":""},{"location":"modules/datasource/hexpm-bob/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>hexpm-bob</code> Default versioning <code>semver</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>buildDate</code> field in the results. Source URL support Yes We use the URL https://github.com/elixir-lang/elixir.git for the <code>elixir</code> package and the https://github.com/erlang/otp.git URL for the <code>erlang</code> package."},{"location":"modules/datasource/hexpm-bob/#description","title":"Description","text":"<p>This datasource returns releases from Bob the builder.</p> <p>Supported values for <code>packageName</code>:</p> <ul> <li><code>elixir</code>, Elixir homepage</li> <li><code>otp/[OS/Version]</code>, Erlang/OTP homepage</li> </ul> <p>Read the Bob the builder docs, Erlang builds for a list of supported operating systems and versions.</p>"},{"location":"modules/datasource/java-version/","title":"Java Version Datasource","text":""},{"location":"modules/datasource/java-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>java-version</code> Default versioning No default versioning Custom registry support No Release timestamp support No Source URL support No"},{"location":"modules/datasource/java-version/#description","title":"Description","text":"<p>This datasource returns releases from the Adoptium API.</p> <p>It uses <code>image_type=&lt;jre|jdk&gt;&amp;project=jdk&amp;release_type=ga&amp;sort_method=DATE&amp;sort_order=DESC</code> as filter parameters. This means that the datasource finds:</p> <ul> <li>JRE or JDK images</li> <li>with a JDK project</li> <li>which have the General Availability status   And finally, the results are sorted in descending order.</li> </ul> <p>When Renovate contacts the Adoptium API, it fetches 50 pages. Each page has 50 items. So 2500 items are fetched from the API in total.</p> <p>If you want to get releases which come with the JDK, set the <code>packageName</code> to <code>java-jdk</code> or <code>java</code>.</p> <p>If you want to get releases which come with the JRE, set the <code>packageName</code> to <code>java-jre</code>. LTS releases of Java will have a version that comes with the JRE. Non-LTS releases may not always include the JRE.</p> <p>Additionally you can filter by <code>os</code> and <code>architecture</code>. For example, to get only Linux x64 jre releases, you can pass <code>java-jre?os=linux&amp;architecture=x64</code> as <code>packageName</code>. See https://api.adoptium.net/q/swagger-ui/#/Release%20Info/getReleaseVersions for allowed values.</p> <p>Use <code>java?system=true</code> to let renovate detect the current <code>os</code> and <code>architecture</code>.</p>"},{"location":"modules/datasource/jenkins-plugins/","title":"Jenkins Plugins Datasource","text":""},{"location":"modules/datasource/jenkins-plugins/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>jenkins-plugins</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The releaseTimestamp is determined from the <code>releaseTimestamp</code> or <code>buildDate</code> field in the results. Source URL support Yes The source URL is determined from the <code>scm</code> field in the results."},{"location":"modules/datasource/jenkins-plugins/#description","title":"Description","text":"<p>The <code>jenkins-plugins</code> datasource supports lookups from the Jenkins Update Center or custom registries.</p> <p>When you define a custom registry with the <code>registryUrl</code> config option, you must follow Jenkins' update site layout.</p> <p>The <code>update-center.actual.json</code> and <code>plugin-versions.json</code> files must be in the <code>current</code> path, so Renovate can find them. For example, the files could be put in the <code>https://custom.registry.renovatebot.com/current</code> directory.</p>"},{"location":"modules/datasource/jsr/","title":"Jsr Datasource","text":""},{"location":"modules/datasource/jsr/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>jsr</code> Default versioning <code>semver</code> Custom registry support No Release timestamp support No Source URL support No"},{"location":"modules/datasource/kubernetes-api/","title":"Kubernetes Api Datasource","text":""},{"location":"modules/datasource/kubernetes-api/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>kubernetes-api</code> Default versioning <code>kubernetes-api</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/kubernetes-api/#description","title":"Description","text":"<p>Kubernetes API upgrade versions are manually transcribed from the Kubernetes API deprecation guide. The Kubernetes API deprecation guide is updated regularly, so this list may be out of date. This also contains some flux custom resources which where also manually added from flux releases as well as external secrets custom resources.</p>"},{"location":"modules/datasource/maven/","title":"Maven Datasource","text":""},{"location":"modules/datasource/maven/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>maven</code> Default versioning <code>maven</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>Last-Modified</code> header or the <code>lastModified</code> field in the results. Source URL support Yes The source URL is determined from the <code>scm</code> tags in the results."},{"location":"modules/datasource/maven/#description","title":"Description","text":""},{"location":"modules/datasource/maven/#maven-central-rate-limiting-and-caching","title":"Maven Central rate limiting and caching","text":"<p>Maven Central, hosted by Sonatype, receives a very large number of requests and has implemented rate limiting measures to manage organizational overconsumption. If you're experiencing 429 (rate limited) responses from Maven Central, you may need to optimize your caching strategy.</p> <p>Renovate includes Maven caching optimizations, but they rely on having a persistent datasource cache. By default, Renovate uses a file-based cache, which means:</p> <ul> <li>Persistent environments (like self-hosted runners with persistent storage) will benefit from cross-run caching</li> <li>Ephemeral environments (like GitHub Actions or other CI/CD with fresh containers each run) won't benefit from caching across runs</li> </ul> <p>To maximize caching effectiveness and reduce Maven Central requests:</p> <ol> <li>Use Redis for persistent caching: Configure a Redis instance for your Renovate datasource cache</li> <li>Ensure cache persistence: If using file-based caching, ensure the cache directory persists between Renovate runs</li> <li>Monitor rate limit warnings: Renovate will log warnings when receiving 429 responses from Maven Central</li> </ol> <p>If you continue to experience rate limiting issues after implementing persistent caching, you may need to:</p> <ul> <li>Reduce the frequency of Renovate runs</li> <li>Consider using a Maven repository proxy with its own caching layer</li> </ul>"},{"location":"modules/datasource/maven/#making-your-changelogs-fetchable","title":"Making your changelogs fetchable","text":"<p>In case you are publishing artifacts and you want to ensure that your changelogs are fetchable by <code>Renovate</code>, you need to configure the scm section on their <code>pom.xml</code> file.</p> <p>For example:</p> <pre><code>&lt;scm&gt;\n    &lt;url&gt;scm:git:https://github.com/path_to_repository&lt;/url&gt;\n&lt;/scm&gt;\n</code></pre> <p>This is what allows <code>Renovate</code> to determine the <code>sourceUrl</code>, that it then uses to fetch the changelogs.</p> <p>Note</p> <p>This also works for private repositories. It can leverage the same <code>token</code> that you had to configure in order to be able to reach the private Artifactory.</p>"},{"location":"modules/datasource/maven/#specifying-your-project-homepage","title":"Specifying your project homepage","text":"<p>When opening a Pull Request <code>Renovate</code> uses the top level <code>url</code> property to determine the homepage of your project and shows it inside the Pull Request. To customize you can set it inside your <code>pom.xml</code>.</p> <p>For example:</p> <pre><code>&lt;url&gt;https://project.example.com&lt;/url&gt;\n</code></pre>"},{"location":"modules/datasource/maven/#latest-and-release-tags","title":"latest and release tags","text":"<p>When <code>latest</code> or <code>release</code> values are present in a package's <code>maven-metadata.xml</code>, Renovate will map these to its <code>tags</code> concept. This enables the use of Renovate's <code>followTag</code> feature.</p> <p>However, Renovate will set <code>respectLatest=false</code> whenever the <code>latest</code> tag is found, because many Maven registries have been found to populate the tag unreliably. You should use <code>packageRules</code> to set <code>respectLatest=true</code> if you wish to use this feature.</p>"},{"location":"modules/datasource/node-version/","title":"Node Version Datasource","text":""},{"location":"modules/datasource/node-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>node-version</code> Default versioning <code>node</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>date</code> field. Source URL support Yes We use the URL: https://github.com/nodejs/node"},{"location":"modules/datasource/node-version/#description","title":"Description","text":"<p>This datasource returns NodeJS releases from nodejs.org API.</p>"},{"location":"modules/datasource/npm/","title":"Npm Datasource","text":""},{"location":"modules/datasource/npm/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>npm</code> Default versioning <code>npm</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>time</code> field in the results. Source URL support Yes The source URL is determined from the <code>repository</code> field in the results."},{"location":"modules/datasource/nuget/","title":"Nuget Datasource","text":""},{"location":"modules/datasource/nuget/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>nuget</code> Default versioning <code>nuget</code> Custom registry support Yes Release timestamp support Yes For the v2 API, the release timestamp is determined from the <code>Published</code> tag. And, for the v3 API, the release timestamp is determined from the <code>published</code> field in the results. Source URL support Yes For the v2 API, the source URL is determined from the <code>ProjectUrl</code> tag. And, for the v3 API, the source URL is determined from the <code>metadata.repository@url</code> field in the results."},{"location":"modules/datasource/orb/","title":"Orb Datasource","text":""},{"location":"modules/datasource/orb/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>orb</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>createdAt</code> field in the results. Source URL support No"},{"location":"modules/datasource/packagist/","title":"Packagist Datasource","text":""},{"location":"modules/datasource/packagist/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>packagist</code> Default versioning <code>composer</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>time</code> field in the results. Source URL support Yes The source URL is determined from <code>source</code> field in the results."},{"location":"modules/datasource/pod/","title":"Pod Datasource","text":""},{"location":"modules/datasource/pod/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>pod</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/puppet-forge/","title":"Puppet Forge Datasource","text":""},{"location":"modules/datasource/puppet-forge/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>puppet-forge</code> Default versioning No default versioning Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created_at</code> field from the response. Source URL support No"},{"location":"modules/datasource/pypi/","title":"Pypi Datasource","text":""},{"location":"modules/datasource/pypi/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>pypi</code> Default versioning <code>pep440</code> Custom registry support Yes Release timestamp support Yes The relase timestamp is determined from the <code>upload_time</code> field in the results. Source URL support Yes The source URL is determined from the <code>homepage</code> field if it is a github repository, else we use the <code>project_urls</code> field."},{"location":"modules/datasource/pypi/#description","title":"Description","text":"<p>This datasource uses the following logic to determine lookup URLs:</p> <ul> <li>If the normalized registryUrl ends in <code>/simple/</code> or <code>/+simple/</code> then only the simple API will be tried</li> <li>Otherwise, the JSON API will be tried first</li> <li>If the JSON API returns a result, it will be used</li> <li>If the JSON API throws an error (e.g. 403, 404) then the simple API will be tried</li> </ul>"},{"location":"modules/datasource/python-version/","title":"Python Version Datasource","text":""},{"location":"modules/datasource/python-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>python-version</code> Default versioning <code>python</code> Custom registry support No Release timestamp support No Source URL support No"},{"location":"modules/datasource/python-version/#description","title":"Description","text":"<p>This datasource returns Python releases from the python.org API.</p> <p>It also fetches deprecated versions from the Endoflife Date datasource.</p> <p>Because Renovate depends on <code>containerbase/python-prebuild</code> it will also fetch releases from the GitHub API.</p>"},{"location":"modules/datasource/python-version/#example-custom-manager","title":"Example custom manager","text":"<p>Below is a custom regex manager to update the Python versions in a Dockerfile. Python versions sometimes drop the dot that separate the major and minor number: so <code>3.11</code> becomes <code>311</code>. The example below handles this case.</p> <pre><code>ARG PYTHON_VERSION=311\nFROM image-python${PYTHON_VERSION}-builder:1.0.0\n</code></pre> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^Dockerfile$/\"],\n      \"matchStringsStrategy\": \"any\",\n      \"matchStrings\": [\n        \"ARG PYTHON_VERSION=\\\"?(?&lt;currentValue&gt;3(?&lt;minor&gt;\\\\d+))\\\"?\\\\s\"\n      ],\n      \"autoReplaceStringTemplate\": \"ARG PYTHON_VERSION={{{replace '\\\\.' '' newValue}}}\\n\",\n      \"currentValueTemplate\": \"3.{{{minor}}}\",\n      \"datasourceTemplate\": \"python-version\",\n      \"versioningTemplate\": \"python\",\n      \"depNameTemplate\": \"python\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/repology/","title":"Repology Datasource","text":""},{"location":"modules/datasource/repology/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>repology</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/repology/#description","title":"Description","text":"<p>With Repology you can look up package versions from many package repositories. You can combine Repology with regex managers to update dependencies which are not supported by Renovate.</p> <p>The <code>packageName</code> field should be constructed using the repository identifier and the actual package name separated by a slash. For example: <code>alpine_3_12/gcc</code> would look for a binary (or source package) called <code>gcc</code> within the <code>alpine_3_12</code> repository.</p> <p>A list of all supported repositories can be found on the Repology homepage.</p> <p>To find the correct identifier, select the repository you want and copy the identifier in the URL: <code>https://repology.org/repository/&lt;identifier&gt;</code>. For example, the <code>Alpine Linux 3.12</code> repository has this URL: <code>https://repology.org/repository/alpine_3_12</code> and has this repository identifier: <code>alpine_3_12</code>.</p> <p>Usage Example</p> <p>Say you're using system packages in a Dockerfile and want to update them with Repology. With the Repology datasource you can \"pin\" each dependency, and get automatic updates.</p> <p>First you would set a custom manager in your <code>renovate.json</code> file for <code>Dockerfile</code>:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^Dockerfile$/\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\sENV .*?_VERSION=\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n</code></pre> <p>Then you would put comments in your Dockerfile, to tell Renovate where to find the updates:</p> <pre><code>FROM alpine:3.12.0@sha256:a15790640a6690aa1730c38cf0a440e2aa44aaca9b0e8931a9f2b0d7cc90fd65\n\n# renovate: datasource=repology depName=alpine_3_12/gcc versioning=loose\nENV GCC_VERSION=\"9.3.0-r2\"\n# renovate: datasource=repology depName=alpine_3_12/musl-dev versioning=loose\nENV MUSL_DEV_VERSION=\"1.1.24-r8\"\n\nRUN apk add --no-cache \\\n    gcc=\"${GCC_VERSION}\" \\\n    musl-dev=\"${MUSL_DEV_VERSION}\"\n</code></pre> <p>When the operating system package for <code>gcc</code> of <code>Alpine Linux 3.12</code> is updated, Renovate updates the environment variable.</p> <p>Tip</p> <p>We recommend you try <code>loose</code> or <code>deb</code> versioning for distribution packages first. This is because the version number usually doesn't match Renovate's default <code>semver-coerced</code> specification.</p>"},{"location":"modules/datasource/rpm/","title":"Rpm Datasource","text":""},{"location":"modules/datasource/rpm/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>rpm</code> Default versioning No default versioning Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/rpm/#description","title":"Description","text":"<p>This datasource <code>rpm</code> returns releases of the RPM packages. It assumes the RPM repository is following the RPM standard and by default it has a repomd.xml in the directory provided by user in the <code>registryUrl</code>. According to this Pulp project doc, https://docs.pulpproject.org/en/2.10/plugins/pulp_rpm/tech-reference/rpm.html,</p> <p>repomd.xml is the metadata file that clients use to discover what repository metadata files exist in the repository. It should always be located at repodata/repomd.xml relative to the root of the repository.</p>"},{"location":"modules/datasource/rpm/#set-url-when-using-an-rpm-repository","title":"Set URL when using an RPM repository","text":"<p>To use an RPM repository with the datasource, you must set a <code>registryUrl</code> with the directory that contains the <code>repomd.xml</code> and corresponding <code>primary.xml</code>.</p> <p>Example:</p> <p>If we have</p> <ul> <li><code>http://example.com/repo/repodata/repomd.xml</code></li> <li><code>http://example.com/repo/repodata/&lt;SHA256&gt;-primary.xml</code> where <code>&lt;SHA256&gt;</code> is a dynamically generated SHA256 pattern.</li> </ul> <p>Then the <code>registryUrl</code> should set as <code>http://example.com/repo/repodata/</code> or <code>http://example.com/repo/repodata</code>.</p>"},{"location":"modules/datasource/rpm/#usage-example","title":"Usage Example","text":"<p>Say you're defining dnf/tdnf/yum packages in a <code>manifest.json</code> and you want Renovate to update them.</p> <p>Assuming your <code>manifest.json</code> looks like this.</p> <pre><code>{\n  \"example-package1\": \"1.0.0-1.azl3\",\n  \"example-package2\": \"1.1.0\"\n}\n</code></pre> <p>where the versioning format could be <code>&lt;semantic version&gt;-&lt;revision or release&gt;</code>, or just <code>&lt;semantic version&gt;</code></p> <pre><code>{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\n        \"path_to_manifest_json\"\n      ],\n      \"registryUrlTemplate\": \"http://example.com/repo/repodata/\",\n      \"datasourceTemplate\": \"rpm\"\n    }\n  ]\n}\n</code></pre> <p>In an RPM repository, the <code>&lt;SHA256&gt;-primary.xml</code> looks like this:</p> <pre><code>`&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;metadata xmlns=\"http://linux.duke.edu/metadata/common\"&gt;\n  &lt;package type=\"rpm\"&gt;\n    &lt;name&gt;example-package1&lt;/name&gt;\n    &lt;arch&gt;x86_64&lt;/arch&gt;\n    &lt;version epoch=\"0\" ver=\"1.0\" rel=\"2.azl3\"/&gt;\n  &lt;/package&gt;\n  &lt;package type=\"rpm\"&gt;\n    &lt;name&gt;example-package1&lt;/name&gt;\n    &lt;arch&gt;x86_64&lt;/arch&gt;\n    &lt;version epoch=\"0\" ver=\"1.1\" rel=\"1.azl3\"/&gt;\n  &lt;/package&gt;\n  &lt;package type=\"rpm\"&gt;\n    &lt;name&gt;example-package1&lt;/name&gt;\n    &lt;arch&gt;x86_64&lt;/arch&gt;\n    &lt;version epoch=\"0\" ver=\"1.1\" rel=\"2.azl3\"/&gt;\n  &lt;/package&gt;\n  &lt;package type=\"rpm\"&gt;\n    &lt;name&gt;example-package1&lt;/name&gt;\n    &lt;arch&gt;x86_64&lt;/arch&gt;\n    &lt;version epoch=\"0\" ver=\"1.2\"/&gt;\n  &lt;/package&gt;\n...\n...\n&lt;/metadata&gt;\n</code></pre> <p>You may also check the <code>yum/dnf info</code> for the package to find version and release:</p> <pre><code># dnf info example-package1\nLast metadata expiration check: 18:34:13 ago on Tue Oct  7 13:58:36 2025.\nInstalled Packages\nName         : example-package1\nVersion      : 1.0.0\nRelease      : 1.azl3\nArchitecture : x86_64\n[...]\n</code></pre> <p>You can see that <code>ver</code> and <code>rel</code> (<code>release</code>/<code>revision</code>) is stored separately. The RPM datasource implementation will combine these together as <code>ver-rel</code>. That's why the version is defined as <code>1.0.0-1.az3</code>, if <code>rel</code> (like <code>example-package1</code>) is available. Or just <code>1.1.0</code> if <code>rel</code> (like <code>example-package2</code>) is not available.</p>"},{"location":"modules/datasource/rpm/#limitation-and-consideration","title":"Limitation and Consideration","text":"<p>In real-world scenarios, the decompressed <code>primary.xml</code> file from an RPM repository can be extremely large. To handle this efficiently, this implementation uses streaming XML parsing, which processes the file incrementally and avoids loading the entire XML into memory.</p> <p>Streaming XML parsing is a practical solution for large files in Node.js, but for extremely large or complex cases (e.g., files exceeding ~512MB), you may still encounter memory or performance issues. For such scenarios, consider using more robust approaches such as native modules, optimized SAX parsers, or external tools. Contributions and suggestions for further improving large file handling are welcome.</p>"},{"location":"modules/datasource/ruby-version/","title":"Ruby Version Datasource","text":""},{"location":"modules/datasource/ruby-version/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>ruby-version</code> Default versioning <code>ruby</code> Custom registry support No Release timestamp support Yes The release timestamp is determined from the <code>release-list</code> table in the results. Source URL support Yes We use the URL: https://github.com/ruby/ruby."},{"location":"modules/datasource/rubygems/","title":"Rubygems Datasource","text":""},{"location":"modules/datasource/rubygems/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>rubygems</code> Default versioning <code>ruby</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>created_at</code> field in the results. Source URL support Yes The source URL is determined from the <code>source_code_uri</code> field in the results."},{"location":"modules/datasource/rubygems/#description","title":"Description","text":""},{"location":"modules/datasource/rubygems/#rubygems-datasource_1","title":"Rubygems datasource","text":"<p>Datasource query order depends on the registry.</p>"},{"location":"modules/datasource/rubygems/#querying-rubygemsorg","title":"Querying <code>rubygems.org</code>","text":"<p>Rubygems rate limits are easy to hit, so we need to be careful with the queries. This is implemented with two-level cache:</p> <ul> <li>First, we query <code>https://rubygems.org/versions</code> endpoint for current versions for all packages.</li> </ul> <p>Either full or delta sync is performed, depending on the cache state.</p> <p>All the data of this layer is stored in-memory as the mapping <code>packageName -&gt; version[]</code>.</p> <pre><code>stateDiagram-v2\n  [*] --&gt; Empty\n\n  state \"Empty\" as Empty\n  Empty --&gt; FullSync: getPkgReleases()\n\n  state \"Synced\" as Synced\n  Synced --&gt; DeltaSync\n\n  state \"Unsupported\" as Unsupported\n  Unsupported --&gt; [*]\n\n  state \"Full sync\" as FullSync : GET /versions (~20Mb)\n  state full_sync_result &lt;&lt;choice&gt;&gt;\n  FullSync --&gt; full_sync_result: Response\n  full_sync_result --&gt; Synced: (1) Status 200\n  full_sync_result --&gt; Unsupported: (2) Status 404\n  full_sync_result --&gt; Empty: (3) Status other than 200 or 404\\n Clear cache and throw ExternalHostError\n\n  state \"Delta sync\" as DeltaSync: GET /versions with \"Range\" header\n  state delta_sync_result &lt;&lt;choice&gt;&gt;\n  DeltaSync --&gt; delta_sync_result: Successful response\n  delta_sync_result --&gt; Synced: (1) Status other than 206\\nFull data is received, extract and replace old cache\\n (as if it is the full sync)\n  delta_sync_result --&gt; FullSync: (2) The head of response doesn't match\\n the tail of the previously fetched data\n  delta_sync_result --&gt; Synced: (3) The head of response matches\\n the tail of the previously fetched data\n\n  state delta_sync_error &lt;&lt;choice&gt;&gt;\n  DeltaSync --&gt; delta_sync_error: Error response\n  delta_sync_error --&gt; FullSync: (1) Status 416 should not happen\\nbut moves to full sync\n  delta_sync_error --&gt; Unsupported: (2) Status 404\n  delta_sync_error --&gt; Empty: (3) Status other than 404 or 416</code></pre> <ul> <li>Then, more data is obtained from <code>https://rubygems.org/api/v1/versions/&lt;package&gt;.json</code> and <code>https://rubygems.org/api/v1/gems/&lt;package&gt;.json</code>.</li> </ul> <p>From the previous layer, the cache key is formed from the <code>packageName</code>, and the list of versions is additionally hashed and stored to ensure consistency, so that we reach these API endpoints only when the key has expired or when the list of versions has changed.</p> <p>The data for this cache layer is being persisted in the longer-term package cache.</p>"},{"location":"modules/datasource/rubygems/#querying-rubygemspkggithubcom-or-gitlabcom","title":"Querying <code>rubygems.pkg.github.com</code> or <code>gitlab.com</code>","text":"<p>These particular registries are queried using obsolete API</p> <ul> <li><code>/api/v1/dependencies</code></li> </ul>"},{"location":"modules/datasource/rubygems/#other-registries","title":"Other registries","text":"<ul> <li>Fetch from <code>/api/v1/versions/&lt;package&gt;.json</code></li> <li>Fallback to <code>/info/&lt;package&gt;</code>, if above fails</li> <li>Fallback to the obsolete <code>/api/v1/dependencies</code>, if above fails</li> </ul>"},{"location":"modules/datasource/sbt-package/","title":"Sbt Package Datasource","text":""},{"location":"modules/datasource/sbt-package/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>sbt-package</code> Default versioning <code>ivy</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>Last-Modified</code> header or the <code>lastModified</code> field in the results. Source URL support Yes The source URL is determined from the <code>scm</code> tags in the results."},{"location":"modules/datasource/sbt-package/#description","title":"Description","text":"<p>This datasource finds SBT package updates from Maven repositories.</p> <p>By default, Renovate checks <code>https://repo.maven.apache.org/maven2</code> for SBT packages. You can override the default behavior with the <code>registryUrls</code> config option. For example:</p> <pre><code>{\n  \"matchDatasources\": [\"sbt-package\"],\n  \"registryUrls\": [\n    \"https://repo.maven.apache.org/maven2\",\n    \"https://oss.sonatype.org/content/repositories/snapshots\"\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/sbt-plugin/","title":"Sbt Plugin Datasource","text":""},{"location":"modules/datasource/sbt-plugin/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>sbt-plugin</code> Default versioning <code>ivy</code> Custom registry support Yes Release timestamp support No Source URL support Yes The source URL is determined from the <code>scm</code> tags in the results."},{"location":"modules/datasource/sbt-plugin/#description","title":"Description","text":"<p>This datasource finds SBT plugin updates from Maven repositories.</p> <p>By default, Renovate:</p> <ol> <li>Checks <code>https://repo1.maven.org/maven2/</code> for SBT plugins</li> <li>If the above URL returns no results, then Renovate tries the legacy URL: <code>https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases</code></li> </ol> <p>You can override the default behavior with the <code>registryUrls</code> config option. For example:</p> <pre><code>{\n  \"matchDatasources\": [\"sbt-plugin\"],\n  \"registryUrls\": [\n    \"https://repo1.maven.org/maven2/\",\n    \"https://oss.sonatype.org/content/repositories/snapshots\",\n    \"https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases\"\n  ]\n}\n</code></pre>"},{"location":"modules/datasource/terraform-module/","title":"Terraform Module Datasource","text":""},{"location":"modules/datasource/terraform-module/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>terraform-module</code> Default versioning <code>hashicorp</code> Custom registry support Yes Release timestamp support Yes The release timestamp is only supported for the latest version, and is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined from the the <code>source</code> field in the results."},{"location":"modules/datasource/terraform-provider/","title":"Terraform Provider Datasource","text":""},{"location":"modules/datasource/terraform-provider/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>terraform-provider</code> Default versioning <code>hashicorp</code> Custom registry support Yes Release timestamp support Yes The release timestamp is only supported for the latest version, and is determined from the <code>published_at</code> field in the results. Source URL support Yes The source URL is determined from the the <code>source</code> field in the results."},{"location":"modules/datasource/typst/","title":"Typst Datasource","text":""},{"location":"modules/datasource/typst/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>typst</code> Default versioning <code>semver-coerced</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/unity3d/","title":"Unity3d Datasource","text":""},{"location":"modules/datasource/unity3d/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>unity3d</code> Default versioning <code>unity3d</code> Custom registry support Yes Release timestamp support Yes The release timestamp is determined from the <code>releaseDate</code> field in the results. Source URL support No"},{"location":"modules/datasource/unity3d-packages/","title":"Unity3d Packages Datasource","text":""},{"location":"modules/datasource/unity3d-packages/#table-of-values","title":"Table of values","text":"Name Value Notes Identifier <code>unity3d-packages</code> Default versioning <code>unity3d-packages</code> Custom registry support Yes Release timestamp support No Source URL support No"},{"location":"modules/datasource/unity3d-packages/#description","title":"Description","text":"<p>This datasource finds Unity package updates from Unity package feeds.</p> <p>By default, Renovate checks <code>https://packages.unity.com</code> for Unity packages.</p> <p>You can override the default behavior with the <code>registryUrls</code> config option. For example:</p> <pre><code>{\n  \"matchDatasources\": [\"unity3d-packages\"],\n  \"registryUrls\": [\"https://package.openupm.com\"]\n}\n</code></pre>"},{"location":"modules/manager/","title":"Managers","text":"<p>Renovate is based around the concept of \"package managers\", or \"managers\" for short. These range from traditional package managers like npm, Bundler and Composer through to less traditional concepts like CircleCI or Travis config files.</p> <p>The goal of Renovate is to detect and maintain all third-party dependencies in your repositories, through the use of managers.</p>"},{"location":"modules/manager/#supported-managers","title":"Supported Managers","text":"Group Category ID Managers Ansible <code>ansible</code> <code>ansible</code>, <code>ansible-galaxy</code> Batect <code>batect</code> <code>batect</code>, <code>batect-wrapper</code> Bazel <code>bazel</code> <code>bazel</code>, <code>bazel-module</code>, <code>bazelisk</code> C and C++ <code>c</code> <code>conan</code> Continuous Delivery <code>cd</code> <code>argocd</code>, <code>buildpacks</code>, <code>cdnurl</code>, <code>fleet</code>, <code>flux</code>, <code>glasskube</code>, <code>helmfile</code>, <code>helmsman</code>, <code>html</code>, <code>sveltos</code>, <code>tekton</code> Continuous Integration <code>ci</code> <code>azure-pipelines</code>, <code>bitbucket-pipelines</code>, <code>bitrise</code>, <code>buildkite</code>, <code>buildpacks</code>, <code>circleci</code>, <code>cloudbuild</code>, <code>crow</code>, <code>droneci</code>, <code>github-actions</code>, <code>gitlabci</code>, <code>gitlabci-include</code>, <code>jenkins</code>, <code>tekton</code>, <code>travis</code>, <code>velaci</code>, <code>woodpecker</code> Custom Managers <code>custom</code> <code>regex</code>, <code>jsonata</code> Dart <code>dart</code> <code>pub</code> Docker <code>docker</code> <code>buildpacks</code>, <code>devcontainer</code>, <code>docker-compose</code>, <code>dockerfile</code>, <code>quadlet</code> .NET <code>dotnet</code> <code>cake</code>, <code>nuget</code> Elixir <code>elixir</code> <code>mix</code> Go <code>golang</code> <code>gomod</code>, <code>ocb</code> Haskell <code>haskell</code> <code>haskell-cabal</code> Helm <code>helm</code> <code>helm-requirements</code>, <code>helm-values</code>, <code>helmfile</code>, <code>helmsman</code>, <code>helmv3</code> Infrastructure as Code <code>iac</code> <code>ansible</code>, <code>ansible-galaxy</code>, <code>bicep</code>, <code>crossplane</code>, <code>puppet</code>, <code>terraform</code>, <code>terragrunt</code> Java <code>java</code> <code>deps-edn</code>, <code>gradle</code>, <code>gradle-wrapper</code>, <code>kotlin-script</code>, <code>leiningen</code>, <code>maven</code>, <code>maven-wrapper</code>, <code>sbt</code>, <code>scalafmt</code> JavaScript <code>js</code> <code>bun</code>, <code>bun-version</code>, <code>meteor</code>, <code>nodenv</code>, <code>npm</code>, <code>nvm</code> Kubernetes <code>kubernetes</code> <code>argocd</code>, <code>crossplane</code>, <code>fleet</code>, <code>flux</code>, <code>glasskube</code>, <code>helm-requirements</code>, <code>helm-values</code>, <code>helmfile</code>, <code>helmsman</code>, <code>helmv3</code>, <code>jsonnet-bundler</code>, <code>kubernetes</code>, <code>kustomize</code>, <code>sveltos</code> Node.js <code>node</code> <code>nodenv</code>, <code>nvm</code> Perl <code>perl</code> <code>cpanfile</code> PHP <code>php</code> <code>composer</code> Python <code>python</code> <code>pep621</code>, <code>pep723</code>, <code>pip-compile</code>, <code>pip_requirements</code>, <code>pip_setup</code>, <code>pipenv</code>, <code>pixi</code>, <code>poetry</code>, <code>pyenv</code>, <code>runtime-version</code>, <code>setup-cfg</code> Ruby <code>ruby</code> <code>bundler</code>, <code>puppet</code>, <code>ruby-version</code> Rust <code>rust</code> <code>cargo</code> Swift <code>swift</code> <code>cocoapods</code>, <code>mint</code>, <code>swift</code> Terraform <code>terraform</code> <code>terraform</code>, <code>terraform-version</code>, <code>terragrunt</code>, <code>terragrunt-version</code>, <code>tflint-plugin</code> No Category n/a <code>asdf</code>, <code>copier</code>, <code>devbox</code>, <code>fvm</code>, <code>git-submodules</code>, <code>gleam</code>, <code>hermit</code>, <code>homebrew</code>, <code>mise</code>, <code>nix</code>, <code>osgi</code>, <code>pre-commit</code>, <code>renovate-config-presets</code>, <code>typst</code>, <code>unity3d</code>, <code>vendir</code>"},{"location":"modules/manager/#configuring-managers","title":"Configuring Managers","text":""},{"location":"modules/manager/#file-matching","title":"File Matching","text":"<p>Most Renovate managers have a default <code>managerFilePatterns</code> array. The <code>managerFilePatterns</code> array can hold a regular expression or glob pattern, that match against the repository file list.</p>"},{"location":"modules/manager/#managers-with-no-default-managerfilepatterns","title":"Managers with no default managerFilePatterns","text":"<p>Some managers have no default <code>managerFilePatterns</code>, because they have no filename convention that would let Renovate intelligently filter them. If there is no default <code>filePattern</code>, the manager is disabled. For the manager to work, you must create a <code>managerFilePatterns</code> regular expression, or glob pattern. For example:</p> <pre><code>{\n  \"kubernetes\": {\n    \"managerFilePatterns\": [\"/^config/.*\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/#extending-a-managers-default-managerfilepatterns","title":"Extending a manager's default managerFilePatterns","text":"<p>If the default <code>managerFilePatterns</code> for a manager does not match your file(s), you can extend the pattern. You extend the pattern by configuring the manager's <code>managerFilePatterns</code>. For example:</p> <pre><code>{\n  \"dockerfile\": {\n    \"managerFilePatterns\": [\"does-not-look-like-a-docker-file\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/#ignoring-files-that-match-the-default-managerfilepatterns","title":"Ignoring files that match the default managerFilePatterns","text":"<p>Renovate will extend the existing <code>managerFilePatterns</code>, meaning you don't need to include the default patterns like <code>Dockerfile</code> in your own array. In other words, the patterns are \"additive\". If a manager matches a file that you don't want it to, ignore it using the <code>ignorePaths</code> configuration option. Also, if you ever find that Renovate is not matching a file name that you're certain it should, check your preset config isn't the cause of it. The <code>config:recommended</code> preset ignores common test and example directory names, for example.</p>"},{"location":"modules/manager/#enabling-and-disabling-managers","title":"Enabling and disabling managers","text":""},{"location":"modules/manager/#enabling-experimental-managers","title":"Enabling experimental managers","text":"<p>Most managers are enabled by default. For those that aren't, typically because they are considered experimental, you can opt-in manually. If there was a manager called <code>some-new-manager</code> you would enable it like this:</p> <pre><code>{\n  \"some-new-manager\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"modules/manager/#disabling-managers","title":"Disabling managers","text":"Example of disabling a specific manager (gradle)<pre><code>{\n  \"gradle\": {\n    \"enabled\": false\n  }\n}\n</code></pre> <p>Please check the list of supported managers.</p>"},{"location":"modules/manager/#limiting-enabled-managers","title":"Limiting enabled managers","text":"<p>Say you only want to use Renovate for JavaScript packages, and to update your Dockerfile, and don't want any other updates. You can use the <code>enabledManagers</code> array, to list the managers you want to use (<code>npm</code>, <code>dockerfile</code>):</p> <pre><code>{\n  \"enabledManagers\": [\"npm\", \"dockerfile\"]\n}\n</code></pre> <p>Using the <code>enabledManagers</code> array disables all other managers, this includes Bundler, Composer, Docker Compose, etc.</p>"},{"location":"modules/manager/ansible/","title":"Automated Dependency Updates for Ansible","text":"<p>Categories: <code>ansible</code>, <code>iac</code></p> <p>Renovate supports updating Ansible dependencies.</p>"},{"location":"modules/manager/ansible/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)tasks/[^/]+\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/ansible/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/ansible/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)tasks/[^/]+\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/ansible/#additional-information","title":"Additional Information","text":"<p>Supports Docker-type dependency extraction from Ansible configuration files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/ansible-galaxy/","title":"Automated Dependency Updates for Ansible Galaxy","text":"<p>Categories: <code>ansible</code>, <code>iac</code></p> <p>Renovate supports updating Ansible Galaxy dependencies.</p>"},{"location":"modules/manager/ansible-galaxy/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)(galaxy|requirements)(\\.ansible)?\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/ansible-galaxy/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>galaxy-collection</code>, <code>git-tags</code>, <code>github-tags</code>.</p>"},{"location":"modules/manager/ansible-galaxy/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)(galaxy|requirements)(\\\\.ansible)?\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/ansible-galaxy/#additional-information","title":"Additional Information","text":"<p>Extracts Ansible Galaxy dependencies from configuration files used by the <code>ansible-galaxy</code> CLI tool.</p> <p>This manager uses two <code>depType</code>s to allow a fine-grained control of which dependencies are upgraded:</p> <ul> <li>collection</li> <li>role</li> </ul>"},{"location":"modules/manager/argocd/","title":"Automated Dependency Updates for Argo CD","text":"<p>Categories: <code>kubernetes</code>, <code>cd</code></p> <p>Renovate supports updating Argo CD dependencies.</p>"},{"location":"modules/manager/argocd/#file-matching","title":"File Matching","text":"<p>Because file names for <code>argocd</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>argocd</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/argocd/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>, <code>helm</code>.</p>"},{"location":"modules/manager/argocd/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/argocd/#additional-information","title":"Additional Information","text":"<p>To use the <code>argocd</code> manager you must set your own <code>managerFilePatterns</code> pattern. The <code>argocd</code> manager has no default <code>managerFilePatterns</code> pattern, because there is no common filename or directory name convention for Argo CD YAML files. By setting your own <code>managerFilePatterns</code> Renovate avoids having to check each <code>*.yaml</code> file in a repository for a Argo CD definition.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>Some configuration examples:</p> If most .yaml files in your repository are for Argo CD<pre><code>{\n  \"argocd\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\"]\n  }\n}\n</code></pre> Argo CD YAML files are in a argocd/ directory<pre><code>{\n  \"argocd\": {\n    \"managerFilePatterns\": [\"/argocd/.+\\\\.yaml$/\"]\n  }\n}\n</code></pre> One Argo CD file in a directory<pre><code>{\n  \"argocd\": {\n    \"managerFilePatterns\": [\"/^config/applications\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/asdf/","title":"Automated Dependency Updates for asdf","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating asdf dependencies.</p>"},{"location":"modules/manager/asdf/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.tool-versions$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/asdf/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>dart-version</code>, <code>docker</code>, <code>dotnet-version</code>, <code>flutter-version</code>, <code>github-releases</code>, <code>github-tags</code>, <code>hexpm-bob</code>, <code>java-version</code>, <code>node-version</code>, <code>npm</code>, <code>pypi</code>, <code>ruby-version</code>.</p>"},{"location":"modules/manager/asdf/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.tool-versions$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/asdf/#additional-information","title":"Additional Information","text":"<p>Keeps the asdf <code>.tool-versions</code> file updated.</p> <p>Because <code>asdf</code> supports versioning for many different tools, specific tool support must be added one-by-one. The following tools are currently supported:</p> <ul> <li>act</li> <li>actionlint</li> <li>adr-tools</li> <li>argocd</li> <li>asdf-plugin-manager</li> <li>atmos</li> <li>awscli</li> <li>azure-cli</li> <li>bun</li> <li>cargo-make</li> <li>checkov</li> <li>clojure</li> <li>clusterctl</li> <li>conftest</li> <li>container-structure-test</li> <li>cookiecutter</li> <li>cosign</li> <li>crystal</li> <li>dart</li> <li>deno</li> <li>direnv</li> <li>dotnet-core</li> <li>dprint</li> <li>ecspresso</li> <li>editorconfig-checker</li> <li>elixir</li> <li>elm</li> <li>erlang</li> <li>flutter</li> <li>flux2</li> <li>gauche</li> <li>github-cli</li> <li>gitleaks</li> <li>ginkgo</li> <li>gleam</li> <li>gohugo</li> <li>golang</li> <li>golangci-lint</li> <li>gomplate</li> <li>gotestsum</li> <li>hadolint</li> <li>haskell</li> <li>helm</li> <li>helm-docs</li> <li>helmfile</li> <li>hugo</li> <li>idris</li> <li>istioctl</li> <li>java</li> <li>julia</li> <li>just</li> <li>k3s</li> <li>kind</li> <li>kotlin</li> <li>kubebuilder</li> <li>kubectl</li> <li>kubetail</li> <li>kustomize</li> <li>localstack</li> <li>lua</li> <li>markdownlint-cli2</li> <li>maven</li> <li>mimirtool</li> <li>minikube</li> <li>mockery</li> <li>nim</li> <li>nodejs</li> <li>ocaml</li> <li>oci</li> <li>opa</li> <li>opentofu</li> <li>packer</li> <li>perl</li> <li>php</li> <li>pnpm</li> <li>poetry</li> <li>pre-commit</li> <li>protoc</li> <li>pulumi</li> <li>python</li> <li>rebar</li> <li>ruby</li> <li>rust</li> <li>sbt</li> <li>scala</li> <li>shellcheck</li> <li>shfmt</li> <li>skaffold</li> <li>sops</li> <li>steampipe</li> <li>talhelper</li> <li>talosctl</li> <li>terraform</li> <li>terraform-docs</li> <li>terraformer</li> <li>terragrunt</li> <li>terramate</li> <li>tflint</li> <li>tfsec</li> <li>trivy</li> <li>vault</li> <li>yamllint</li> <li>yq</li> <li>zig</li> <li>maestro</li> <li>detekt</li> <li>ktlint</li> <li>yamlfmt</li> <li>tuist</li> <li>typos</li> <li>uv</li> </ul> <p>Note</p> <p>Only the first version entry for each supported tool is managed, this is because <code>.tool-versions</code> supports fallback versions.</p>"},{"location":"modules/manager/azure-pipelines/","title":"Automated Dependency Updates for Azure Pipelines","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Azure Pipelines dependencies.</p>"},{"location":"modules/manager/azure-pipelines/#enabling","title":"Enabling","text":"<p>Azure Pipelines functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"azure-pipelines\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/azure-pipelines/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/).azuredevops/.+\\.ya?ml$/\n/azure.*pipelines?.*\\.ya?ml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/azure-pipelines/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>azure-pipelines-tasks</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/azure-pipelines/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/).azuredevops/.+\\\\.ya?ml$/\",\n    \"/azure.*pipelines?.*\\\\.ya?ml$/\"\n  ],\n  \"enabled\": false\n}\n</code></pre>"},{"location":"modules/manager/azure-pipelines/#additional-information","title":"Additional Information","text":"<p>The <code>azure-pipelines</code> manager is disabled by default. This is because there's no way for Renovate to know whether new task versions are yet available with the Azure DevOps environment, so new versions proposed by Renovate could fail.</p> <p>To opt into running it, set the following:</p> <pre><code>{\n  \"azure-pipelines\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>In most cases only major version numbers are specified in YAML when referencing a task version: <code>NodeTool@0</code>. By default, Renovate replaces these with the full version: <code>NodeTool@0.216.0</code>.</p> <p>To use the standard convention for Azure Pipelines, add:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"azure-pipelines-tasks\"],\n      \"extractVersion\": \"^(?&lt;version&gt;\\\\d+)\"\n    }\n  ]\n}\n</code></pre> <p>Renovate now updates container and repository resources from the <code>resources</code> block, plus tasks from <code>steps</code> blocks.</p> <p>For example:</p> <pre><code>resources:\n  repositories:\n    - type: github\n      name: renovate/renovate\n      ref: refs/heads/main\n    - type: github\n      name: user/repo\n      ref: refs/tags/v0.5.1\n  containers:\n    - container: linux\n      image: ubuntu:24.04\n    - container: python\n      image: python:3.14@sha256:934873f1360893d07afe0d25b99af46640e916a5900f1677fb86e41f73920253\n\nstages:\n  - stage: StageOne\n    jobs:\n      - job: JobOne\n        steps:\n          - task: Bash@3\n            inputs:\n              script: 'echo Hello World'\n</code></pre> <p>Read the resources block and the tasks block Azure Pipelines documentation for more information.</p> <p>The <code>azure-pipelines</code> manager can process these files:</p> <ul> <li><code>.azure-pipelines/**/*.yaml</code></li> <li><code>.azure-pipelines.yaml</code></li> <li><code>.azure-pipelines.yml</code></li> <li><code>azure-pipelines/**/*.yaml</code></li> <li><code>azure-pipelines.yaml</code></li> <li><code>azure-pipelines.yml</code></li> <li><code>azure-pipeline/**/*.yaml</code></li> <li><code>azure-pipeline.yaml</code></li> <li><code>azure-pipeline.yml</code></li> </ul> <p>Warning</p> <p>Renovate can't update (root) container-element in containers jobs, see issue #21987. Renovate can't read Azure repositories defined in resource blocks, see issue #15028.</p>"},{"location":"modules/manager/batect/","title":"Automated Dependency Updates for Batect","text":"<p>Categories: <code>batect</code></p> <p>Renovate supports updating Batect dependencies.</p>"},{"location":"modules/manager/batect/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)batect(-bundle)?\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/batect/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/batect/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)batect(-bundle)?\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/batect/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images and Batect bundles from Batect configuration files.</p> <p>For updates to Batect itself, see batect-wrapper.</p>"},{"location":"modules/manager/batect/#files-searched","title":"Files searched","text":"<p>By default, the manager searches for files called <code>batect.yml</code> or <code>batect-bundle.yml</code>.</p> <p>If you keep your Batect configuration in other files, you'll need to tell Renovate where to find them. Files included in your main configuration file with <code>include</code> don't need to be listed.</p> <p>You do this by creating a <code>\"batect\"</code> object in your <code>renovate.json</code> file. This object should have a <code>managerFilePatterns</code> array with regular expressions that match the configuration file names.</p> <p>For example:</p> <pre><code>{\n  \"batect\": {\n    \"managerFilePatterns\": [\n      \"/(^|/)batect(-bundle)?\\\\.yml$/\",\n      \"/(^|/)my-other-batect-file\\\\.yml$/\",\n      \"/^a-directory/[^/]*\\\\.yml$/\"\n    ]\n  }\n}\n</code></pre>"},{"location":"modules/manager/batect/#bundle-versioning","title":"Bundle versioning","text":"<p>This manager assumes that any bundles referenced use tags for versioning, and that these tags use SemVer. The implementation of SemVer is strict - versions must follow the <code>X.Y.Z</code> or <code>vX.Y.Z</code> format. Versions that don't match this format (eg. <code>X.Y</code>) will be ignored.</p>"},{"location":"modules/manager/batect-wrapper/","title":"Automated Dependency Updates for Batect Wrapper","text":"<p>Categories: <code>batect</code></p> <p>Renovate supports updating Batect Wrapper dependencies.</p>"},{"location":"modules/manager/batect-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)batect$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/batect-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/batect-wrapper/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)batect$/\"\n  ],\n  \"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/batect-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Batect wrapper updates. The default configuration will automatically update both <code>batect</code> and <code>batect.cmd</code>, similar to running <code>./batect --upgrade</code>.</p> <p>See also: Batect image reference updates</p>"},{"location":"modules/manager/bazel/","title":"Automated Dependency Updates for Bazel","text":"<p>Categories: <code>bazel</code></p> <p>Renovate supports updating Bazel dependencies.</p>"},{"location":"modules/manager/bazel/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)WORKSPACE(|\\.bazel|\\.bzlmod)$/\n/\\.WORKSPACE\\.bazel$/\n/\\.bzl$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bazel/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>github-releases</code>, <code>github-tags</code>, <code>go</code>.</p>"},{"location":"modules/manager/bazel/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)WORKSPACE(|\\\\.bazel|\\\\.bzlmod)$/\",\n    \"/\\\\.WORKSPACE\\\\.bazel$/\",\n    \"/\\\\.bzl$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/bazel/#additional-information","title":"Additional Information","text":"<p>Bazel is quite unlike most other \"package managers\" that Renovate supports, which usually focus on a particular ecosystem like JavaScript, Ruby or Docker. Instead, Bazel is a build tool so supports a multitude of languages/datasources. Renovate does not support all possible Bazel references, although would like to, and feature requests are welcome.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/bazel-module/","title":"Automated Dependency Updates for Bazel Module","text":"<p>Categories: <code>bazel</code></p> <p>Renovate supports updating Bazel Module dependencies.</p>"},{"location":"modules/manager/bazel-module/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/|\\.)MODULE\\.bazel$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bazel-module/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>bazel</code>, <code>docker</code>, <code>github-tags</code>, <code>maven</code>.</p>"},{"location":"modules/manager/bazel-module/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/|\\\\.)MODULE\\\\.bazel$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/bazel-module/#additional-information","title":"Additional Information","text":"<p>The <code>bazel-module</code> manager can update Bazel module (bzlmod) enabled workspaces.</p>"},{"location":"modules/manager/bazel-module/#maven","title":"Maven","text":"<p>It also takes care about maven artifacts initalized with bzlmod. For simplicity the name of extension variable is limited to <code>maven*</code>. E.g.:</p> <pre><code>maven = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\")\n</code></pre> <pre><code>maven_1 = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\")\n</code></pre> <p>Both <code>install</code> and <code>artifact</code> methods are supported:</p> <pre><code>maven.install(\n    artifacts = [\n        \"org.seleniumhq.selenium:selenium-java:4.4.0\",\n    ],\n)\n\nmaven.artifact(\n    artifact = \"javapoet\",\n    group = \"com.squareup\",\n    neverlink = True,\n    version = \"1.11.1\",\n)\n</code></pre>"},{"location":"modules/manager/bazel-module/#docker","title":"Docker","text":"<p>Similarly, it updates Docker / OCI images pulled with oci_pull.</p> <p>Note that the extension must be called <code>oci</code>:</p> <pre><code>oci = use_extension(\"@rules_oci//oci:extensions.bzl\", \"oci\")\n\noci.pull(\n    name = \"nginx_image\",\n    digest = \"sha256:287ff321f9e3cde74b600cc26197424404157a72043226cbbf07ee8304a2c720\",\n    image = \"index.docker.io/library/nginx\",\n    platforms = [\"linux/amd64\"],\n    tag = \"1.27.1\",\n)\n</code></pre> <p>It also supports Docker images pulled with rules_img pull:</p> <pre><code>pull = use_repo_rule(\"@rules_img//img:pull.bzl\", \"pull\")\npull(\n    name = \"ubuntu\",\n    digest = \"sha256:1e622c5f9ac0c0144d577702ba5f2cce79fc8e3cf89ec88291739cd4eee3b7b9\",\n    registry = \"index.docker.io\",\n    repository = \"library/ubuntu\",\n    tag = \"24.04\",\n)\n</code></pre>"},{"location":"modules/manager/bazelisk/","title":"Automated Dependency Updates for Bazelisk","text":"<p>Categories: <code>bazel</code></p> <p>Renovate supports updating Bazelisk dependencies.</p>"},{"location":"modules/manager/bazelisk/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.bazelversion$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bazelisk/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/bazelisk/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.bazelversion$/\"\n  ],\n  \"pinDigests\": false,\n  \"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/bazelisk/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.bazelversion</code> file updated.</p>"},{"location":"modules/manager/bicep/","title":"Automated Dependency Updates for Bicep","text":"<p>Categories: <code>iac</code></p> <p>Renovate supports updating Bicep dependencies.</p>"},{"location":"modules/manager/bicep/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.bicep$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bicep/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>azure-bicep-resource</code>.</p>"},{"location":"modules/manager/bicep/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.bicep$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/bicep/#additional-information","title":"Additional Information","text":"<p>Updates the Azure REST API version of <code>resource</code>s in Bicep files.</p>"},{"location":"modules/manager/bitbucket-pipelines/","title":"Automated Dependency Updates for Bitbucket Pipelines","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Bitbucket Pipelines dependencies.</p>"},{"location":"modules/manager/bitbucket-pipelines/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.?bitbucket-pipelines\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bitbucket-pipelines/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/bitbucket-pipelines/#references","title":"References","text":"<ul> <li>https://support.atlassian.com/bitbucket-cloud/docs/bitbucket-pipelines-configuration-reference</li> </ul>"},{"location":"modules/manager/bitbucket-pipelines/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.?bitbucket-pipelines\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/bitbucket-pipelines/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from Bitbucket Pipelines config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/bitrise/","title":"Automated Dependency Updates for Bitrise","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Bitrise dependencies.</p>"},{"location":"modules/manager/bitrise/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)bitrise\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bitrise/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>bitrise</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/bitrise/#references","title":"References","text":"<ul> <li>https://devcenter.bitrise.io/en/steps-and-workflows/introduction-to-steps.html</li> </ul>"},{"location":"modules/manager/bitrise/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)bitrise\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/bitrise/#additional-information","title":"Additional Information","text":"<p>Updates step references of <code>bitrise.yml</code> files.</p>"},{"location":"modules/manager/buildkite/","title":"Automated Dependency Updates for Buildkite","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Buildkite dependencies.</p>"},{"location":"modules/manager/buildkite/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/buildkite\\.ya?ml/\n/\\.buildkite/.+\\.ya?ml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/buildkite/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>bitbucket-tags</code>.</p>"},{"location":"modules/manager/buildkite/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/buildkite\\\\.ya?ml/\",\n    \"/\\\\.buildkite/.+\\\\.ya?ml$/\"\n  ],\n  \"commitMessageTopic\": \"buildkite plugin {{depName}}\",\n  \"commitMessageExtra\": \"to {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{newValue}}}{{/if}}\"\n}\n</code></pre>"},{"location":"modules/manager/buildkite/#additional-information","title":"Additional Information","text":"<p>Used for updating Docker dependencies in Buildkite configuration files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/buildpacks/","title":"Automated Dependency Updates for Buildpacks","text":"<p>Categories: <code>docker</code>, <code>ci</code>, <code>cd</code></p> <p>Renovate supports updating Buildpacks dependencies.</p>"},{"location":"modules/manager/buildpacks/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)project\\.toml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/buildpacks/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>buildpacks-registry</code>.</p>"},{"location":"modules/manager/buildpacks/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"buildpack {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)project\\\\.toml$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/buildpacks/#additional-information","title":"Additional Information","text":"<p>The <code>buildpacks</code> manager updates Cloud Native Buildpacks project descriptors in <code>project.toml</code> files. A <code>project.toml</code> file can reference builder / buildpack images by URIs. Renovate can update a <code>project.toml</code> file if:</p> <ul> <li>It can find the file</li> <li>The file follows the project descriptor specifications</li> <li>The buildpack <code>uri</code> is an OCI image reference (references to a local file or buildpack registry are ignored)</li> </ul> <p>Note: If you use buildpacks in the <code>io.buildpacks.group</code> array, then you must configure the Docker reference (<code>uri</code>) for Renovate to work.</p> Example of a project.toml file with Docker reference URIs<pre><code>[_]\nschema-version = \"0.2\"\n\n[io.buildpacks]\nbuilder = \"registry.corp/builder/noble:1.1.1\"\n\n[[io.buildpacks.group]]\nuri = \"docker://buildpacks/java:2.2.2\"\n\n[[io.buildpacks.group]]\nuri = \"buildpacks/nodejs:3.3.3\"\n\n[[io.buildpacks.group]]\nuri = \"file://local.oci\" # will be ignored\n</code></pre>"},{"location":"modules/manager/bun/","title":"Automated Dependency Updates for Bun","text":"<p>Categories: <code>js</code></p> <p>Renovate supports updating Bun dependencies.</p>"},{"location":"modules/manager/bun/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)bun\\.lockb?$/\n/(^|/)package\\.json$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bun/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>npm</code>.</p>"},{"location":"modules/manager/bun/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)bun\\\\.lockb?$/\",\n    \"/(^|/)package\\\\.json$/\"\n  ],\n  \"digest\": {\n    \"prBodyDefinitions\": {\n      \"Change\": \"{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}\"\n    }\n  },\n  \"prBodyDefinitions\": {\n    \"Change\": \"[{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}]({{#if depName}}https://renovatebot.com/diffs/npm/{{replace '/' '%2f' depName}}/{{{currentVersion}}}/{{{newVersion}}}{{/if}})\"\n  }\n}\n</code></pre>"},{"location":"modules/manager/bun/#additional-information","title":"Additional Information","text":"<p>Used for updating bun projects. Bun is a tool for JavaScript projects and therefore an alternative to managers like npm, pnpm and Yarn.</p> <p>If a <code>package.json</code> is found to be part of <code>bun</code> manager results then the same file will be excluded from the <code>npm</code> manager results unless an npm/pnpm/Yarn lock file is also found.</p>"},{"location":"modules/manager/bun-version/","title":"Automated Dependency Updates for Bun Version","text":"<p>Categories: <code>js</code></p> <p>Renovate supports updating Bun Version dependencies.</p>"},{"location":"modules/manager/bun-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.bun-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bun-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>npm</code>.</p>"},{"location":"modules/manager/bun-version/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.bun-version$/\"\n  ],\n  \"versioning\": \"npm\"\n}\n</code></pre>"},{"location":"modules/manager/bun-version/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.bun-version</code> file updated.</p>"},{"location":"modules/manager/bundler/","title":"Automated Dependency Updates for Bundler","text":"<p>Categories: <code>ruby</code></p> <p>Renovate supports updating Bundler dependencies.</p>"},{"location":"modules/manager/bundler/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Gemfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/bundler/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>rubygems</code>, <code>ruby-version</code>.</p>"},{"location":"modules/manager/bundler/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Gemfile$/\"\n  ],\n  \"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/bundler/#additional-information","title":"Additional Information","text":"<p>Renovate uses the <code>bundler</code> manager to extract dependencies from <code>Gemfile</code> and <code>Gemfile.lock</code> files.</p>"},{"location":"modules/manager/bundler/#authenticating-private-registry","title":"Authenticating private registry","text":"<p>If:</p> <ul> <li>you need Bundler to authenticate to a private registry</li> <li>and that private registry is not on the same host as Renovate (your GitHub/GitLab/etc)</li> </ul> <p>Then you should authenticate Renovate with <code>hostRules</code>. For example:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"private-registry.company.com\",\n      \"hostType\": \"rubygems\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n</code></pre> <p>Important notes:</p> <ul> <li><code>hostType</code> is a required field, set <code>hostType=rubygems</code></li> <li>If you use the same registry for more than one package type, you may need more than one <code>hostRules</code> entry</li> <li>Instead of <code>token</code>, you can use a <code>username</code> and <code>password</code></li> </ul> <p>To avoid committing raw secrets to your repository, either:</p> <ul> <li>If self-hosting: add the <code>hostRules</code> to your bot config file, instead of the repository configuration file, or</li> <li>If using the Mend Renovate App: use the <code>encrypted</code> config option</li> </ul>"},{"location":"modules/manager/cake/","title":"Automated Dependency Updates for Cake","text":"<p>Categories: <code>dotnet</code></p> <p>Renovate supports updating Cake dependencies.</p>"},{"location":"modules/manager/cake/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.cake$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cake/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>nuget</code>.</p>"},{"location":"modules/manager/cake/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.cake$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/cake/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>*.cake</code> files.</p>"},{"location":"modules/manager/cargo/","title":"Automated Dependency Updates for Cargo","text":"<p>Categories: <code>rust</code></p> <p>Renovate supports updating Cargo dependencies.</p>"},{"location":"modules/manager/cargo/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Cargo\\.toml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cargo/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>crate</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>git-refs</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/cargo/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"Rust crate {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)Cargo\\\\.toml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/cargo/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>Cargo.toml</code> files, and also updates <code>Cargo.lock</code> files too if found.</p> <p>When using the default rangeStrategy=auto:</p> <ul> <li>If a \"less than\" instruction is found (e.g. <code>&lt;2</code>) then <code>rangeStrategy=widen</code> will be selected,</li> <li>Otherwise, <code>rangeStrategy=update-lockfile</code> will be selected.</li> </ul> <p>The <code>update-lockfile</code> default means that most upgrades will update <code>Cargo.lock</code> files without the need to change the value in <code>Cargo.toml</code>.</p>"},{"location":"modules/manager/cargo/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>cargo</code> commands to update the <code>cargo.lock</code>, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>Renovate uses this logic before it updates any \"artifacts\":</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token or username/password and <code>matchHost</code> will be fetched, except for any <code>github.com</code> one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of these characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>cargo</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/cdnurl/","title":"Automated Dependency Updates for CDN URL","text":"<p>Categories: <code>cd</code></p> <p>Renovate supports updating CDN URL dependencies.</p>"},{"location":"modules/manager/cdnurl/#file-matching","title":"File Matching","text":"<p>Because file names for <code>cdnurl</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>cdnurl</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cdnurl/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>cdnjs</code>.</p>"},{"location":"modules/manager/cdnurl/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [],\n  \"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/cdnurl/#additional-information","title":"Additional Information","text":"<p>To enable this manager, add the matching files to <code>cdnurl.managerFilePatterns</code>. For example:</p> <pre><code>{\n  \"cdnurl\": {\n    \"managerFilePatterns\": [\"/\\\\.html?$/\"]\n  }\n}\n</code></pre> <p>Warning</p> <p>This manager does not read or update Subresource Integrity (SRI) hashes. It replaces any matching URL it finds, without adding or updating script integrity hashes. We recommend you use the <code>html</code> manager if you need SRI updating.</p>"},{"location":"modules/manager/circleci/","title":"Automated Dependency Updates for CircleCI","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating CircleCI dependencies.</p>"},{"location":"modules/manager/circleci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.circleci/.+\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/circleci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>orb</code>.</p>"},{"location":"modules/manager/circleci/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.circleci/.+\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/circleci/#additional-information","title":"Additional Information","text":"<p>The <code>circleci</code> manager extracts both <code>docker</code> as well as <code>orb</code> datasources from CircleCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/circleci/#private-orbs","title":"Private orbs","text":"<p>To get private orbs working you should:</p> <ol> <li>Encrypt your CircleCI token with the Renovate encryption page</li> <li>Create a new <code>hostRules</code> entry in your Renovate config file</li> <li>Put the encrypted token in the <code>token</code> field</li> </ol> <p>The end-result should look like this:</p> <pre><code>{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"circleci.com\",\n      \"authType\": \"Token-Only\",\n      \"encrypted\": {\n        \"token\": \"****\"\n      }\n    }\n  ]\n}\n</code></pre> <p>This config strips the Bearer/Basic prefix from the <code>authorization</code> header.</p>"},{"location":"modules/manager/cloudbuild/","title":"Automated Dependency Updates for Cloud Build","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Cloud Build dependencies.</p>"},{"location":"modules/manager/cloudbuild/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)cloudbuild\\.ya?ml/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cloudbuild/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/cloudbuild/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)cloudbuild\\\\.ya?ml/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/cloudbuild/#additional-information","title":"Additional Information","text":"<p>The <code>cloudbuild</code> manager extracts <code>docker</code> datasources from Cloud Build config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/cocoapods/","title":"Automated Dependency Updates for CocoaPods","text":"<p>Categories: <code>swift</code></p> <p>Renovate supports updating CocoaPods dependencies.</p>"},{"location":"modules/manager/cocoapods/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Podfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cocoapods/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>pod</code>.</p>"},{"location":"modules/manager/cocoapods/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Podfile$/\"\n  ],\n  \"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/cocoapods/#additional-information","title":"Additional Information","text":"<p>The <code>cocoapods</code> manager supports extracting both \"pod\" type references as well as dependencies on GitHub repositories that use versioned tags.</p> <p>Whenever a <code>Podfile</code> is updated, Renovate will also update any associated <code>Podfile.lock</code> file. This is done using the <code>cocoapods</code> gem, which runs within the Ruby runtime.</p>"},{"location":"modules/manager/composer/","title":"Automated Dependency Updates for Composer","text":"<p>Categories: <code>php</code></p> <p>Renovate supports updating Composer dependencies.</p>"},{"location":"modules/manager/composer/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)([\\w-]*)composer\\.json$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/composer/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>bitbucket-tags</code>, <code>git-tags</code>, <code>packagist</code>.</p>"},{"location":"modules/manager/composer/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)([\\\\w-]*)composer\\\\.json$/\"\n  ],\n  \"versioning\": \"composer\"\n}\n</code></pre>"},{"location":"modules/manager/composer/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>composer.json</code> files, and keeps the associated <code>composer.lock</code> file updated too.</p> <p>If you use VCS repositories then Renovate needs a hint via the <code>name</code> property, which must match the relevant package. For example, the package <code>acme/foo</code> would need an entry in repositories similar to the following:</p> <pre><code>{\n  \"name\": \"acme/foo\",\n  \"type\": \"vcs\",\n  \"url\": \"http://vcs-of-acme.org/acme/foo.git\"\n}\n</code></pre> <p>By default, Renovate will invoke <code>composer update</code> with the <code>--with-dependencies</code> flag. Add <code>composerWithAll</code> to your <code>postUpdateOptions</code> array to use the <code>--with-all-dependencies</code> flag instead.</p>"},{"location":"modules/manager/conan/","title":"Automated Dependency Updates for Conan","text":"<p>Categories: <code>c</code></p> <p>Renovate supports updating Conan dependencies.</p>"},{"location":"modules/manager/conan/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)conanfile\\.(txt|py)$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/conan/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>conan</code>.</p>"},{"location":"modules/manager/conan/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)conanfile\\\\.(txt|py)$/\"\n  ],\n  \"datasource\": \"conan\",\n  \"versioning\": \"conan\"\n}\n</code></pre>"},{"location":"modules/manager/conan/#additional-information","title":"Additional Information","text":"<p>Renovate can upgrade dependencies in <code>conanfile.txt</code> or <code>conanfile.py</code> files and also updates <code>conan.lock</code> files too if found.</p> <p>How it works:</p> <ol> <li>Renovate searches in each repository for any <code>conanfile.txt</code> or <code>conanfile.py</code> file</li> <li>Renovate extracts existing dependencies from:<ul> <li>the <code>[requires]</code> and <code>[build_requires]</code> sections in the <code>conanfile.txt</code> format</li> <li>the <code>requirements()</code> and <code>build_requirements()</code> functions in the <code>conanfile.py</code> format</li> <li>and the <code>python_requires</code>, <code>requires</code> and <code>build_requires</code> variables in the <code>conanfile.py</code> format</li> </ul> </li> <li>Renovate resolves the dependency's version using the Conan v2 API</li> <li>If Renovate finds an update, Renovate will update <code>conanfile.txt</code> or <code>conanfile.py</code></li> <li>Renovate also updates <code>conan.lock</code> file if exists</li> </ol>"},{"location":"modules/manager/copier/","title":"Automated Dependency Updates for Copier","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Copier dependencies.</p>"},{"location":"modules/manager/copier/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.copier-answers(\\..+)?\\.ya?ml/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/copier/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/copier/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.copier-answers(\\\\..+)?\\\\.ya?ml/\"\n  ],\n  \"versioning\": \"pep440\"\n}\n</code></pre>"},{"location":"modules/manager/copier/#additional-information","title":"Additional Information","text":"<p>Keeps Copier templates up to date. Supports multiple <code>.copier-answers(...).y(a)ml</code> files in a single repository. If a template requires unsafe features, Copier must be invoked with the <code>--trust</code> flag. Enabling this behavior must be allowed in the self-hosted configuration via <code>allowScripts</code>. Actually enable it in the configuration by setting <code>ignoreScripts</code> to <code>false</code>.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/copier/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>copier</code> command to update from the template, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>Renovate uses this logic before it updates the template copy:</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token or username/password and <code>matchHost</code> will be fetched, except for any <code>github.com</code> one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of these characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>git-tags</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/cpanfile/","title":"Automated Dependency Updates for cpanfile","text":"<p>Categories: <code>perl</code></p> <p>Renovate supports updating cpanfile dependencies.</p>"},{"location":"modules/manager/cpanfile/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)cpanfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/cpanfile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>cpan</code>, <code>github-tags</code>.</p>"},{"location":"modules/manager/cpanfile/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)cpanfile$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/cpanfile/#additional-information","title":"Additional Information","text":"<p>The <code>cpanfile</code> manager is used to extract dependencies from <code>cpanfile</code>.</p>"},{"location":"modules/manager/crossplane/","title":"Automated Dependency Updates for Crossplane","text":"<p>Categories: <code>kubernetes</code>, <code>iac</code></p> <p>Renovate supports updating Crossplane dependencies.</p>"},{"location":"modules/manager/crossplane/#file-matching","title":"File Matching","text":"<p>Because file names for <code>crossplane</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>crossplane</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/crossplane/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/crossplane/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/crossplane/#additional-information","title":"Additional Information","text":"<p>To use the <code>crossplane</code> manager you must set your own <code>managerFilePatterns</code> pattern. The <code>crossplane</code> manager has no default <code>managerFilePatterns</code> pattern, because there is no common filename or directory name convention for Crossplane YAML files. By setting your own <code>managerFilePatterns</code> Renovate avoids having to check each <code>*.yaml</code> file in a repository for a Crossplane Package definition.</p> <p>The <code>crossplane</code> manager supports these <code>depType</code>s:</p> <ul> <li><code>configuration</code></li> <li><code>function</code></li> <li><code>provider</code></li> </ul> <p>You can use these <code>depType</code>'s to control which dependencies Renovate will upgrade.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>Some configuration examples:</p> If most .yaml files are for Crossplane<pre><code>{\n  \"crossplane\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\"]\n  }\n}\n</code></pre> For Crossplane files in a packages/ directory<pre><code>{\n  \"crossplane\": {\n    \"managerFilePatterns\": [\"/packages/.+\\\\.yaml$/\"]\n  }\n}\n</code></pre> For a single Crossplane file<pre><code>{\n  \"crossplane\": {\n    \"managerFilePatterns\": [\"/^config/provider\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/crow/","title":"Automated Dependency Updates for Crow","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Crow dependencies.</p>"},{"location":"modules/manager/crow/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/^\\.crow(?:/[^/]+)?\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/crow/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/crow/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/^\\\\.crow(?:/[^/]+)?\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/crow/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from Crow CI Pipeline YAML files.</p> <ul> <li>Crow CI homepage</li> <li>Crow CI Docs: Workflow Syntax</li> <li>Crow CI JSON schema</li> </ul>"},{"location":"modules/manager/deps-edn/","title":"Automated Dependency Updates for deps.edn","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating deps.edn dependencies.</p>"},{"location":"modules/manager/deps-edn/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)(?:deps|bb)\\.edn$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/deps-edn/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>clojure</code>.</p>"},{"location":"modules/manager/deps-edn/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)(?:deps|bb)\\\\.edn$/\"\n  ],\n  \"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/deps-edn/#additional-information","title":"Additional Information","text":"<p>Extracts Maven dependencies from <code>deps.edn</code> files.</p>"},{"location":"modules/manager/devbox/","title":"Automated Dependency Updates for Devbox","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Devbox dependencies.</p>"},{"location":"modules/manager/devbox/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)devbox\\.json$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/devbox/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>devbox</code>.</p>"},{"location":"modules/manager/devbox/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)devbox\\\\.json$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/devbox/#additional-information","title":"Additional Information","text":"<p>Used for updating devbox projects.</p> <p>Devbox is a tool for creating isolated, reproducible development environments that run anywhere.</p> <p>It uses nix packages sourced from the devbox package registry.</p>"},{"location":"modules/manager/devcontainer/","title":"Automated Dependency Updates for Devcontainer","text":"<p>Categories: <code>docker</code></p> <p>Renovate supports updating Devcontainer dependencies.</p>"},{"location":"modules/manager/devcontainer/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/^.devcontainer/devcontainer.json$/\n/^.devcontainer.json$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/devcontainer/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>golang-version</code>, <code>node-version</code>, <code>python-version</code>, <code>ruby-version</code>.</p>"},{"location":"modules/manager/devcontainer/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/^.devcontainer/devcontainer.json$/\",\n    \"/^.devcontainer.json$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/devcontainer/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from the <code>image</code> and <code>features</code> properties in these files:</p> <ul> <li><code>.devcontainer.json</code></li> <li><code>.devcontainer/devcontainer.json</code></li> </ul> <p>It extracts some known versions of the <code>features</code>, like <code>node</code> and <code>python</code>.</p> <p>The <code>devcontainer</code> manager does not support <code>build.dockerFile</code> or <code>dockerComposeFile</code> values as these are covered by the <code>dockerfile</code> and <code>docker-compose</code> managers respectively.</p>"},{"location":"modules/manager/docker-compose/","title":"Automated Dependency Updates for Docker Compose","text":"<p>Categories: <code>docker</code></p> <p>Renovate supports updating Docker Compose dependencies.</p>"},{"location":"modules/manager/docker-compose/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)(?:docker-)?compose[^/]*\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/docker-compose/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/docker-compose/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)(?:docker-)?compose[^/]*\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/docker-compose/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from with Docker Compose YAML files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/dockerfile/","title":"Automated Dependency Updates for Dockerfile","text":"<p>Categories: <code>docker</code></p> <p>Renovate supports updating Dockerfile dependencies.</p>"},{"location":"modules/manager/dockerfile/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/|\\.)([Dd]ocker|[Cc]ontainer)file$/\n/(^|/)([Dd]ocker|[Cc]ontainer)file[^/]*$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/dockerfile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/dockerfile/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/|\\\\.)([Dd]ocker|[Cc]ontainer)file$/\",\n    \"/(^|/)([Dd]ocker|[Cc]ontainer)file[^/]*$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/dockerfile/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/dockerfile/#supported-dependencies","title":"Supported dependencies","text":"<p>This manager extracts image references in a <code>Dockerfile</code> and/or <code>Containerfile</code> and supports:</p> <ul> <li><code>FROM</code> images</li> <li><code>COPY --from</code> images</li> <li><code>RUN --mount</code> images</li> <li><code>syntax</code> images</li> </ul>"},{"location":"modules/manager/dockerfile/#from-support","title":"<code>FROM</code> support","text":"<p>Renovate can update images referenced in <code>FROM</code> directives. This even works for multi-stage builds with many <code>FROM</code> directives in one Dockerfile.</p> <pre><code>FROM node:20.9.0\n</code></pre> <p>Advanced <code>FROM</code> flags like <code>--platform</code> or <code>AS &lt;name&gt;</code> are also supported:</p> <pre><code>FROM --platform=linux/amd64 node:20.9.0 AS installer\n</code></pre> <p>Also, Renovate will automatically expand variables and <code>ARG</code> directives:</p> <pre><code>ARG TAG=3.19.4\nFROM alpine:${TAG}\n</code></pre>"},{"location":"modules/manager/dockerfile/#copy-from-support","title":"<code>COPY --from</code> support","text":"<p>Renovate can update images referenced in <code>COPY --from</code> directives.</p> <pre><code>FROM node:20.9.0\nCOPY --from alpine:3.19.4 /bin/sh /usr/local/sh\n</code></pre>"},{"location":"modules/manager/dockerfile/#run-mount-support","title":"<code>RUN --mount</code> support","text":"<p>Images referenced in <code>RUN --mount</code> directives are also supported.</p> <pre><code>FROM python:3.12\nRUN --mount=from=ghcr.io/astral-sh/uv:0.5,source=/uv,target=/bin/uv \\\n    uv venv\n</code></pre>"},{"location":"modules/manager/dockerfile/#syntax-support","title":"<code>syntax</code> support","text":"<p>Renovate can update <code>syntax</code> references.</p> <pre><code># syntax=docker/dockerfile:1.9.0\nFROM alpine:3.19.4\n</code></pre>"},{"location":"modules/manager/dockerfile/#versioning","title":"Versioning","text":"<p>Renovate's managers does not understand versioning, that's up to Renovate's versioning modules. The default <code>docker</code> versioning for container image datasources treats suffixes as \"compatibility\", for example: <code>-alpine</code>. Many container images are not SemVer compliant because they use such suffixes in their tags.</p> <p>If Renovate does not update your container images correctly, you may need to tell Renovate what versioning it should use. For example, if you know that an image follows SemVer, you can tell Renovate to use <code>\"semver\"</code> versioning for that image:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"whitesource/renovate\"],\n      \"versioning\": \"semver\"\n    }\n  ]\n}\n</code></pre> <p>Read Renovate's Docker Versioning docs to learn more.</p>"},{"location":"modules/manager/droneci/","title":"Automated Dependency Updates for Droneci","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Droneci dependencies.</p>"},{"location":"modules/manager/droneci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.drone\\.yml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/droneci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/droneci/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.drone\\\\.yml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/droneci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker-type dependencies from DroneCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/fleet/","title":"Automated Dependency Updates for Rancher Fleet","text":"<p>Categories: <code>cd</code>, <code>kubernetes</code></p> <p>Renovate supports updating Rancher Fleet dependencies.</p>"},{"location":"modules/manager/fleet/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)fleet\\.ya?ml/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/fleet/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/fleet/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)fleet\\\\.ya?ml/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/fleet/#additional-information","title":"Additional Information","text":"<p>Can upgrade bundle definitions and GitRepo YAML manifests of Rancher Fleet.</p> <p>By default, only bundles with Helm references will be upgraded. To enable GitRepo updates you have to extend your <code>managerFilePatterns</code> configuration.</p> <pre><code>{\n  \"managerFilePatterns\": [\"/(^|/)fleet.ya?ml/\", \"/myGitRepoManifests\\\\.yaml/\"]\n}\n</code></pre>"},{"location":"modules/manager/flux/","title":"Automated Dependency Updates for Flux","text":"<p>Categories: <code>cd</code>, <code>kubernetes</code></p> <p>Renovate supports updating Flux dependencies.</p>"},{"location":"modules/manager/flux/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(?:^|/)gotk-components\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/flux/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>, <code>git-refs</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>git-tags</code>, <code>bitbucket-tags</code>, <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/flux/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(?:^|/)gotk-components\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/flux/#additional-information","title":"Additional Information","text":"<p>This manager parses Flux YAML manifests and supports:</p> <ol> <li><code>HelmRelease</code> resources</li> <li><code>GitRepository</code> resources</li> <li><code>OCIRepository</code> resources</li> <li>Flux system manifests</li> </ol>"},{"location":"modules/manager/flux/#helmrelease-support","title":"HelmRelease support","text":"<p>Extracts <code>helm</code> dependencies from <code>HelmRelease</code> resources.</p> <p>The <code>flux</code> manager extracts <code>helm</code> dependencies for <code>HelmRelease</code> resources linked to <code>HelmRepository</code> or <code>GitRepository</code> sources. <code>HelmRepository</code> resources can be referenced via <code>spec.chart</code> or indirectly via a <code>HelmChart</code> when using <code>spec.chartRef</code>. Renovate supports OCI <code>HelmRepository</code> sources, those with <code>type: oci</code>. Renovate will then extract the <code>docker</code> dependencies for the referenced <code>HelmRelease</code> resources.</p> <p>In addition, for the <code>flux</code> manager to properly link <code>HelmRelease</code> and <code>HelmRepository</code> resources, both of the following conditions must be met:</p> <ol> <li>The <code>HelmRelease</code> resource must either have its <code>metadata.namespace</code> property set or its <code>spec.chart.spec.sourceRef.namespace</code> property (when not using <code>chartRef</code>) set</li> <li>The referenced <code>HelmRepository</code> and <code>HelmChart</code> (when using <code>chartRef</code>) resources must have their <code>metadata.namespace</code> property set</li> </ol> <p>Namespaces will not be inferred from the context (e.g. from the parent <code>Kustomization</code>).</p> <p>Renovate updates <code>HelmRelease</code> resources coming from <code>GitRepository</code> by updating the <code>GitRepository</code> resource.</p> <p>Renovate updates Docker dependencies inside <code>HelmRelease</code> <code>values</code> like the <code>helm-values</code> manager.</p>"},{"location":"modules/manager/flux/#gitrepository-support","title":"GitRepository support","text":"<p>Renovate can update <code>git</code> references from <code>GitRepository</code> resources.</p> <p>The <code>flux</code> manager only updates <code>GitRepository</code> fields that have a <code>tag</code> or <code>commit</code> key.</p>"},{"location":"modules/manager/flux/#kustomization-support","title":"Kustomization support","text":"<p>Renovate can update <code>image</code>^1 references from <code>Kustomization</code> resources.</p>"},{"location":"modules/manager/flux/#ocirepository-support","title":"OCIRepository support","text":"<p>Renovate can update <code>oci</code> references from <code>OCIRepository</code> resources.</p> <p>The <code>flux</code> manager only updates <code>OCIRepository</code> fields that have a <code>digest</code> or <code>tag</code> key. If <code>tag</code> and <code>digest</code> exist then <code>digest</code> takes precedence.</p>"},{"location":"modules/manager/flux/#flux-system-manifests-support","title":"Flux system manifests support","text":"<p>Renovate supports updating Flux system manifests generated during Flux installation. System manifests are identified via being named <code>gotk-components.y(a)ml</code> and containing comment headers as generated by <code>flux bootstrap</code>.</p> <p>Warning</p> <p>Renovate cannot identify the use of custom bootstrap flags, such as <code>--cluster-domain</code>. In such a scenario Renovate's PR will overwrite these values with the Flux defaults. See issue #13952 on GitHub for more information.</p> <p>Updating system manifests requires that either:</p> <ol> <li>The <code>flux</code> tool is pre-installed, or</li> <li>You run a Docker image based on containerbase, such as the official Renovate images, and have <code>binarySource=install</code> configured</li> </ol>"},{"location":"modules/manager/flux/#default-managerfilepatterns","title":"Default managerFilePatterns","text":"<p>By default, the <code>flux</code> manager only matches <code>**/gotk-components.y(a)ml</code>. So it only checks system manifest files generated by the <code>flux bootstrap</code> command.</p> <p>This is because there is no commonly accepted file/directory naming convention for Flux manifests and we don't want to check every single <code>*.yaml</code> file in repositories just in case some of them have Flux definitions.</p> <p>If most <code>.yaml</code> files in your repository are Flux manifests, then you could add this to your config:</p> <pre><code>{\n  \"flux\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\"]\n  }\n}\n</code></pre> <p>If instead you have all your Flux manifests inside a <code>flux/</code> directory, you would add this:</p> <pre><code>{\n  \"flux\": {\n    \"managerFilePatterns\": [\"/flux/.+\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/flux/#versioning","title":"Versioning","text":"<p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/fvm/","title":"Automated Dependency Updates for FVM","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating FVM dependencies.</p>"},{"location":"modules/manager/fvm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)\\.fvm/fvm_config\\.json$/\n/(^|/)\\.fvmrc$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/fvm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>flutter-version</code>.</p>"},{"location":"modules/manager/fvm/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.fvm/fvm_config\\\\.json$/\",\n    \"/(^|/)\\\\.fvmrc$/\"\n  ],\n  \"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/fvm/#additional-information","title":"Additional Information","text":"<p>Keeps the <code>.fvmrc</code> file or older <code>.fvm/fvm_config.json</code> file updated.</p>"},{"location":"modules/manager/git-submodules/","title":"Automated Dependency Updates for Git Submodules","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Git Submodules dependencies.</p>"},{"location":"modules/manager/git-submodules/#enabling","title":"Enabling","text":"<p>Git Submodules functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/git-submodules/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.gitmodules$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/git-submodules/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-refs</code>.</p>"},{"location":"modules/manager/git-submodules/#default-config","title":"Default config","text":"<pre><code>{\n  \"enabled\": false,\n  \"versioning\": \"git\",\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.gitmodules$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/git-submodules/#additional-information","title":"Additional Information","text":"<p>Keeps Git submodules updated within a repository.</p> <p>You can customize the per-submodule checks of the git-submodules manager like this:</p> <pre><code>{\n  \"ignoreDeps\": [\"path/to/submodule\", \"path/to/submodule2\"],\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"modules/manager/git-submodules/#updating-to-specific-tag-values","title":"Updating to Specific Tag Values","text":"<p>If you want to update your Git submodules to a specific tag, you can set the desired tag as the <code>branch</code> in your <code>.gitmodules</code> file. Renovate will then automatically update this version to the latest Git branch or tag which satisfies your versioning scheme.</p> <pre><code>[submodule \"renovate\"]\n  path = deps/renovate\n  url = https://github.com/renovatebot/renovate.git\n  branch = v0.0.1\n</code></pre> <p>Note: Using this approach will disrupt the native git submodule update experience when using <code>git submodule update --remote</code>. You may encounter an error like <code>fatal: Unable to find refs/remotes/origin/v0.0.1 revision in submodule path...</code> because Git can only update submodules when tracking a branch. To manually update the submodule, navigate to the submodule directory and run the following commands: <code>git fetch &amp;&amp; git checkout &lt;new tag&gt;</code>.</p>"},{"location":"modules/manager/git-submodules/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>git</code> commands to update the submodules, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>The following logic is executed prior to \"submodules\" updating:</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token or username/password and <code>matchHost</code> will be fetched, except for any github.com one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of the following characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>git-tags</code> or <code>git-refs</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/github-actions/","title":"Automated Dependency Updates for GitHub Actions","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating GitHub Actions dependencies.</p>"},{"location":"modules/manager/github-actions/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)(workflow-templates|\\.(?:github|gitea|forgejo)/(?:workflows|actions))/.+\\.ya?ml$/\n/(^|/)action\\.ya?ml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/github-actions/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>gitea-tags</code>, <code>github-tags</code>, <code>github-runners</code>.</p>"},{"location":"modules/manager/github-actions/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)(workflow-templates|\\\\.(?:github|gitea|forgejo)/(?:workflows|actions))/.+\\\\.ya?ml$/\",\n    \"/(^|/)action\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/github-actions/#additional-information","title":"Additional Information","text":"<p>The <code>github-actions</code> manager extracts dependencies from GitHub Actions workflow and workflow template files. It can also be used for Gitea and Forgejo Actions workflows as such are compatible with GitHub Actions workflows.</p>"},{"location":"modules/manager/github-actions/#digest-pinning-and-updating","title":"Digest pinning and updating","text":"<p>If you like to use digest pinning but want to follow the action version tag, you can use the sample below:</p> <pre><code>name: build\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0\n</code></pre> <p>Renovate will update the commit SHA according to the GitHub tag you specified. Renovate can update digests that use SHA1 and SHA256 algorithms. The GitHub tag is in the format of <code>&lt;PREFIX&gt;&lt;SEPARATOR&gt;&lt;VERSION&gt;</code>. <code>PREFIX</code> and <code>SEPARATOR</code> are optional. Valid separators are the ASCII hyphen (<code>-</code>) or forward slash (<code>/</code>). <code>VERSION</code> can include the major, minor, and patch components and may optionally include a <code>v</code> prefix. Here are the examples of valid GitHub tags: <code>1.0.1</code>, <code>1.0</code>, <code>1</code>, <code>v1.0.1</code>, <code>v1.0</code>, <code>v1</code>, <code>prefix-1.0.1</code>, <code>prefix-1.0</code>, <code>prefix-1</code>, <code>prefix-v1.0.1</code>, <code>prefix-v1.0</code>, <code>prefix-v1</code>. <code>prefix/1.0.1</code>, <code>prefix/1.0</code>, <code>prefix/1</code>, <code>prefix/v1.0.1</code>, <code>prefix/v1.0</code>, <code>prefix/v1</code>.</p> <p>If you want to automatically pin action digests add the <code>helpers:pinGitHubActionDigests</code> preset to the <code>extends</code> array:</p> <pre><code>{\n  \"extends\": [\"helpers:pinGitHubActionDigests\"]\n}\n</code></pre>"},{"location":"modules/manager/github-actions/#non-support-of-variables","title":"Non-support of Variables","text":"<p>Renovate ignores any GitHub runners which are configured in variables. For example, Renovate ignores the runner configured in the <code>RUNNER</code> variable:</p> <pre><code>name: build\non: [push]\n\nenv:\n  RUNNER: ubuntu-22.04\n\njobs:\n  build:\n    runs-on: ${{ env.RUNNER }}\n</code></pre>"},{"location":"modules/manager/github-actions/#ratchet-support","title":"Ratchet support","text":"<p>The <code>github-action</code> manager understands <code>ratchet</code> comments, like <code># ratchet:actions/checkout@v2.1.0</code>. This means that Renovate will:</p> <ul> <li>update the version of a pinned Ratchet version if needed</li> <li>not delete Ratchet comments after parsing them</li> <li>keep <code># ratchet:exclude</code> comments</li> </ul>"},{"location":"modules/manager/github-actions/#withversion-support-for-built-in-actions","title":"with:version support for built-in Actions","text":"<p>Renovate supports updating the \"with\" version for <code>actions/setup-go</code>, <code>actions/setup-node</code>, and <code>actions/setup-python</code>, although not all syntaxes are supported out of the box.</p> <p>By default, Renovate will use <code>npm</code>-style semver versioning for <code>go</code> and <code>python</code>, and Renovate's built-in <code>node</code> versioning for updating <code>node</code>. The goal of these defaults is to match as closely as possible to what these GitHub Actions support. For example, normally the <code>^</code> syntax is not used in <code>go</code> or <code>python</code>, but it's supported in their respective actions.</p> <p>Depending on your use case, you may need to change <code>versioning</code> manually. If you find a use case which you think Renovate could/should automatically detect and support without manual configuration, please raise a Discussion to suggest it.</p>"},{"location":"modules/manager/github-actions/#commonly-used-community-actions","title":"commonly used community actions","text":"<p>Renovate also supports some commonly used community actions:</p> <ul> <li><code>astral-sh/setup-uv</code></li> <li><code>pnpm/action-setup</code></li> <li><code>pdm-project/setup-pdm</code></li> <li><code>jaxxstorm/action-install-gh-release</code></li> <li><code>sigoden/install-binary</code></li> <li><code>prefix-dev/setup-pixi</code></li> <li><code>pypa/hatch@install</code></li> </ul>"},{"location":"modules/manager/gitlabci/","title":"Automated Dependency Updates for GitLab CI/CD","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating GitLab CI/CD dependencies.</p>"},{"location":"modules/manager/gitlabci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.gitlab-ci\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gitlabci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>gitlab-tags</code>.</p>"},{"location":"modules/manager/gitlabci/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.gitlab-ci\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/gitlabci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker dependencies from <code>gitlab-ci.yml</code> files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>If you use Gitlab Dependency Proxy then you can use these predefined variables as prefixes for your image:</p> <ul> <li><code>CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX</code></li> <li><code>CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX</code></li> </ul> <p>If you use predefined GitLab CI variables like <code>CI_REGISTRY</code> or <code>CI_SERVER_FQDN</code> make sure to configure their value via <code>registryAliases</code>:</p> <pre><code>{\n  \"registryAliases\": {\n    \"$CI_REGISTRY\": \"registry.example.com\",\n    \"$CI_SERVER_FQDN\": \"gitlab.example.com\",\n    \"$CI_SERVER_HOST\": \"gitlab.example.com\"\n  }\n}\n</code></pre>"},{"location":"modules/manager/gitlabci-include/","title":"Automated Dependency Updates for GitLab CI/CD include","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating GitLab CI/CD include dependencies.</p>"},{"location":"modules/manager/gitlabci-include/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.gitlab-ci\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gitlabci-include/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>gitlab-tags</code>.</p>"},{"location":"modules/manager/gitlabci-include/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.gitlab-ci\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/gitlabci-include/#additional-information","title":"Additional Information","text":"<p>Extracts \"includes\" dependencies from <code>gitlab-ci.yml</code> files.</p>"},{"location":"modules/manager/glasskube/","title":"Automated Dependency Updates for Glasskube","text":"<p>Categories: <code>kubernetes</code>, <code>cd</code></p> <p>Renovate supports updating Glasskube dependencies.</p>"},{"location":"modules/manager/glasskube/#file-matching","title":"File Matching","text":"<p>Because file names for <code>glasskube</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>glasskube</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/glasskube/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>glasskube-packages</code>.</p>"},{"location":"modules/manager/glasskube/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/glasskube/#additional-information","title":"Additional Information","text":"<p>Extract version data from Packages/ClusterPackages and repository data from PackageRepositories.</p> <p>To use the <code>glasskube</code> manager you must set your own <code>managerFilePatterns</code> pattern. The <code>glasskube</code> manager has no default <code>managerFilePatterns</code> pattern, because there is no common filename or directory name convention for Glasskube YAML files. By setting your own <code>managerFilePatterns</code> Renovate avoids having to check each <code>*.yaml</code> file in a repository for a Glasskube definition.</p>"},{"location":"modules/manager/gleam/","title":"Automated Dependency Updates for Gleam","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Gleam dependencies.</p>"},{"location":"modules/manager/gleam/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)gleam.toml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gleam/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>hex</code>.</p>"},{"location":"modules/manager/gleam/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)gleam.toml$/\"\n  ],\n  \"versioning\": \"hex\"\n}\n</code></pre>"},{"location":"modules/manager/gleam/#additional-information","title":"Additional Information","text":"<p>Renovate can update <code>gleam.toml</code> and/or <code>manifest.toml</code> files.</p> <p>The <code>gleam</code> manager can update these <code>depTypes</code>:</p> <ul> <li><code>dependencies</code></li> <li><code>dev-dependencies</code></li> </ul>"},{"location":"modules/manager/gleam/#how-renovate-updates-gleamtoml-files","title":"How Renovate updates <code>gleam.toml</code> files","text":"<p>The <code>gleam</code> manager extracts dependencies for the <code>hex</code> datasource, and uses Renovate's implementation of Hex SemVer to evaluate <code>gleam.toml</code> updates.</p>"},{"location":"modules/manager/gleam/#how-renovate-updates-manifesttoml-files","title":"How Renovate updates <code>manifest.toml</code> files","text":"<p>The <code>gleam</code> manager uses the <code>gleam</code> program to update <code>manifest.toml</code> files.</p>"},{"location":"modules/manager/gleam/#enable-lockfilemaintenance","title":"Enable <code>lockFileMaintenance</code>","text":"<p>We recommend you set <code>lockFileMaintenance</code> to <code>true</code> for the <code>gleam</code> manager, in your Renovate config. This way Renovate can update all your dependencies, including those with in-range updates.</p> <p><code>lockFileMaintenance=true</code> periodically refreshes your <code>manifest.toml</code> files, ensuring all dependencies are updated to their latest allowed versions.</p>"},{"location":"modules/manager/gleam/#default-rangestrategyauto-behavior","title":"Default <code>rangeStrategy=auto</code> behavior","text":"<p>Renovate's default <code>rangeStrategy</code> is <code>\"auto\"</code>. Here's how <code>\"auto\"</code> works with the <code>gleam</code> manager:</p> Version type New version Old range New range after update What Renovate does Complex range <code>0.16.0</code> <code>&gt;= 0.14.0 and &lt; 0.15.0</code> <code>&gt;= 0.14.0 and &lt; 0.16.1</code> Widen range to include the new version. Simple range <code>0.39.0</code> <code>&lt;= 0.38.0</code> <code>&lt;= 0.39.0</code> If update outside current range: widens range to include the new version. Exact version constraint <code>0.13.0</code> <code>== 0.12.0</code> <code>== 0.13.0</code> Replace old version with new version."},{"location":"modules/manager/gleam/#recommended-rangestrategy-for-apps-and-libraries","title":"Recommended <code>rangeStrategy</code> for apps and libraries","text":"<p>For applications, we recommend using <code>rangeStrategy=pin</code>. This pins your dependencies to exact versions, which is generally considered best practice for apps.</p> <p>For libraries, use <code>rangeStrategy=widen</code> with version ranges in your <code>gleam.toml</code>. This allows for greater compatibility with other projects that may use your library as a dependency.</p>"},{"location":"modules/manager/gomod/","title":"Automated Dependency Updates for Go Modules","text":"<p>Categories: <code>golang</code></p> <p>Renovate supports updating Go Modules dependencies.</p>"},{"location":"modules/manager/gomod/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)go\\.mod$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gomod/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>go</code>, <code>golang-version</code>.</p>"},{"location":"modules/manager/gomod/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)go\\\\.mod$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/gomod/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/gomod/#updating-of-go-mod-and-toolchain-directives","title":"Updating of Go mod and toolchain directives","text":"<p>In <code>go.mod</code>, the <code>go</code> directive essentially means \"Compatible with this version or later\". It is generally recommended for Go projects to not bump this version unless necessary, and therefore Renovate's default behavior is not to propose upgrades to it. If you need to update it once or irregularly, it's recommended to do it manually. If you are sure you want to always bump it to latest, then you need the following configuration:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"gomod\"],\n      \"matchDepNames\": [\"go\"],\n      \"matchDepTypes\": [\"golang\"],\n      \"rangeStrategy\": \"bump\"\n    }\n  ]\n}\n</code></pre> <p>In <code>go.mod</code>, the <code>toolchain</code> directive essentially means \"Use this exact version of go\". Unlike the <code>go</code> directive, it's valid to keep bumping this, and you should see updates to it proposed by default.</p>"},{"location":"modules/manager/gomod/#post-update-options","title":"Post-Update Options","text":"<p>You might be interested in the following <code>postUpdateOptions</code>:</p> <ol> <li><code>gomodTidy</code> - if you'd like Renovate to run <code>go mod tidy</code> after every update before raising the PR<ol> <li>This is implicitly enabled for major updates if the user has enabled the option <code>gomodUpdateImportPaths</code></li> </ol> </li> <li><code>gomodTidy1.17</code> - if you'd like Renovate to run <code>go mod tidy -compat=1.17</code> after every update before raising the PR</li> <li><code>gomodTidyE</code> - if you'd like Renovate to run <code>go mod tidy -e</code> after every update before raising the PR</li> <li><code>gomodUpdateImportPaths</code> - if you'd like Renovate to update your source import paths on major updates before raising the PR</li> <li><code>gomodMassage</code> - to enable massaging of all <code>replace</code> statements prior to running <code>go</code> so that they will be ignored</li> </ol> <p>When Renovate is running using <code>binarySource=docker</code> (such as in the Mend Renovate App) then it will pick the latest compatible version of Go to run, i.e. the latest <code>1.x</code> release. Even if the <code>go.mod</code> has a version like <code>go 1.22</code>, Renovate will treat it as a <code>^1.22</code> constraint and not <code>=1.22</code>.</p> <p>Unless matching <code>tool</code> directives exist, indirect updates are disabled by default. To enable them, add a package rule such as:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"gomod\"],\n      \"matchDepTypes\": [\"indirect\"],\n      \"enabled\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/gomod/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>go</code> commands to update the <code>go.sum</code>, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>The following logic is executed prior to \"artifacts\" updating:</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token or username/password and <code>matchHost</code> will be fetched, except for any github.com one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of the following characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>go</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/gomod/#major-upgrades-of-dependencies","title":"Major upgrades of dependencies","text":"<p>Major upgrades in Go are different from most other ecosystems, because both the version and module name need to be changed. It is very common that such upgrades require changes to application code, which Renovate doesn't do.</p> <p>By default, Renovate will make such change in the <code>go.mod</code> files but nothing else - the rest is up to you. If you add <code>gomodUpdateImportPaths</code> to <code>postUpdateOptions</code> then Renovate will also use a third-party tool to migrate import paths within application code, but there may still be actual application logic which needs to be changed too.</p> <p>Ultimately: it is known and unavoidable that the majority of major Go upgrades won't be immediately mergeable. You might prefer to configure such major updates with <code>dependencyDashboardApproval=true</code> so that you can request them on demand, on supported platforms.</p>"},{"location":"modules/manager/gradle/","title":"Automated Dependency Updates for Gradle","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Gradle dependencies.</p>"},{"location":"modules/manager/gradle/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/\\.gradle(\\.kts)?$/\n/(^|/)gradle\\.properties$/\n/(^|/)gradle/.+\\.toml$/\n/(^|/)buildSrc/.+\\.kt$/\n/\\.versions\\.toml$/\n/(^|/)versions.props$/\n/(^|/)versions.lock$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gradle/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/gradle/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.gradle(\\\\.kts)?$/\",\n    \"/(^|/)gradle\\\\.properties$/\",\n    \"/(^|/)gradle/.+\\\\.toml$/\",\n    \"/(^|/)buildSrc/.+\\\\.kt$/\",\n    \"/\\\\.versions\\\\.toml$/\",\n    \"/(^|/)versions.props$/\",\n    \"/(^|/)versions.lock$/\"\n  ],\n  \"timeout\": 600,\n  \"versioning\": \"gradle\"\n}\n</code></pre>"},{"location":"modules/manager/gradle/#additional-information","title":"Additional Information","text":"<p>The <code>gradle</code> manager uses a custom parser written in JavaScript, similar to many others managers. It does not call <code>gradle</code> directly in order to extract a list of dependencies.</p>"},{"location":"modules/manager/gradle/#updating-lockfiles","title":"Updating lockfiles","text":"<p>The gradle manager supports gradle lock files in <code>.lockfile</code> artifacts, as well as lock files used by the gradle-consistent-versions plugin. During lock file maintenance, renovate calls <code>./gradlew :dependencies --write-locks</code> on the root project and subprojects. For regular dependency updates, renovate automatically updates lock state entries via the <code>--update-locks</code> command line flag.</p> <p>As the output of these commands can be very large, any text other than errors (in <code>stderr</code>) is discarded.</p>"},{"location":"modules/manager/gradle/#dependency-verification","title":"Dependency verification","text":"<p>If Renovate finds a <code>gradle/verification-metadata.xml</code> file and either <code>&lt;verify-metadata&gt;true&lt;/verify-metadata&gt;</code> or <code>&lt;verify-signatures&gt;true&lt;/verify-signatures&gt;</code> (or both), it updates the content by using the <code>gradle --write-verification-metadata &lt;hashTypes&gt; dependencies</code> command. Renovate will check the file for existing hash types (like <code>sha256</code>) and use them as <code>&lt;hashTypes&gt;</code>.</p> <p>Warning</p> <p>Gradle allows verification metadata to use the <code>md5</code> and <code>sha1</code> algorithms. Because those algorithms are prone to collision attacks, Renovate ignores them. If Renovate encounters hashes that are generated with <code>md5</code> or <code>sha1</code> algorithms, Renovate uses <code>sha256</code> instead.</p>"},{"location":"modules/manager/gradle-wrapper/","title":"Automated Dependency Updates for Gradle Wrapper","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Gradle Wrapper dependencies.</p>"},{"location":"modules/manager/gradle-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)gradle/wrapper/gradle-wrapper\\.properties$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/gradle-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>gradle-version</code>.</p>"},{"location":"modules/manager/gradle-wrapper/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)gradle/wrapper/gradle-wrapper\\\\.properties$/\"\n  ],\n  \"versioning\": \"gradle\"\n}\n</code></pre>"},{"location":"modules/manager/gradle-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Gradle Wrapper updates. Changes here affect how Renovate updates the version of gradle in the wrapper, not how it uses the wrapper.</p>"},{"location":"modules/manager/haskell-cabal/","title":"Automated Dependency Updates for Haskell Cabal","text":"<p>Categories: <code>haskell</code></p> <p>Renovate supports updating Haskell Cabal dependencies.</p>"},{"location":"modules/manager/haskell-cabal/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.cabal$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/haskell-cabal/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>hackage</code>.</p>"},{"location":"modules/manager/haskell-cabal/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.cabal$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/haskell-cabal/#additional-information","title":"Additional Information","text":"<p>Supports dependency extraction from <code>build-depends</code> fields in Cabal package description files. They use the extension <code>.cabal</code>, and are used with the Haskell programming language.</p> <p>Limitations:</p> <ul> <li>The dependencies of all components are mushed together in one big list.</li> <li>Fields like <code>pkgconfig-depends</code> and <code>build-tool-depends</code> are not handled.</li> <li>The default PVP versioning is subject to limitations.</li> </ul> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/helm-requirements/","title":"Automated Dependency Updates for Helm v2 Chart Dependencies","text":"<p>Categories: <code>helm</code>, <code>kubernetes</code></p> <p>Renovate supports updating Helm v2 Chart Dependencies dependencies.</p>"},{"location":"modules/manager/helm-requirements/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)requirements\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/helm-requirements/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>.</p>"},{"location":"modules/manager/helm-requirements/#default-config","title":"Default config","text":"<pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  },\n  \"commitMessageTopic\": \"helm chart {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)requirements\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/helm-requirements/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Helm Chart references within <code>requirements.yaml</code> files.</p> <p>The <code>helm-requirements</code> manager defines this default registryAlias:</p> <pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  }\n}\n</code></pre> <p>If your Helm charts make use of repository aliases then you will need to configure an <code>registryAliases</code> object in your config to tell Renovate where to look for them. Be aware that alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>To learn how to use Helm with private packages, read private package support, Package Manager Credentials for Artifact Updating, helm.</p>"},{"location":"modules/manager/helm-values/","title":"Automated Dependency Updates for Helm Values","text":"<p>Categories: <code>helm</code>, <code>kubernetes</code></p> <p>Renovate supports updating Helm Values dependencies.</p>"},{"location":"modules/manager/helm-values/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)values\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/helm-values/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/helm-values/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"helm values {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)values\\\\.ya?ml$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/helm-values/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating of Docker dependencies within Helm Chart <code>values.yaml</code> files or other YAML files that use the same format (via <code>managerFilePatterns</code> configuration). Updates are performed if the files follow the conventional format used in most of the Helm charts:</p> <pre><code>image:\n  repository: 'some-docker/dependency'\n  tag: v1.0.0\n  registry: registry.example.com # optional key, will default to \"docker.io\"\n\nimage:\n  repository: 'some-docker/dependency'\n  version: v1.0.0\n\ncoreImage:\n  registry: docker.io\n  repository: bitnami/harbor-core\n  tag: 2.1.3-debian-10-r38\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/helmfile/","title":"Automated Dependency Updates for Helmfile","text":"<p>Categories: <code>cd</code>, <code>helm</code>, <code>kubernetes</code></p> <p>Renovate supports updating Helmfile dependencies.</p>"},{"location":"modules/manager/helmfile/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)helmfile\\.ya?ml(?:\\.gotmpl)?$/\n/(^|/)helmfile\\.d/.+\\.ya?ml(?:\\.gotmpl)?$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/helmfile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/helmfile/#default-config","title":"Default config","text":"<pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  },\n  \"commitMessageTopic\": \"helm chart {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)helmfile\\\\.ya?ml(?:\\\\.gotmpl)?$/\",\n    \"/(^|/)helmfile\\\\.d/.+\\\\.ya?ml(?:\\\\.gotmpl)?$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/helmfile/#additional-information","title":"Additional Information","text":"<p>Checks <code>helmfile.yaml</code> files and extracts dependencies for the <code>helm</code> datasource.</p> <p>The <code>helmfile</code> manager defines this default registryAlias:</p> <pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  }\n}\n</code></pre> <p>If your Helm charts make use of repository aliases then you will need to configure an <code>registryAliases</code> object in your config to tell Renovate where to look for them. Be aware that alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/helmfile/#private-repositories-and-registries","title":"Private repositories and registries","text":"<p>To use private sources of Helm charts, you must set the password and username you use to authenticate to the private source. For this you use a custom <code>hostRules</code> array.</p>"},{"location":"modules/manager/helmfile/#oci-registries","title":"OCI registries","text":"<pre><code>{\n  hostRules: [\n    {\n      // global login\n      matchHost: 'ghcr.io',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n    {\n      // login with encrypted password\n      matchHost: 'https://ghci.io',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      encrypted: {\n        password: 'some-encrypted-password',\n      },\n    },\n  ],\n}\n</code></pre>"},{"location":"modules/manager/helmsman/","title":"Automated Dependency Updates for Helmsman","text":"<p>Categories: <code>cd</code>, <code>helm</code>, <code>kubernetes</code></p> <p>Renovate supports updating Helmsman dependencies.</p>"},{"location":"modules/manager/helmsman/#file-matching","title":"File Matching","text":"<p>Because file names for <code>helmsman</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>helmsman</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/helmsman/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/helmsman/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/helmsman/#additional-information","title":"Additional Information","text":"<p>The <code>helmsman</code> manager is currently limited and does not support the full feature set of Helmsman, read about the limitations below.</p>"},{"location":"modules/manager/helmsman/#non-configured-managerfilepatterns","title":"Non-configured managerFilePatterns","text":"<p>By default the <code>helmsman</code> manager has an empty array for its <code>managerFilePatterns</code> configuration option, because there is no convention for file naming in practice. This means that <code>helmsman</code> won't search for any files, and you won't get any updates from the manager.</p> <p>To enable the <code>helmsman</code> manager, provide a valid <code>managerFilePatterns</code> yourself, for example:</p> <pre><code>{\n  \"helmsman\": {\n    \"managerFilePatterns\": [\"/(^|/)desired_state\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/helmsman/#file-format","title":"File format","text":"<p>Currently, state files must be in the <code>.yaml</code> format. The <code>.toml</code> format is not supported.</p>"},{"location":"modules/manager/helmv3/","title":"Automated Dependency Updates for Helm v3","text":"<p>Categories: <code>helm</code>, <code>kubernetes</code></p> <p>Renovate supports updating Helm v3 dependencies.</p>"},{"location":"modules/manager/helmv3/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Chart\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/helmv3/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>helm</code>.</p>"},{"location":"modules/manager/helmv3/#default-config","title":"Default config","text":"<pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  },\n  \"commitMessageTopic\": \"helm chart {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)Chart\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Helm Chart references in:</p> <ul> <li><code>requirements.yaml</code> files, for Helm v2</li> <li><code>Chart.yaml</code> files, for Helm v3</li> </ul> <p>The <code>helmv3</code> manager defines this default registryAlias:</p> <pre><code>{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  }\n}\n</code></pre> <p>If you use repository aliases in your Helm charts then you must set an <code>registryAliases</code> object in your configuration file so Renovate knows where to find the repository. Alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read our versioning documentation to learn more.</p>"},{"location":"modules/manager/helmv3/#private-repositories-and-registries","title":"Private repositories and registries","text":"<p>To use private sources in your Helm charts, you must set the <code>password</code> and <code>username</code> you use to authenticate to the private source. For this you use a custom <code>hostRules</code> array.</p>"},{"location":"modules/manager/helmv3/#oci-registries","title":"OCI registries","text":"<pre><code>{\n  hostRules: [\n    {\n      // Global login\n      matchHost: 'registry.gitlab.com',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n    {\n      // For repository string oci://registry.gitlab.com/user/oci-helm-test\n      matchHost: 'https://registry.gitlab.com/user/oci-helm-test',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n  ],\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#helm-repository","title":"Helm repository","text":"<pre><code>{\n  hostRules: [\n    {\n      // Global login for 'gitlab.com' if using Helm\n      matchHost: 'gitlab.com',\n      hostType: 'helm', // this is optional, but else the credentials will be used for all requests matching `matchHost`\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n    {\n      // Specific repository\n      matchHost: 'https://gitlab.com/api/v4/projects/xxxxxxx/packages/helm/stable',\n      hostType: 'helm', // this is optional\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n  ],\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#subchart-archives","title":"Subchart archives","text":"<p>To get updates for subchart archives put <code>helmUpdateSubChartArchives</code> in your <code>postUpdateOptions</code> configuration. Renovate now updates archives in the <code>/charts</code> folder.</p> <pre><code>{\n  \"postUpdateOptions\": [\"helmUpdateSubChartArchives\"]\n}\n</code></pre>"},{"location":"modules/manager/hermit/","title":"Automated Dependency Updates for Hermit","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Hermit dependencies.</p>"},{"location":"modules/manager/hermit/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)bin/hermit$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/hermit/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>hermit</code>.</p>"},{"location":"modules/manager/hermit/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)bin/hermit$/\"\n  ],\n  \"excludeCommitPaths\": [\n    \"**/bin/hermit\"\n  ],\n  \"versioning\": \"hermit\"\n}\n</code></pre>"},{"location":"modules/manager/hermit/#additional-information","title":"Additional Information","text":"<p>Hermit package installation token</p> <p>When upgrading private packages through, Hermit manager will uses one of the following two tokens to download private packages.</p> <pre><code>HERMIT_GITHUB_TOKEN\nGITHUB_TOKEN\n</code></pre> <p>These environment variable could be passed on via setting it in <code>customEnvironmentVariables</code>.</p> <p>Nested Hermit setup</p> <p>Nested Hermit setup in a single repository is also supported. e.g.</p> <pre><code>\u251cbin\n\u251c\u2500hermit\n\u251c\u2500(other files)\n\u251c\n\u251cnested\n\u251c\u2500bin\n\u251c\u2500\u2500hermit\n\u251c\u2500\u2500(other files)\n</code></pre>"},{"location":"modules/manager/homebrew/","title":"Automated Dependency Updates for Homebrew","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Homebrew dependencies.</p>"},{"location":"modules/manager/homebrew/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/^Formula/[^/]+[.]rb$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/homebrew/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/homebrew/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"Homebrew Formula {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/^Formula/[^/]+[.]rb$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/homebrew/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/html/","title":"Automated Dependency Updates for HTML","text":"<p>Categories: <code>cd</code></p> <p>Renovate supports updating HTML dependencies.</p>"},{"location":"modules/manager/html/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.html?$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/html/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>cdnjs</code>.</p>"},{"location":"modules/manager/html/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.html?$/\"\n  ],\n  \"versioning\": \"semver\",\n  \"digest\": {\n    \"enabled\": false\n  },\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/html/#additional-information","title":"Additional Information","text":"<p>The <code>html</code> manager updates <code>&lt;script&gt;</code> tags and CSS <code>&lt;link&gt;</code> tags that point to the cdnjs content delivery network. It also updates Subresource Integrity (SRI) hashes in <code>integrity</code> attributes.</p> <p>Key differences between the <code>cdnurl</code> manager and the <code>html</code> manager:</p> <ul> <li>The <code>html</code> manager updates SRI hashes, the <code>cndurl</code> manager does not</li> <li>The <code>html</code> manager automatically finds some files to update, the <code>cndurl</code> manager must be given a <code>managerFilePatterns</code></li> </ul>"},{"location":"modules/manager/jenkins/","title":"Automated Dependency Updates for Jenkins","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Jenkins dependencies.</p>"},{"location":"modules/manager/jenkins/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)plugins\\.(txt|ya?ml)$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/jenkins/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>jenkins-plugins</code>.</p>"},{"location":"modules/manager/jenkins/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)plugins\\\\.(txt|ya?ml)$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/jenkins/#additional-information","title":"Additional Information","text":"<p>The Jenkins manager supports a custom text or YAML format of the plugin list as described on their github page.</p> <p>By default, Renovate gets the versions from the main Jenkins update center.</p> <p>There are no strict filename rules, the convention is to name the file <code>plugins.txt</code> or <code>plugins.yaml</code>.</p>"},{"location":"modules/manager/jsonata/","title":"Custom Manager Support using JSONata","text":"<p>Categories: <code>custom</code></p> <p>With <code>customManagers</code> using <code>JSONata</code> queries you can configure Renovate so it finds dependencies in JSON, TOML and YAML files, that are not detected by its other built-in package managers.</p> <p>Renovate uses the <code>jsonata</code> package to process the file content using the queries, after the content has been parsed into <code>json</code> format.</p> <p>For more on the jsonata query language, read the jsonata query language site.</p> <p>The JSONata manager is unique in Renovate, because:</p> <ul> <li>It can be used with any <code>datasource</code></li> <li>It can be configured via JSONata queries</li> <li>You can create multiple \"JSONata managers\" in the same repository</li> </ul> <p>If you have limited managers to run within <code>enabledManagers</code> config option, you need to add <code>\"custom.jsonata\"</code> to the list.</p>"},{"location":"modules/manager/jsonata/#required-fields","title":"Required Fields","text":"<p>The first two required fields are <code>managerFilePatterns</code> and <code>matchStrings</code>:</p> <ul> <li><code>managerFilePatterns</code> works the same as any manager</li> <li><code>matchStrings</code> is a <code>JSONata</code> custom manager concept and is used for configuring a jsonata queries</li> </ul>"},{"location":"modules/manager/jsonata/#information-that-renovate-needs-about-the-dependency","title":"Information that Renovate needs about the dependency","text":"<p>Before Renovate can look up a dependency and decide about updates, it must have this info about each dependency:</p> Info type Required Notes Docs Name of the dependency Yes <code>datasource</code> Yes Example datasources: npm, Docker, GitHub tags, and so on. Supported datasources Version scheme to use. Defaults to <code>semver-coerced</code>. Yes You may set another version scheme, like <code>pep440</code>. Supported versioning schemes <code>fileFormat</code> Yes Must be either <code>json</code>, <code>yaml</code> or <code>toml</code>. <code>Configuration Options</code>"},{"location":"modules/manager/jsonata/#required-fields-to-be-present-in-the-resulting-structure-returned-by-the-jsonata-query","title":"Required fields to be present in the resulting structure returned by the jsonata query","text":"<p>You must:</p> <ul> <li>Capture the <code>currentValue</code> of the dependency or use the <code>currentValueTemplate</code> template field</li> <li>Capture the <code>depName</code> or <code>packageName</code>. Or use a template field: <code>depNameTemplate</code> and <code>packageNameTemplate</code></li> <li>Capture the <code>datasource</code>, or use the <code>datasourceTemplate</code> template field</li> </ul>"},{"location":"modules/manager/jsonata/#optional-fields-you-can-include-in-the-resulting-structure","title":"Optional fields you can include in the resulting structure","text":"<p>You may use any of these items:</p> <ul> <li><code>depType</code>, or use the <code>depTypeTemplate</code> template field</li> <li><code>versioning</code>, or the use <code>versioningTemplate</code> template field. If neither are present, Renovate defaults to <code>semver-coerced</code></li> <li><code>extractVersion</code>, or use the <code>extractVersionTemplate</code> template field</li> <li><code>currentDigest</code></li> <li><code>registryUrl</code>, or use the <code>registryUrlTemplate</code> template field. If it's a valid URL, it will be converted to the <code>registryUrls</code> field as a single-length array</li> <li><code>indentation</code>. Must be empty, or whitespace. Else Renovate restes only <code>indentation</code> to an empty string</li> </ul>"},{"location":"modules/manager/jsonata/#usage","title":"Usage","text":"<p>When you configure a JSONata manager, use the following syntax:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"json\",\n      \"managerFilePatterns\": [\"&lt;file match pattern&gt;\"],\n      \"matchStrings\": [\"&lt;query&gt;\"],\n      ...\n    }\n  ]\n}\n</code></pre> <p>Overwrite the <code>&lt;query&gt;</code> placeholder text with your JSONata query. The JSONata query transforms the content to a JSON object, similar to this:</p> dependencies information extracted using a JSONata query<pre><code>[\n  {\n    \"depName\": \"some_dep\",\n    \"currentValue\": \"1.0.0\",\n    \"datasource\": \"docker\",\n    \"versioning\": \"semver\"\n  }\n]\n</code></pre> <p>Creating your Renovate JSONata manager config is easier if you understand JSONata queries. We recommend you follow these steps:</p> <ol> <li>Read the official JSONata query language docs</li> <li>Check our example queries below</li> <li>You're ready to make your own config</li> </ol> <p>Alternatively, you can use \"trial and error\" to a working config by adjusting our examples.</p> <p>YAML files are parsed as multi-document files, even those that have only one document.</p>"},{"location":"modules/manager/jsonata/#yaml-parsing","title":"YAML parsing","text":"<p>To show how the JSONata manager parses YAML, below is an example YAML file and the corresponding parsing to JSON.</p> <p>YAML:</p> Example multi document YAML file<pre><code>production:\n  packages:\n    version: 1.2.3\n    package: foo\ntest:\n  metadata:\n    - version: 4.5.6\n      package: bar\n---\ndevelopment:\n  author: Renovate\n</code></pre> <p>JSON:</p> Example JSON parsing<pre><code>[\n  {\n    \"production\": {\n      \"packages\": {\n        \"version\": \"1.2.3\",\n        \"package\": \"foo\"\n      }\n    },\n    \"test\": {\n      \"metadata\": [\n        {\n          \"version\": \"4.5.6\",\n          \"package\": \"bar\"\n        }\n      ]\n    }\n  },\n  {\n    \"development\": {\n      \"author\": \"Renovate\"\n    }\n  }\n]\n</code></pre>"},{"location":"modules/manager/jsonata/#example-queries","title":"Example queries","text":"<p>Below are some example queries for the generic JSON manager. You can also use the JSONata test website to experiment with queries.</p> Dependencies spread in different nodes, and we want to limit the extraction to a particular node<pre><code>{\n  \"production\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    }\n  ],\n  \"development\": [\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n</code></pre> <p>Query:</p> <pre><code>production.{ \"depName\": package, \"currentValue\": version }\n</code></pre> Dependencies spread in different nodes, and we want to extract all of them as if they were in the same node<pre><code>{\n  \"production\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    }\n  ],\n  \"development\": [\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n</code></pre> <p>Query:</p> <pre><code>*.{ \"depName\": package, \"currentValue\": version }\n</code></pre> The dependency name is in a JSON node name, and the version is in a child leaf to that node<pre><code>{\n  \"foo\": {\n    \"version\": \"1.2.3\"\n  },\n  \"bar\": {\n    \"version\": \"4.5.6\"\n  }\n}\n</code></pre> <p>Query:</p> <pre><code>$each(function($v, $n) { { \"depName\": $n, \"currentValue\": $v.version } })\n</code></pre> The dependency name and its version are both value nodes of the same parent node<pre><code>{\n  \"packages\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    },\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n</code></pre> <p>Query:</p> <pre><code>packages.{ \"depName\": package, \"currentValue\": version }\n</code></pre> The dependency name and version are part of the same string<pre><code>{\n  \"packages\": [\"foo@1.2.3\", \"bar@4.5.6\"]\n}\n</code></pre> <p>Query:</p> <pre><code>$map($map(packages, function ($v) { $split($v, \"@\") }), function ($v) { { \"depName\": $v[0], \"currentVersion\": $v[1] } })\n</code></pre> JSONata manager config to extract deps from a package.json file in the Renovate repository<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"json\",\n      \"managerFilePatterns\": [\"/package.json/\"],\n      \"matchStrings\": [\n        \"$each(dependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"dependencies\\\"}})\",\n        \"$each(devDependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"devDependencies\\\"}})\",\n        \"$each(optionalDependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"optionalDependencies\\\"}})\",\n        \"{ \\\"depName\\\": \\\"pnpm\\\", \\\"currentValue\\\": $substring(packageManager, 5),  \\\"depType\\\": \\\"packageManager\\\"}\"\n      ],\n      \"datasourceTemplate\": \"npm\"\n    }\n  ]\n}\n</code></pre> Dependencies in a single node, and we want to extract all of them<pre><code>packages:\n  - version: 1.2.3\n    package: foo\n</code></pre> <p>Query:</p> <pre><code>packages.{ \"depName\": package, \"currentValue\": version }\n</code></pre> Dependencies in a single node in a multi document yaml, and we want to extract all of them<pre><code>packages:\n  - version: 1.2.3\n    package: foo\n---\npackages:\n  - version: 1.2.5\n    package: bar\n</code></pre> <p>Query:</p> <pre><code>packages.{ \"depName\": package, \"currentValue\": version }\n</code></pre> JSONata manager config to extract deps from a toml file<pre><code>[[packages]]\nversion = \"1.2.3\"\npackage = \"foo\"\n\n[[packages]]\nversion = \"1.2.2\"\npackage = \"bar\"\n</code></pre> <p>Query:</p> <pre><code>packages.{ \"depName\": package, \"currentValue\": version }\n</code></pre>"},{"location":"modules/manager/jsonnet-bundler/","title":"Automated Dependency Updates for jsonnet-bundler","text":"<p>Categories: <code>kubernetes</code></p> <p>Renovate supports updating jsonnet-bundler dependencies.</p>"},{"location":"modules/manager/jsonnet-bundler/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)jsonnetfile\\.json$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/jsonnet-bundler/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/jsonnet-bundler/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)jsonnetfile\\\\.json$/\"\n  ],\n  \"datasource\": \"git-tags\"\n}\n</code></pre>"},{"location":"modules/manager/jsonnet-bundler/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>jsonnetfile.json</code> files, updates <code>jsonnetfile.lock.json</code> and updates the <code>vendor</code> directory.</p> <p>Supports lock file maintenance.</p> <p>This plugin requires <code>jsonnet-bundler &gt;= v0.4.0</code> since previous versions don't support updating single dependencies.</p>"},{"location":"modules/manager/kotlin-script/","title":"Automated Dependency Updates for Kotlin Script","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Kotlin Script dependencies.</p>"},{"location":"modules/manager/kotlin-script/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/^.+\\.main\\.kts$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/kotlin-script/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/kotlin-script/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/^.+\\\\.main\\\\.kts$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/kotlin-script/#additional-information","title":"Additional Information","text":"<p>Renovate supports upgrading dependencies in Kotlin Script files. Read the Kotlin Script docs to learn more. For example:</p> <pre><code>#!/usr/bin/env kotlin\n@file:Repository(\"https://jitpack.io\")\n@file:DependsOn(\"com.github.krzema12:github-actions-kotlin-dsl:main-SNAPSHOT\")\n@file:DependsOn(\"org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r\")\n@file:DependsOn(\"org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.0.2\")\n\nprintln(\"Hello world!\")\n\n// ...\n</code></pre> <p>By default, Renovate only scans files with the <code>.main.kts</code> extension and not <code>.kts</code>. This way Renovate avoids ambiguity with Gradle config files that use the <code>.gradle.kts</code> extension.</p> <p>If you want to manage other Kotlin Script files, you may use the <code>managerFilePatterns</code> config option to let Renovate update these files:</p> <pre><code>{\n  \"kotlin-script\": {\n    \"managerFilePatterns\": [\"/^.*\\\\.kts$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/kubernetes/","title":"Automated Dependency Updates for Kubernetes","text":"<p>Categories: <code>kubernetes</code></p> <p>Renovate supports updating Kubernetes dependencies.</p>"},{"location":"modules/manager/kubernetes/#file-matching","title":"File Matching","text":"<p>Because file names for <code>kubernetes</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>kubernetes</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/kubernetes/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>kubernetes-api</code>.</p>"},{"location":"modules/manager/kubernetes/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/kubernetes/#additional-information","title":"Additional Information","text":"<p>The <code>kubernetes</code> manager has no <code>managerFilePatterns</code> default patterns, so it won't match any files until you configure it with a pattern. This is because there is no commonly accepted file/directory naming convention for Kubernetes YAML files and we don't want to check every single <code>*.yaml</code> file in repositories just in case any of them have Kubernetes definitions.</p> <p>If most <code>.yaml</code> files in your repository are Kubernetes ones, then you could add this to your config:</p> <pre><code>{\n  \"kubernetes\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\"]\n  }\n}\n</code></pre> <p>If instead you have them all inside a <code>k8s/</code> directory, you would add this:</p> <pre><code>{\n  \"kubernetes\": {\n    \"managerFilePatterns\": [\"/k8s/.+\\\\.yaml$/\"]\n  }\n}\n</code></pre> <p>Or if it's only a single file then something like this:</p> <pre><code>{\n  \"kubernetes\": {\n    \"managerFilePatterns\": [\"/^config/k8s\\\\.yaml$/\"]\n  }\n}\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/kustomize/","title":"Automated Dependency Updates for Kustomize","text":"<p>Categories: <code>kubernetes</code></p> <p>Renovate supports updating Kustomize dependencies.</p>"},{"location":"modules/manager/kustomize/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)kustomization\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/kustomize/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>, <code>github-tags</code>, <code>helm</code>.</p>"},{"location":"modules/manager/kustomize/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)kustomization\\\\.ya?ml$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/kustomize/#additional-information","title":"Additional Information","text":"<p>Renovate can manage these parts of the <code>kustomization.yaml</code> file:</p> <ol> <li>remote resources</li> <li>image tags</li> <li>components</li> <li>helm charts</li> <li>remote bases (deprecated since Kustomize <code>v2.1.0</code>)</li> </ol>"},{"location":"modules/manager/kustomize/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>kustomization.yaml</code> files</li> <li>Dependencies are extracted from remote bases, image tags and Helm charts</li> <li>Renovate resolves the dependency's source repository and checks if there are SemVer tags</li> <li>If Renovate finds an update, then it updates the <code>kustomization.yaml</code> file</li> </ol> <p>This manager uses three <code>depType</code>s to allow fine-grained control of which dependencies are upgraded:</p> <ul> <li>Component</li> <li>Kustomization</li> <li>HelmChart</li> <li>OCIChart</li> </ul>"},{"location":"modules/manager/kustomize/#helm-charts-inflation","title":"Helm charts inflation","text":"<p>Renovate will inflate helm charts referenced in a kustomization if any of the following is true:</p> <ol> <li>The version Renovate is upgrading from was inflated, OR</li> <li>The <code>kustomizeInflateHelmCharts</code> option in <code>postUpdateOptions</code> is enabled</li> </ol> <p>Note: To prevent Renovate from updating dependencies in the expanded charts, you'll need to manually exclude the folders from Helm managers. For example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"**/charts/**\"],\n      \"matchManagers\": [\"helmv3\", \"helm-values\"],\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/kustomize/#limitations","title":"Limitations","text":"<ul> <li>Using HTTPS to fetch the repositories is not tested</li> <li>The keys for the image tags can be in any order</li> </ul> <pre><code>- name: image/name\n  newTag: v0.0.1\n# or\n- newTag: v0.0.1\n  name: image/name\n</code></pre> <ul> <li>Digests can be pinned in <code>newTag</code> or <code>digest</code>:</li> </ul> <pre><code>- name: image/name\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n# without a version, digests are tracked as :latest\n- name: image/name\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre> <ul> <li>The image's repository can be changed with <code>newName</code>:</li> </ul> <pre><code>- name: image/name\n  newName: custom-image/name:v0.0.1\n- name: image/name\n  newName: custom-image/name:v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\n  newName: custom-image/name@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\n  newName: custom-image/name\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\n  newName: custom-image/name\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre> <ul> <li>Images with values ignored by Kustomize will be skipped to avoid ambiguity:</li> </ul> <pre><code># bad: skipped because newTag: is ignored when digest: is set\n- name: image/name\n  newTag: v0.0.1\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n# good:\n- name: image/name\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre>"},{"location":"modules/manager/leiningen/","title":"Automated Dependency Updates for Leiningen","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Leiningen dependencies.</p>"},{"location":"modules/manager/leiningen/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)project\\.clj$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/leiningen/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>clojure</code>.</p>"},{"location":"modules/manager/leiningen/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)project\\\\.clj$/\"\n  ],\n  \"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/leiningen/#additional-information","title":"Additional Information","text":"<p>Extracts Maven-type dependencies.</p>"},{"location":"modules/manager/maven/","title":"Automated Dependency Updates for Maven","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Maven dependencies.</p>"},{"location":"modules/manager/maven/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/|\\.)pom\\.xml$/\n/^(((\\.mvn)|(\\.m2))/)?settings\\.xml$/\n/(^|/)\\.mvn/extensions\\.xml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/maven/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>, <code>docker</code>.</p>"},{"location":"modules/manager/maven/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/|\\\\.)pom\\\\.xml$/\",\n    \"/^(((\\\\.mvn)|(\\\\.m2))/)?settings\\\\.xml$/\",\n    \"/(^|/)\\\\.mvn/extensions\\\\.xml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/maven/#additional-information","title":"Additional Information","text":"<p>The <code>maven</code> manager focuses on extracting dependencies from <code>pom.xml</code>. It uses the official Maven versioning scheme.</p> <p>It also supports Image Customizations of <code>spring-boot</code>'s OCI packaging. Usage of <code>registryAliases</code> is possible only for container image references.</p>"},{"location":"modules/manager/maven/#limitations","title":"Limitations","text":"<p>Currently maven properties are not supported for buildpack related dependencies.</p>"},{"location":"modules/manager/maven-wrapper/","title":"Automated Dependency Updates for Maven Wrapper","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Maven Wrapper dependencies.</p>"},{"location":"modules/manager/maven-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|\\/).mvn/wrapper/maven-wrapper.properties$/\n/(^|\\/)mvnw(.cmd)?$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/maven-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/maven-wrapper/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|\\\\/).mvn/wrapper/maven-wrapper.properties$/\",\n    \"/(^|\\\\/)mvnw(.cmd)?$/\"\n  ],\n  \"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/maven-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Maven Wrapper updates. Changes here affect how Renovate updates the version of Maven in the wrapper, not how it uses the wrapper.</p>"},{"location":"modules/manager/meteor/","title":"Automated Dependency Updates for Meteor","text":"<p>Categories: <code>js</code></p> <p>Renovate supports updating Meteor dependencies.</p>"},{"location":"modules/manager/meteor/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)package\\.js$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/meteor/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>npm</code>.</p>"},{"location":"modules/manager/meteor/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)package\\\\.js$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/meteor/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/mint/","title":"Automated Dependency Updates for Mint","text":"<p>Categories: <code>swift</code></p> <p>Renovate supports updating Mint dependencies.</p>"},{"location":"modules/manager/mint/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Mintfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/mint/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/mint/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Mintfile$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/mint/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Mintfiles.</p> <p>Go to the <code>yonaskolb/Mint</code> repository on GitHub to learn more about the Mint package manager.</p> <p>You must put the library version in the Mintfile:</p> <pre><code>// Good:\nSwiftGen/SwiftGen@6.6.1\nrealm/SwiftLint @ 0.48.0\n\n// Bad:\nyonaskolb/xcodegen\n</code></pre>"},{"location":"modules/manager/mise/","title":"Automated Dependency Updates for mise-en-place","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating mise-en-place dependencies.</p>"},{"location":"modules/manager/mise/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)\\.?mise\\.toml$/\n/(^|/)\\.?mise/config\\.toml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/mise/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>crate</code>, <code>dart-version</code>, <code>docker</code>, <code>dotnet-version</code>, <code>flutter-version</code>, <code>git-refs</code>, <code>git-tags</code>, <code>github-releases</code>, <code>github-tags</code>, <code>go</code>, <code>hexpm-bob</code>, <code>java-version</code>, <code>node-version</code>, <code>npm</code>, <code>nuget</code>, <code>pypi</code>, <code>ruby-version</code>, <code>rubygems</code>.</p>"},{"location":"modules/manager/mise/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.?mise\\\\.toml$/\",\n    \"/(^|/)\\\\.?mise/config\\\\.toml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/mise/#additional-information","title":"Additional Information","text":"<p>Renovate can update the mise <code>mise.toml</code> file.</p>"},{"location":"modules/manager/mise/#renovate-only-updates-primary-versions","title":"Renovate only updates primary versions","text":"<p>Renovate's <code>mise</code> manager is designed to automatically update the first (primary) version listed for each tool in the <code>mise.toml</code> file.</p> <p>Secondary or fallback versions require manual updates.</p>"},{"location":"modules/manager/mise/#example","title":"Example","text":"<p>Given a <code>mise.toml</code> entry like:</p> <pre><code>[tools]\nerlang = [\"23.3\", \"22.0\"]\n</code></pre> <p>Renovate will update <code>\"23.3\"</code> (the primary version) but will not touch <code>\"22.0\"</code> (the fallback version).</p>"},{"location":"modules/manager/mise/#why-can-renovate-only-update-primary-versions","title":"Why can Renovate only update primary versions?","text":"<p>To maintain consistency and reliability, Renovate opts to only manage the first listed version.</p> <ul> <li>Fallback versions can often be older versions of a tool that are known to work and are there as a backup.</li> </ul> <p>This follows the same workflow that Renovate's <code>asdf</code> manager uses.</p>"},{"location":"modules/manager/mise/#short-names-support","title":"Short names support","text":"<p>Renovate uses mise registry to understand tools short names.</p> <p>Support for new tool short names needs to be manually added to Renovate's logic.</p>"},{"location":"modules/manager/mise/#adding-new-tool-support","title":"Adding new tool support","text":"<p>There are 2 ways to integrate versioning for a new tool:</p> <ul> <li>Renovate's <code>mise</code> manager: ensure upstream <code>mise</code> supports the tool, then add support to the <code>mise</code> manager in Renovate</li> <li>Renovate's <code>asdf</code> manager: improve the <code>asdf</code> manager in Renovate, which automatically extends support to <code>mise</code></li> </ul> <p>If <code>mise</code> adds support for more tools via its own core tools, you can create a PR to extend Renovate's <code>mise</code> manager to add support for the new core tools.</p> <p>If you want to add support for other tools' short names to <code>mise</code>, you can create a PR to extend Renovate's <code>asdf</code> manager, which indirectly helps Renovate's <code>mise</code> manager as well. Even if the tool does not use the <code>asdf</code> backend in the registry, the short names added to the <code>asdf</code> manager will still be used in the <code>mise</code> manager.</p>"},{"location":"modules/manager/mise/#backends-support","title":"Backends support","text":"<p>Renovate's <code>mise</code> manager supports the following backends:</p> <ul> <li><code>core</code></li> <li><code>asdf</code></li> <li><code>aqua</code></li> <li><code>cargo</code></li> <li><code>go</code></li> <li><code>npm</code></li> <li><code>pipx</code></li> <li><code>spm</code></li> <li><code>ubi</code></li> <li><code>vfox</code></li> </ul>"},{"location":"modules/manager/mise/#limitations","title":"Limitations","text":"<p>Renovate's <code>mise</code> manager does not support the following tool syntax:</p> <ul> <li> <p><code>asdf</code> and <code>vfox</code> plugins   e.g. <code>asdf:mise-plugins/asdf-yarn</code> or <code>vfox:version-fox/vfox-elixir</code>   Short names with backends like <code>asdf:yarn</code> or <code>vfox:elixir</code> are supported if the short names (<code>yarn</code>, <code>elixir</code>) are supported.</p> </li> <li> <p><code>aqua</code> packages with <code>http</code> package type.   However if the short name using <code>aqua</code> backend is supported by Renovate, it will be updated.   e.g. <code>aqua:helm/helm</code> is not supported, but <code>helm</code> or <code>aqua:helm</code> is supported.</p> </li> <li> <p><code>aqua</code> packages with <code>version_filter</code>.   We don't read the aqua registry itself, so we can't support this feature.   If some packages using <code>version_filter</code> like <code>aqua:biomejs/biome</code> are not updated or updated incorrectly, set <code>extractVersion</code> in the Renovate config manually like below.</p> </li> </ul> <pre><code>{\n  \"packageRules\": [\n    {\n      \"depNames\": [\"aqua:biomejs/biome\"],\n      \"extractVersion\": \"cli/(?&lt;version&gt;.+)\"\n    }\n  ]\n}\n</code></pre> <ul> <li>Some of <code>ubi</code> backend tools with <code>tag_regex</code> option.   The <code>tag_regex</code> option is used as <code>extractVersion</code>, but the regex engines are not the same between mise and Renovate.   If the version is not updated or updated incorrectly, override <code>extractVersion</code> manually in the Renovate config.</li> </ul>"},{"location":"modules/manager/mise/#supported-default-registry-tool-short-names","title":"Supported default registry tool short names","text":"<p>Renovate's <code>mise</code> manager can only version these tool short names:</p> <ul> <li>bun (mise)</li> <li>deno (mise)</li> <li>elixir (mise)</li> <li>erlang (mise)</li> <li>go (mise)</li> <li>java (mise)</li> <li>node (mise)</li> <li>python (mise)</li> <li>ruby (mise)</li> <li>rust (mise)</li> <li>swift (mise)</li> <li>zig (mise)</li> <li>actionlint (mise)</li> <li>astro (mise)</li> <li>aws-cli (mise)</li> <li>aws-vault (mise)</li> <li>buf (mise)</li> <li>ccache (mise)</li> <li>committed (mise)</li> <li>consul (mise)</li> <li>dotenv-linter (mise)</li> <li>hivemind (mise)</li> <li>hk (mise)</li> <li>jq (mise)</li> <li>kafka (mise)</li> <li>lefthook (mise)</li> <li>localstack (mise)</li> <li>lychee (mise)</li> <li>opentofu (mise)</li> <li>pipx (mise)</li> <li>pkl (mise)</li> <li>protoc (mise)</li> <li>redis (mise)</li> <li>ruff (mise)</li> <li>shellcheck (mise)</li> <li>skeema (mise)</li> <li>sops (mise)</li> <li>sqlite (mise)</li> <li>stripe (mise)</li> <li>taplo (mise)</li> <li>terragrunt (mise)</li> <li>tilt (mise)</li> <li>tusd (mise)</li> <li>usage (mise)</li> <li>act (asdf)</li> <li>actionlint (asdf)</li> <li>adr-tools (asdf)</li> <li>argocd (asdf)</li> <li>asdf-plugin-manager (asdf)</li> <li>atmos (asdf)</li> <li>awscli (asdf)</li> <li>azure-cli (asdf)</li> <li>bun (asdf)</li> <li>cargo-make (asdf)</li> <li>checkov (asdf)</li> <li>clojure (asdf)</li> <li>clusterctl (asdf)</li> <li>conftest (asdf)</li> <li>container-structure-test (asdf)</li> <li>cookiecutter (asdf)</li> <li>cosign (asdf)</li> <li>crystal (asdf)</li> <li>dart (asdf)</li> <li>deno (asdf)</li> <li>direnv (asdf)</li> <li>dotnet-core (asdf)</li> <li>dprint (asdf)</li> <li>ecspresso (asdf)</li> <li>editorconfig-checker (asdf)</li> <li>elixir (asdf)</li> <li>elm (asdf)</li> <li>erlang (asdf)</li> <li>flutter (asdf)</li> <li>flux2 (asdf)</li> <li>gauche (asdf)</li> <li>github-cli (asdf)</li> <li>gitleaks (asdf)</li> <li>ginkgo (asdf)</li> <li>gleam (asdf)</li> <li>gohugo (asdf)</li> <li>golang (asdf)</li> <li>golangci-lint (asdf)</li> <li>gomplate (asdf)</li> <li>gotestsum (asdf)</li> <li>hadolint (asdf)</li> <li>haskell (asdf)</li> <li>helm (asdf)</li> <li>helm-docs (asdf)</li> <li>helmfile (asdf)</li> <li>hugo (asdf)</li> <li>idris (asdf)</li> <li>istioctl (asdf)</li> <li>java (asdf)</li> <li>julia (asdf)</li> <li>just (asdf)</li> <li>k3s (asdf)</li> <li>kind (asdf)</li> <li>kotlin (asdf)</li> <li>kubebuilder (asdf)</li> <li>kubectl (asdf)</li> <li>kubetail (asdf)</li> <li>kustomize (asdf)</li> <li>localstack (asdf)</li> <li>lua (asdf)</li> <li>markdownlint-cli2 (asdf)</li> <li>maven (asdf)</li> <li>mimirtool (asdf)</li> <li>minikube (asdf)</li> <li>mockery (asdf)</li> <li>nim (asdf)</li> <li>nodejs (asdf)</li> <li>ocaml (asdf)</li> <li>oci (asdf)</li> <li>opa (asdf)</li> <li>opentofu (asdf)</li> <li>packer (asdf)</li> <li>perl (asdf)</li> <li>php (asdf)</li> <li>pnpm (asdf)</li> <li>poetry (asdf)</li> <li>pre-commit (asdf)</li> <li>protoc (asdf)</li> <li>pulumi (asdf)</li> <li>python (asdf)</li> <li>rebar (asdf)</li> <li>ruby (asdf)</li> <li>rust (asdf)</li> <li>sbt (asdf)</li> <li>scala (asdf)</li> <li>shellcheck (asdf)</li> <li>shfmt (asdf)</li> <li>skaffold (asdf)</li> <li>sops (asdf)</li> <li>steampipe (asdf)</li> <li>talhelper (asdf)</li> <li>talosctl (asdf)</li> <li>terraform (asdf)</li> <li>terraform-docs (asdf)</li> <li>terraformer (asdf)</li> <li>terragrunt (asdf)</li> <li>terramate (asdf)</li> <li>tflint (asdf)</li> <li>tfsec (asdf)</li> <li>trivy (asdf)</li> <li>vault (asdf)</li> <li>yamllint (asdf)</li> <li>yq (asdf)</li> <li>zig (asdf)</li> <li>maestro (asdf)</li> <li>detekt (asdf)</li> <li>ktlint (asdf)</li> <li>yamlfmt (asdf)</li> <li>tuist (asdf)</li> <li>typos (asdf)</li> <li>uv (asdf)</li> </ul>"},{"location":"modules/manager/mix/","title":"Automated Dependency Updates for Mix","text":"<p>Categories: <code>elixir</code></p> <p>Renovate supports updating Mix dependencies.</p>"},{"location":"modules/manager/mix/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)mix\\.exs$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/mix/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>git-tags</code>, <code>hex</code>.</p>"},{"location":"modules/manager/mix/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)mix\\\\.exs$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/mix/#additional-information","title":"Additional Information","text":"<p>The <code>mix</code> manager uses Renovate's implementation of Elixir SemVer to evaluate update ranges.</p> <p>The <code>mix</code> package manager itself is used to keep the lock file up-to-date.</p> <p>The following <code>depTypes</code> are currently supported by the <code>mix</code> manager :</p> <ul> <li><code>prod</code>: all dependencies by default</li> <li><code>dev</code>: dependencies with <code>:only</code> option not containing <code>:prod</code></li> </ul>"},{"location":"modules/manager/mix/#lockfilemaintenance","title":"<code>lockFileMaintenance</code>","text":"<p>We recommend you use <code>lockFileMaintenance</code> for the <code>mix</code> manager.</p> <p><code>lockFileMaintenance=true</code> periodically refreshes your <code>mix.lock</code> files, ensuring all indirect dependencies are updated to their latest allowed versions.</p> <p>This option will be skipped in umbrella projects, as they share a single <code>mix.lock</code> file for all applications <code>mix.exs</code> files.</p>"},{"location":"modules/manager/mix/#default-rangestrategyauto-behavior","title":"Default <code>rangeStrategy=auto</code> behavior","text":"<p>Renovate's default <code>rangeStrategy</code> is <code>\"auto\"</code>. Here's how <code>\"auto\"</code> works with the <code>mix</code> manager:</p> Version type New version Old range New range after update What Renovate does Complex range <code>1.7.2</code> <code>&lt; 1.7.0 or ~&gt; 1.7.1</code> <code>&lt; 1.7.0 or ~&gt; 1.7.2</code> Widen range to include the new version. Simple range <code>0.39.0</code> <code>&lt;= 0.38.0</code> <code>&lt;= 0.39.0</code> If update outside current range: widens range to include the new version. Exact version constraint <code>0.13.0</code> <code>== 0.12.0</code> <code>== 0.13.0</code> Replace old version with new version."},{"location":"modules/manager/mix/#recommended-rangestrategy-for-apps-and-libraries","title":"Recommended <code>rangeStrategy</code> for apps and libraries","text":"<p>For applications, we recommend using <code>rangeStrategy=pin</code>. This pins your dependencies to exact versions, which is generally considered best practice for apps.</p> <p>For libraries, use <code>rangeStrategy=widen</code> with version ranges in your <code>mix.exs</code>. This allows for greater compatibility with other projects that may use your library as a dependency.</p>"},{"location":"modules/manager/nix/","title":"Automated Dependency Updates for Nix","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Nix dependencies.</p>"},{"location":"modules/manager/nix/#enabling","title":"Enabling","text":"<p>Nix functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"nix\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/nix/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)flake\\.nix$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/nix/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-refs</code>.</p>"},{"location":"modules/manager/nix/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)flake\\\\.nix$/\"\n  ],\n  \"commitMessageTopic\": \"nix\",\n  \"commitMessageExtra\": \"to {{newValue}}\",\n  \"enabled\": false\n}\n</code></pre>"},{"location":"modules/manager/nix/#additional-information","title":"Additional Information","text":"<p>The <code>nix</code> manager supports:</p> <ul> <li><code>lockFileMaintenance</code> updates for <code>flake.lock</code></li> <li>input updates for <code>flake.lock</code></li> </ul> <p>For specifying <code>packageRules</code> it is important to know how <code>depName</code> and <code>packageName</code> are defined for nix updates:</p> <ul> <li>The <code>depName</code> field is equal to the nix flake input name, eg. <code>nix.inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";</code> would have the <code>depName</code> of <code>nixpkgs</code></li> <li>The <code>packageName</code> field is equal to the fully-qualified root URL of the package source, eg. <code>https://github.com/NixOS/nixpkgs</code> for the above example.</li> </ul>"},{"location":"modules/manager/nodenv/","title":"Automated Dependency Updates for nodenv","text":"<p>Categories: <code>js</code>, <code>node</code></p> <p>Renovate supports updating nodenv dependencies.</p>"},{"location":"modules/manager/nodenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.node-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/nodenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>node-version</code>.</p>"},{"location":"modules/manager/nodenv/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.node-version$/\"\n  ],\n  \"versioning\": \"node\"\n}\n</code></pre>"},{"location":"modules/manager/nodenv/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.node-version</code> file updated.</p>"},{"location":"modules/manager/npm/","title":"Automated Dependency Updates for npm","text":"<p>Categories: <code>js</code></p> <p>Renovate supports updating npm dependencies.</p>"},{"location":"modules/manager/npm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)package\\.json$/\n/(^|/)pnpm-workspace\\.yaml$/\n/(^|/)\\.yarnrc\\.yml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/npm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>npm</code>, <code>node-version</code>.</p>"},{"location":"modules/manager/npm/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)package\\\\.json$/\",\n    \"/(^|/)pnpm-workspace\\\\.yaml$/\",\n    \"/(^|/)\\\\.yarnrc\\\\.yml$/\"\n  ],\n  \"digest\": {\n    \"prBodyDefinitions\": {\n      \"Change\": \"{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}\"\n    }\n  },\n  \"prBodyDefinitions\": {\n    \"Change\": \"[{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}]({{#if depName}}https://renovatebot.com/diffs/npm/{{replace '/' '%2f' depName}}/{{{currentVersion}}}/{{{newVersion}}}{{/if}})\"\n  }\n}\n</code></pre>"},{"location":"modules/manager/npm/#additional-information","title":"Additional Information","text":"<p>The following <code>depTypes</code> are currently supported by the npm manager :</p> <ul> <li><code>dependencies</code></li> <li><code>devDependencies</code></li> <li><code>optionalDependencies</code></li> <li><code>peerDependencies</code></li> <li><code>engines</code> : Renovate will update any <code>node</code>, <code>npm</code> and <code>yarn</code> version specified under <code>engines</code>.</li> <li><code>volta</code> : Renovate will update any <code>node</code>, <code>npm</code>, <code>pnpm</code> and <code>yarn</code> version specified under <code>volta</code>.</li> <li><code>packageManager</code></li> <li><code>overrides</code></li> <li><code>resolutions</code></li> <li><code>pnpm.overrides</code></li> <li><code>pnpm.catalog.&lt;name&gt;</code>, such as <code>pnpm.catalog.default</code> and <code>pnpm.catalog.myCatalog</code>. Matches any default and named pnpm catalogs.</li> <li><code>yarn.catalogs.list.&lt;name&gt;</code> if you are using the yarn-plugin-catalogs</li> </ul>"},{"location":"modules/manager/npm/#npm-problems-and-workarounds","title":"npm problems and workarounds","text":""},{"location":"modules/manager/npm/#invalid-lock-file-npm-ci-fails","title":"Invalid lock file (npm ci fails)","text":"<p>Unfortunately, <code>npm</code> itself sometimes generates invalid lock files which fail <code>npm ci</code>. Try adding <code>\"postUpdateOptions\": [\"npmInstallTwice\"]</code> to tell Renovate run any <code>npm install</code> command (which is used to update lock files) twice. This is less efficient than running npm once, but has been known to fix most problems of this type.</p> <p>If this npm bug remains unfixed, and it becomes too frequent for Renovate users, then we may need to modify Renovate to do this by default. Please post feedback to the Renovate repository \"Discussions\" if you're needing to use this feature frequently or widely.</p>"},{"location":"modules/manager/npm/#yarn","title":"Yarn","text":""},{"location":"modules/manager/npm/#version-selection-installation","title":"Version Selection / Installation","text":"<p>If Renovate detects a <code>packageManager</code> setting for Yarn in <code>package.json</code> then it will use Corepack to install Yarn.</p>"},{"location":"modules/manager/npm/#http-proxy-support","title":"HTTP Proxy Support","text":"<p>Yarn itself does not natively recognize/support the <code>HTTP_PROXY</code> and <code>HTTPS_PROXY</code> environment variables.</p> <p>You can configure <code>RENOVATE_X_YARN_PROXY=true</code> as an environment variable to enable configuring of Yarn proxy (e.g. if you cannot configure these proxy settings yourself in <code>~/.yarnrc.yml</code>).</p> <p>If set, and Renovate detects Yarn 2+, and one or both of those variables are present, then Renovate will run commands like <code>yarn config set --home httpProxy http://proxy</code> prior to executing <code>yarn install</code>. This will result in the <code>~/.yarnrc.yml</code> file being created or modified with these settings, and the settings are not removed afterwards.</p> <p>Configuration/conversion of <code>NO_PROXY</code> to Yarn config is not supported.</p>"},{"location":"modules/manager/nuget/","title":"Automated Dependency Updates for NuGet","text":"<p>Categories: <code>dotnet</code></p> <p>Renovate supports updating NuGet dependencies.</p>"},{"location":"modules/manager/nuget/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/\\.(?:cs|fs|vb)proj$/\n/\\.(?:props|targets)$/\n/(^|/)dotnet-tools\\.json$/\n/(^|/)global\\.json$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/nuget/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>dotnet-version</code>, <code>nuget</code>.</p>"},{"location":"modules/manager/nuget/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.(?:cs|fs|vb)proj$/\",\n    \"/\\\\.(?:props|targets)$/\",\n    \"/(^|/)dotnet-tools\\\\.json$/\",\n    \"/(^|/)global\\\\.json$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/nuget/#additional-information","title":"Additional Information","text":"<p>Use <code>packageRules</code> to control the behavior of the NuGet package manager.</p> <p>The NuGet package manager supports these SDK-style files and formats:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> <li><code>.props</code></li> <li><code>.targets</code></li> <li><code>global.json</code></li> <li><code>dotnet-tools.json</code></li> </ul> <p>.NET Core projects are supported by default.</p> <p>For Renovate to work with .NET Framework projects, you need to update these files so they match the new SDK-style format:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> <li><code>.props</code></li> <li><code>.targets</code></li> </ul>"},{"location":"modules/manager/nuget/#disabling-updates-for-pinned-versions","title":"Disabling updates for pinned versions","text":"<p>In NuGet, when you use versions like <code>Version=\"1.2.3\"</code> then it means \"1.2.3 or greater, up to v2\" When you use versions like <code>Version=\"[1.2.3]\"</code> then it means \"exactly 1.2.3\".</p> <p>If you would like Renovate to disable updating of exact versions (warning: you might end up years out of date and not realize it) then here is an example configuration to achieve that:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Skip pinned versions\",\n      \"matchManagers\": [\"nuget\"],\n      \"matchCurrentValue\": \"/^\\\\[[^,]+\\\\]$/\",\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/nuget/#workload-restore","title":"Workload restore","text":"<p>Sometimes you need to run <code>dotnet workload restore</code> to ensure that all required workloads are installed before restoring the project. You can enable this behavior by adding <code>dotnetWorkloadRestore</code> to the <code>postUpdateOptions</code> in your Renovate configuration.</p> <pre><code>{\n  \"postUpdateOptions\": [\"dotnetWorkloadRestore\"]\n}\n</code></pre>"},{"location":"modules/manager/nvm/","title":"Automated Dependency Updates for nvm","text":"<p>Categories: <code>js</code>, <code>node</code></p> <p>Renovate supports updating nvm dependencies.</p>"},{"location":"modules/manager/nvm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.nvmrc$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/nvm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>node-version</code>.</p>"},{"location":"modules/manager/nvm/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.nvmrc$/\"\n  ],\n  \"versioning\": \"node\",\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/nvm/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.nvmrc</code> file updated.</p>"},{"location":"modules/manager/ocb/","title":"Automated Dependency Updates for OpenTelemetry Collector Builder (ocb)","text":"<p>Categories: <code>golang</code></p> <p>Renovate supports updating OpenTelemetry Collector Builder (ocb) dependencies.</p>"},{"location":"modules/manager/ocb/#file-matching","title":"File Matching","text":"<p>Because file names for <code>ocb</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>ocb</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/ocb/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>go</code>.</p>"},{"location":"modules/manager/ocb/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/ocb/#additional-information","title":"Additional Information","text":"<p>Renovate uses this manager to update dependencies defined in the build definitions for the OpenTelemetry Collector Builder (ocb).</p> <p>By default, the <code>ocb</code> manager has no <code>managerFilePatterns</code> patterns. This means you must set a <code>managerFilePatterns</code> pattern for the <code>ocb</code> manager, in order for Renovate to update your <code>ocb</code> files. Here's a configuration example:</p> If your builder files are named like foo-builder.yml or builder.yaml<pre><code>{\n  \"ocb\": {\n    \"managerFilePatterns\": [\"/builder.ya?ml$/\"]\n  }\n}\n</code></pre> <p>Supported dependencies and their respective <code>depType</code>s are:</p> Name depType base collector <code>collector</code> connectors <code>connectors</code> exports <code>exports</code> extensions <code>extensions</code> processors <code>processors</code>"},{"location":"modules/manager/osgi/","title":"Automated Dependency Updates for OSGi","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating OSGi dependencies.</p>"},{"location":"modules/manager/osgi/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)src/main/features/.+\\.json$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/osgi/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/osgi/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)src/main/features/.+\\\\.json$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/osgi/#additional-information","title":"Additional Information","text":"<p>The <code>osgi</code> manager extracts dependencies from feature model definition files, typically located under <code>src/main/features</code>. It uses the <code>maven</code> datasource to find dependency updates.</p> <p>Artifact list extensions are not supported. For the definition of artifact list extensions, read section 159.7.3 of the OSGi R8 spec.</p> <p>References:</p> <ul> <li>OSGi compendium release 8, Feature Service Specification</li> <li>The Sling implementation of the feature model</li> </ul>"},{"location":"modules/manager/pep621/","title":"Automated Dependency Updates for PEP 621","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating PEP 621 dependencies.</p>"},{"location":"modules/manager/pep621/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)pyproject\\.toml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pep621/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pep621/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)pyproject\\\\.toml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pep621/#additional-information","title":"Additional Information","text":"<p>This manager supports updating dependencies inside <code>pyproject.toml</code> files.</p> <p>In addition to standard dependencies, these toolsets are also supported:</p> <ul> <li><code>pdm</code> (including <code>pdm.lock</code> files)</li> <li><code>uv</code> (including <code>uv.lock</code> files and <code>uv</code> workspaces)</li> <li><code>hatch</code></li> </ul> <p>Available <code>depType</code>s:</p> <ul> <li><code>project.dependencies</code></li> <li><code>project.optional-dependencies</code></li> <li><code>dependency-groups</code></li> <li><code>build-system.requires</code></li> <li><code>tool.pdm.dev-dependencies</code></li> <li><code>tool.uv.dev-dependencies</code></li> <li><code>tool.uv.sources</code></li> <li><code>tool.hatch.envs.&lt;env-name&gt;</code></li> </ul>"},{"location":"modules/manager/pep621/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>pdm</code> or <code>uv</code> commands to update the <code>pdm.lock</code> or <code>uv.lock</code> respectively, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>Renovate uses this logic before it updates any \"artifacts\":</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token or username/password and <code>matchHost</code> will be fetched, except for any <code>github.com</code> one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of these characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>pep621</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/pep723/","title":"Automated Dependency Updates for PEP 723","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating PEP 723 dependencies.</p>"},{"location":"modules/manager/pep723/#file-matching","title":"File Matching","text":"<p>Because file names for <code>pep723</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>pep723</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pep723/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pep723/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/pep723/#additional-information","title":"Additional Information","text":"<p>This manager supports updating dependencies inside Python files that use inline script metadata, also known as PEP 723.</p>"},{"location":"modules/manager/pip-compile/","title":"Automated Dependency Updates for pip-compile","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating pip-compile dependencies.</p>"},{"location":"modules/manager/pip-compile/#file-matching","title":"File Matching","text":"<p>Because file names for <code>pip-compile</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>pip-compile</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pip-compile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/pip-compile/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [],\n  \"lockFileMaintenance\": {\n    \"enabled\": true,\n    \"branchTopic\": \"pip-compile-refresh\",\n    \"commitMessageAction\": \"Refresh pip-compile outputs\"\n  }\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#additional-information","title":"Additional Information","text":"<p>The <code>pip-compile</code> manager does not support all use cases for <code>pip-compile</code>, so if you find any areas lacking and without an existing Issue then please \"Suggest an Idea\" in the Discussions forum with your use case.</p> <p>The <code>uv pip compile</code> command is also supported through this manager in the same fashion as <code>pip-compile</code>.</p> <p>The current implementation has some limitations. Read the full document before you start using the <code>pip-compile</code> manager.</p>"},{"location":"modules/manager/pip-compile/#non-configured-managerfilepatterns","title":"Non-configured managerFilePatterns","text":"<p>The <code>pip-compile</code> manager has an empty array for default <code>managerFilePatterns</code>, meaning it won't match any files ever by default. You can \"activate\" the manager by specifying a <code>managerFilePatterns</code> pattern such as:</p> <pre><code>{\n  \"pip-compile\": {\n    \"managerFilePatterns\": [\"/(^|/)requirements\\\\.txt$/\"]\n  }\n}\n</code></pre> <p><code>pip-compile</code> reads the output files to extract the arguments passed to the original command, as such the <code>managerFilePatterns</code> must be configured for <code>*.txt</code> files and not <code>*.in</code>.</p>"},{"location":"modules/manager/pip-compile/#assumption-of-header-with-a-command","title":"Assumption of header with a command","text":"<p>As Renovate matches a <code>pip-compile</code> output file it will extract original command that was used to create it from header in this file. Because of that <code>pip-compile</code> manager poses restrictions on how this file is generated:</p> <ul> <li>Use default header generation, don't use <code>--no-header</code> option.</li> <li>Pass all source files explicitly.</li> </ul> <p>In turn <code>pip-compile</code> manager will find all source files and parse them as package files using their respective managers.</p> <p>The following files are currently supported:</p> Source filename Manager <code>pyproject.toml</code> <code>pep621</code> <code>setup.py</code> <code>pip_setup</code> <code>*.in</code> <code>pip_requirements</code> <p>Example header:</p> <pre><code>#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --no-emit-index-url --output-file=requirements.txt requirements.in\n#\n</code></pre>"},{"location":"modules/manager/pip-compile/#conflicts-with-other-managers","title":"Conflicts with other managers","text":"<p>Because <code>pip-compile</code> will update source files with their associated manager you should disable them to avoid running these managers twice.</p> <pre><code>{\n  \"pip_requirements\": {\n    \"enabled\": false\n  },\n  \"pip_setup\": {\n    \"enabled\": false\n  }\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#configuration-of-python-version","title":"Configuration of Python version","text":"<p>By default Renovate extracts Python version from the header for <code>pip-compile</code>, and from the <code>--python-version</code> option for <code>uv</code>. To get Renovate to use another version of Python, add a constraints` rule to the Renovate config:</p> <pre><code>{\n  \"constraints\": {\n    \"python\": \"==3.7\"\n  }\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#pip-compile-arguments","title":"<code>pip-compile</code> arguments","text":"<p>Renovate reads the <code>requirements.txt</code> file and extracts these <code>pip-compile</code> arguments:</p> <ul> <li>source files as positional arguments</li> <li><code>--output-file</code></li> </ul> <p>All other allowed <code>pip-compile</code> arguments will be passed over without modification.</p>"},{"location":"modules/manager/pip-compile/#transitive-indirect-dependencies","title":"Transitive / indirect dependencies","text":"<p>This manager detects dependencies that only appear in lock files. They are disabled by default but can be forced to enable by vulnerability alerts. They will be upgraded with <code>--upgrade-package</code> option.</p>"},{"location":"modules/manager/pip_requirements/","title":"Automated Dependency Updates for pip Requirements","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating pip Requirements dependencies.</p>"},{"location":"modules/manager/pip_requirements/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)[\\w-]*requirements([-.]\\w+)?\\.(txt|pip)$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pip_requirements/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/pip_requirements/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)[\\\\w-]*requirements([-.]\\\\w+)?\\\\.(txt|pip)$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pip_requirements/#additional-information","title":"Additional Information","text":"<p>Supports <code>requirements.txt</code> and <code>requirements.pip</code> files. The default file pattern is fairly flexible, to try to catch similarly named ones too (eg <code>requirements-*.txt</code> <code>requirements.*.txt</code> <code>requirements-*.pip</code> and <code>requirements.*.pip</code>) but may be extended/changed.</p>"},{"location":"modules/manager/pip_setup/","title":"Automated Dependency Updates for pip setup.py","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating pip setup.py dependencies.</p>"},{"location":"modules/manager/pip_setup/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)setup\\.py$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pip_setup/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pip_setup/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)setup\\\\.py$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pip_setup/#additional-information","title":"Additional Information","text":"<p>Renovate uses a JavaScript-based parser to process the <code>pip_setup</code> files.</p>"},{"location":"modules/manager/pipenv/","title":"Automated Dependency Updates for Pipenv","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating Pipenv dependencies.</p>"},{"location":"modules/manager/pipenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Pipfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pipenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pipenv/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Pipfile$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pipenv/#additional-information","title":"Additional Information","text":"<p><code>Pipenv.lock</code> updating is supported.</p> <p>The Pipenv manager supports the default <code>depTypes</code>:</p> <ul> <li><code>packages</code></li> <li><code>dev-packages</code></li> </ul> <p>and also extracts dependencies from other package category groups, using the group name as the <code>depType</code>.</p>"},{"location":"modules/manager/pixi/","title":"Automated Dependency Updates for Pixi","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating Pixi dependencies.</p>"},{"location":"modules/manager/pixi/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/(^|/)pyproject\\.toml$/\n/(^|/)pixi\\.toml$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pixi/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>, <code>conda</code>.</p>"},{"location":"modules/manager/pixi/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)pyproject\\\\.toml$/\",\n    \"/(^|/)pixi\\\\.toml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pixi/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/pixi/#pixi-package-manager","title":"Pixi package manager","text":"<p>Currently support channels from anaconda and prefix.dev, other channels are not supported yet.</p> <p>Whenever the pixi config in <code>pyproject.toml</code> or <code>pixi.toml</code> file is updated, <code>pixi.lock</code> file will be checked for updates as well.</p> <p>Renovatebot will pick pixi version in following order:</p> <ol> <li>renovatebot setting <code>constraints.pixi</code></li> <li><code>requires-pixi</code> in <code>pixi.toml</code></li> </ol> <p>The minimal support version of pixi is <code>0.40.0</code> (<code>pixi lock</code> has only been introduced with that version). Therefore when you are setting <code>constraints.pixi</code> in your renovatebot config or <code>requires-pixi</code> in <code>pixi.toml</code>, please be careful to pick a supported pixi version.</p>"},{"location":"modules/manager/poetry/","title":"Automated Dependency Updates for Poetry","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating Poetry dependencies.</p>"},{"location":"modules/manager/poetry/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)pyproject\\.toml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/poetry/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>, <code>github-tags</code>, <code>github-releases</code>, <code>gitlab-tags</code>, <code>git-refs</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/poetry/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)pyproject\\\\.toml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/poetry/#additional-information","title":"Additional Information","text":"<p>Poetry 0.x, 1.x and 2.x versions are supported.</p> <p>Whenever the <code>pyproject.toml</code> file is updated, the Poetry lock file will be checked for updates as well.</p> <p>The following <code>depTypes</code> are supported by the Poetry manager:</p> <ul> <li><code>dependencies</code></li> <li><code>dev-dependencies</code></li> <li><code>extras</code></li> <li><code>&lt;group-name&gt;</code> (dynamic, based on the group name, per dependency groups documentation)</li> </ul> <p>Warning</p> <p>Updating locked versions of Poetry dependencies is at times unreliable. We recommended that you pin dependency versions in your <code>pyproject.toml</code> instead.</p> <p>Renovate cannot accurately update locked versions of Poetry dependency ranges due to limitations in Poetry. For example, if the <code>pyproject.toml</code> has a constraint like <code>coverage = \"^7.2\"</code>, and the version in <code>poetry.lock</code> is <code>7.4.1</code>, and we know that <code>7.4.3</code> is available, then Renovate can only run <code>poetry update --lock --no-interaction coverage</code> and hope the result is <code>7.4.3</code>. Poetry does not support updating to a specific/exact version with the <code>update</code> command, and the above <code>update</code> command may not even update at all sometimes. For this reason it's much better to pin dependency versions in <code>pyproject.toml</code>, such as <code>coverage = \"7.4.1\"</code> because it then gives Renovate more control and the ability to accurate upgrade dependencies in increments like <code>7.4.1</code> to <code>7.4.3</code>.</p>"},{"location":"modules/manager/pre-commit/","title":"Automated Dependency Updates for pre-commit","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating pre-commit dependencies.</p>"},{"location":"modules/manager/pre-commit/#enabling","title":"Enabling","text":"<p>pre-commit functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"pre-commit\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/pre-commit/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.pre-commit-config\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pre-commit/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>gitlab-tags</code>.</p>"},{"location":"modules/manager/pre-commit/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"pre-commit hook {{depName}}\",\n  \"enabled\": false,\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.pre-commit-config\\\\.ya?ml$/\"\n  ],\n  \"prBodyNotes\": [\n    \"Note: The `pre-commit` manager in Renovate is not supported by the `pre-commit` maintainers or community. Please do not report any problems there, instead [create a Discussion in the Renovate repository](https://github.com/renovatebot/renovate/discussions/new) if you have any questions.\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pre-commit/#additional-information","title":"Additional Information","text":"<p>Important note: The <code>pre-commit</code> manager is disabled by default and must be opted into through config. Renovate's approach to version updating is not fully aligned with <code>pre-commit autoupdate</code> and this has caused frustration for <code>pre-commit</code>'s creator/maintainer. Attempts to work with the <code>pre-commit</code> project to fix these gaps have been rejected, so we have chosen to disable the manager by default indefinitely. Please do not contact the <code>pre-commit</code> project/maintainer about any Renovate-related topic. To view a list of open issues related to the <code>pre-commit</code> manager in Renovate, see the filtered list using the <code>manager:pre-commit</code> label.</p> <p>When enabled, Renovate supports updating of Git dependencies within pre-commit configuration <code>.pre-commit-config.yaml</code> files or other YAML files that use the same format (via <code>managerFilePatterns</code> configuration). Updates are performed if the files follow the conventional format used in typical pre-commit files:</p> <pre><code>repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.0.0\n    hooks:\n      - id: some-hook-id\n</code></pre> <p>To enable the <code>pre-commit</code> manager, add the following config:</p> <pre><code>{\n  \"pre-commit\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>Alternatively, add <code>:enablePreCommit</code> to your <code>extends</code> array.</p>"},{"location":"modules/manager/pre-commit/#additional-dependencies","title":"Additional Dependencies","text":"<p>Renovate has partial support for <code>additional_dependencies</code>, currently Node.js and Python only.</p> <p>You will need to explicitly add the language to your hooks with <code>additional_dependencies</code> to let Renovate know what kind of dependencies they are.</p> <p>Examples for the supported languages are listed below.</p>"},{"location":"modules/manager/pre-commit/#nodejs","title":"Node.js","text":"<pre><code>- repo: https://github.com/pre-commit/mirrors-prettier\n  rev: v3.1.0\n  hooks:\n    - id: prettier\n      language: node\n      additional_dependencies:\n        - '@trivago/prettier-plugin-sort-imports@^5.2.2'\n        - prettier@^3.6.2\n</code></pre>"},{"location":"modules/manager/pre-commit/#python","title":"Python","text":"<pre><code>- repo: https://github.com/psf/black\n  rev: 19.3b0\n  hooks:\n    - id: black\n      language: python\n      additional_dependencies:\n        - 'requests==1.1.1'\n</code></pre>"},{"location":"modules/manager/pub/","title":"Automated Dependency Updates for pub","text":"<p>Categories: <code>dart</code></p> <p>Renovate supports updating pub dependencies.</p>"},{"location":"modules/manager/pub/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)pubspec\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pub/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>dart</code>, <code>dart-version</code>, <code>flutter-version</code>.</p>"},{"location":"modules/manager/pub/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)pubspec\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/pub/#additional-information","title":"Additional Information","text":"<p>This manager is used to keep pubspec files up-to-date.</p>"},{"location":"modules/manager/puppet/","title":"Automated Dependency Updates for Puppet","text":"<p>Categories: <code>iac</code>, <code>ruby</code></p> <p>Renovate supports updating Puppet dependencies.</p>"},{"location":"modules/manager/puppet/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Puppetfile$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/puppet/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>puppet-forge</code>, <code>github-tags</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/puppet/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Puppetfile$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/puppet/#additional-information","title":"Additional Information","text":"<p>Renovate can update Puppetfiles.</p>"},{"location":"modules/manager/puppet/#how-it-works","title":"How it works","text":"<p>Renovate:</p> <ol> <li>Searches each repository for any <code>Puppetfile</code> files</li> <li>Extracts dependencies from the relevant sections of the <code>Puppetfile</code></li> <li>Resolves the dependency on the default forge: <code>https://forgeapi.puppetlabs.com</code>, or on a user-defined forge</li> <li>Creates a PR that updates the <code>Puppetfile</code></li> </ol> <p>Finally, if the source repository has a \"changelog\" file or uses GitHub releases, then Renovate puts the changelogs for each version in its PR.</p>"},{"location":"modules/manager/puppet/#supported-puppetfile-formats","title":"Supported Puppetfile formats","text":"<p>The <code>puppet</code> manager extracts the dependencies from one Puppetfile. You can define a forge in your <code>puppetfile</code> in these ways:</p> <ul> <li>No forge</li> <li>One forge</li> <li>Multiple forges</li> <li>GitHub-based forge</li> <li>Git-based forge</li> </ul> <p>For example:</p> No forge<pre><code>mod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\n</code></pre> One forge<pre><code>forge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n</code></pre> Multiple forges<pre><code>forge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n\n# Private forge\nforge \"https://forgeapi.example.com\"\n\nmod 'example/infra', '3.3.0'\n</code></pre> GitHub-based forge, tag based<pre><code>mod 'example/standalone_jar',\n    :git =&gt; 'git@gitlab.example.de:puppet/example-standalone_jar',\n    :tag =&gt; '0.9.0'\n</code></pre> Git-based forge, tag based<pre><code>mod 'stdlib',\n    :git =&gt; 'git@gitlab.com:example/project_stdlib.git',\n    :tag =&gt; '5.0.0'\n</code></pre> Git-based forge, branch based<pre><code>mod 'example/samba',\n    :git    =&gt; 'https://github.com/example/puppet-samba',\n    :branch =&gt; 'stable_version'\n</code></pre> Git-based forge, ref based<pre><code>mod 'example/samba',\n    :git =&gt; 'https://github.com/example/puppet-samba',\n    :ref =&gt; 'stable_version'\n</code></pre>"},{"location":"modules/manager/pyenv/","title":"Automated Dependency Updates for pyenv","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating pyenv dependencies.</p>"},{"location":"modules/manager/pyenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.python-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/pyenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/pyenv/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.python-version$/\"\n  ],\n  \"versioning\": \"docker\",\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/pyenv/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.python-version</code> file updated.</p>"},{"location":"modules/manager/quadlet/","title":"Automated Dependency Updates for Quadlet","text":"<p>Categories: <code>docker</code></p> <p>Renovate supports updating Quadlet dependencies.</p>"},{"location":"modules/manager/quadlet/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/.+\\.container$/\n/.+\\.image$/\n/.+\\.volume$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/quadlet/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/quadlet/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/.+\\\\.container$/\",\n    \"/.+\\\\.image$/\",\n    \"/.+\\\\.volume$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/quadlet/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating of Podman Quadlet <code>.container</code>, <code>.image</code>, or <code>.volume</code> files or other files that use the same systemd format (via <code>managerFilePatterns</code> configuration). Updates are performed if there is an Image option in Container, Image, or Volume units:</p> <pre><code>[Container]\nImage=docker.io/library/alpine:3.22\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/regex/","title":"Custom Manager Support using Regex","text":"<p>Categories: <code>custom</code></p> <p>With <code>customManagers</code> using <code>regex</code> you can configure Renovate so it finds dependencies that are not detected by its other built-in package managers.</p> <p>Renovate supports the <code>ECMAScript (JavaScript)</code> flavor of regex.</p> <p>Renovate uses the <code>uhop/node-re2</code> package that provides bindings for <code>google/re2</code>. Read about <code>uhop/node-re2</code>'s limitations in their readme. The <code>regex</code> manager is unique in Renovate because:</p> <ul> <li>It is configurable via regex named capture groups</li> <li>It can extract any <code>datasource</code></li> <li>By using the <code>customManagers</code> config, you can create multiple \"regex managers\" for the same repository</li> </ul> <p>We have additional Handlebars helpers to help you perform common transformations on the regex manager's template fields. Also read the documentation for the <code>customManagers</code> config option.</p> <p>If you have limited managers to run within <code>enabledManagers</code> config option, you need to add <code>\"custom.regex\"</code> to the list.</p>"},{"location":"modules/manager/regex/#required-fields","title":"Required Fields","text":"<p>The first two required fields are <code>managerFilePatterns</code> and <code>matchStrings</code>:</p> <ul> <li><code>managerFilePatterns</code> works the same as any manager</li> <li><code>matchStrings</code> is a <code>regex</code> custom manager concept and is used for configuring a regular expression with named capture groups</li> </ul>"},{"location":"modules/manager/regex/#information-that-renovate-needs-about-the-dependency","title":"Information that Renovate needs about the dependency","text":"<p>Before Renovate can look up a dependency and decide about updates, it must have this info about each dependency:</p> Info type Required Notes Docs Name of the dependency Yes <code>datasource</code> Yes Example datasources: npm, Docker, GitHub tags, and so on. Supported datasources Version scheme to use. Defaults to <code>semver-coerced</code>. Yes You may set another version scheme, like <code>pep440</code>. Supported versioning schemes"},{"location":"modules/manager/regex/#required-capture-groups","title":"Required capture groups","text":"<p>You must:</p> <ul> <li>Capture the <code>currentValue</code> of the dependency in a named capture group</li> <li>Set a <code>depName</code> or <code>packageName</code> capture group. Or use a template field: <code>depNameTemplate</code> and <code>packageNameTemplate</code></li> <li>Set a <code>datasource</code> capture group, or a <code>datasourceTemplate</code> config field</li> </ul>"},{"location":"modules/manager/regex/#optional-capture-groups","title":"Optional capture groups","text":"<p>You may use any of these items:</p> <ul> <li>A <code>depType</code> capture group, or a <code>depTypeTemplate</code> config field</li> <li>A <code>versioning</code> capture group, or a <code>versioningTemplate</code> config field. If neither are present, Renovate defaults to <code>semver-coerced</code></li> <li>An <code>extractVersion</code> capture group, or an <code>extractVersionTemplate</code> config field</li> <li>A <code>currentDigest</code> capture group</li> <li>A <code>registryUrl</code> capture group, or a <code>registryUrlTemplate</code> config field. If it's a valid URL, it will be converted to the <code>registryUrls</code> field as a single-length array</li> <li>An <code>indentation</code> capture group. It must be either empty, or whitespace only (otherwise <code>indentation</code> will be reset to an empty string)</li> </ul>"},{"location":"modules/manager/regex/#regular-expression-capture-groups","title":"Regular Expression Capture Groups","text":"<p>To be effective with the regex manager, you should understand regular expressions and named capture groups. But enough examples may compensate for lack of experience.</p> Example Dockerfile<pre><code>FROM node:12\nENV YARN_VERSION=1.19.1\nRUN curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}\n</code></pre> <p>You would need to capture the <code>currentValue</code> with a named capture group, like this: <code>ENV YARN_VERSION=(?&lt;currentValue&gt;.*?)\\\\n</code>.</p> <p>To update a version string multiple times in a line: use multiple <code>matchStrings</code>, one for each occurrence.</p> Full Renovate .json5 config<pre><code>{\n  customManagers: [\n    {\n      customType: 'regex',\n      managerFilePatterns: ['file-you-want-to-match'],\n      matchStrings: [\n        // for the version on the left part, ignoring the right\n        '# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\s\\\\S+?:(?&lt;currentValue&gt;\\\\S+)\\\\s+\\\\S+:.+',\n        // for the version on the right part, ignoring the left\n        '# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\s\\\\S+?:\\\\S+\\\\s+\\\\S+:(?&lt;currentValue&gt;\\\\S+)',\n      ],\n      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}',\n    },\n  ],\n}\n</code></pre> Example of how the file-you-want-to-match could look like<pre><code># renovate: datasource=github-tags depName=org/repo versioning=loose\nsomething:4.7.2    something-else:4.7.2\n</code></pre>"},{"location":"modules/manager/regex/#online-regex-testing-tool-tips","title":"Online regex testing tool tips","text":"<p>If you're looking for an online regex testing tool that supports capture groups, try regex101.com. You must select the <code>ECMAScript (JavaScript)</code> flavor of regex. Backslashes (<code>'\\'</code>) of the resulting regex have to still be escaped e.g. <code>\\n\\s</code> --&gt; <code>\\\\n\\\\s</code>. You can use the Code Generator in the sidebar and copy the regex in the generated \"Alternative syntax\" comment into JSON.</p>"},{"location":"modules/manager/regex/#renovates-regex-differs-from-the-online-tools","title":"Renovate's regex differs from the online tools","text":"<p>The <code>regex</code> manager uses RE2 which does not support backreferences and lookahead assertions.</p> <p>The <code>regex</code> manager matches are done per-file, not per-line! This means the <code>^</code> and <code>$</code> regex assertions only match the beginning and end of the entire file. If you need to match line boundaries you can use <code>(?:^|\\r\\n|\\r|\\n|$)</code>.</p>"},{"location":"modules/manager/regex/#configuration-templates","title":"Configuration templates","text":"<p>In many cases, named capture groups alone aren't enough and you'll need to give Renovate more information so it can look up a dependency. Continuing the above example with Yarn, here is the full Renovate config:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/^Dockerfile$/\"],\n      \"matchStrings\": [\"ENV YARN_VERSION=(?&lt;currentValue&gt;.*?)\\\\n\"],\n      \"depNameTemplate\": \"yarn\",\n      \"datasourceTemplate\": \"npm\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/regex/#advanced-capture","title":"Advanced Capture","text":"<p>Say your <code>Dockerfile</code> has many <code>ENV</code> variables that you want to keep up-to-date. But you don't want to write a regex custom manager rule for each variable. Instead you enhance your <code>Dockerfile</code> like this:</p> <pre><code># renovate: datasource=github-tags depName=node packageName=nodejs/node versioning=node\nENV NODE_VERSION=20.10.0\n# renovate: datasource=github-releases depName=composer packageName=composer/composer\nENV COMPOSER_VERSION=1.9.3\n# renovate: datasource=docker packageName=docker versioning=docker\nENV DOCKER_VERSION=19.03.1\n# renovate: datasource=npm packageName=yarn\nENV YARN_VERSION=1.19.1\n</code></pre> <p>This <code>Dockerfile</code> is meant as an example, your <code>Dockerfile</code> may be a lot bigger.</p> <p>You could configure Renovate to update the <code>Dockerfile</code> like this:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"description\": \"Update _VERSION variables in Dockerfiles\",\n      \"managerFilePatterns\": [\n        \"/(^|/|\\\\.)Dockerfile$/\",\n        \"/(^|/)Dockerfile\\\\.[^/]*$/\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?&lt;datasource&gt;[a-z-]+?)(?: depName=(?&lt;depName&gt;.+?))? packageName=(?&lt;packageName&gt;.+?)(?: versioning=(?&lt;versioning&gt;[a-z-]+?))?\\\\s(?:ENV|ARG) .+?_VERSION=(?&lt;currentValue&gt;.+?)\\\\s\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>We could drop the <code>versioningTemplate</code> because Renovate defaults to <code>semver-coerced</code> versioning. But we included the <code>versioningTemplate</code> config option to show you why we call these fields templates: because they are compiled using Handlebars and so can be composed from values you collect in named capture groups.</p> <p>You should use triple brace <code>{{{ }}}</code> templates like <code>{{{versioning}}}</code> to be safe. This is because Handlebars escapes special characters with double braces (by default).</p> <p>By adding <code>renovate: datasource=</code> and <code>depName=</code> comments to the <code>Dockerfile</code> you only need one <code>customManager</code> instead of four. The <code>Dockerfile</code> is documented better as well.</p> <p>The syntax in the example is arbitrary, and you can set your own syntax. If you do, update your <code>matchStrings</code> regex!</p> <p>For example the <code>appVersion</code> property in a <code>Chart.yaml</code> of a Helm chart is always referenced to an Docker image. In such scenarios, some values can be hard-coded. For example:</p> <pre><code>apiVersion: v2\nname: amazon-eks-pod-identity-webhook\ndescription: A Kubernetes webhook for pods that need AWS IAM access\nversion: 1.0.3\ntype: application\n# renovate: image=amazon/amazon-eks-pod-identity-webhook\nappVersion: 'v0.4.0'\n</code></pre> <p>Using the <code>customManagers</code> below, Renovate looks for available Docker tags of the image <code>amazon/amazon-eks-pod-identity-webhook</code>.</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"datasourceTemplate\": \"docker\",\n      \"managerFilePatterns\": [\"/(^|/)Chart\\\\.yaml$/\"],\n      \"matchStrings\": [\n        \"#\\\\s?renovate: image=(?&lt;depName&gt;.*?)\\\\s?appVersion:\\\\s?\\\\'?(?&lt;currentValue&gt;[\\\\w+\\\\.\\\\-]*)'\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/regex/#using-custommanager-to-update-the-dependency-name-in-addition-to-version","title":"Using customManager to update the dependency name in addition to version","text":""},{"location":"modules/manager/regex/#updating-gitlab-ci-include-dep-names","title":"Updating <code>gitlab-ci include</code> dep names","text":"<p>You can use the regex manager to update the <code>depName</code> and the version. This can be handy when the location of files referenced in gitlab-ci <code>includes:</code> fields has changed.</p> <p>You may need to set a second <code>matchString</code> for the new name to ensure the regex manager can detect the new value. For example:</p> <pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/.*y[a]?ml$/\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"['\\\"]?(?&lt;depName&gt;/pipeline-fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?&lt;currentValue&gt;[\\\\d-]*)['\\\"]?\",\n        \"['\\\"]?(?&lt;depName&gt;pipeline-solutions/gitlab/fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?&lt;currentValue&gt;[\\\\d-]*)['\\\"]?\"\n      ],\n      \"depNameTemplate\": \"pipeline-solutions/gitlab/fragments/fragment-version-check\",\n      \"autoReplaceStringTemplate\": \"'{{{depName}}}'\\n    ref: {{{newValue}}}\",\n      \"datasourceTemplate\": \"gitlab-tags\",\n      \"versioningTemplate\": \"gitlab-tags\"\n    }\n  ]\n}\n</code></pre> <p>The config above will migrate:</p> <pre><code>- project: 'pipeline-fragments/docker-lint'\n  ref: 2-4-0\n  file: 'ci-include-docker-lint-base.yml'\n</code></pre> <p>To this:</p> <pre><code>- project: 'pipeline-solutions/gitlab/fragments/docker-lint'\n  ref: 2-4-1\n  file: 'ci-include-docker-lint-base.yml'\n</code></pre>"},{"location":"modules/manager/renovate-config-presets/","title":"Automated Dependency Updates for Renovate Config Presets","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Renovate Config Presets dependencies.</p>"},{"location":"modules/manager/renovate-config-presets/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>renovate.json\nrenovate.json5\n.github/renovate.json\n.github/renovate.json5\n.gitlab/renovate.json\n.gitlab/renovate.json5\n.renovaterc\n.renovaterc.json\n.renovaterc.json5\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/renovate-config-presets/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>gitlab-tags</code>, <code>gitea-tags</code>.</p>"},{"location":"modules/manager/renovate-config-presets/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"renovate.json\",\n    \"renovate.json5\",\n    \".github/renovate.json\",\n    \".github/renovate.json5\",\n    \".gitlab/renovate.json\",\n    \".gitlab/renovate.json5\",\n    \".renovaterc\",\n    \".renovaterc.json\",\n    \".renovaterc.json5\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/renovate-config-presets/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Shareable Config Presets for Renovate configuration.</p> <p>The preset versions are only updated if the version is already pinned. For example, <code>github&gt;user/renovate-config#1.2.3</code> will be updated to <code>github&gt;user/renovate-config#1.2.4</code> if the <code>1.2.4</code> version is available, but <code>github&gt;user/renovate-config</code> will not be pinned.</p> <pre><code>{\n  \"extends\": [\n    \"github&gt;user/renovate-config#1.2.3\",\n    \"github&gt;user/renovate-config:group\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/renovate-config-presets/#unsupported-config","title":"Unsupported Config","text":"<ul> <li>Local presets</li> <li>HTTP URLs presets</li> <li><code>package.json</code> file config (deprecated)</li> <li><code>npm</code> hosted presets (deprecated)</li> <li><code>extends</code> inside sub objects, like <code>packageRules</code></li> </ul>"},{"location":"modules/manager/ruby-version/","title":"Automated Dependency Updates for .ruby-version","text":"<p>Categories: <code>ruby</code></p> <p>Renovate supports updating .ruby-version dependencies.</p>"},{"location":"modules/manager/ruby-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.ruby-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/ruby-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>ruby-version</code>.</p>"},{"location":"modules/manager/ruby-version/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.ruby-version$/\"\n  ],\n  \"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/ruby-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.ruby-version</code> files. Available versions will be determined from the official Ruby downloads page.</p>"},{"location":"modules/manager/runtime-version/","title":"Automated Dependency Updates for runtime.txt","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating runtime.txt dependencies.</p>"},{"location":"modules/manager/runtime-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)runtime.txt$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/runtime-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/runtime-version/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)runtime.txt$/\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/runtime-version/#additional-information","title":"Additional Information","text":"<p>Keep <code>runtime.txt</code> files updated.</p> <p>Currently supports <code>Python</code> runtime updates, commonly used by platforms such as</p> <ul> <li>Heroku</li> <li>CloudFoundry</li> <li>Koyeb</li> <li>and more</li> </ul>"},{"location":"modules/manager/sbt/","title":"Automated Dependency Updates for sbt","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating sbt dependencies.</p>"},{"location":"modules/manager/sbt/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>/\\.sbt$/\n/project/[^/]*\\.scala$/\n/project/build\\.properties$/\n/(^|/)repositories$/\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/sbt/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>, <code>sbt-package</code>, <code>sbt-plugin</code>, <code>github-releases</code>.</p>"},{"location":"modules/manager/sbt/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.sbt$/\",\n    \"/project/[^/]*\\\\.scala$/\",\n    \"/project/build\\\\.properties$/\",\n    \"/(^|/)repositories$/\"\n  ],\n  \"versioning\": \"ivy\"\n}\n</code></pre>"},{"location":"modules/manager/sbt/#additional-information","title":"Additional Information","text":"<p>Extracts Maven artifact dependencies for SBT.</p>"},{"location":"modules/manager/scalafmt/","title":"Automated Dependency Updates for Scalafmt","text":"<p>Categories: <code>java</code></p> <p>Renovate supports updating Scalafmt dependencies.</p>"},{"location":"modules/manager/scalafmt/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.scalafmt.conf$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/scalafmt/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/scalafmt/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.scalafmt.conf$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/scalafmt/#additional-information","title":"Additional Information","text":"<p>Extracts scalafmt version from <code>.scalafmt.conf</code> file.</p> <p>New versions of Scalafmt are looked up on Github Releases.</p>"},{"location":"modules/manager/setup-cfg/","title":"Automated Dependency Updates for Setuptools (setup.cfg)","text":"<p>Categories: <code>python</code></p> <p>Renovate supports updating Setuptools (setup.cfg) dependencies.</p>"},{"location":"modules/manager/setup-cfg/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)setup\\.cfg$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/setup-cfg/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/setup-cfg/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)setup\\\\.cfg$/\"\n  ],\n  \"versioning\": \"pep440\"\n}\n</code></pre>"},{"location":"modules/manager/setup-cfg/#additional-information","title":"Additional Information","text":"<p>Updates dependencies for Python <code>setup.cfg</code> files.</p>"},{"location":"modules/manager/sveltos/","title":"Automated Dependency Updates for Sveltos","text":"<p>Categories: <code>kubernetes</code>, <code>cd</code></p> <p>Renovate supports updating Sveltos dependencies.</p>"},{"location":"modules/manager/sveltos/#file-matching","title":"File Matching","text":"<p>Because file names for <code>sveltos</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>sveltos</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/sveltos/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>helm</code>.</p>"},{"location":"modules/manager/sveltos/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/sveltos/#additional-information","title":"Additional Information","text":"<p>Renovate uses the Sveltos manager to update the dependencies in Helm-Charts for Sveltos resources.</p> <p>Learn about Sveltos Helm-Charts by reading the Sveltos documentation.</p>"},{"location":"modules/manager/sveltos/#you-must-set-a-managerfilepatterns-pattern","title":"You must set a <code>managerFilePatterns</code> pattern","text":"<p>The <code>sveltos</code> manager has no default <code>managerFilePatterns</code> pattern. This is because there is are no common filename or directory name conventions for Sveltos YAML files. You must set your own <code>managerFilePatterns</code> rules, so Renovate knows which <code>*.yaml</code> files are Sveltos definitions.</p>"},{"location":"modules/manager/sveltos/#managerfilepatterns-pattern-examples","title":"<code>managerFilePatterns</code> pattern examples","text":"If most .yaml files in your repository are for Sveltos<pre><code>{\n  \"sveltos\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\"]\n  }\n}\n</code></pre> Sveltos YAML files are in a sveltos/ directory<pre><code>{\n  \"sveltos\": {\n    \"managerFilePatterns\": [\"/sveltos/.+\\\\.yaml$/\"]\n  }\n}\n</code></pre> One Sveltos file in a directory<pre><code>{\n  \"sveltos\": {\n    \"managerFilePatterns\": [\"/^config/sveltos\\\\.yaml$/\"]\n  }\n}\n</code></pre>"},{"location":"modules/manager/sveltos/#disabling-parts-of-the-sveltos-manager","title":"Disabling parts of the sveltos manager","text":"<p>You can use these <code>depTypes</code> for fine-grained control, for example to disable parts of the Sveltos manager.</p> Resource <code>depType</code> Cluster Profiles <code>ClusterProfile</code> Profiles <code>Profile</code> EventTrigger <code>EventTrigger</code>"},{"location":"modules/manager/swift/","title":"Automated Dependency Updates for Swift Package Manager","text":"<p>Categories: <code>swift</code></p> <p>Renovate supports updating Swift Package Manager dependencies.</p>"},{"location":"modules/manager/swift/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)Package\\.swift/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/swift/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/swift/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)Package\\\\.swift/\"\n  ],\n  \"versioning\": \"swift\",\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/swift/#additional-information","title":"Additional Information","text":"<p>Anything other than <code>.exact(&lt;...&gt;)</code> or <code>exact:&lt;...&gt;</code> will be treated as range with respect to Swift specific. Because of this, some PR descriptions will look like <code>from: &lt;...&gt; =&gt; &lt;...&gt;</code>.</p> <p>Examples:</p> <pre><code>package(name: \"&lt;...&gt;\", .exact(\"1.2.3\"))   // =&gt; 1.2.3\npackage(name: \"&lt;...&gt;\", exact: \"1.2.3\")    // =&gt; 1.2.3\npackage(name: \"&lt;...&gt;\", from: \"1.2.3\")     // =&gt; from: \"2.0.0\"\npackage(name: \"&lt;...&gt;\", \"1.2.3\"...)        // =&gt; \"2.0.0\"...\npackage(name: \"&lt;...&gt;\", \"1.2.3\"...\"1.3.0\") // =&gt; \"1.2.3\"...\"2.0.0\"\npackage(name: \"&lt;...&gt;\", \"1.2.3\"..&lt;\"1.3.0\") // =&gt; \"1.2.3\"..&lt;\"2.0.0\"\npackage(name: \"&lt;...&gt;\", ...\"1.2.3\")        // =&gt; ...\"2.0.0\"\npackage(name: \"&lt;...&gt;\", ..&lt;\"1.2.3\")        // =&gt; ..&lt;\"2.0.0\"\n</code></pre>"},{"location":"modules/manager/tekton/","title":"Automated Dependency Updates for Tekton","text":"<p>Categories: <code>ci</code>, <code>cd</code></p> <p>Renovate supports updating Tekton dependencies.</p>"},{"location":"modules/manager/tekton/#file-matching","title":"File Matching","text":"<p>Because file names for <code>tekton</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>tekton</code> files by default. For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/tekton/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/tekton/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": []\n}\n</code></pre>"},{"location":"modules/manager/tekton/#additional-information","title":"Additional Information","text":"<p>Tekton is an open-source cloud-native Continuous Integration and Continuous Delivery/Deployment solution.</p> <p>Tekton uses Tasks to capture specific commands to be executed, and Pipelines to combine different Tasks, to achieve a goal, like building a container image. Tasks and Pipelines are defined as Kubernetes custom resources.</p> <p>The Tekton documentation is a great resource to learn more about the overall concepts and how to start using it.</p>"},{"location":"modules/manager/tekton/#distributing-tasks-and-pipeline-definitions","title":"Distributing Tasks and Pipeline definitions","text":"<p>There are different ways to distribute Task and Pipeline definitions. They can be created directly as a Kubernetes resource with standard tools like <code>kubectl</code>. Tasks and Pipeline definitions can also live outside the Kubernetes cluster and get fetched by Tekton when needed, this approach relies on Tekton resource references rather than the resource definition. The <code>tekton</code> manager focuses on providing updates to Tekton resource references.</p> <p>Right now, Renovate's Tekton manager supports references that are Bundles and PipelinesAsCode with remote HTTP URL resolver. Read the Tekton Pipeline remote resolution docs for the different kinds of Tekton references and their corresponding resolvers.</p>"},{"location":"modules/manager/tekton/#using-a-pipelinesascode-remote-url-reference","title":"Using a PipelinesAsCode remote URL reference","text":"<p>By specifying the annotation with a remote task or a remote pipeline based on the recommended way using git based versioning. How this can be used can be seen in the example below.</p> How an annotation could look like in an pipeline-run.yaml<pre><code>apiVersion: tekton.dev/v1\nkind: PipelineRun\nmetadata:\n  name: main\n  annotations:\n    pipelinesascode.tekton.dev/task: 'https://github.com/foo/bar/raw/v0.0.1/task/my-task/my-task.yaml'\n    pipelinesascode.tekton.dev/pipeline: 'https://github.com/foo/bar/raw/v0.0.1/pipeline/my-pipeline/my-pipeline.yaml'\n</code></pre> <p>Supported URLs:</p> <ol> <li>https://github.com/foo/bar/raw/v0.0.1/tasks/task/task.yaml&lt;</li> <li>https://raw.githubusercontent.com/foo/bar/v0.0.1/tasks/task/task.yaml</li> <li>https://github.com/foo/bar/releases/download/v0.0.1/create-git-tag-task.yaml</li> </ol>"},{"location":"modules/manager/tekton/#using-a-tekton-bundle-reference","title":"Using a Tekton Bundle reference","text":"<p>There are three ways to use a Tekton Bundle reference:</p> <ol> <li>Via the Tekton Bundles Resolver</li> <li>Via the <code>tektoncd/resolution</code> project</li> <li>Via the <code>taskRun.spec.taskRef.bundle</code> and the <code>pipelineRun.spec.pipelineRef.bundle</code> attributes</li> </ol> <p>Renovate's Tekton manager supports all the methods listed above.</p>"},{"location":"modules/manager/tekton/#configuring-images-in-tekton-tasks","title":"Configuring images in Tekton Tasks","text":"<p>You can configure the container images that Tekton uses when it runs tasks. You may use these attributes to configure images in a:</p> <ol> <li>Task step</li> <li>Task stepTemplate</li> <li>Task sidecar</li> </ol> <p>You can define Tekton Tasks within these Tekton resources:</p> <ol> <li>Task</li> <li>TaskRun</li> <li>Pipeline</li> <li>PipelineRun</li> </ol> <p>Renovate's Tekton manager supports all the image attributes for the Tekton resources mentioned above.</p>"},{"location":"modules/manager/tekton/#set-your-own-managerfilepatterns-pattern","title":"Set your own <code>managerFilePatterns</code> pattern","text":"<p>The <code>tekton</code> manager does not have a default <code>managerFilePatterns</code> pattern. This means it won't match any files until you set a <code>managerFilePatterns</code> pattern. This is to avoid problems with unrelated YAML files since there is no well-established file name pattern for Tekton resources. As an example, the following config matches all the YAML files in a repository:</p> <pre><code>{\n  \"tekton\": {\n    \"managerFilePatterns\": [\"/\\\\.yaml$/\", \"/\\\\.yml$/\"]\n  }\n}\n</code></pre> <p>See our versioning documentation for details on the existing versioning rules and possible alterations.</p>"},{"location":"modules/manager/terraform/","title":"Automated Dependency Updates for Terraform","text":"<p>Categories: <code>iac</code>, <code>terraform</code></p> <p>Renovate supports updating Terraform dependencies.</p>"},{"location":"modules/manager/terraform/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>**/*.tf\n**/*.tofu\n</code></pre> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/terraform/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>bitbucket-tags</code>, <code>docker</code>, <code>git-tags</code>, <code>github-tags</code>, <code>github-releases</code>, <code>helm</code>, <code>terraform-module</code>, <code>terraform-provider</code>.</p>"},{"location":"modules/manager/terraform/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"Terraform {{depName}}\",\n  \"managerFilePatterns\": [\n    \"**/*.tf\",\n    \"**/*.tofu\"\n  ],\n  \"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/terraform/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/terraform/#terraform-vs-opentofu","title":"Terraform vs OpenTofu","text":"<p>Renovate can not know if you want to use the Terraform or OpenTofu registry. By default, Renovate uses the Terraform registry (<code>registry.terraform.io</code>) for providers and modules without a registry definition.</p> <p>You can override this default with your own <code>packageRules</code>, for example:</p> Prefer releases from OpenTofu<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"terraform-provider\", \"terraform-module\"],\n      \"registryUrls\": [\"https://registry.opentofu.org\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/manager/terraform/#supported-dependencies","title":"Supported dependencies","text":"<p>Renovate supports updating the Terraform dependencies listed below. Check the tables to see where some dependencies can be hosted.</p>"},{"location":"modules/manager/terraform/#modules","title":"Modules","text":"Name Public hosting Private hosting GitTags yes yes GithubTags yes yes TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#providers","title":"Providers","text":"<p>Providers are deprecated in Terraform <code>0.13.0</code>.</p> Name Public hosting Private hosting TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#required_providers-block","title":"required_providers block","text":"<p>Needs Terraform <code>&gt;= 0.13.0</code>.</p> Name Public hosting Private hosting TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#required_version","title":"required_version","text":"<p>Renovate can update the <code>required_version</code> attribute of the Terraform block.</p>"},{"location":"modules/manager/terraform/#helm_release","title":"helm_release","text":"<p>Renovate can update the version attribute of <code>helm_release</code> resources. This applies to both helm chart repositories and charts published in OCI registries.</p> Name Public hosting Private hosting chart repository yes yes"},{"location":"modules/manager/terraform/#docker","title":"Docker","text":"<p>Renovate can update image references of the Docker provider resources (<code>docker\\_\\*</code>).</p> Name Public hosting Private hosting Docker registry yes yes"},{"location":"modules/manager/terraform/#kubernetes","title":"Kubernetes","text":"<p>Renovate can update image references of Kubernetes provider resources (<code>kubernetes\\_\\*</code>).</p> Name Public hosting Private hosting Docker registry yes yes"},{"location":"modules/manager/terraform/#tfe_workspaces","title":"tfe_workspaces","text":"<p>Renovate can update tfe_workspaces. Renovate searches for the <code>terraform_version</code> argument.</p>"},{"location":"modules/manager/terraform/#range-constraints","title":"Range constraints","text":"<p>Renovate understands these Terraform range constraints:</p> Terraform range Notes <code>&gt;= 1.2.0</code> version <code>1.2.0</code> or newer <code>&lt;= 1.2.0</code> version <code>1.2.0</code> or older <code>~&gt; 1.2.0</code> any non-beta version <code>&gt;= 1.2.0</code> and <code>&lt; 1.3.0</code>, e.g. <code>1.2.X</code> <code>~&gt; 1.2</code> any non-beta version <code>&gt;= 1.2.0</code> and <code>&lt; 2.0.0</code>, e.g. <code>1.X.Y</code> <code>&gt;= 1.0.0, &lt;= 2.0.0</code> any version between <code>1.0.0</code> and <code>2.0.0</code> inclusive"},{"location":"modules/manager/terraform/#disabling-parts-of-the-manager","title":"Disabling parts of the manager","text":"<p>You can use these <code>depTypes</code> for fine-grained control, for example to disable parts of the Terraform manager.</p> Resource <code>depType</code> Notes Terraform provider <code>provider</code> required Terraform provider <code>required_provider</code> required Terraform version <code>required_version</code> This handles the <code>required_version</code> in terraform blocks TFE workspace <code>tfe_workspace</code> This handles the <code>terraform_version</code> argument in <code>tfe_workspace</code> resources Terraform module <code>module</code> Helm release <code>helm_release</code> Docker container <code>docker_container</code> Docker image <code>docker_image</code> Docker service <code>docker_service</code> Kubernetes CronJob <code>kubernetes_cron_job</code> Kubernetes CronJob v1 <code>kubernetes_cron_job_v1</code> Kubernetes DaemonSet <code>kubernetes_daemon_set</code> Kubernetes DaemonSet v1 <code>kubernetes_daemon_set_v1</code> Kubernetes Deployment <code>kubernetes_deployment</code> Kubernetes Deployment v1 <code>kubernetes_deployment_v1</code> Kubernetes Job <code>kubernetes_job</code> Kubernetes Job v1 <code>kubernetes_job_v1</code> Kubernetes Pod <code>kubernetes_pod</code> Kubernetes Pod v1 <code>kubernetes_pod_v1</code> Kubernetes Replication Controller <code>kubernetes_replication_controller</code> Kubernetes Replication Controller v1 <code>kubernetes_replication_controller_v1</code> Kubernetes StatefulSet <code>kubernetes_stateful_set</code> Kubernetes StatefulSet v1 <code>kubernetes_stateful_set_v1</code> Data Source <code>depType</code> Notes Docker registry image <code>docker_registry_image</code> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/terraform-version/","title":"Automated Dependency Updates for .terraform-version","text":"<p>Categories: <code>terraform</code></p> <p>Renovate supports updating .terraform-version dependencies.</p>"},{"location":"modules/manager/terraform-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.terraform-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/terraform-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/terraform-version/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.terraform-version$/\"\n  ],\n  \"versioning\": \"hashicorp\",\n  \"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n}\n</code></pre>"},{"location":"modules/manager/terraform-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.terraform-version</code> files. Available versions will be determined from the official Terraform downloads page.</p>"},{"location":"modules/manager/terragrunt/","title":"Automated Dependency Updates for Terragrunt","text":"<p>Categories: <code>iac</code>, <code>terraform</code></p> <p>Renovate supports updating Terragrunt dependencies.</p>"},{"location":"modules/manager/terragrunt/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)terragrunt\\.hcl$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/terragrunt/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>bitbucket-tags</code>, <code>gitea-tags</code>, <code>terraform-module</code>.</p>"},{"location":"modules/manager/terragrunt/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"Terragrunt dependency {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)terragrunt\\\\.hcl$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/terragrunt/#additional-information","title":"Additional Information","text":"<p>Currently by default, Terragrunt support is limited to Terraform registry sources and GitHub sources that include SemVer refs, e.g. like <code>github.com/hashicorp/example?ref=v1.0.0</code>.</p> <p>You can create a custom versioning config to support non-SemVer references. For example, if you want to reference a tag like <code>module-v1.2.5</code>, a block like this would work:</p> <pre><code>{\n  \"terragrunt\": {\n    \"versioning\": \"regex:^((?&lt;compatibility&gt;.*)-v|v*)(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)$\"\n  }\n}\n</code></pre> <p>Pinned Terragrunt dependencies like the following will get a PR whenever there is a newer version available:</p> <pre><code>terraform {\n  source = \"github.com/hashicorp/example?ref=v1.0.0\"\n}\n</code></pre>"},{"location":"modules/manager/terragrunt/#terraform-lockfiles","title":"Terraform lockfiles","text":"<p>The Terragrunt manager supports lock file maintenance for <code>.terraform.lock.hcl</code> artifacts. These artifacts will be updated if and only if the update type is <code>lockFileMaintenance</code>.</p>"},{"location":"modules/manager/terragrunt-version/","title":"Automated Dependency Updates for .terragrunt-version","text":"<p>Categories: <code>terraform</code></p> <p>Renovate supports updating .terragrunt-version dependencies.</p>"},{"location":"modules/manager/terragrunt-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.terragrunt-version$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/terragrunt-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/terragrunt-version/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.terragrunt-version$/\"\n  ],\n  \"versioning\": \"hashicorp\",\n  \"extractVersion\": \"^v(?&lt;version&gt;.+)$\"\n}\n</code></pre>"},{"location":"modules/manager/terragrunt-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.terragrunt-version</code> files. Available versions will be determined from <code>gruntwork-io/terragrunt</code> GitHub releases.</p>"},{"location":"modules/manager/tflint-plugin/","title":"Automated Dependency Updates for TFLint Plugins","text":"<p>Categories: <code>terraform</code></p> <p>Renovate supports updating TFLint Plugins dependencies.</p>"},{"location":"modules/manager/tflint-plugin/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.tflint\\.hcl$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/tflint-plugin/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/tflint-plugin/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"TFLint plugin {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/\\\\.tflint\\\\.hcl$/\"\n  ],\n  \"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n}\n</code></pre>"},{"location":"modules/manager/tflint-plugin/#additional-information","title":"Additional Information","text":"<p>Renovate maintains your TFLint configuration file, and updates the plugins in the file.</p> <p>Supports plugins hosted in public repositories on github.com. This is because TFLint only supports public repositories.</p>"},{"location":"modules/manager/travis/","title":"Automated Dependency Updates for Travis CI","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Travis CI dependencies.</p>"},{"location":"modules/manager/travis/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/^\\.travis\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/travis/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>node-version</code>.</p>"},{"location":"modules/manager/travis/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/^\\\\.travis\\\\.ya?ml$/\"\n  ],\n  \"major\": {\n    \"enabled\": false\n  },\n  \"versioning\": \"node\"\n}\n</code></pre>"},{"location":"modules/manager/travis/#additional-information","title":"Additional Information","text":"<p>This manager is intended to keep Travis config files (<code>.travis.yml</code>) up-to-date, this file controls the CI build environment. Currently Renovate can only update the <code>node_js</code> section of this file.</p> <p>Renovate \"understands\" Travis's Build Matrix concept as well, so it will try to update all found Node.js versions to the latest LTS, e.g.</p> <pre><code>node_js:\n-  - 8.10.0\n-  - 10.10.0\n+  - 16.13.0\n+  - 16.13.0\n</code></pre> <p>Due to this, major updates for Travis are disabled by default. If you enable major updates and use a version matrix, then you will likely need to manually fix any major update PRs raised by Renovate. Here's how to enable major updates in your Renovate config:</p> <pre><code>{\n  \"travis\": {\n    \"major\": {\n      \"enabled\": true\n    }\n  }\n}\n</code></pre>"},{"location":"modules/manager/typst/","title":"Automated Dependency Updates for Typst package","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Typst package dependencies.</p>"},{"location":"modules/manager/typst/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/\\.typ$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/typst/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>typst</code>.</p>"},{"location":"modules/manager/typst/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/\\\\.typ$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/typst/#additional-information","title":"Additional Information","text":"<p>Manages versions of Typst package imports in <code>.typ</code> files for update.</p> <p>The Typst datasource fetches package information from the typst/packages repository using GitHub's API. GitHub users don't need a token since the Renovate App already has access. Non-GitHub platforms (Bitbucket, Azure DevOps, GitLab, etc.) require a GitHub token or package lookups will fail due to API rate limiting.</p> <p>Note</p> <p>Follow the GitHub token setup guide to configure authentication for non-GitHub platforms.</p>"},{"location":"modules/manager/unity3d/","title":"Automated Dependency Updates for Unity3d","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating Unity3d dependencies.</p>"},{"location":"modules/manager/unity3d/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>**/ProjectSettings/ProjectVersion.txt</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/unity3d/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>unity3d</code>.</p>"},{"location":"modules/manager/unity3d/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"**/ProjectSettings/ProjectVersion.txt\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/unity3d/#additional-information","title":"Additional Information","text":"<p>Manages version numbers in the <code>ProjectVersion.txt</code> file located within the <code>ProjectSettings</code> folder of a Unity project.</p> <p>Example path: <code>/home/user/testUnityProject/ProjectSettings/ProjectVersion.txt</code>.</p> <p><code>ProjectVersion.txt</code> always have two version references in YAML syntax; one with revision and another one without it. Both are updated together.</p> <pre><code>m_EditorVersion: 2020.3.15f2\nm_EditorVersionWithRevision: 2020.3.15f2 (6cf78cb77498)\n</code></pre>"},{"location":"modules/manager/velaci/","title":"Automated Dependency Updates for Vela","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Vela dependencies.</p>"},{"location":"modules/manager/velaci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)\\.vela\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/velaci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/velaci/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/(^|/)\\\\.vela\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/velaci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker-type dependencies from VelaCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/vendir/","title":"Automated Dependency Updates for vendir","text":"<p>Categories: <code>no-category</code></p> <p>Renovate supports updating vendir dependencies.</p>"},{"location":"modules/manager/vendir/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/(^|/)vendir\\.yml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/vendir/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/vendir/#default-config","title":"Default config","text":"<pre><code>{\n  \"commitMessageTopic\": \"vendir {{depName}}\",\n  \"managerFilePatterns\": [\n    \"/(^|/)vendir\\\\.yml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/vendir/#additional-information","title":"Additional Information","text":"<p>Renovate can update Helm Chart references and Git references in <code>vendir.yml</code> files, with the vendir tool.</p> <p>For Renovate to work you must:</p> <ul> <li>let vendir create a vendir lockfile</li> <li>put the vendir lockfile in your repository</li> </ul>"},{"location":"modules/manager/vendir/#helm-charts","title":"Helm Charts","text":"<p>Renovate supports HTTPS and OCI Helm chart repositories.</p> Example helm chart vendir.yml<pre><code>apiVersion: vendir.k14s.io/v1alpha1\nkind: Config\n\n# one or more directories to manage with vendir\ndirectories:\n  - # path is relative to the `vendir` CLI working directory\n    path: config/_ytt_lib\n    contents:\n      path: github.com/cloudfoundry/cf-k8s-networking\n      helmChart:\n        # chart name (required)\n        name: stable/redis\n        # use specific chart version (string; optional)\n        version: '1.2.1'\n        # specifies Helm repository to fetch from (optional)\n        repository:\n          # repository url; supports experimental OCI Helm fetch via\n          # oci:// scheme (required)\n          url: https://...\n        # specify Helm binary version to use;\n        # '3' means binary 'helm3' needs to be on the path (optional)\n        helmVersion: '3'\n</code></pre>"},{"location":"modules/manager/vendir/#registry-aliases","title":"Registry Aliases","text":""},{"location":"modules/manager/vendir/#oci","title":"OCI","text":"<p>Aliases for OCI registries are supported via Renovate's <code>dockerfile</code> or <code>docker</code> managers.</p>"},{"location":"modules/manager/vendir/#git","title":"Git","text":"<p>Renovate can update explicit refs in Git references in <code>vendir.yml</code> files.</p> Example git vendir.yml<pre><code>apiVersion: vendir.k14s.io/v1alpha1\nkind: Config\n\n# one or more directories to manage with vendir\ndirectories:\n  - path: config/_ytt_lib\n    contents:\n      path: github.com/cloudfoundry/cf-k8s-networking\n      git:\n        # HTTP or SSH URLs are supported (required)\n        url: https://github.com/cloudfoundry/cf-k8s-networking\n        # branch, tag, commit; origin is the name of the remote (required)\n        # optional if refSelection is specified (available in v0.11.0+)\n        ref: origin/master\n        # depth of commits to fetch; 0 (default) means everything (optional; v0.29.0+)\n        depth: 1\n        ...\n</code></pre>"},{"location":"modules/manager/vendir/#githubrelease","title":"GithubRelease","text":"<p>Renovate can update explicit tags in GitHub releases in <code>vendir.yml</code> files.</p> Example GitHub vendir.yml<pre><code>directories:\n  - path: config/_ytt_lib\n    contents:\n      path: github.com/cloudfoundry/cf-k8s-networking\n      githubRelease:\n        # slug for repository (org/repo) (required)\n        slug: k14s/kapp-controller\n        # use release tag (optional)\n        # optional if tagSelection is specified (available in v0.22.0+)\n        tag: v0.1.0\n</code></pre>"},{"location":"modules/manager/woodpecker/","title":"Automated Dependency Updates for Woodpecker","text":"<p>Categories: <code>ci</code></p> <p>Renovate supports updating Woodpecker dependencies.</p>"},{"location":"modules/manager/woodpecker/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>/^\\.woodpecker(?:/[^/]+)?\\.ya?ml$/</code>.</p> <p>For details on how to extend a manager's <code>managerFilePatterns</code> value, please follow this link.</p>"},{"location":"modules/manager/woodpecker/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/woodpecker/#default-config","title":"Default config","text":"<pre><code>{\n  \"managerFilePatterns\": [\n    \"/^\\\\.woodpecker(?:/[^/]+)?\\\\.ya?ml$/\"\n  ]\n}\n</code></pre>"},{"location":"modules/manager/woodpecker/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from Woodpecker Pipeline YAML files.</p> <ul> <li>Woodpecker homepage</li> <li>Woodpecker Docs: Workflow Syntax (section with dependencies)</li> <li><code>woodpecker-ci</code> JSON schema</li> </ul> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/platform/","title":"Renovate Platforms","text":"<p>Renovate aims to be platform-neutral, while also taking advantage of good platform-specific features.</p>"},{"location":"modules/platform/#supported-platforms","title":"Supported platforms","text":"<p>Supported values for <code>platform</code> are: <code>azure</code>, <code>bitbucket</code>, <code>bitbucket-server</code>, <code>codecommit</code>, <code>forgejo</code>, <code>gerrit</code>, <code>gitea</code>, <code>github</code>, <code>gitlab</code>, <code>local</code>.</p>"},{"location":"modules/platform/azure/","title":"Azure DevOps and Azure DevOps Server","text":""},{"location":"modules/platform/azure/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token for the bot account. Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Permissions for your PAT should be at minimum:</p> Scope Permission Description <code>Code</code> Read &amp; Write Required <code>Work Items</code> Read &amp; write Only needed for link to work item <p>Remember to set <code>platform=azure</code> somewhere in your Renovate config file.</p>"},{"location":"modules/platform/azure/#running-renovate-in-azure-pipelines","title":"Running Renovate in Azure Pipelines","text":""},{"location":"modules/platform/azure/#setting-up-a-new-pipeline","title":"Setting up a new pipeline","text":"<p>Create a brand new pipeline within Azure DevOps, and select your source: </p> <p>Then select your repository.</p> <p>Within Configure your pipeline select: Starter pipeline </p> <p>Replace all content in the starter pipeline with:</p> <pre><code>schedules:\n  - cron: '0 3 * * *'\n    displayName: 'Every day at 3am (UTC)'\n    branches:\n      include: [main]\n    always: true\n\ntrigger: none\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: npmAuthenticate@0\n    inputs:\n      workingFile: .npmrc\n\n  - bash: |\n      add-apt-repository ppa:git-core/ppa\n      apt update &amp;&amp; apt install git -y\n    displayName: 'Install latest version of Git'\n\n  - bash: |\n      git config --global user.email 'bot@renovateapp.com'\n      git config --global user.name 'Renovate Bot'\n      npx --userconfig .npmrc renovate\n    env:\n      RENOVATE_PLATFORM: azure\n      RENOVATE_ENDPOINT: $(System.CollectionUri)\n      RENOVATE_CONFIG_FILE: $(Build.SourcesDirectory)/renovate_bot_config.json\n      RENOVATE_TOKEN: $(System.AccessToken)\n      LOG_LEVEL: debug\n</code></pre>"},{"location":"modules/platform/azure/#create-a-npmrc-file","title":"Create a .npmrc file","text":"<p>Create a <code>.npmrc</code> file in your repository:</p> <pre><code>registry=https://pkgs.dev.azure.com/YOUR-ORG/_packaging/YOUR-FEED/npm/registry/\nalways-auth=true\n</code></pre> <p>For the <code>registry</code> key, replace <code>YOUR-ORG</code> with your Azure DevOps organization and <code>YOUR-FEED</code> with your Azure Artifacts feed.</p>"},{"location":"modules/platform/azure/#create-a-configjs-file","title":"Create a config.js file","text":"<p>Create a <code>config.js</code> file in your repository:</p> <pre><code>module.exports = {\n  hostRules: [\n    {\n      hostType: 'npm',\n      matchHost: 'pkgs.dev.azure.com',\n      username: 'apikey',\n      password: process.env.RENOVATE_TOKEN,\n    },\n  ],\n  repositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n</code></pre> <p>For the <code>repositories</code> key, replace <code>YOUR-PROJECT/YOUR-REPO</code> with your Azure DevOps project and repository.</p>"},{"location":"modules/platform/azure/#using-azure-devops-internal-api-for-pipeline-tasks-versions","title":"Using Azure DevOps internal API for pipeline tasks versions","text":"<p>Info</p> <p>Renovate now uses the set of APIs that Azure provides to query the azure-pipelines tasks versions directly from the instance. Read pull request 32966 and discussion 24820 for more background information on this change.</p> <p>To let Renovate use the Azure DevOps internal API, you must set these variables in your config:</p> <ul> <li><code>platform</code> = <code>azure</code></li> <li><code>endpoint</code> = <code>$(System.CollectionUri)</code>, this is an Azure predefined variable</li> <li><code>hostRules.hostType</code> = <code>azure-pipelines-tasks</code></li> </ul> Example config file in JSON format<pre><code>{\n  \"platform\": \"azure\",\n  \"endpoint\": \"https://dev.azure.com/ORG_NAME\",\n  \"azure-pipelines\": {\n    \"enabled\": true\n  },\n  \"repositories\": [\"PROJECT_NAME/REPO_NAME\"],\n  \"prHourlyLimit\": 0,\n  \"baseBranchPatterns\": [\"main\"],\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://dev.azure.com/\",\n      \"hostType\": \"azure-pipelines-tasks\"\n    }\n  ],\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"azure-pipelines-tasks\"],\n      \"extractVersion\": \"^(?&lt;version&gt;\\\\d+)\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/platform/azure/#yarn-users","title":"Yarn users","text":"<p>To do a successful <code>yarn install</code> you need to match the URL of the registry fully. Use the <code>matchHost</code> config option to specify the full path to the registry.</p> <pre><code>module.exports = {\n  platform: 'azure',\n  hostRules: [\n    {\n      matchHost:\n        'https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/',\n      token: process.env.RENOVATE_TOKEN,\n      hostType: 'npm',\n    },\n    {\n      matchHost: 'github.com',\n      token: process.env.RENOVATE_GITHUB_COM_TOKEN,\n    },\n  ],\n  repositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n</code></pre> <p>Put this in your repository's <code>.npmrc</code> file:</p> <pre><code>registry=https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/\nalways-auth=true\n</code></pre>"},{"location":"modules/platform/azure/#add-renovatejson-file","title":"Add renovate.json file","text":"<p>Additionally, you can create a <code>renovate.json</code> file (which holds the Renovate configuration) in the root of the repository you want to update. Read more about the Renovate configuration options</p>"},{"location":"modules/platform/azure/#using-a-single-pipeline-to-update-multiple-repositories","title":"Using a single pipeline to update multiple repositories","text":"<p>If you want to use a single Renovate pipeline to update multiple repositories you must take the following steps.</p> <p>Add the names of the repositories to <code>config.js</code>. Make sure that the \"Project Collection Build Service (YOUR-PROJECT)\" user has the following permissions on the repositories:</p> <ul> <li>Contribute</li> <li>Contribute to pull requests</li> <li>Create branch</li> <li>Read</li> </ul> <p>The user must have the following permission at Project-level:</p> <ul> <li>View project-level information</li> </ul>"},{"location":"modules/platform/azure/#linking-a-work-item-to-the-pull-requests","title":"Linking a work item to the Pull Requests","text":"<p>If you want Renovate to automatically link an existing work item to the Pull Requests, you can set the <code>azureWorkItemId</code> configuration. Make sure the user has the following permissions on the work item's area path:</p> <ul> <li>Edit work items in this node</li> <li>View work items in this node</li> </ul> <p>If the user does not have these permissions, Renovate still creates a PR but it won't have a link to the work item.</p>"},{"location":"modules/platform/azure/#adding-tags-to-pull-requests","title":"Adding tags to Pull Requests","text":"<p>Tags can be added to Pull Requests using the <code>labels</code> or <code>addLabels</code> configurations. If the tag does not exist in the DevOps project, it will be created automatically during creation of the Pull Request as long as the user has the permissions at Project-level:</p> <ul> <li>Create tag definition</li> </ul> <p>Otherwise, when a tag does not exist and the user does not have permission to create it, Renovate will output an error during creation of the Pull Request.</p>"},{"location":"modules/platform/bitbucket/","title":"Bitbucket Cloud","text":"<p>Most of the information on this page is meant for users who want to self-host Renovate on Bitbucket Cloud.</p>"},{"location":"modules/platform/bitbucket/#easiest-way-to-run-renovate","title":"Easiest way to run Renovate","text":"<p>For most users, the easiest way to get started is to install the Mend app for Bitbucket and use the free Renovate plan. When you use the app, Mend will:</p> <ul> <li>authenticate the app to Bitbucket Cloud</li> <li>keep the tokens safe</li> <li>maintain and update the Renovate version used</li> </ul> <p>If you self-host Renovate you must do the things listed above yourself. Self-hosting is meant for users with advanced use cases, or who want to be in full control of the bot and the environment it runs in. We recommend most users install the Mend app.</p> <p>Read the Security and Permissions page to learn about the Security and Permissions needed for the Mend app.</p> <p>After you installed the hosted app, please read the reading list to learn how to use and configure Renovate.</p>"},{"location":"modules/platform/bitbucket/#authentication","title":"Authentication","text":"<p>First, create an API token for the bot account. Give the bot API token the following permission scopes:</p> Permission Scope <code>read:repository:bitbucket</code> Repository: Read <code>write:repository:bitbucket</code> Repository: Write <code>read:pullrequest:bitbucket</code> Pull requests: Read <code>write:pullrequest:bitbucket</code> Pull requests: Write <code>read:user:bitbucket</code> User: Read <code>read:issue:bitbucket</code> Issues: Read <code>write:issue:bitbucket</code> Issues: Write <code>read:workspace:bitbucket</code> Workspace: Read <p>The bot also needs to validate the workspace membership status of pull-request reviewers, for that, create a new user group in the workspace with the Create repositories permission and add the bot user to it.</p> <p>Let Renovate use your API token by doing one of the following:</p> <ul> <li>Set your API token as a <code>password</code> in your <code>config.js</code> file</li> <li>Set your API token as an environment variable <code>RENOVATE_PASSWORD</code></li> <li>Set your API token when you run Renovate in the CLI with <code>--password=</code></li> </ul> <p>Remember to:</p> <ul> <li>Set the <code>username</code> for the bot account, which is your Atlassian account email. You can find your email through \"Personal Bitbucket settings\" on the \"Email aliases\" page for your account</li> <li>Set <code>platform=bitbucket</code> somewhere in your Renovate config file</li> </ul>"},{"location":"modules/platform/bitbucket/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding assignees to PRs not supported (does not seem to be a Bitbucket concept)</li> <li><code>automergeStrategy=rebase</code> not supported by Bitbucket Cloud, see Jira issue BCLOUD-16610</li> </ul>"},{"location":"modules/platform/bitbucket-server/","title":"Bitbucket Data Center and Server","text":""},{"location":"modules/platform/bitbucket-server/#authentication","title":"Authentication","text":"<p>First, create a HTTP access token for the bot account. Let Renovate use your HTTP access token by doing one of the following:</p> <ul> <li>Set your HTTP access token as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your HTTP access token as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your HTTP access token when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>If you use project or repository based HTTP access tokens, it can only be used as <code>token</code>.</p> <p>Remember to set <code>platform=bitbucket-server</code> somewhere in your Renovate config file.</p> <p>If you're not using <code>@renovate-bot</code> as username then set your custom <code>username</code> for the bot account.</p> <p>If you use MySQL or MariaDB you must set <code>unicodeEmoji</code> to <code>false</code> in the global bot config (<code>RENOVATE_CONFIG_FILE</code>) to prevent issues with emojis.</p>"},{"location":"modules/platform/bitbucket-server/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding assignees to PRs not supported (does not seem to be a Bitbucket concept)</li> <li>Adding/removing labels (Bitbucket limitation)</li> </ul>"},{"location":"modules/platform/bitbucket-server/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>Creating issues not implemented yet, used to alert users when there is a config error</li> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will implicitly use the merge strategy configured as 'default' in the Bitbucket Server repository itself, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/bitbucket-server/#testing","title":"Testing","text":"<p>If you want a test Bitbucket server locally rather than with your production server, Atlassian's Bitbucket Server Docker image is really convenient.</p> <p>In line with their instructions, the following commands bring up a new server:</p> <pre><code>docker volume create --name bitbucketVolume\ndocker run -v bitbucketVolume:/var/atlassian/application-data/bitbucket --name=\"bitbucket\" -d -p 7990:7990 -p 7999:7999 atlassian/bitbucket-server:8.9.6\n</code></pre> <p>Once it's running and initialized, the quickest way to testing with Renovate is:</p> <ol> <li>Create the admin user as prompted</li> <li>Create a new project and a repository for that project</li> <li>Make sure the repository has a package file in it for Renovate to find, e.g. <code>.nvmrc</code> or <code>package.json</code></li> <li>Create a dedicated Renovate user <code>@renovate-bot</code> and grant it write access to the project</li> <li>Note down the password for <code>@renovate-bot</code> and use it in the Renovate CLI</li> </ol> <p>At this point you should have a project ready for Renovate, and the <code>@renovate-bot</code> account ready to run on it. You can then run like this:</p> <pre><code>npx renovate --platform=bitbucket-server --endpoint=http://localhost:7990 --git-fs=http --username=renovate-bot --password=abc123456789! --log-level=debug --autodiscover=true\n</code></pre> <p>Alternatively using env:</p> <pre><code>export RENOVATE_PLATFORM=bitbucket-server\nexport RENOVATE_ENDPOINT=http://localhost:7990\nexport RENOVATE_GIT_FS=http\nexport RENOVATE_USERNAME=renovate-bot\nexport RENOVATE_PASSWORD=abc123456789!\nexport LOG_LEVEL=debug\nnpx renovate --autodiscover=true\n</code></pre> <p>You should then get a \"Configure Renovate\" onboarding PR in any projects that <code>@renovate-bot</code> has been invited to.</p>"},{"location":"modules/platform/bitbucket-server/#supported-versions","title":"Supported versions","text":"<p>We support all Bitbucket Server versions which are not EOL. See Atlassian Support End of Life Policy for up-to-date versions.</p>"},{"location":"modules/platform/codecommit/","title":"AWS CodeCommit","text":"<p>No new features for the Codecommit platform</p> <p>Amazon has deprecated the Codecommit platform. We will not work on new features for the Codecommit platform. Read the AWS blog, how to migrate your AWS Codecommit repository to learn more.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"modules/platform/codecommit/#authentication","title":"Authentication","text":""},{"location":"modules/platform/codecommit/#iam-role","title":"IAM Role","text":""},{"location":"modules/platform/codecommit/#machine-pre-requisites","title":"Machine pre-requisites","text":"<ol> <li>Install the <code>aws-cli</code> program on the machine.</li> <li> <p>Set up the environment with the <code>git-credentials-helper</code>:</p> <ul> <li>For EC2 or Linux: EC2 codecommit git integration.</li> <li>For Windows: windows codecommit git integration.</li> </ul> </li> <li> <p>Set the environment variable <code>AWS_REGION</code>.</p> </li> </ol>"},{"location":"modules/platform/codecommit/#codebuild-configuration","title":"Codebuild Configuration","text":"Add git-credential helper to your buildspec.yml file<pre><code>env: git-credential-helper:yes\n</code></pre>"},{"location":"modules/platform/codecommit/#iam-user","title":"IAM User","text":"<p>First, you must get an AWS IAM Access Key id and a Secret access key id. After that, let Renovate use the AWS CodeCommit authentication keys, by picking one of these methods:</p> <ul> <li>Create a Renovate config file (<code>config.js</code>)</li> <li>Set the environment with all required AWS environment variables</li> <li>Set AWS credentials with CLI parameters</li> </ul>"},{"location":"modules/platform/codecommit/#method-1-create-a-renovate-config-file-configjs","title":"Method 1: Create a Renovate config file (<code>config.js</code>)","text":"<pre><code>username: AWS IAM access key id\npassword: AWS Secret access key\nendpoint: the URL endpoint e.g https://git-codecommit.us-east-1.amazonaws.com/\ntoken: AWS session token, if you have one\n</code></pre>"},{"location":"modules/platform/codecommit/#method-2-set-the-environment-with-all-required-aws-environment-variables","title":"Method 2: Set the environment with all required AWS environment variables","text":"<pre><code>AWS_ACCESS_KEY_ID: AWS IAM access key id\nAWS_SECRET_ACCESS_KEY: AWS Secret access key\nAWS_REGION: the AWS region e.g us-east-1\nAWS_SESSION_TOKEN: AWS session token, if you have one\n</code></pre>"},{"location":"modules/platform/codecommit/#method-3-set-aws-credentials-with-cli-parameters","title":"Method 3: Set AWS credentials with CLI parameters","text":"<pre><code>--username: AWS IAM access key id\n--password: AWS Secret access key\n--endpoint: the URL endpoint for example https://git-codecommit.us-east-1.amazonaws.com/\n--token: AWS session token, if you have one\n</code></pre>"},{"location":"modules/platform/codecommit/#permissions","title":"Permissions","text":"<p>Create a new AWS policy for Renovate with these permissions, then attach it to the user/role.</p> <p>Change the <code>Resource</code> value to the resources you want to use:</p> Example policy JSON file<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"RenovatePolicy\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"codecommit:DeleteCommentContent\",\n        \"codecommit:UpdatePullRequestDescription\",\n        \"codecommit:GitPull\",\n        \"codecommit:ListPullRequests\",\n        \"codecommit:GetCommentsForPullRequest\",\n        \"codecommit:ListRepositories\",\n        \"codecommit:UpdatePullRequestTitle\",\n        \"codecommit:GetFile\",\n        \"codecommit:UpdateComment\",\n        \"codecommit:GetRepository\",\n        \"codecommit:CreatePullRequest\",\n        \"codecommit:CreatePullRequestApprovalRule\",\n        \"codecommit:GitPush\",\n        \"codecommit:UpdatePullRequestStatus\",\n        \"codecommit:GetPullRequest\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/platform/codecommit/#running-renovate","title":"Running Renovate","text":"<p>Once you have followed method 1, 2 or 3, and have set up the permissions, you're ready to configure Renovate:</p> <ul> <li>Set <code>platform: 'codecommit'</code></li> <li>Set <code>repositories: ['{repository, names, separated, by, comma}']</code>, or use Renovate\u2019s <code>autodiscover</code> feature</li> </ul> <p>You're ready to run Renovate now, and it will process your repositories.</p>"},{"location":"modules/platform/codecommit/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<p>These Renovate features are not supported on Codecommit:</p> <ul> <li>Adding assignees to PRs</li> <li>Automerge</li> <li><code>rebaseLabel</code> (request a rebase for Renovate)</li> </ul>"},{"location":"modules/platform/codecommit/#recommendations","title":"Recommendations","text":"<p>Limit the number of open Renovate PRs by setting a <code>prConcurrentLimit</code>.</p> <p>If you close a PR but don\u2019t want Renovate to recreate the PR later, then use package rules with the <code>\"enabled\": false</code> key. This workaround is needed due to platform limitations.</p>"},{"location":"modules/platform/codecommit/#example-configuration","title":"Example configuration","text":"Example config.js file<pre><code>module.exports = {\n  endpoint: 'https://git-codecommit.us-east-1.amazonaws.com/',\n  platform: 'codecommit',\n  repositories: ['abc/def', 'abc/ghi'],\n  username: 'ACCESS_KEY_ID_GOES_HERE',\n  password: 'SECRET_ACCESS_KEY_GOES_HERE',\n  token: 'AWS_SESSION_TOKEN_GOES_HERE',\n  gitAuthor: 'your_email@domain',\n  packageRules: [\n    {\n      matchPackageNames: ['package_name', 'package_name2'],\n      enabled: false,\n    },\n  ],\n};\n</code></pre>"},{"location":"modules/platform/codecommit/#codebuild-examples","title":"CodeBuild examples","text":"<p>Create a repository with a <code>buildspec.yml</code> file in it. This repository will be your BuildProject job repository to run Renovate on your repositories.</p>"},{"location":"modules/platform/codecommit/#renovate-docker-buildspecyml","title":"Renovate Docker <code>buildspec.yml</code>","text":"Example buildspec.yml file<pre><code>version: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:recommended\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - docker run --rm -e AWS_REGION -e RENOVATE_CONFIG -e RENOVATE_PLATFORM -e RENOVATE_REPOSITORIES -e LOG_LEVEL renovate/renovate\n</code></pre>"},{"location":"modules/platform/codecommit/#renovate-cli-buildspecyml","title":"Renovate CLI <code>buildspec.yml</code>","text":"Example buildspec.yml file<pre><code>version: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:recommended\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - npm install -g renovate\n      - renovate\n</code></pre>"},{"location":"modules/platform/codecommit/#notes","title":"Notes","text":"<p>To keep BuildProject processing times reasonable, we recommend that you install Renovate on the BuildProject Renovate job repository. This also avoids running the <code>npm install</code> command.</p> <p>You can add the <code>config.js</code> global config to the repository.</p> <p>You can add the BuildProject repository to the <code>RENOVATE_REPOSITORIES</code> variable and get updates on new Renovate versions.</p>"},{"location":"modules/platform/forgejo/","title":"Forgejo","text":"<p>Renovate supports Forgejo.</p>"},{"location":"modules/platform/forgejo/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token (PAT) for the bot account. The bot account should have full name and email address configured. Then let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>You must set <code>platform=forgejo</code> in your Renovate config file.</p> <p>The PAT should have these permissions:</p> Scope Permission Valid for Forgejo versions Notes <code>repo</code> <code>Read and Write</code> all <code>user</code> <code>Read</code> all <code>issue</code> <code>Read and Write</code> <code>&gt;= 1.20.0</code> <code>organization</code> <code>Read</code> <code>&gt;= 1.20.0</code> Required to read group labels <code>email</code> <code>Read</code> <code>&lt;= 1.19.3</code> <code>misc</code> <code>Read</code> Only for <code>1.20.0</code> and <code>1.20.1</code> <p>If you use Forgejo packages, add the <code>read:packages</code> scope.</p>"},{"location":"modules/platform/forgejo/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li><code>platformAutomerge</code> (<code>true</code> by default) for platform-native automerge not supported: Forgejo versions older than v10.0.0 don't support required branch autodelete for automerge.</li> </ul>"},{"location":"modules/platform/forgejo/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>none</li> </ul>"},{"location":"modules/platform/forgejo/#repo-autodiscover","title":"Repo autodiscover","text":"<p>Renovate can discover repositories on Forgejo using the <code>autodiscover</code> feature. Repositories are ignored when one of the following conditions is met:</p> <ul> <li>The repository is a <code>mirror</code></li> <li>We do not have push or pull permissions to that repository</li> <li>Pull requests are disabled for that repository</li> </ul> <p>You can change the default server-side sort method and order for autodiscover API. Set those via <code>autodiscoverRepoSort</code> and <code>autodiscoverRepoOrder</code>. Read the Forgejo swagger docs for more details.</p>"},{"location":"modules/platform/forgejo/#merge-style","title":"Merge style","text":"<p>Renovate uses the repository's default merge style if allowed; if the default merge style is not an allowed merge style, renovate falls back to an allowed merge style as per an order chosen to minimize commits. If no merge style is allowed, the repository is blocked.</p>"},{"location":"modules/platform/gerrit/","title":"Gerrit","text":""},{"location":"modules/platform/gerrit/#supported-gerrit-versions","title":"Supported Gerrit versions","text":"<p>Renovate supports all Gerrit 3.x versions.</p> <p>Support for Gerrit is currently experimental, meaning that it might still have some undiscovered bugs or design limitations, and that we might need to change functionality in a non-backwards compatible manner in a non-major release.</p> <p>Renovate stores its metadata in the commit message footer.</p>"},{"location":"modules/platform/gerrit/#authentication","title":"Authentication","text":"First, create a HTTP access token for the Renovate account. <p>Let Renovate use your HTTP access token by doing one of the following:</p> <ul> <li>Set your HTTP access token as a <code>password</code> in your <code>config.js</code> file, or</li> <li>Set your HTTP access token as an environment variable <code>RENOVATE_PASSWORD</code>, or</li> <li>Set your HTTP access token when you run Renovate in the CLI with <code>--password=</code></li> </ul> <p>The Gerrit user account must be allowed to assign the Code-Review label with \"+2\" to their own changes for \"automerge\" to work.</p> <p>You must set <code>platform=gerrit</code> in your Renovate config file.</p>"},{"location":"modules/platform/gerrit/#renovate-prbranch-model-with-gerrit-and-needed-permissions","title":"Renovate PR/Branch-Model with Gerrit and needed permissions","text":"<p>If you use the \"Code-Review\" label and want to get <code>automerge</code> working then you must set <code>autoApprove=true</code> in your Renovate config. Renovate will now add the Code-Review label with the value \"+2\" to each of its \"pull requests\" (Gerrit-Change).</p> <p>Note</p> <p>The bot's user account must have permission to give +2 for the Code-Review label.</p> <p>The Renovate option <code>automergeType: \"branch\"</code> makes no sense for Gerrit, because there are no branches used to create pull requests. It works similar to the default option <code>\"pr\"</code>.</p>"},{"location":"modules/platform/gerrit/#optional-features","title":"Optional features","text":"<p>You can use the <code>statusCheckNames</code> configuration to map any of the available branch checks (like <code>minimumReleaseAge</code>, <code>mergeConfidence</code>, and so on) to a Gerrit label.</p> <p>For example, if you want to use the Merge Confidence feature and map the result of the Merge Confidence check to your Gerrit label \"Renovate-Merge-Confidence\" you can configure:</p> <pre><code>{\n  \"statusCheckNames\": {\n    \"mergeConfidence\": \"Renovate-Merge-Confidence\"\n  }\n}\n</code></pre> <p>Also, labels in <code>renovate.json</code> will be mapped to hashtags in Gerrit. Example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"labels\": [\"renovate:devDependencies\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/platform/gerrit/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Creating issues (not a Gerrit concept)</li> <li>Dependency Dashboard (needs issues first)</li> </ul>"},{"location":"modules/platform/gitea/","title":"Gitea","text":"<p>Renovate supports Gitea.</p> <p>Note</p> <p>Use <code>forgejo</code> as the platform if you are using Forgejo. Forgejo support will be removed from <code>gitea</code> platform in a future release.</p>"},{"location":"modules/platform/gitea/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token (PAT) for the bot account. The bot account should have full name and email address configured. Then let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>You must set <code>platform=gitea</code> in your Renovate config file.</p> <p>The PAT should have these permissions:</p> Scope Permission Valid for Gitea versions Notes <code>repo</code> <code>Read and Write</code> all <code>user</code> <code>Read</code> all <code>issue</code> <code>Read and Write</code> <code>&gt;= 1.20.0</code> <code>organization</code> <code>Read</code> <code>&gt;= 1.20.0</code> Required to read group labels <code>email</code> <code>Read</code> <code>&lt;= 1.19.3</code> <code>misc</code> <code>Read</code> Only for <code>1.20.0</code> and <code>1.20.1</code> <p>If you use Gitea packages, add the <code>read:packages</code> scope.</p>"},{"location":"modules/platform/gitea/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding reviewers to PRs not supported: Gitea versions older than <code>v1.14.0</code> do not have the required API.</li> <li><code>platformAutomerge</code> (<code>true</code> by default) for platform-native automerge not supported: Gitea versions older than v1.24.0 don't support required branch autodelete for automerge.</li> <li>Git upload filters: If you're using a Gitea version older than <code>v1.16.0</code> then you must enable clone filters.</li> </ul>"},{"location":"modules/platform/gitea/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>none</li> </ul>"},{"location":"modules/platform/gitea/#repo-autodiscover","title":"Repo autodiscover","text":"<p>Renovate can discover repositories on Gitea using the <code>autodiscover</code> feature. Repositories are ignored when one of the following conditions is met:</p> <ul> <li>The repository is a <code>mirror</code></li> <li>We do not have push or pull permissions to that repository</li> <li>Pull requests are disabled for that repository</li> </ul> <p>You can change the default server-side sort method and order for autodiscover API. Set those via <code>autodiscoverRepoSort</code> and <code>autodiscoverRepoOrder</code>. Read the Gitea swagger docs for more details.</p>"},{"location":"modules/platform/gitea/#merge-style","title":"Merge style","text":"<p>Renovate uses the repository's default merge style if allowed; if the default merge style is not an allowed merge style, renovate falls back to an allowed merge style as per an order chosen to minimize commits. If no merge style is allowed, the repository is blocked.</p>"},{"location":"modules/platform/github/","title":"GitHub and GitHub Enterprise Server","text":"<p>Most of the information on this page is meant for users who want to self-host Renovate on GitHub or GitHub Enterprise Server.</p>"},{"location":"modules/platform/github/#easiest-way-to-run-renovate","title":"Easiest way to run Renovate","text":"<p>For users on GitHub Cloud (<code>github.com</code>), the easiest way to get started is to install the Mend Renovate app from the GitHub marketplace. When you use the app, Mend will:</p> <ul> <li>authenticate the Renovate app to GitHub</li> <li>keep the tokens safe</li> <li>maintain and update the Renovate version used</li> </ul> <p>If you self-host Renovate you must do the things listed above yourself. Self-hosting is meant for users with advanced use cases, or who want to be in full control of the bot and the environment it runs in. We recommend most users install the Mend Renovate app.</p> <p>Read the Security and Permissions page to learn about the Security and Permissions needed for the Mend Renovate app.</p> <p>After you installed the hosted app, please read the reading list to learn how to use and configure Renovate.</p>"},{"location":"modules/platform/github/#authentication","title":"Authentication","text":"<p>First, create a fine-grained or a classic PAT. The PAT must have the <code>repo</code> scope. If you want Renovate to also update your GitHub Action files, you must grant the <code>workflow</code> scope.</p> <p>Read the GitHub Docs, about Personal Access Tokens to learn more about PATs.</p> <p>Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Remember to set <code>platform=github</code> somewhere in your Renovate config file.</p> <p>If you use GitHub Enterprise Server then <code>endpoint</code> must point to <code>https://github-enterprise.example.com/api/v3/</code>. You can choose where you want to set <code>endpoint</code>:</p> <ul> <li>In your <code>config.js</code> file</li> <li>In a environment variable</li> <li>In a CLI parameter</li> </ul> <p>Labels and forking mode</p> <p>If you're self-hosting Renovate on GitHub.com with GitHub Actions in forking mode, and want Renovate to apply labels then you must give the PAT <code>triage</code> level rights on <code>issues</code>. The <code>triage</code> level allows the PAT to apply/dismiss existing labels.</p>"},{"location":"modules/platform/github/#running-using-a-fine-grained-token","title":"Running using a fine-grained token","text":""},{"location":"modules/platform/github/#permissions","title":"Permissions","text":"<p>A fine-grained token must have these permissions:</p> Permission Access Level <code>Members</code> <code>Read-only</code> Organization <code>Commit statuses</code> <code>Read and write</code> Repository or Organization <code>Contents</code> <code>Read and write</code> Repository or Organization <code>Dependabot alerts</code> <code>Read-only</code> Repository or Organization <code>Issues</code> <code>Read and write</code> Repository or Organization <code>Pull requests</code> <code>Read and write</code> Repository or Organization <code>Workflows</code> <code>Read and write</code> Repository or Organization <p>Use a bot role account</p> <p>Consider creating a GitHub App to use instead of using your own GitHub user account.</p>"},{"location":"modules/platform/github/#running-as-a-github-app","title":"Running as a GitHub App","text":"<p>Instead of a bot account with a Personal Access Token you can run <code>renovate</code> as a self-hosted GitHub App.</p> <p>When creating the GitHub App give it the following permissions:</p> Permission Scope Checks <code>read</code> + <code>write</code> Commit statuses <code>read</code> + <code>write</code> Contents <code>read</code> + <code>write</code> Issues <code>read</code> + <code>write</code> Pull requests <code>read</code> + <code>write</code> Workflows <code>read</code> + <code>write</code> Administration <code>read</code> Dependabot alerts <code>read</code> Members <code>read</code> Metadata <code>read</code> <p>Other values like Homepage URL, User authorization callback URL and webhooks can be disabled or filled with dummy values.</p> <p>Inside your <code>config.js</code> you need to set the following values, assuming the name of your app is <code>self-hosted-renovate</code>:</p> <p><code>token:\"ghs_123exampletoken\"</code></p> <p>You must use a GitHub App Installation token.</p> <p>Previously, the token had to be prefixed with <code>x-access-token:</code>. We recommend you replace any prefixed tokens with normal tokens. We will drop support for prefixed tokens in the future.</p> <p>Any tokens that do not start with <code>ghs_</code> (for example tokens from GitHub Enterprise Server versions before version <code>3.2</code>) must be prefixed with <code>x-access-token:</code>.</p> <p>Note</p> <p>The installation tokens expire after 1 hour and need to be regenerated regularly. Alternatively as environment variable <code>RENOVATE_TOKEN</code>, or via CLI <code>--token=</code>.</p> <p>Third-party tools to regenerate installation tokens</p> <p>If you're self-hosting Renovate within a GitHub Actions workflow, then you can use the <code>actions/create-github-app-token</code> action. If you use Node.js/CLI, then you can use the <code>github-app-installation-token</code> package. If you use Docker, then you can use the <code>mshekow/github-app-installation-token</code> image.</p> <p><code>repositories: [\"orgname/repo-1\",\"orgname/repo-2\"]</code></p> <p>List of repositories to run on. Alternatively as comma-separated environment variable <code>RENOVATE_REPOSITORIES</code>. The GitHub App installation token is scoped at most to a single organization and running on multiple organizations requires multiple invocations of <code>renovate</code> with different <code>token</code> and <code>repositories</code> parameters.</p> <p><code>username:\"self-hosted-renovate[bot]\"</code> (optional, autodetected if not supplied)</p> <p>The slug name of your app with <code>[bot]</code> appended</p> <p><code>gitAuthor:\"Self-hosted Renovate Bot &lt;123456+self-hosted-renovate[bot]@users.noreply.github.enterprise.com&gt;\"</code> (optional, autodetected if not supplied)</p> <p>The GitHub App associated email to match commits to the bot. It needs to have the user id and the username followed by the <code>users.noreply.</code>-domain of either github.com or the GitHub Enterprise Server. A way to get the user id of a GitHub app is to query the user API at <code>api.github.com/users/self-hosted-renovate[bot]</code> (github.com) or <code>github.enterprise.com/api/v3/users/self-hosted-renovate[bot]</code> (GitHub Enterprise Server).</p>"},{"location":"modules/platform/github/#package-registry-credentials","title":"Package Registry Credentials","text":"<p>When Renovate runs against repositories on <code>github.com</code>, and the environment variable <code>RENOVATE_X_GITHUB_HOST_RULES</code> is set, then Renovate automatically provisions <code>hostRules</code> for these GitHub Packages registries using the platform token:</p> <ul> <li><code>ghcr.io</code></li> <li><code>maven.pkg.github.com</code></li> <li><code>npm.pkg.github.com</code></li> <li><code>nuget.pkg.github.com</code></li> <li><code>rubygems.pkg.github.com</code></li> </ul> <p>Warning</p> <p>We reverted the Package Registry Credentials feature to experimental mode, because users reported it's not working correctly with app tokens.</p>"},{"location":"modules/platform/gitlab/","title":"GitLab","text":""},{"location":"modules/platform/gitlab/#authentication","title":"Authentication","text":"<p>You can authenticate Renovate to GitLab, with one of these methods:</p> <ul> <li>Personal Access Token</li> <li>Project Access Token</li> <li>Group Access Token</li> </ul>"},{"location":"modules/platform/gitlab/#three-ways-to-authenticate-choose-one","title":"Three ways to authenticate, choose one","text":"<p>To start, create either:</p> <ul> <li>a Personal Access Token for the bot account</li> <li>or a Project Access Token if Renovate only needs to check and update one project. We do not recommend Project Access Tokens, as you need to configure Renovate, and the token, for each project</li> <li>or a Group Access Token to the group Renovate will be working on</li> </ul>"},{"location":"modules/platform/gitlab/#bot-or-token-must-have-at-least-developer-role","title":"Bot or token must have at least developer role","text":"<p>The bot account, or token, must have at least the Developer role. The developer role allows Renovate to create issues and merge requests.</p>"},{"location":"modules/platform/gitlab/#if-you-want-renovate-to-automerge-give-appropriate-permissions","title":"If you want Renovate to automerge, give appropriate permissions","text":"<p>If you are using automerge, the bot account, or token, must have the appropriate \"Allowed to merge\" permission on the protected branch of your projects.</p>"},{"location":"modules/platform/gitlab/#if-only-maintainers-are-allowed-to-merge-give-maintainer-role","title":"If only maintainers are allowed to merge, give Maintainer role","text":"<p>If merging is restricted to Maintainers, the bot account or token must have the Maintainer role.</p>"},{"location":"modules/platform/gitlab/#setting-up-project-access-tokens-or-group-access-tokens","title":"Setting up Project Access Tokens or Group Access Tokens","text":"<p>If you are using a project access token, or a group access token, GitLab creates an internal bot user for you. This bot user is the one that will be used to create merge requests and issues.</p> <p>Use the name and email of this bot user to configure Renovate when verifing users using push rules. For group access tokens, an expiration date is required, unlike project access tokens where it is optional.</p> <p>To keep using the same GitLab-generated bot account you must rotate/refresh the Group Access Token before the token's expiry date.</p> <p>We refer to personal access tokens, project access tokens and group access tokens as access tokens in the instructions that follow.</p>"},{"location":"modules/platform/gitlab/#permissions-for-access-tokens-on-real-runs","title":"Permissions for access tokens on real runs","text":"<p>For real runs, give the access token these scopes:</p> <ul> <li><code>api</code></li> </ul>"},{"location":"modules/platform/gitlab/#permissions-for-access-tokens-on-dry-runs","title":"Permissions for access tokens on dry runs","text":"<p>For dry runs, give the access token these scopes:</p> <ul> <li><code>read_api</code></li> </ul>"},{"location":"modules/platform/gitlab/#letting-renovate-use-your-access-token","title":"Letting Renovate use your access token","text":"<p>Let Renovate use your access token by doing one of the following:</p> <ul> <li>Set your access token as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your access token as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your access token when you run Renovate in the CLI with <code>--token=</code></li> </ul>"},{"location":"modules/platform/gitlab/#set-platformgitlab-in-your-renovate-config-file","title":"Set <code>platform=gitlab</code> in your Renovate config file","text":"<p>Remember to set <code>platform=gitlab</code> somewhere in your Renovate config file.</p>"},{"location":"modules/platform/gitlab/#setting-up-renovate-for-a-private-gitlab-container-registry","title":"Setting up Renovate for a Private Gitlab container registry","text":"<p>If you use a private GitLab container registry, you must:</p> <ul> <li>Set the <code>RENOVATE_HOST_RULES</code> CI variable to <code>[{\"matchHost\": \"${CI_REGISTRY}\",\"username\": \"${GITLAB_USER_NAME}\",\"password\": \"${RENOVATE_TOKEN}\", \"hostType\": \"docker\"}]</code>.</li> </ul> <p>Alternatively, if <code>detectHostRulesFromEnv</code> is enabled, you can set the CI variables <code>DOCKER_REGISTRY_GITLAB_COM_USERNAME=${GITLAB_USER_NAME}</code> and <code>DOCKER_REGISTRY_GITLAB_COM_PASSWORD=${RENOVATE_TOKEN}</code>.</p> <ul> <li>Make sure the user that owns the access token is a member of the corresponding GitLab projects/groups with the right permissions.</li> <li>Make sure the access token has the <code>read_registry</code> scope.</li> </ul> <p>You may also use a dedicated Deploy Token instead of using <code>RENOVATE_TOKEN</code> as the password in the above host rule example.</p>"},{"location":"modules/platform/gitlab/#get-colored-output","title":"Get colored output","text":"<p>You may want to set <code>FORCE_COLOR: 3</code> to the job, in order to get colored output. GitLab Runner runs the container\u2019s shell in non-interactive mode, so the shell\u2019s <code>TERM</code> environment variable is set to <code>dumb</code>.</p>"},{"location":"modules/platform/gitlab/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will accept the Merge Request without further configuration, and respect the strategy defined in the Merge Request, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/gitlab/#server-version-dependent-features","title":"Server version dependent features","text":"<p>We use the GitLab version API to fetch the server version. You can use the experimental feature flag <code>RENOVATE_X_PLATFORM_VERSION</code> to set a specific server version. By setting the server version yourself, you save a API call that fetches the server version.</p> <ul> <li>Use <code>Draft:</code> MR prefix instead of <code>WIP:</code> prefix since <code>v13.2.0</code></li> <li>Do not truncate Markdown body to 25K chars since <code>v13.4.0</code></li> <li>Allow configure reviewers since <code>v13.9.0</code></li> </ul>"},{"location":"modules/platform/gitlab/#multiple-merge-request-assignees","title":"Multiple merge request assignees","text":"<p>Multiple assignees are only available on GitLab Premium and Ultimate tiers. Because of a safeguard in GitLab's API if multiple assignees are set, but not available to the project, only the first assignee will be applied.</p>"},{"location":"modules/platform/gitlab/#verifying-users-using-push-rules","title":"Verifying users using push rules","text":"<p>When verifying users using push rules, you must use the name and email of the bot user for <code>gitAuthor</code>.</p>"},{"location":"modules/platform/local/","title":"Local","text":"<p>With the \"local\" platform you can perform dry runs of Renovate against the local file system. This can be handy when testing a new Renovate configuration for example.</p>"},{"location":"modules/platform/local/#usage","title":"Usage","text":"<p>Run the <code>renovate --platform=local</code> command in the directory you want Renovate to run in. In this mode, Renovate defaults to <code>dryRun=lookup</code>.</p> <p>Avoid giving \"repositories\" arguments, as this command can only run in a single directory, and it can only run in the current working directory.</p> <p>You may run the command above on \"plain\" directories, or \"Git directories\". You don't need to provide any config, as the command will run with or without \"repo config\".</p> <p>The command doesn't do any \"compare\" - or before and after analysis - if you want to test a new config then you must manually compare.</p>"},{"location":"modules/platform/local/#limitations","title":"Limitations","text":"<ul> <li><code>local&gt;</code> presets can't be resolved. Normally these would point to the local platform such as GitHub, but in the case of running locally, it does not exist</li> <li><code>baseBranchPatterns</code> are ignored</li> <li>Branch creation is not supported</li> </ul>"},{"location":"modules/versioning/","title":"Versioning","text":"<p>Versioning is one of Renovate's core \"module\" types. The other modules are Platform, Manager and Datasource. Renovate uses the version module to answer questions such as:</p> <ul> <li>Is this a valid version string?</li> <li>Is this a valid constraint/range?</li> <li>Does this version match with this constraint?</li> <li>If the current constraint is X, what would the new constraint be if we updated to version Y?</li> <li>Is this a <code>major</code>, <code>minor</code> or <code>patch</code> update?</li> <li>Is this a breaking change?</li> </ul> <p>How Renovate uses its core modules during a run:</p> <ol> <li>Renovate's Manager module extracts the dependencies</li> <li>Renovate's Datasource finds the versions of the dependencies</li> <li>Renovate's Versioning scheme sorts and filters the results</li> </ol> <p>The \"versioning\" chosen can be different per package manager, because different package managers use different versioning schemes. For example, <code>npm</code> uses <code>1.0.0-beta.1</code> while <code>pip</code> uses <code>1.0.0b1</code>.</p>"},{"location":"modules/versioning/#why-you-might-need-to-manually-configure-versioning","title":"Why you might need to manually configure versioning","text":"<p>Renovate interprets versions correctly out-of-the-box most of the time. But Renovate can't automatically detect all versioning schemes. So sometimes you need to tell the bot what versioning scheme it should use.</p> <p>For some ecosystems, automatic version selection works nearly every time (e.g. for npm-compliant managers, use <code>npm</code> versioning). For other ecosystems such as Docker or GitHub tags, there is no consistent convention for versions, so the default choice may not always work. For example some Docker images may use SemVer, some PEP440, some Calendar Versioning, etc.</p> <p>If the automatic version selection does not work for a dependency update: set the <code>versioning</code> for that dependency in the Renovate config file.</p>"},{"location":"modules/versioning/#general-concepts-behind-overriding-versioning","title":"General concepts behind overriding versioning","text":"<ul> <li>Although you can reconfigure versioning per-manager or per-datasource, you probably don't need such a broad change</li> <li>More commonly you would need to configure <code>versioning</code> for individual packages or potentially package patterns</li> <li>The best way to do this is with <code>packageRules</code>, with a combination of <code>matchManagers</code>, <code>matchDatasources</code>, and <code>matchPackageNames</code>.   Avoid configuring <code>versioning</code> in a rule that also uses <code>matchUpdateTypes</code>, as the update types aren't known at the time the <code>versioning</code> is applied</li> </ul>"},{"location":"modules/versioning/#examples-of-versioning-overrides","title":"Examples of versioning overrides","text":""},{"location":"modules/versioning/#overriding-docker-versioning-to-use-a-versioning-specific-for-a-package","title":"Overriding Docker versioning to use a versioning specific for a package","text":"<p>The configuration below overrides Renovate's default <code>docker</code> versioning for the <code>python</code> Docker image and instead uses the <code>pep440</code> versioning scheme to evaluate versions.</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"python\"],\n      \"versioning\": \"pep440\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/versioning/#using-a-custom-regex-versioning-scheme","title":"Using a custom regex versioning scheme","text":"<pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"foo/bar\"],\n      \"versioning\": \"regex:^(?&lt;compatibility&gt;.*)-v?(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)?$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/versioning/#breaking-changes","title":"Breaking Changes","text":"<p>In most ecosystems, especially SemVer, major upgrades are treated as breaking changes. But other updates may have breaking changes too, for example:</p> <ul> <li>In SemVer, any update from a 0.x version may be breaking (including <code>0.1.0</code> -&gt; <code>0.1.1</code>, <code>0.1.0</code> -&gt; <code>0.2.0</code> and <code>0.1.0</code> -&gt; <code>1.0.0</code>)</li> <li>Updates from pre-release versions like <code>1.0.0-pre.1</code> to other versions (including stable versions like <code>1.0.0</code>) can be breaking</li> <li>Python makes breaking changes in minor updates, e.g. from <code>3.12</code> to <code>3.13</code></li> </ul> <p>It can be tempting to propose ideas like \"let's treat minor updates of Python as major updates\" but that is swapping one problem for a worse problem. The definitions of major and minor should not be redefined and broken in order to shoehorn in the related concept of \"breaking change\". Instead, Renovate has the concept of <code>isBreaking</code>, which can be decided independently of <code>updateType</code>.</p> <p>Here's an example of grouping all non-breaking updates together:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"description\": \"Group non-breaking updates\",\n      \"matchUpdateTypes\": [\"minor\", \"patch\", \"digest\"],\n      \"matchJsonata\": [\"isBreaking != true\"],\n      \"groupName\": \"Non-breaking updates\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/versioning/#supported-versioning","title":"Supported Versioning","text":"<p>Supported values for <code>versioning</code> are:</p> <ul> <li><code>aws-eks-addon</code></li> <li><code>aws-machine-image</code></li> <li><code>azure-rest-api</code></li> <li><code>bazel-module</code></li> <li><code>cargo</code></li> <li><code>composer</code></li> <li><code>conan</code></li> <li><code>conda</code></li> <li><code>deb</code></li> <li><code>debian</code></li> <li><code>devbox</code></li> <li><code>docker</code></li> <li><code>git</code></li> <li><code>glasskube</code></li> <li><code>go-mod-directive</code></li> <li><code>gradle</code></li> <li><code>hashicorp</code></li> <li><code>helm</code></li> <li><code>hermit</code></li> <li><code>hex</code></li> <li><code>ivy</code></li> <li><code>kubernetes-api</code></li> <li><code>lambda-node</code></li> <li><code>loose</code></li> <li><code>maven</code></li> <li><code>nixpkgs</code></li> <li><code>node</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>pep440</code></li> <li><code>perl</code></li> <li><code>poetry</code></li> <li><code>pvp</code></li> <li><code>python</code></li> <li><code>redhat</code></li> <li><code>regex</code></li> <li><code>rez</code></li> <li><code>rpm</code></li> <li><code>ruby</code></li> <li><code>same-major</code></li> <li><code>semver</code></li> <li><code>semver-coerced</code></li> <li><code>semver-partial</code></li> <li><code>swift</code></li> <li><code>ubuntu</code></li> <li><code>unity3d</code></li> <li><code>unity3d-packages</code></li> </ul>"},{"location":"modules/versioning/aws-eks-addon/","title":"aws-eks-addon Versioning","text":""},{"location":"modules/versioning/aws-eks-addon/#identifier","title":"Identifier","text":"<p><code>aws-eks-addon</code> </p>"},{"location":"modules/versioning/aws-eks-addon/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/aws-eks-addon/#description","title":"Description","text":"<p>AWS versioning syntax is used for EKS Addon updates.</p> <p>It is based off Semantic Versioning 2.0 but with a subset of addon <code>build metadata</code> syntax.</p> <p>At the moment every ESK Addon that matches the regex <code>^v?\\d+\\.\\d+\\.\\d+-eksbuild\\.\\d+$</code> is considered a valid \"release\".</p> <p>Key Points about EKS Addon Versioning</p> <ol> <li>Versioning Scheme: Add-ons typically follow a semantic versioning scheme (e.g., Major.Minor.Patch). This helps in understanding the significance of changes between versions:</li> <li><code>Major</code>: Indicates significant changes or breaking API changes for plugin version.</li> <li><code>Minor</code>: Introduces new features or enhancements for plugin version.</li> <li><code>Patch</code>: Includes bug fixes and minor improvements for plugin version.</li> <li> <p><code>Build Metadata</code> : It helps differentiate this particular release from others that might have been built independently.</p> </li> <li> <p>Default Versions: When creating a new EKS cluster, AWS often selects a default version for each addon based on the cluster's Kubernetes version and other factors. This default version is usually the most stable and recommended for the specific cluster configuration</p> </li> <li> <p>Build metadata. Example <code>eksbuild.1</code>. The <code>eksbuild.1</code> part signifies a specific build or release within the <code>1.19.0</code> version, likely managed by the EKS build system. It helps differentiate this particular release from others that might have been built independently. The build metadata provides additional context about the specific release, which can be useful for tracking and troubleshooting.</p> </li> </ol>"},{"location":"modules/versioning/aws-machine-image/","title":"aws-machine-image Versioning","text":""},{"location":"modules/versioning/aws-machine-image/#identifier","title":"Identifier","text":"<p><code>aws-machine-image</code> </p>"},{"location":"modules/versioning/aws-machine-image/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/aws-machine-image/#description","title":"Description","text":"<p>Renovate's AWS Machine Image versioning is a kind of hack to support Amazon Machine Images (AMI) updates.</p> <p>At the moment every AMI that matches the regex <code>^ami-[a-z0-9]{17}$</code> is considered a valid \"release\".</p>"},{"location":"modules/versioning/azure-rest-api/","title":"azure-rest-api Versioning","text":""},{"location":"modules/versioning/azure-rest-api/#identifier","title":"Identifier","text":"<p><code>azure-rest-api</code> </p>"},{"location":"modules/versioning/azure-rest-api/#references","title":"References","text":"<ul> <li>https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#api-versioning</li> </ul>"},{"location":"modules/versioning/azure-rest-api/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/azure-rest-api/#description","title":"Description","text":"<p>The Azure REST APIs use a <code>YYYY-MM-DD</code> version with an optional <code>-preview</code> suffix: https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#api-versioning</p> <p>Internally at Microsoft they are using other additional suffixes: https://github.com/Azure/bicep/blob/a1d217e3bb3d049fc5c6c21b466c3a29585a6c69/src/Bicep.Core/Analyzers/Linter/ApiVersions/ApiVersionHelper.cs#L15</p>"},{"location":"modules/versioning/bazel-module/","title":"Bazel Module Versioning","text":""},{"location":"modules/versioning/bazel-module/#identifier","title":"Identifier","text":"<p><code>bazel-module</code> </p>"},{"location":"modules/versioning/bazel-module/#references","title":"References","text":"<ul> <li>https://bazel.build/external/module</li> </ul>"},{"location":"modules/versioning/bazel-module/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/cargo/","title":"Cargo Versioning","text":""},{"location":"modules/versioning/cargo/#identifier","title":"Identifier","text":"<p><code>cargo</code> </p>"},{"location":"modules/versioning/cargo/#references","title":"References","text":"<ul> <li>https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html</li> </ul>"},{"location":"modules/versioning/cargo/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/cargo/#description","title":"Description","text":"<p>Cargo versioning uses Semantic Versioning 2.0.</p> <p>Cargo supports ranges in a similar manner to npm, but not identical. The important differences are:</p> <p>Use of commas</p> <p>Multiple version requirements can also be separated with a comma, e.g. <code>&gt;= 1.2, &lt; 1.5</code>. We interpret this to mean AND.</p> <p>No exact versions unless using equals =</p> <p>In Cargo, <code>1.2.3</code> doesn't mean \"exactly 1.2.3\", it actually means <code>&gt;=1.2.3 &lt;2.0.0</code>. So this is like the equivalent of <code>^1.2.3</code> in npm.</p>"},{"location":"modules/versioning/composer/","title":"Composer Versioning","text":""},{"location":"modules/versioning/composer/#identifier","title":"Identifier","text":"<p><code>composer</code> </p>"},{"location":"modules/versioning/composer/#references","title":"References","text":"<ul> <li>https://getcomposer.org/doc/articles/versions.md</li> <li>https://packagist.org/packages/composer/semver</li> <li>https://madewithlove.be/tilde-and-caret-constraints/</li> <li>https://semver.mwl.be</li> </ul>"},{"location":"modules/versioning/composer/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code>, <code>update-lockfile</code></p>"},{"location":"modules/versioning/composer/#description","title":"Description","text":"<p>Composer uses Semver-like versioning, but some package authors may use versions that are not completely valid, e.g. <code>1.2</code> instead of <code>1.2.0</code>.</p> <p>Composer supports ranges in a similar manner to npm, but not identical. The main difference is with tilde ranges.</p> <p>Tilde ranges with \"short\" versions are different to npm. e.g.</p> <p><code>~4</code> is equivalent to <code>^4</code> in npm <code>~4.1</code> is equivalent to <code>^4.1</code> in npm <code>~0.4</code> is equivalent to <code>&gt;=0.4 &lt;1</code> in npm</p> <p>Composer supports patches in the version numbers, which are considered stable. E.g., <code>1.2.3-p1</code> is recognized by npm as unstable, Renovate implements additional logic to support correct sorting and stability checks on composer patch versions syntax.</p>"},{"location":"modules/versioning/conan/","title":"conan Versioning","text":""},{"location":"modules/versioning/conan/#identifier","title":"Identifier","text":"<p><code>conan</code> </p>"},{"location":"modules/versioning/conan/#references","title":"References","text":"<ul> <li>https://semver.org/</li> <li>https://github.com/podhmo/python-node-semver</li> <li>https://github.com/podhmo/python-node-semver/tree/master/examples</li> <li>https://docs.conan.io/en/latest/versioning/version_ranges.html#version-ranges</li> </ul>"},{"location":"modules/versioning/conan/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>auto</code>, <code>bump</code>, <code>widen</code>, <code>replace</code></p>"},{"location":"modules/versioning/conan/#description","title":"Description","text":"<p>Conan versioning supports Semantic Versioning 2.0 but some packages don't follow this specification.</p> <p>Conan implements python-node-semver.</p> <p>Read the Conan docs about version ranges for more information.</p> syntax description <code>5.45</code> Equivalent to <code>5.45</code> <code>16.00</code> Equivalent to <code>16.00</code> <code>2.8.3</code> Equivalent to <code>2.8.3</code> <code>[&gt;1.1 &lt;2.1]</code> Keep version within range <code>[2.8]</code> Equivalent to <code>=2.8</code> <code>[~=3.0]</code> Compatible, according to SemVer <code>[&gt;1.1 \\|\\| 0.8]</code> Conditions can be OR'ed <code>[1.2.7 \\|\\| &gt;=1.2.9 &lt;2.0.0]</code> This range would match the versions <code>1.2.7</code>, <code>1.2.9</code>, and <code>1.4.6</code>, but not the versions <code>1.2.8</code> or <code>2.0.0</code> <code>[&gt;1.1 &lt;2.1, include_prerelease=True]</code> Would e.g. accept <code>2.0.0-pre.1</code> as match <code>[~1.2.3, loose=False]</code> Would only accept correct Semantic Versioning strings. E.g. version <code>1.2.3.4</code> would not be accepted <code>[~1.2.3, loose=False, include_prerelease=True]</code> Both options can be used for the same version range"},{"location":"modules/versioning/conda/","title":"conda Versioning","text":""},{"location":"modules/versioning/conda/#identifier","title":"Identifier","text":"<p><code>conda</code> </p>"},{"location":"modules/versioning/conda/#references","title":"References","text":"<ul> <li>https://docs.conda.io/projects/conda-build/en/stable/resources/package-spec.html#package-match-specifications</li> </ul>"},{"location":"modules/versioning/conda/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/conda/#description","title":"Description","text":"<p>Conda versioning uses pep440-extended version syntax.</p> <p>More details: conda version spec</p>"},{"location":"modules/versioning/deb/","title":"Deb version Versioning","text":""},{"location":"modules/versioning/deb/#identifier","title":"Identifier","text":"<p><code>deb</code> </p>"},{"location":"modules/versioning/deb/#references","title":"References","text":"<ul> <li>https://www.debian.org/doc/debian-policy/ch-controlfields.html#version</li> <li>https://manpages.debian.org/unstable/dpkg-dev/deb-version.7.en.html</li> </ul>"},{"location":"modules/versioning/deb/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/deb/#description","title":"Description","text":"<p>Deb versioning compares versions like package managers on Debian-based Linux distributions compare packages (<code>dpkg</code>, <code>apt</code>). Deb versioning supports complicated version numbers, including alphabetical characters almost everywhere. Similar to our \"loose\" versioning, deb versioning is a \"best effort\" attempt to convert deb versions to SemVer fields like <code>major</code>, <code>minor</code>, <code>patch</code>.</p>"},{"location":"modules/versioning/debian/","title":"Debian Versioning","text":""},{"location":"modules/versioning/debian/#identifier","title":"Identifier","text":"<p><code>debian</code> </p>"},{"location":"modules/versioning/debian/#references","title":"References","text":"<ul> <li>https://debian.pages.debian.net/distro-info-data/debian.csv</li> </ul>"},{"location":"modules/versioning/debian/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code></p>"},{"location":"modules/versioning/debian/#description","title":"Description","text":"<p>Debian versioning is used for Debian container images that are referenced by their major release version or a codename.</p> <p>Versions to which this scheme applies are e.g. <code>11</code> and <code>bullseye</code>. Container image tags such as <code>11-slim</code>, <code>11.4</code> or <code>11.4-slim</code>, <code>bullseye-20220822</code> or <code>bullseye-backports</code> are not compliant with the current implementation.</p>"},{"location":"modules/versioning/devbox/","title":"devbox Versioning","text":""},{"location":"modules/versioning/devbox/#identifier","title":"Identifier","text":"<p><code>devbox</code> </p>"},{"location":"modules/versioning/devbox/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/devbox/#description","title":"Description","text":"<p>Devbox's Nixhub uses fairly strict versioning, characters such as ~, ^ and &gt;= are not allowed. The semver values must not include \"*\" or \"x\". \"1.2.3\" \"1.2\" and \"1\" are the only valid formats.</p>"},{"location":"modules/versioning/docker/","title":"Docker Versioning","text":""},{"location":"modules/versioning/docker/#identifier","title":"Identifier","text":"<p><code>docker</code> </p>"},{"location":"modules/versioning/docker/#references","title":"References","text":"<ul> <li>https://docs.docker.com/engine/reference/commandline/tag/</li> </ul>"},{"location":"modules/versioning/docker/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/docker/#description","title":"Description","text":"<p>Docker images don't really have versions, instead they have \"tags\". Tags are often used by Docker image authors as a form of versioning.</p> <p>Renovate tries to follow the most common conventions that are used to tag Docker images. In particular, Renovate treats the text after the first hyphen as a type of platform/compatibility indicator.</p> <p>For example, many images have releases with the <code>-alpine</code> suffix. The official <code>node</code> Docker image has tags like <code>12.15.0-alpine</code> which is not compatible with <code>12.15.0</code> or <code>12.15.0-stretch</code>. Users on <code>-alpine</code> don't want updates to <code>12.16.0</code> or <code>12.16.0-stretch</code>. Those users only want upgrades to <code>12.16.0-alpine</code> and not <code>12.16.0</code> or <code>12.16.0-stretch</code>.</p> <p>Similarly, a user on <code>12.14</code> expects to be upgraded to <code>12.15</code> and not <code>12.15.0</code>.</p> <p>What type of versioning is used?</p> <p>Docker image authors can use whatever tag they want, it's a \"wild west\". Docker tags don't always follow SemVer. This means that Renovate tries to accept and sort SemVer-like versions, but this won't always work.</p> <p>You may need to help Renovate and create your own rules for some Docker images. For example:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"badly-versioned-docker-image\"],\n      \"versioning\": \"loose\"\n    }\n  ]\n}\n</code></pre> <p>Are ranges supported?</p> <p>No. You may think a tag like <code>12.15</code> also means <code>12.15.x</code>, but it's a tag of its own. The <code>12.15</code> tag may or may not point to any of the available <code>12.15.x</code> tags, including <code>12.15.0</code>.</p> <p>Are commit hashes supported?</p> <p>No, Renovate ignores Docker image tags that look like a Git commit hash.</p>"},{"location":"modules/versioning/git/","title":"git Versioning","text":""},{"location":"modules/versioning/git/#identifier","title":"Identifier","text":"<p><code>git</code> </p>"},{"location":"modules/versioning/git/#references","title":"References","text":"<ul> <li>https://git-scm.com/</li> </ul>"},{"location":"modules/versioning/git/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/git/#description","title":"Description","text":"<p>Renovate's Git versioning is a kind of hack to support Git submodule updating.</p>"},{"location":"modules/versioning/glasskube/","title":"glasskube Versioning","text":""},{"location":"modules/versioning/glasskube/#identifier","title":"Identifier","text":"<p><code>glasskube</code> </p>"},{"location":"modules/versioning/glasskube/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/go-mod-directive/","title":"Go Modules Directive Versioning","text":""},{"location":"modules/versioning/go-mod-directive/#identifier","title":"Identifier","text":"<p><code>go-mod-directive</code> </p>"},{"location":"modules/versioning/go-mod-directive/#references","title":"References","text":"<ul> <li>https://go.dev/ref/mod</li> </ul>"},{"location":"modules/versioning/go-mod-directive/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>replace</code></p>"},{"location":"modules/versioning/go-mod-directive/#description","title":"Description","text":"<p>This versioning is used exclusively for the <code>go</code> directive in <code>go.mod</code> files.</p> <p>It ensures that a value like <code>1.16</code> is treated like <code>^1.16</code> and not <code>~1.16</code>.</p> <p>By default this will mean that the <code>go</code> directive in <code>go.mod</code> files won't get upgraded to any new Go version, such as <code>1.19</code>. If you wish to upgrade this value every time there's a new minor Go release, configure <code>rangeStrategy</code> to be <code>\"bump\"</code> like so:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"golang-version\"],\n      \"rangeStrategy\": \"bump\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/versioning/gradle/","title":"Gradle Versioning","text":""},{"location":"modules/versioning/gradle/#identifier","title":"Identifier","text":"<p><code>gradle</code> </p>"},{"location":"modules/versioning/gradle/#references","title":"References","text":"<ul> <li>https://docs.gradle.org/current/userguide/single_versions.html#version_ordering</li> </ul>"},{"location":"modules/versioning/gradle/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code>, <code>bump</code></p>"},{"location":"modules/versioning/hashicorp/","title":"Hashicorp Versioning","text":""},{"location":"modules/versioning/hashicorp/#identifier","title":"Identifier","text":"<p><code>hashicorp</code> </p>"},{"location":"modules/versioning/hashicorp/#references","title":"References","text":"<ul> <li>https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version</li> </ul>"},{"location":"modules/versioning/hashicorp/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/hashicorp/#description","title":"Description","text":"<p>Hashicorp versioning syntax is used for Terraform.</p> <p>It is based off Semantic Versioning 2.0 but with a subset of npm's range syntax.</p>"},{"location":"modules/versioning/helm/","title":"helm Versioning","text":""},{"location":"modules/versioning/helm/#identifier","title":"Identifier","text":"<p><code>helm</code> </p>"},{"location":"modules/versioning/helm/#references","title":"References","text":"<ul> <li>https://semver.org/</li> <li>https://helm.sh/docs/chart_best_practices/dependencies/#versions</li> <li>https://github.com/Masterminds/semver#basic-comparisons</li> </ul>"},{"location":"modules/versioning/helm/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code>, <code>widen</code></p>"},{"location":"modules/versioning/hermit/","title":"Hermit Versioning","text":""},{"location":"modules/versioning/hermit/#identifier","title":"Identifier","text":"<p><code>hermit</code> </p>"},{"location":"modules/versioning/hermit/#references","title":"References","text":"<ul> <li>https://cashapp.github.io/hermit/packaging/reference/#versions</li> </ul>"},{"location":"modules/versioning/hermit/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/hermit/#description","title":"Description","text":"<p>Hermit versioning is a mix of <code>version</code> and <code>channel</code>.</p> <p>Version</p> <p>Hermit's package version comes from the package's original Git tag. The version is an extension to SemVer, with an extra build number to accommodate package versions from OpenJDK, which has a value <code>15.0.1_9</code>.</p> <p>Channel</p> <p>Channel could be Hermit-generated or user-defined. Channel is considered unstable version and normally won't upgrade. If you would like to get out of Channel, you could replace the Channel with a given version number and let Renovate manage it.</p>"},{"location":"modules/versioning/hex/","title":"Hex Versioning","text":""},{"location":"modules/versioning/hex/#identifier","title":"Identifier","text":"<p><code>hex</code> </p>"},{"location":"modules/versioning/hex/#references","title":"References","text":"<ul> <li>https://hexdocs.pm/elixir/Version.html</li> </ul>"},{"location":"modules/versioning/hex/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code>, <code>update-lockfile</code></p>"},{"location":"modules/versioning/hex/#description","title":"Description","text":"<p>Hex versioning syntax is used for Elixir, Erlang and Gleam hex dependencies. It is based on Semantic Versioning 2.0 and supports a subset of npm's range syntax.</p>"},{"location":"modules/versioning/ivy/","title":"Ivy Versioning","text":""},{"location":"modules/versioning/ivy/#identifier","title":"Identifier","text":"<p><code>ivy</code> </p>"},{"location":"modules/versioning/ivy/#references","title":"References","text":"<ul> <li>https://ant.apache.org/ivy/</li> </ul>"},{"location":"modules/versioning/ivy/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/kubernetes-api/","title":"Kubernetes API Versioning","text":""},{"location":"modules/versioning/kubernetes-api/#identifier","title":"Identifier","text":"<p><code>kubernetes-api</code> </p>"},{"location":"modules/versioning/kubernetes-api/#references","title":"References","text":"<ul> <li>https://kubernetes.io/docs/reference/using-api/#api-versioning</li> </ul>"},{"location":"modules/versioning/kubernetes-api/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/lambda-node/","title":"Lambda Node.js Runtime Versioning","text":""},{"location":"modules/versioning/lambda-node/#identifier","title":"Identifier","text":"<p><code>lambda-node</code> </p>"},{"location":"modules/versioning/lambda-node/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/lambda-node/#description","title":"Description","text":"<p>Renovate's Lambda Node.js versioning is a wrapper around the existing Node.js Versioning module with the only difference being that it lists versions not currently supported by AWS as being unstable. This is intended to be a drop-in replacement for dependencies that follow the <code>node</code> versioning schedule if you need to keep them in line with Lambda Runtime releases.</p> <p>Its primary purpose is to add Node Runtime support awareness, e.g.:</p> <ul> <li>Old Runtimes that cannot be updated will be marked as unstable</li> <li>Node.js LTS releases that do not have Runtimes released for them will be marked as unstable</li> </ul> <p>You can not use <code>lambda-node</code> versioning to replace <code>docker</code> versioning if you are using node tags with suffixes like <code>-alpine</code>. This is because npm versioning treats these suffixes as implying pre-releases/instability.</p>"},{"location":"modules/versioning/loose/","title":"Loose Versioning","text":""},{"location":"modules/versioning/loose/#identifier","title":"Identifier","text":"<p><code>loose</code> </p>"},{"location":"modules/versioning/loose/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/loose/#description","title":"Description","text":"<p>Renovate's \"loose\" versioning was created for cases where no strict versioning is in place. It works like SemVer if SemVer-compliant versions are supplied, but otherwise is \"best effort\". Essentially \"loose\" versioning does its best to sort versions and ignores \"unsortable\" versions.</p>"},{"location":"modules/versioning/maven/","title":"Maven Versioning","text":""},{"location":"modules/versioning/maven/#identifier","title":"Identifier","text":"<p><code>maven</code> </p>"},{"location":"modules/versioning/maven/#references","title":"References","text":"<ul> <li>https://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification</li> <li>https://octopus.com/blog/maven-versioning-explained</li> <li>https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html</li> </ul>"},{"location":"modules/versioning/maven/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/maven/#description","title":"Description","text":"<p>Maven versioning is similar to SemVer but also very different in places. It's specified by Maven itself.</p> <p>Ranges are supported using Maven's special syntax.</p> <p>For development purposes, download maven-artifact JAR and run:</p> <pre><code>$ java -jar maven-artifact-*.jar 3.2.4-alpha-1 3.2.4-SNAPSHOT 3.2.4.0\nDisplay parameters as parsed by Maven (in canonical form) and comparison result:\n1. 3.2.4-alpha-1 == 3.2.4.alpha.1\n   3.2.4-alpha-1 &lt; 3.2.4-SNAPSHOT\n2. 3.2.4-SNAPSHOT == 3.2.4.snapshot\n   3.2.4-SNAPSHOT &lt; 3.2.4.0\n3. 3.2.4.0 == 3.2.4\n</code></pre>"},{"location":"modules/versioning/nixpkgs/","title":"Nixpkgs Versioning","text":""},{"location":"modules/versioning/nixpkgs/#identifier","title":"Identifier","text":"<p><code>nixpkgs</code> </p>"},{"location":"modules/versioning/nixpkgs/#references","title":"References","text":"<ul> <li>https://github.com/NixOS/nixpkgs</li> </ul>"},{"location":"modules/versioning/nixpkgs/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/nixpkgs/#description","title":"Description","text":"<p>Nixpkgs versioning is designed to be used with the nix manager.</p> <p>NixOS releases follow the <code>YY.MM</code> pattern. There are also some prefixes and suffixes allowed. Using <code>22.05</code> as an example the allowed combination of prefixes and suffixes are:</p> <ul> <li><code>release-22.05</code></li> <li><code>nixos-22.05</code></li> <li><code>nixos-22.05-small</code></li> <li><code>nixos-22.05-aarch64</code></li> <li><code>nixpkgs-22.05-darwin</code></li> </ul> <p>Additionally, there are some floating versions:</p> <ul> <li><code>nixos-unstable</code></li> <li><code>nixos-unstable-small</code></li> <li><code>nixpkgs-unstable</code></li> </ul>"},{"location":"modules/versioning/node/","title":"Node.js Versioning","text":""},{"location":"modules/versioning/node/#identifier","title":"Identifier","text":"<p><code>node</code> </p>"},{"location":"modules/versioning/node/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/node/#description","title":"Description","text":"<p>Renovate's Node.js versioning is a wrapper around npm versioning. But Renovate removes any <code>v</code> prefixes from semantic versions when replacing.</p> <p>Its primary purpose is to add Node.js LTS awareness, e.g.:</p> <ul> <li>Odd releases are unstable</li> <li>Even releases do not reach stability (LTS) immediately</li> </ul> <p>You can not use <code>node</code> versioning to replace <code>docker</code> versioning if you are using node tags with suffixes like <code>-alpine</code>. This is because npm versioning treats these suffixes as implying pre-releases/instability.</p>"},{"location":"modules/versioning/npm/","title":"npm Versioning","text":""},{"location":"modules/versioning/npm/#identifier","title":"Identifier","text":"<p><code>npm</code> </p>"},{"location":"modules/versioning/npm/#references","title":"References","text":"<ul> <li>https://semver.org/</li> <li>https://www.npmjs.com/package/semver</li> <li>https://docs.npmjs.com/about-semantic-versioning</li> <li>https://semver.npmjs.com/</li> </ul>"},{"location":"modules/versioning/npm/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/npm/#description","title":"Description","text":"<p>npm versioning is the most well known/widely-used implementation of Semantic Versioning 2.0.</p> <p>It's important to understand that \"npm\" versioning scheme is not the same as \"semver\" versioning. SemVer's spec does not define ranges at all - so all range/constraint syntax in npm is npm-specific and not part of the spec.</p>"},{"location":"modules/versioning/nuget/","title":"NuGet Versioning","text":""},{"location":"modules/versioning/nuget/#identifier","title":"Identifier","text":"<p><code>nuget</code> </p>"},{"location":"modules/versioning/nuget/#references","title":"References","text":"<ul> <li>https://learn.microsoft.com/nuget/concepts/package-versioning</li> <li>https://nugettools.azurewebsites.net/</li> </ul>"},{"location":"modules/versioning/nuget/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code>, <code>bump</code></p>"},{"location":"modules/versioning/nuget/#description","title":"Description","text":"<p>NuGet versioning matches as closely as possible to the version comparison that NuGet itself uses.</p>"},{"location":"modules/versioning/pep440/","title":"PEP440 Versioning","text":""},{"location":"modules/versioning/pep440/#identifier","title":"Identifier","text":"<p><code>pep440</code> </p>"},{"location":"modules/versioning/pep440/#references","title":"References","text":"<ul> <li>https://www.python.org/dev/peps/pep-0440/</li> </ul>"},{"location":"modules/versioning/pep440/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/pep440/#description","title":"Description","text":"<p>PEP 440 is defined as part of the Python project, and its versioning is independent of others such as SemVer.</p> <p>Ranges are supported using the syntax defined as part of the PEP440 spec.</p>"},{"location":"modules/versioning/perl/","title":"Perl Versioning","text":""},{"location":"modules/versioning/perl/#identifier","title":"Identifier","text":"<p><code>perl</code> </p>"},{"location":"modules/versioning/perl/#references","title":"References","text":"<ul> <li>https://metacpan.org/pod/version</li> </ul>"},{"location":"modules/versioning/perl/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/perl/#description","title":"Description","text":"<p>Perl versioning is based on Perl's <code>version</code> module.</p> <p>This could be used in combination with the <code>regex</code> manager and the <code>cpan</code> datasource.</p>"},{"location":"modules/versioning/poetry/","title":"Poetry Versioning","text":""},{"location":"modules/versioning/poetry/#identifier","title":"Identifier","text":"<p><code>poetry</code> </p>"},{"location":"modules/versioning/poetry/#references","title":"References","text":"<ul> <li>https://python-poetry.org/docs/dependency-specification/</li> <li>https://python-poetry.org/docs/faq#why-does-poetry-not-adhere-to-semantic-versioning</li> <li>https://python-poetry.org/docs/faq#why-does-poetry-enforce-pep-440-versions</li> </ul>"},{"location":"modules/versioning/poetry/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/poetry/#description","title":"Description","text":"<p>Poetry versioning is a little like a mix of PEP440 and SemVer.</p> <p>Currently Renovate's implementation is based off npm versioning. This works by parsing versions using the same patterns and similar normalization rules as Poetry, passing them to the npm versioning implementation, and then reversing the normalizations. This allows Renovate to meaningfully compare the SemVer-style versions allowed in <code>pyproject.toml</code> to the PEP440 representations used on PyPI. These are equivalent for major.minor.patch releases, but different for pre-, post-, and dev releases.</p>"},{"location":"modules/versioning/pvp/","title":"Package Versioning Policy (Haskell) Versioning","text":""},{"location":"modules/versioning/pvp/#identifier","title":"Identifier","text":"<p><code>pvp</code> </p>"},{"location":"modules/versioning/pvp/#references","title":"References","text":"<ul> <li>https://pvp.haskell.org</li> </ul>"},{"location":"modules/versioning/pvp/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>widen</code></p>"},{"location":"modules/versioning/pvp/#description","title":"Description","text":"<p>Package Versioning Policy is used with Haskell. It's like semver, except that the first two parts are of the major version. That is, in <code>A.B.C</code>:</p> <ul> <li><code>A.B</code>: major version</li> <li><code>C</code>: minor</li> </ul> <p>The remaining parts are all considered of the patch version, and they will be concatenated to form a <code>number</code>, i.e. IEEE 754 double. This means that both <code>0.0.0.0.1</code> and <code>0.0.0.0.10</code> have patch version <code>0.1</code>.</p> <p>The range syntax comes from Cabal, specifically the build-depends section.</p> <p>This module is considered experimental since it only supports ranges of forms:</p> <ul> <li><code>&gt;=W.X &amp;&amp; &lt;Y.Z</code></li> <li><code>&lt;Y.Z &amp;&amp; &gt;=W.X</code></li> </ul>"},{"location":"modules/versioning/python/","title":"Python Versioning","text":""},{"location":"modules/versioning/python/#identifier","title":"Identifier","text":"<p><code>python</code> </p>"},{"location":"modules/versioning/python/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/python/#description","title":"Description","text":"<p>Python versioning is a little like a mix of PEP440 and Poetry SemVer.</p>"},{"location":"modules/versioning/redhat/","title":"Red Hat Versioning","text":""},{"location":"modules/versioning/redhat/#identifier","title":"Identifier","text":"<p><code>redhat</code> </p>"},{"location":"modules/versioning/redhat/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/redhat/#description","title":"Description","text":"<p>Red Hat versioning is used with container images that are maintained by Red Hat.</p> <p>Red Hat version definitions follow this pattern:</p> <ul> <li>the version of the main component, where major is required, but minor and patch are optional</li> <li>optionally a hyphen followed by release information</li> <li>the version of Red Hat's release as an integer, optionally followed by a timestamp like: <code>1645808164</code></li> <li>optionally a \"v\"-prefix</li> </ul> <p>Examples of valid Red Hat versions:</p> <ul> <li><code>1</code></li> <li><code>8.5</code></li> <li><code>7.9-628</code></li> <li><code>v0.4.0-383</code></li> <li><code>9.0.0-19.1655192132</code></li> </ul> <p>Ranges are not supported by this versioning.</p>"},{"location":"modules/versioning/regex/","title":"Regular Expression Versioning","text":""},{"location":"modules/versioning/regex/#identifier","title":"Identifier","text":"<p><code>regex</code> </p>"},{"location":"modules/versioning/regex/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/regex/#description","title":"Description","text":"<p>Regular Expression Versioning is designed to be a flexible fallback versioning approach if Renovate's other versioning schemes don't do the job.</p> <p>The <code>regex</code> scheme makes use of Regular Expression capture groups.</p> <p>The valid capture groups for <code>regex</code> versioning are:</p> <ul> <li><code>major</code>, <code>minor</code>, and <code>patch</code>: at least one of these must be provided. When determining whether a package has updates, these values will be compared in the standard semantic versioning fashion. If any of these fields are omitted, they will be treated as if they were <code>0</code> -- in this way, you can describe versioning schemes with up to three incrementing values.</li> <li><code>build</code>: this capture group can be used after you've already used the <code>major</code>, <code>minor</code> and <code>patch</code> capture groups and need a fourth version part. <code>build</code> updates are handled like <code>patch</code> updates.</li> <li><code>revision</code>: this capture group can be used after you've already used the <code>build</code> capture groups and need a fifth version part. <code>revision</code> updates are handled like <code>patch</code> updates.</li> <li><code>prerelease</code>: this value, if captured, will mark a given release as a prerelease (e.g. unstable). If this value is captured and you have configured <code>\"ignoreUnstable\": true</code>, the given release will be skipped.</li> <li><code>compatibility</code>: this value defines the \"build compatibility\" of a given dependency. A proposed Renovate update will never change the specified compatibility value. For example, if you are pinning to <code>1.2.3-linux</code> (and <code>linux</code> is captured as the compatibility value), Renovate will not update you to <code>1.2.4-osx</code>.</li> </ul> <p>The compatibility concept was originally introduced for Docker versioning but sometimes package authors may use/misuse suffixes to mean compatibility in other versioning schemes.</p> <p>Important: all capture groups must contain only purely numeric values. Even if there is a string prefix which is identical in all available versions, it must not be part of the capture group. For example a <code>build</code> capture group containing <code>r4</code> cannot be evaluated as number; Renovate cannot compare the <code>build</code> in this case. The capture group must be <code>4</code> instead.</p> <p>Here is an example of using <code>regex</code> versioning to correct behavior of the <code>guava</code> Maven package, which misuses suffixes as compatibility indicators:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"com.google.guava:guava\"],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?(-(?&lt;compatibility&gt;.*))?$\"\n    }\n  ]\n}\n</code></pre> <p>Here is another example, this time for handling <code>python</code> Docker images, which use both pre-release indicators as well as version suffixes for compatibility:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"python\"],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?&lt;prerelease&gt;[^.-]+)?(-(?&lt;compatibility&gt;.*))?$\"\n    }\n  ]\n}\n</code></pre> <p>Here is another example, this time for handling Bitnami Docker images, which use <code>build</code> and <code>revision</code> indicators as well as version suffixes for compatibility:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"bitnami/**\", \"docker.io/bitnami/**\"],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?:-(?&lt;compatibility&gt;.+)(?&lt;build&gt;\\\\d+)-r(?&lt;revision&gt;\\\\d+))?$\"\n    }\n  ]\n}\n</code></pre> <p>Here is another example, this time for handling <code>ghcr.io/linuxserver/tautulli</code> Docker images, which use <code>major</code> and <code>build</code> indicators with string prefixes:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"ghcr.io/linuxserver/tautulli\"],\n      \"versioning\": \"regex:^v(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)-ls(?&lt;build&gt;.+)$\"\n    }\n  ]\n}\n</code></pre> <p>Here is another example, this time for handling <code>ghcr.io/linuxserver/openssh-server</code> Docker images, which use <code>patch</code>, <code>build</code> and <code>revision</code> indicators with string prefixes:</p> <pre><code>{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"ghcr.io/linuxserver/openssh-server\"],\n      \"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)_p(?&lt;patch&gt;\\\\d+)-r(?&lt;build&gt;\\\\d)-ls(?&lt;revision&gt;.+)$\"\n    }\n  ]\n}\n</code></pre>"},{"location":"modules/versioning/rez/","title":"rez Versioning","text":""},{"location":"modules/versioning/rez/#identifier","title":"Identifier","text":"<p><code>rez</code> </p>"},{"location":"modules/versioning/rez/#references","title":"References","text":"<ul> <li>https://github.com/nerdvegas/rez</li> </ul>"},{"location":"modules/versioning/rez/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/rez/#description","title":"Description","text":"<p>rez versioning was developed to support the rez Package Manager. It's based on Semantic Versioning but includes its own concept of ranges.</p> <p>Use of dots</p> <p>A range is expressed with dots <code>1.2..2</code> means <code>&gt;=1.2.x &lt;2.0.0</code>.</p> <p>No exact versions unless using two equals ==</p> <p>In rez, <code>1.2.3</code> doesn't mean \"exactly 1.2.3\", it actually means <code>&gt;= 1.2.3 &lt;1.2.4</code>. If you want to use an exact version use two equal characters, like this: <code>==1.2.3</code>.</p> <p>Use of pipes</p> <p>rez uses pipes as an OR operator, <code>2.7..3|4</code> means <code>&gt;=2.7 &lt;3 OR 4.x.x</code>.</p> <p>This has not been implemented yet. The current iteration of rez versioning does not support pipes yet.</p>"},{"location":"modules/versioning/rpm/","title":"RPM version Versioning","text":""},{"location":"modules/versioning/rpm/#identifier","title":"Identifier","text":"<p><code>rpm</code> </p>"},{"location":"modules/versioning/rpm/#references","title":"References","text":"<ul> <li>https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/</li> <li>https://fedoraproject.org/wiki/Package_Versioning_Examples</li> <li>https://fedoraproject.org/wiki/User:Tibbs/TildeCaretVersioning</li> </ul>"},{"location":"modules/versioning/rpm/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/ruby/","title":"Ruby Versioning","text":""},{"location":"modules/versioning/ruby/#identifier","title":"Identifier","text":"<p><code>ruby</code> </p>"},{"location":"modules/versioning/ruby/#references","title":"References","text":"<ul> <li>https://guides.rubygems.org/patterns/</li> <li>https://bundler.io/guides/gemfile.html</li> <li>https://www.devalot.com/articles/2012/04/gem-versions.html</li> </ul>"},{"location":"modules/versioning/ruby/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/ruby/#description","title":"Description","text":"<p>The RubyGems team urges gem developers to follow the Semantic Versioning standard for their gem\u2019s versions, but it is not enforced.</p> <p>Range syntax is similar to npm's but not identical. The main difference is the use of \"pessimistic\" greater than or equals: <code>~&gt;</code></p>"},{"location":"modules/versioning/same-major/","title":"Same Major Versioning Versioning","text":""},{"location":"modules/versioning/same-major/#identifier","title":"Identifier","text":"<p><code>same-major</code> </p>"},{"location":"modules/versioning/same-major/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/same-major/#description","title":"Description","text":"<p>The 'Same Major' versioning is designed to handle the case where a version needs to treated as a \"greater than or equal to\" constraint. Specifically, the case where the version say, <code>X.Y.Z</code> signifies a range of compatibility from greater than or equal to <code>X.Y.Z</code> to less than <code>X+1</code>.</p> <p>This process uses Semver-Coerced versioning beneath the surface, single versions (e.g., <code>X.Y.Z</code>) are converted to a range like <code>X+1</code> and then passed to the corresponding semver-coerced method.</p> <p>This method is handy when managing dependencies like dotnet-sdk's rollForward settings. Let's say a project uses dotnet-sdk version <code>3.1.0</code>. It needs to be compatible with any version in the <code>3.x.x</code> range but not with versions in the next major version, like <code>4.x.x</code>.</p> <p>For example:</p> <pre><code>{\n  \"sdk\": {\n    \"version\": \"6.0.300\",\n    \"rollForward\": \"major\"\n  }\n}\n</code></pre> <p>The roll-forward policy to use when selecting an SDK version, either as a fallback when a specific SDK version is missing or as a directive to use a higher version. In this case with <code>major</code> it means that select the latest version with the same major. ie. <code>&gt;= 6.0.300 &lt; 7.0.0</code></p> <p>For such cases, the users would not want Renovate to create an update PR for any version within the range <code>&gt;= 6.0.300 &lt; 7.0.0</code> as it would not change the behaviour on their end, since it is handled by the manager already.</p> <p>Note: You should create a discussion before using this versioning as this is an experimental support and might have some edge cases unhandled.</p>"},{"location":"modules/versioning/semver/","title":"Semantic Versioning","text":""},{"location":"modules/versioning/semver/#identifier","title":"Identifier","text":"<p><code>semver</code> </p>"},{"location":"modules/versioning/semver/#references","title":"References","text":"<ul> <li>https://semver.org/</li> </ul>"},{"location":"modules/versioning/semver/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/semver/#description","title":"Description","text":"<p>Renovate's <code>semver</code> versioning strictly implements the Semantic Versioning 2.0 specification. Because the SemVer 2.0 specification does not allow ranges, Renovate's <code>semver</code> versioning also does not support ranges.</p> <p>Only use the <code>semver</code> versioning when you mean to follow the full SemVer 2.0 specifications strictly. If you need a more forgiving variant use <code>semver-coerced</code>.</p>"},{"location":"modules/versioning/semver-coerced/","title":"Coerced Semantic Versioning Versioning","text":""},{"location":"modules/versioning/semver-coerced/#identifier","title":"Identifier","text":"<p><code>semver-coerced</code> </p>"},{"location":"modules/versioning/semver-coerced/#references","title":"References","text":"<ul> <li>https://semver.org/</li> </ul>"},{"location":"modules/versioning/semver-coerced/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/semver-coerced/#description","title":"Description","text":"<p>Renovate's Coerced Semantic Versioning is a forgiving variant of Semantic Versioning 2.0 with coercion enabled for versions.</p> <p>This versioning provides a very forgiving translation of inputs in non-strict-SemVer format into strict SemVer. For example, \"v1\" is coerced into \"1.0.0\", \"2.1\" =&gt; \"2.1.0\", \"~3.1\" =&gt; \"3.1.0\", \"1.1-foo\" =&gt; \"1.1.0\". Look at the Coercion section of this page for more info on input coercion.</p> <p>Since this versioning is very forgiving, it doesn't actually provide the coercion for version ranges. The range functions only accept strict SemVer as input and equivalent to those provided by the Renovate's semver versioning.</p>"},{"location":"modules/versioning/semver-partial/","title":"Partial Semantic Versioning Versioning","text":""},{"location":"modules/versioning/semver-partial/#identifier","title":"Identifier","text":"<p><code>semver-partial</code> </p>"},{"location":"modules/versioning/semver-partial/#references","title":"References","text":"<ul> <li>https://docs.gitlab.com/ci/components/#partial-semantic-versions</li> </ul>"},{"location":"modules/versioning/semver-partial/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/semver-partial/#description","title":"Description","text":"<p>Renovate's Partial Semantic Versioning supports partial version numbers that resolve to the latest matching full version, following Semantic Versioning 2.0 conventions.</p> <p>This versioning is used by GitLab CI/CD Components to allow specifying incomplete version numbers that automatically resolve to the latest version matching that pattern. This enables you to receive updates within a specific version range without specifying the full version.</p> <p>Version Resolution:</p> <ul> <li><code>1.2</code> \u2192 Selects the latest <code>1.2.*</code> version</li> <li><code>1</code> \u2192 Selects the latest <code>1.*.*</code> version</li> <li><code>~latest</code> \u2192 Selects the latest released version</li> </ul> <p>Example:</p> <p>Given available versions: <code>1.0.0</code>, <code>1.1.0</code>, <code>1.1.1</code>, <code>1.2.0</code>, <code>2.0.0</code>, <code>2.0.1</code>, <code>2.1.0</code>:</p> <ul> <li><code>1</code> resolves to <code>1.2.0</code></li> <li><code>1.1</code> resolves to <code>1.1.1</code></li> <li><code>~latest</code> resolves to <code>2.1.0</code></li> </ul> <p>Pre-release Handling:</p> <p>Pre-release versions (e.g., <code>1.0.1-rc</code>, <code>2.0.0-beta</code>) are not selected by partial versions. You must specify the full version to match a pre-release.</p>"},{"location":"modules/versioning/swift/","title":"Swift Versioning","text":""},{"location":"modules/versioning/swift/#identifier","title":"Identifier","text":"<p><code>swift</code> </p>"},{"location":"modules/versioning/swift/#references","title":"References","text":"<ul> <li>https://swift.org/package-manager/</li> </ul>"},{"location":"modules/versioning/swift/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/swift/#description","title":"Description","text":"<p>Swift versioning was developed to support the Swift Package Manager. It's based on Semantic versioning but includes its own concept of ranges.</p>"},{"location":"modules/versioning/ubuntu/","title":"Ubuntu Versioning","text":""},{"location":"modules/versioning/ubuntu/#identifier","title":"Identifier","text":"<p><code>ubuntu</code> </p>"},{"location":"modules/versioning/ubuntu/#references","title":"References","text":"<ul> <li>https://changelogs.ubuntu.com/meta-release</li> <li>https://debian.pages.debian.net/distro-info-data/ubuntu.csv</li> </ul>"},{"location":"modules/versioning/ubuntu/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/ubuntu/#description","title":"Description","text":"<p>Ubuntu versioning is used for Ubuntu container images that are referenced by their release version or a codename.</p> <p>Versions to which this scheme applies are e.g. <code>24.04</code>, <code>noble</code> and <code>noble-20240423</code>.</p>"},{"location":"modules/versioning/unity3d/","title":"Unity3D Versioning","text":""},{"location":"modules/versioning/unity3d/#identifier","title":"Identifier","text":"<p><code>unity3d</code> </p>"},{"location":"modules/versioning/unity3d/#references","title":"References","text":"<ul> <li>https://docs.unity3d.com/Manual/assembly-definition-includes.html#version-define-expressions</li> </ul>"},{"location":"modules/versioning/unity3d/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/unity3d/#description","title":"Description","text":"<p>Unity versioning follow semantic versioning, followed by a letter, number and an optional hash:</p> <ul> <li>Major version is the year of release</li> <li>Minor and patch version are incremental, starting at 0</li> <li>The letter denotes a stream (alpha, beta, final release, etc.)</li> <li>The number is a growing index</li> <li>The hash is calculated by Unity internally and irrelevant for comparison</li> </ul> <p>Examples:</p> <ul> <li><code>2023.2.10f1 (316c1fd686f6)</code></li> <li><code>2023.3.0a17</code></li> <li><code>2023.3.0b4 (2cd31b2a2ee2)</code></li> </ul>"},{"location":"modules/versioning/unity3d-packages/","title":"Unity3D Packages Versioning","text":""},{"location":"modules/versioning/unity3d-packages/#identifier","title":"Identifier","text":"<p><code>unity3d-packages</code> </p>"},{"location":"modules/versioning/unity3d-packages/#references","title":"References","text":"<ul> <li>https://docs.unity3d.com/Manual/upm-semver.html</li> <li>https://docs.unity3d.com/Manual/upm-lifecycle.html</li> </ul>"},{"location":"modules/versioning/unity3d-packages/#rangesconstraints","title":"Ranges/Constraints","text":"<p>\u274c No range support.</p>"},{"location":"modules/versioning/unity3d-packages/#description","title":"Description","text":"<p>Unity versioning follow semantic versioning, followed optionally by <code>-exp.#</code> or <code>-pre.#</code>: https://docs.unity3d.com/Manual/upm-lifecycle.html</p> <p>Examples:</p> <ul> <li><code>0.1.2</code></li> <li><code>1.2.3-exp.1</code></li> <li><code>1.3.0-pre.1</code></li> <li><code>1.4.0-preview.1</code></li> </ul>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/","title":"Maintaining AUR packages with Renovate","text":""},{"location":"user-stories/maintaining-aur-packages-with-renovate/#maintaining-aur-packages-with-renovate","title":"Maintaining AUR packages with Renovate","text":"<p>This article was written by Jamie Magee and originally published on Jamie Magee's blog.</p> <p>Note</p> <p>Jamie Magee helps to maintain Renovate. They obviously like Renovate, and want you to use it.</p> <p>One big advantage that Arch Linux has over other distributions, apart from being able to say \u201cBTW I use Arch.\u201d, is the Arch User Repository (AUR). It\u2019s a community-driven repository with over 80,000 packages. If you\u2019re looking for a package, chances are you'll find it in the AUR.</p> <p>Keeping all those packages up to date, takes a lot of manual effort by a lot of volunteers. People have created and used tools, like <code>urlwatch</code> and <code>aurpublish</code>, to let them know when upstream releases are cut and automate some parts of the process. I know I do. But I wanted to automate the entire process. I think Renovate can help here.</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#updating-versions-with-renovate","title":"Updating versions with Renovate","text":"<p>Renovate is an automated dependency update tool. You might have seen it opening pull requests on GitHub and making updates for npm or other package managers, but it\u2019s a lot more powerful than just that.</p> <p>Renovate has a couple of concepts that I need to explain first: datasources and managers. Datasources define where to look for new versions of a dependency. Renovate comes with over 50 different datasources, but the one that is important for AUR packages is the <code>git-tags</code> datasource. Managers are the Renovate concept for package managers. There isn\u2019t an AUR or <code>PKGBUILD</code> manager, but there is a regex manager that I can use.</p> <p>I can create a <code>renovate.json</code> configuration with the following custom manager configuration:</p> renovate.json<pre><code>{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"managerFilePatterns\": [\"/(^|/)PKGBUILD$/\"],\n      \"matchStrings\": [\n        \"pkgver=(?&lt;currentValue&gt;.*) # renovate: datasource=(?&lt;datasource&gt;.*) depName=(?&lt;depName&gt;.*)\"\n      ],\n      \"extractVersionTemplate\": \"^v?(?&lt;version&gt;.*)$\"\n    }\n  ]\n}\n</code></pre> <p>Breaking that down:</p> <ul> <li>The <code>managerFilePatterns</code> setting tells Renovate to look for any <code>PKGBUILD</code> files in a repository</li> <li>The <code>matchStrings</code> is the regex format to extract the version, datasource, and dependency name from the <code>PKGBUILD</code></li> <li>The <code>extractVersionTemplate</code> is to handle a \u201cv\u201d in front of any version number that is sometimes added to Git tags</li> </ul> <p>And here\u2019s an extract from the PKGBUILD for the bicep-bin AUR package that I maintain:</p> <pre><code>pkgver=0.15.31 # renovate: datasource=github-tags depName=Azure/bicep\n</code></pre> <p>Here I\u2019m configuring Renovate to use the <code>github-tags</code> datasource and to look in the <code>Azure/bicep</code> GitHub repository for new versions. That means it\u2019ll look in the list of tags for the <code>Azure/bicep</code> repository for any new versions. If Renovate finds any new versions, it\u2019ll automatically update the <code>PKGBUILD</code> and open a pull request with the updated version.</p> <p>So I\u2019ve automated the <code>PKGBUILD</code> update, but that\u2019s only half of the work. The checksums and <code>.SRCINFO</code> must be updated before pushing to the AUR. Unfortunately, Renovate can\u2019t do that (yet, see Renovate issue #16923), but GitHub Actions can!</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#updating-checksums-and-srcinfo-with-github-actions","title":"Updating checksums and <code>.SRCINFO</code> with GitHub Actions","text":"<p>Updating the checksums with <code>updpkgsums</code> is easy, and generating an updated <code>.SRCINFO</code> with <code>makepkg --printsrcinfo &gt; .SRCINFO</code> is straightforward too. But doing that for a whole repository of AUR packages is going to be a little trickier. So let me build up the GitHub actions workflow step-by-step.</p> <p>First, I only want to run this workflow on pull requests targeting the <code>main</code> branch.</p> <pre><code>on:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - main\n</code></pre> <p>Next, I\u2019m going to need to check out the entire history of the repository, so I can compare the files changed in the latest commit with the Git history.</p> <pre><code>jobs:\n  updpkgsums:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }}\n</code></pre> <p>Getting the package that changed in a pull request requires a little bit of shell magic.</p> <pre><code>- name: Find updated package\n  run: |\n    #!/usr/bin/env bash\n    set -euxo pipefail\n\n    echo \"pkgbuild=$(git diff --name-only origin/main origin/${GITHUB_HEAD_REF} \"*PKGBUILD\" | head -1 | xargs dirname)\" &gt;&gt; $GITHUB_ENV\n</code></pre> <p>Now I\u2019ve found the package that changed in the Renovate pull request, I can update the files.</p> <p>This step in the workflow uses a private GitHub Action that I have in my <code>aur-packages</code> repository. I\u2019m not going to break it down here, but at its core it runs <code>updpkgsums</code> and <code>makepkg --printsrcinfo &gt; .SRCINFO</code> with a little extra configuration required to run Arch Linux on GitHub Actions runners. You can check out the full code on GitHub.</p> <pre><code>- name: Validate package\n  if: ${{ env.pkgbuild != '' }}\n  uses: ./.github/actions/aur\n  with:\n    action: 'updpkgsums'\n    pkgname: ${{ env.pkgbuild }}\n</code></pre> <p>Finally, once the <code>PKGBUILD</code> and <code>.SRCINFO</code> are updated I need to commit that change back to the pull request.</p> <pre><code>- name: Commit\n  if: ${{ env.pkgbuild != '' }}\n  uses: stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a # v4.16.0\n  with:\n    file_pattern: '*/PKGBUILD */.SRCINFO'\n</code></pre> <p>Check out this pull request for <code>bicep-bin</code> where Renovate opened a pull request, and my GitHub Actions workflow updated the <code>b2sums</code> in the <code>PKGBUILD</code> and updated the <code>.SRCINFO</code>.</p> <p>But why stop there? Let\u2019s talk about publishing.</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#publishing-to-the-aur","title":"Publishing to the AUR","text":"<p>Each AUR package is its own Git repository. So to update a package in the AUR, I only need to push a new commit with the updated <code>PKGBUILD</code> and <code>.SRCINFO</code>. Thankfully, KSXGitHub created the <code>github-actions-deploy-aur</code> GitHub Action to streamline the whole process.</p> <p>If I create a new GitHub Actions workflow to publish to the AUR, I can reuse the first two steps from my previous workflow to check out the repository and find the updated package. Then all I need to do is to use the <code>github-actions-deploy-aur</code> GitHub Action:</p> <pre><code>- name: Publish package\n  uses: KSXGitHub/github-actions-deploy-aur@065b6056b25bdd43830d5a3f01899d0ff7169819 # v2.6.0\n  if: ${{ env.pkgbuild != '' }}\n  with:\n    pkgname: ${{ env.pkgbuild }}\n    pkgbuild: ${{ env.pkgbuild }}/PKGBUILD\n    commit_username: ${{ secrets.AUR_USERNAME }}\n    commit_email: ${{ secrets.AUR_EMAIL }}\n    ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}\n</code></pre>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#all-together-now","title":"All together now","text":"<p>If you own any AUR packages and want to automate some of the maintenance burden, check out my AUR packages template GitHub repository. It contains all of the steps I showed in this blog post. And if you want to see how it works in practice, check out my AUR packages GitHub repository.</p>"},{"location":"user-stories/swissquote/","title":"Swissquote","text":""},{"location":"user-stories/swissquote/#how-swissquote-is-keeping-software-dependencies-up-to-date-with-renovate","title":"How Swissquote is keeping software dependencies up-to-date with Renovate","text":"<p>This article was originally published on Medium by St\u00e9phane Goetz, Principal Software Engineer at Swissquote Bank.</p> <p>Swissquote has more than 1000 distinct applications running in production. They come in many different flavors including services, daemons, and web apps, and their age can be counted from days to more than a decade. While there are many topics of interest when talking about software maintenance, today\u2019s topic is software dependencies. We\u2019ll see in this article why it\u2019s important to keep them up-to-date and why it\u2019s not as simple as one may think.</p> <p>Software dependencies have been a heavily discussed topic in the past months. One aspect that\u2019s discussed a lot is security issues like the recent Log4Shell, Supply chain attacks, an expiring SSL Certificate. But there are also other aspects like bugs caused by your dependencies.</p> <p>Depending on third-party software is a sword of Damocles; you never know when a new issue will force you to drop everything to upgrade your software.</p> <p> </p> XKCD comic 2347 is always relevant when talking about dependencies. <p>Each software dependency is a risk. For example: SQL Injections, is the ORM you are using properly escaping the content you are passing to it? Will your current driver be able to connect to your database if it gets upgraded? Every dependency, while solving an issue for you, will also bring new risks to your software. How can you mitigate those risks?</p> <p>If the title of the article is of any help, the idea would be to keep your dependencies up-to-date to fix bugs, security issues, and more.</p>"},{"location":"user-stories/swissquote/#i-dont-feel-like-upgrading-what-if","title":"I don\u2019t feel like upgrading, what if?","text":"<p>But what if the upgrades do the complete opposite? What if the new version introduces a new security issue?</p> <p>For example, a new version of a dependency could be victim of a supply chain attack. If you never update your dependencies, you won\u2019t get the infected version. Sounds fair, right?</p> <p>It\u2019s a valid argument, but your application doesn\u2019t exist in a vacuum; many external factors could force you to upgrade at some point, and when it happens it\u2019s usually at the wrong time.</p> <p>Let\u2019s go through some examples.</p>"},{"location":"user-stories/swissquote/#an-external-factor-has-changed-forcing-you-to-change-your-app","title":"An external factor has changed, forcing you to change your app","text":"<p>Let\u2019s say the machine your apps runs on is obsolete and you need to move to another machine. This could be as simple as \u201cinstall app on machine; done\u201d but usually ends up with:</p> <ol> <li>The newer OS version prevents you from installing an outdated runtime</li> <li>You need to find a compatible runtime for your new hardware</li> <li>Your app\u2019s dependencies aren\u2019t compatible with your new runtime, you need to update them as well</li> </ol> <p>Instead of a single change, you now have a combination of changes, each can go wrong in a different way.</p>"},{"location":"user-stories/swissquote/#a-new-vulnerability-is-found-on-a-library-you-depend-on","title":"A new vulnerability is found on a library you depend on","text":"<p>As we\u2019ve covered at the beginning of the article this can happen and can be an all-hands-on-deck kind of situation. Imagine a legacy application; continuous integration is constantly failing \u2014 or worse it may not even exist. How long do you think it will take to deploy that single library update?</p>"},{"location":"user-stories/swissquote/#the-team-already-has-too-many-dependencies-in-too-many-different-versions","title":"The team already has too many dependencies in too many different versions","text":"<p>That\u2019s unfortunate, but it will happen if your team or company exists for long enough. Upgrading libraries is not only about bumping versions, sometimes it\u2019s also about replacing a library by another library.</p>"},{"location":"user-stories/swissquote/#how-do-you-see-your-dependencies","title":"How do you see your dependencies?","text":"<p>Look at your software as if it was a train. You are the locomotive and each wagon is a dependency, how long would your train be? Locomotives can pull dozens, even hundreds of wagons, but they eventually reach a limit. The situation is the same for your brain, each dependency adds to your cognitive load, at some point it\u2019s just too much. You are using three different libraries for caching? There is a chance you need to know how each library works, and your present and future teammates might have to know that too.</p> <p>Which of these two would you prefer to start with:</p> <ul> <li>A project that is fairly up-to-date where you can bump the dependency, run the deployment pipeline and go back to your day</li> <li>A project that wasn\u2019t touched in years; every dependency is outdated and Continuous Integration is red on all branches, if running at all</li> </ul> <p>Am I exaggerating with my examples? Maybe a little, but I have seen cases very close to those.</p> <p>Let me ask you some questions about your projects:</p> <ul> <li>How many times did you create a project and never upgrade its dependencies?</li> <li>How many times did you have to get back to an old project, and had to use a new library but couldn\u2019t because there is another library at an old version that isn\u2019t compatible?</li> <li>How fast can you upgrade a single dependency on all your applications?</li> </ul> <p>As time goes forward, projects come and go, you will most likely have decade-old, and recent ones. Some might be using the latest version of Java with the latest Spring, some with slightly outdated libraries and others might be using Stripes and libraries that have had no release in 7 years.</p> <p>Every company that\u2019s been around for sometime has that old project still running. People talk about it laughingly but become livid when a request comes to change anything in it.</p> <p> </p> There is a fix to make on that project, the last person working on it left three years ago."},{"location":"user-stories/swissquote/#dependencies-at-swissquote","title":"Dependencies at Swissquote","text":"<p>I\u2019ve identified three main approaches people use to upgrade their dependencies at Swissquote:</p> <ol> <li>Critical fixes only; update dependencies that have a CVE attached</li> <li>Opportunistic; also known as the boy scout rule, leave the project with more up-to-date dependencies than you found it</li> <li>Update your dependencies regularly; manually or with a tool</li> </ol>"},{"location":"user-stories/swissquote/#critical-fixes-only","title":"Critical fixes only","text":"<p>Every once in a while, a library gets an update that fixes a vulnerability. Our security team is on the lookout for critical vulnerabilities and will quickly warn all impacted teams if an update needs to be done.</p> <p>We also configured GitHub\u2019s Dependabot Alerts that will inform teams that a vulnerability has been discovered and which version they should upgrade to to be safe (more on this later).</p> <p>This approach, while it mostly works, can be very risky. If the project hasn\u2019t been touched for quite a while, the number of dependencies to update can be high depending on the vulnerability and the time to update will increase significantly.</p>"},{"location":"user-stories/swissquote/#opportunistic","title":"Opportunistic","text":"<p>This rule is simple, when you receive a task on a project, the first step is to upgrade its dependencies. Once that is done, you can go ahead with the implementation of your task.</p> <p>This approach is similar to fixing a bit of tech debt with every business project you take on, it helps to stay ahead in case a vulnerability comes up and keep a baseline for all your projects.</p>"},{"location":"user-stories/swissquote/#update-your-dependencies-regularly","title":"Update your dependencies regularly","text":"<p>This one sounds easy, every few weeks you check what\u2019s outdated, bump the versions and run your CI. If it succeeds, you push the change. Maybe there is even a way to automate that?</p>"},{"location":"user-stories/swissquote/#lets-give-renovate-a-try","title":"Let's give Renovate a try","text":"<p>One day in November 2019, I discovered that Renovate provides a Docker image that you can run on-premise with your own package registries. The app creates Pull Requests automatically to inform you of dependencies updates and the CI can then build it automatically so you know if it\u2019s safe to merge or not.</p> <p>On our first try, we enabled 30 repositories, a cron task was running every hour to create Pull Requests.</p> <p>We received 700 Pull Requests in the first month, it was a never ending Pull Request whack-a-mole: every time we merged one, another replaced it.</p> <p> </p> Me and my team merging Pull Requests. <p>The awesome thing with Renovate is that it\u2019s very configurable, and this configuration can be shared. Very early on we created a shared configuration for our team with some custom policies, here are a few things we decided to do:</p> <ul> <li>Group PRs for <code>minor</code> and <code>patch</code> dependencies</li> <li>Internal dependencies could create a PR anytime of the day</li> <li>Third party dependencies could create PRs only during the weekend</li> </ul> <p>This helped a lot to reduce the noise in PRs, the second month we got 400 Pull Requests, and on the third month only 200.</p>"},{"location":"user-stories/swissquote/#what-we-learned-from-automating-dependencies-updates","title":"What we learned from automating dependencies updates","text":"<ul> <li>You need to be confident that your code coverage will warn you in case of updates. At the beginning we missed quite a few breaking updates because the build was green but the application broke as soon as it was deployed</li> <li>Once you\u2019re confident enough, auto-merge is a must have. In our team we enabled Renovate on about 100 of our repositories and generally spend 1\u20132 hours per week to stay up-to-date</li> <li>\u201cOn the bleeding edge it\u2019s not the edge that\u2019s bleeding; it\u2019s you\u201d. When updating to a new major version as soon as it\u2019s released you might encounter some surprises. It happened to us a few times that a patch version breaks the library. Usually a fix came out the next day, but we still spent a few hours debugging why the update broke our applications. We\u2019ve opened quite a few Issues and sent some PRs to fix issues like this</li> <li>Updating dependencies is one thing, but when should you release them? As our team mostly provides libraries, we don\u2019t want to release them on every dependency upgrade (as this would create PRs downstream and create noise for them). We\u2019ve decided to release right after critical upgrades or contributions and a dashboard informs us when a repository hasn\u2019t been released for 30 days</li> </ul>"},{"location":"user-stories/swissquote/#a-word-on-renovate","title":"A word on Renovate","text":"<p>The next section could look like an ad or a sponsored post; it\u2019s not. We\u2019re just big fans of the product.</p> <p>The ease of getting started with Renovate\u2019s Docker image is what got us onboard easily. But what confirmed our choice is the insane crazy amount of features and configuration options.</p> <p>Some features and options we enjoy:</p> <ul> <li>Shared configurations (presets), we have a Swissquote default configuration we set for all repositories, each team can extend it with their own practices</li> <li>Integration with GitHub\u2019s Dependabot alerts to raise the priority and send security remediation PRs as soon as possible</li> <li>Each rule can be customized either globally or specified per package</li> <li>Works with your private package registry</li> <li>Supports more than 70 languages and package managers: Maven, Docker, npm, Docker Compose, Python</li> <li>If you are using dependencies in a custom way, there is a <code>customManagers</code> option that allows you to transform patterns into dependencies</li> </ul> <p>There is an on-premise option, but you can also use the Mend Renovate App. On our side, we\u2019re not using the on-premise but rather a custom scheduler using the open source Docker image.</p>"},{"location":"user-stories/swissquote/#some-stats-after-four-years-with-renovate","title":"Some stats after four years with Renovate","text":"<p>The figures here have been updated in November 2023</p> <p>We started using Renovate Bot in 2019, using the (now deprecated) <code>renovate/pro</code> Docker image. We installed it as a GitHub app and some early adopters started to use it.</p> <p>Pretty quickly, we ran into the biggest limitation; this Docker image runs all repositories one after another. A single loop was taking hours and made it very difficult to check the logs as they weren\u2019t separated per repository.</p> <p>This is why we created our own scheduler; each hour, all repositories would be queued to run, and GitHub app events would schedule a single repository. We started to collect metrics and store the logs separately for each repository.</p> <p>Here is the dashboard for our current scheduler:</p> <p> </p> A dashboard we made at Swissquote to keep our Renovate runs in check, November 2023. <p>We don\u2019t force any team to use Renovate, each team can decide to opt-in and do it for each project separately.</p> <p>Some statistics:</p> <ul> <li>857 repositories enabled out of about 2000 active repositories</li> <li>11000 PRs were merged since we installed Renovate</li> <li>239 PRs were merged last month</li> <li>2 SSDs died on our Renovate machine with the number of projects to clone again and again</li> </ul>"},{"location":"user-stories/swissquote/#how-does-the-scheduler-work","title":"How does the scheduler work?","text":"<p>The scheduler is a Node.js application that handles an in-memory queue and starts Docker containers to run Renovate on. Our custom scheduler application regularly sends data points to our InfluxDB database, which we then display in Grafana.</p> <p>Here is how it works:</p> <p> </p> A diagram explaining how our scheduler interacts with Renovate. <p>All the information on the dashboard you saw above is created from three measurements:</p> <ol> <li>Queue: Every 5 minutes, we send the status of the queue size and the number of jobs currently running</li> <li>Webhook: When receiving a webhook request from GitHub, we send a data point on the duration of treatment for that item</li> <li>Runs: After each run, we send a data point on the run duration, success, and number of PRs created/updated/merged/closed</li> </ol> <p>The queue is filled by webhooks or by re-queueing all repositories at regular intervals. For each repository, we start a Renovate Docker image and pipe its logs to a file. This allows us to run ten workers in parallel. We could technically run more workers but decided not to hammer our GitHub instance.</p> <p>You can find more details in this discussion on the Renovate repository, from November 2023.</p>"},{"location":"user-stories/swissquote/#the-future-of-renovate-at-swissquote","title":"The future of Renovate at Swissquote","text":"<p>Not all teams are using Renovate at this stage, as some teams prefer to manually update their dependencies. We would like to enable Renovate for critical dependencies in all repositories and hope to make it useful and easy so other teams will adopt it for more dependencies.</p>"},{"location":"user-stories/swissquote/#how-should-i-get-started-with-renovate","title":"How should I get started with Renovate?","text":"<p>If this article convinced you, how should you get started?</p> <ol> <li>First, if you know your software is very outdated; don\u2019t enable Renovate right away, you will be swamped with Pull Requests, we\u2019ve been there and it\u2019s not a happy memory. First take the time to manually upgrade all that you can. <code>npm outdated</code>, <code>mvn versions:display-dependency-updates</code> or your package manager\u2019s equivalent of that command can help you get started, test your application and commit that</li> <li>You can now enable Renovate and will receive a Pull Request to add a configuration file, read this first PR carefully as it will explain what kind of PRs you are going to receive and when</li> <li>Make sure to pick a schedule, otherwise you will receive PRs at any time of the day. Our team schedules all third party dependencies on the weekend, automatically merging when the tests pass and we investigate the failing ones on Monday morning</li> <li>Group Pull Requests, if every PR has to go through CI, it can become quite heavy, once most PRs succeed, you can start grouping minor and patch updates so that you get a single PR per repository. Investigating issues becomes a bit trickier because of that. To give you some numbers out of 90 repositories enabled with Renovate, we have on average 4 PRs to investigate per week. Everything else is automatically merged</li> <li>Enable auto merging after some time, make sure your tests are solid and that you won\u2019t upgrade something that wasn\u2019t tested and will break once in production</li> </ol>"},{"location":"user-stories/swissquote/#is-all-this-effort-worth-it","title":"Is all this effort worth it?","text":"<p>The short answer is yes!</p> <p>It took us almost a year, way longer than we thought, to catch up with the latest version of everything in our technical stack. But once we were confident enough in our tests to enable automatic merging of Pull Requests we were satisfied with the work we did to update our software stack. We knew we would be ready when an unplanned change arrives.</p> <p>When that day came, in December 2021 with Log4Shell, it was a matter of hours to release the freshly merged Pull Requests, deploy the few applications we had, and notify the teams depending on our libraries. We were so quick to do it, in fact, that we had to do that three times with the chain of vulnerabilities that was found in Log4j that week.</p> <p>Keep in mind that keeping your dependencies up-to-date is not just about the tooling, it\u2019s also about having a process:</p> <ul> <li>When will you merge this PR?</li> <li>How will you handle the PR that doesn\u2019t build?</li> <li>The new major version of an external library that\u2019s not yet compatible with the rest of your libraries?</li> <li>When will you release this constant flow of library updates?</li> <li>Do you want PRs during the day? During the night? Or on weekends only?</li> </ul> <p>We know the answers for our situation, we\u2019ll let you decide what the answers are for you. </p>"}]}